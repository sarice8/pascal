      %  sccsid = "%W% %G% %U% %P%";
      
   2: title: 'SSL Translator 1.3.0 -- August 23 ''93';
      
      %
      % *****************************************************************************
      %
      %   Syntax/Semantic Language Compiler
      %
      %   by Steve Rice
      %
      %   Aug 31, 1989
      %
      % *****************************************************************************
      %
      %   ssl.ssl             SSL compiler
      %
      %   HISTORY
      % -----------------------------------------------------------------------------
      %   08/31/89 | Steve  | Translated from my SSL processor hardcoded in C
      %   09/08/89 |        | SSL processor now functional, except for error recovery
      %   10/18/89 |        | Added 'title' section
      %   02/03/90 |        | Change to ssl.c: Added debugger output
      %   03/20/91 |        | Change to ssl.c: Increased string table size
      %   03/26/91 |        | Fixed bug in handling of statement ">>value"
      %            |        | Fixed bug in handling of choice using a choice rule
      %            |        | defined later
      %   04/24/91 |        | Change to ssl.c: Increased identifier size to 50 chars
      %   05/05/91 |        | Change to ssl.c: Increased identifier table size to
      %            |        | 600, and moved names out of table. New limit 256 chars.
      %            |        | Added "include" feature.
      %   05/21/91 |        | Multiple "error" sections will use distinct error #'s
      %            |        | Added postprocess optimization: reduce chains of jumps
      %   06/04/91 |        | Change to ssl.c: Write rule addresses to code file
      %   08/23/93 |        | Fix some loops so error recovery can terminate
      %   08/25/93 |        | Reimplement using schema database for symbol table
      %   08/27/93 |        | Add new language features: local variables,
      %            |        | multiple parameters, inout parameters,
      %            |        | expressions with nested function calls.
      %            |        | (User program requires the 2.0 runtime model for new
      %            |        | instructions in generated code).
      %   08/29/93 |        | Reimplement compiler using above new language features
      %            |        | (typically using local variables rather than stacks)
      %            |        |
      % 
      % *****************************************************************************
      %
      %   BUGS
      % -----------------------------------------------------------------------------
      %   01/28/90 | Doesn't complain if functions called but never declared!	
      %
      % *****************************************************************************
      %
      
   2: input:
   2:     pIdent
   2:     pIntLit
   2:     pStrLit
   2:     pMinus      '-'
   2:     pEquals     '='
   2:     pColon      ':'
   2:     pSemiColon  ';'
   2:     pComma      ','
   2:     pLParen     '('
   2:     pRParen     ')'
   2:     pReturn     '>>'
   2:     pBreak      '>'
   2:     pLCurly     '{'
   2:     pRCurly     '}'
   2:     pLSquare    '['
   2:     pRSquare    ']'
   2:     pBar        '|'
   2:     pCall       '@'
   2:     pEmit       '.'
   2:     pStar       '*'
   2:     pErr        '#'
   2:     pQuestion   '?'
   2:     pEof
   2:     pInvalid
      
      %  keywords
      
   2:     pTitle
   2:     pInput
   2:     pOutput
   2:     pType
   2:     pError
   2:     pMechanism
   2:     pInclude
   2:     pRules
   2:     pEnd
   2:     pIn
   2:     pOut
   2:     pInOut
   2:     ;
      
      
   2: output:
      
      %  codes for SSL machine instructions
      
   2:     iJumpForward
   2:     iJumpBack
   2:     iInput
   2:     iInputAny
   2:     iEmit
   2:     iError
   2:     iInputChoice
   2:     iCall
   2:     iReturn
   2:     iSetResult
   2:     iChoice
   2:     iEndChoice
   2:     iPushResult      % push ssl_result on variable stack
   2:     iPop             % (n)  discard n entries from variable stack
   2:     iBreak           % instruction used by debugger
   2:     iGlobalSpace     % (n)  make space for n globals on variable stack (sets initial fp)
   2:     iLocalSpace      % (n)  make space for n locals on variable stack
   2:     iGetParam        % (n)  ssl_result = value of param n
   2:     iGetFromParam    % (n)  ssl_result = value of variable whose address is in param n
   2:     iGetLocal        % (n)  ssl_result = value of local var n
   2:     iGetGlobal       % (n)  ssl_result = value of global var n
   2:     iGetAddrParam    % (n)  ssl_result = addr of param n
   2:     iGetAddrLocal    % (n)  ssl_result = addr of local var n
   2:     iGetAddrGlobal   % (n)  ssl_result = addr of global var n
   2:     iAssign          % variable whose address is pushed on stack = ssl_result; pop stack
      
      %   NOTE: Any instructions added here should also be added to
      %         the system_operations table in ssl.c
      %         as well as optimize_table, list_generated_code.
      
      %  other output
      
   2:     iSpace;          % emit a dummy value; a value will be patched here later
      
   2: error:
   2:    eWrongType
   2:    eNotAType
   2:    eNotAValue
   2:    eNotInput
   2:    eNotOutput
   2:    eNotARule
   2:    eNotAnErrSig
   2:    eNotInLoop
   2:    eChoiceOpRuleOutOfPlace
   2:    eUndeclRuleParamsNotSupported
   2:    eNotTyped
   2:    eIdentNotAllowedInExpr
   2:    eIllegalLvalue
   2:    eNotRuleOrGlobalDefn
   2:    eRuleBodyAlreadyDeclared
   2:    eReturnTypeMismatch
   2:    eParameterMismatch
   2:    eUndeclaredIdentifier
   2:     eAliasNotAllowed
   2:    ;
      
      
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nInput
   2: 	nOutput
   2: 	nError
   2: 	nType
   2: 	nValue
   2: 	nMechanism
   2: 	nOperation
   2: 	nRule
   2: 	nVariable
   2: 	nParam
   2: 	nInParam
   2: 	nOutParam
   2: 	nInOutParam
   2: 	nLocal
   2: 	nGlobal
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qParentScope
   2: 	qDecls
   2: 	qIdent
   2: 	qValue
   2: 	qType
   2: 	qParamScope
   2: 	qScope
   2: 	qAddrDefined
   2: 	qTypeDefined
   2: 	qAddr
   2: 	;
      
      
   2: type boolean:
   2:     false    = 0
   2:     true     = 1
   2:     no       = 0
   2:     yes      = 1;
      
   2: type number:
   2:     zero            = 0
   2:     one             = 1
   2:     ;
      
   2: type warning:
   2:     wRuleMissingAtSign
   2:     ;
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:     Null = 0
   2:     ;
      
   2: type kind:
   2:     kIllegal        % not an identifier
   2:     kUnknown        % new identifier
   2:     kInput
   2:     kOutput
   2:     kError
   2:     kType
   2:     kVal            % an element of a type
   2:     kMech
   2:     kOp
   2:     kRule
   2:     kVar
   2:     ;
      
   2: mechanism warning_mech:
   2:     oWarning (warning);       % issue warning message,
                                    % continue normally (not in error recovery mode)
      
   2: mechanism emit_mech:
   2:     oEmitInt (int)            % emit an integer into the generated code
   2:     Here >> int               % return the current address in the generated code
   2:     oPatch (int addr, int val) % patch an integer into any address in the generated code
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     equal_zero (int) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ;
      
   2: mechanism shortForm:          % keep a table of string shortforms for input/output
   2:     oShortFormAdd (Node)      % associate current StrLit token with nDeclaration
   2:     oShortFormLookup (out Node);   % look up strLit, return associated nDeclaration
      
      
      % keep different patch stacks, each with a stack of position markers:
      
   2: type patchStack:
   2:     patchChoiceTableAddr    % addr where pointer to table is stored
   2:     patchChoiceTable        % build up choice table here (value,addr)
   2:     patchChoiceExit         % addrs where jumps at end of each option are
   2:     patchCall               % (addr,ident) where calls to undefined rules are
   2:     patchLoop               % addr of start of a loop
   2:     patchBreak;             % addrs where jumps out of a loop are
      
   2: mechanism patch_mech:
   2:     oPatchMark(patchStack)             % mark current position on a stack
   2:     oPatchAtMark(patchStack) >> boolean     % true if all items since
                                                 %   last mark are popped
                                                 %   (mark is dropped if true)
   2:     oPatchPushHere(patchStack)         % put current address on a patch stack
   2:     oPatchPushInt (patchStack, int)    % put int on a patch stack
   2:     oPatchPushIdent(patchStack)        % put last ident on a patch stack
   2:     oPatchAnyEntries(patchStack) >> boolean    % are there any entries?
   2:     oPatchPopFwd(patchStack)           % fix table, storing here-x at x,
                                             %   where x is on top of the stack
   2:     oPatchPopBack(patchStack)          % emit here-x here (advance 'here')
   2:     oPatchPopValue(patchStack)         % emit x here (advance 'here')
   2:     oPatchPopCall(patchStack);         % fix table, storing value of ident i
                                             %   at x, where i is on top of stack
                                             %   and x is under it  (pop both)
      
   2: mechanism titleMech:
   2:     oTitleSet;          % define title to be strlit just read
      
   2: mechanism doc:         % display documentary info
   2:     oDocNewRule;        % print "Rule <token>"
      
   2: mechanism include_mech:
   2:     oInclude;           % include the SSL file whose name is in the
                             % string token just accepted
      
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeNext (inout Node)               % advance Node to next in list    
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin (out Node)             % create a new scope.  Subsequent declarations will go here.
                                             % Sets nScope's qParent to parent scope.
   2:     oScopeOpen (Node)                  % open an existing scope.  Its definitions become visible again.
   2:     oScopeEnd                          % end current scope.  Subsequent declarations will go to parent scope.
   2:     oScopeDeclare (Node)               % declare node in current scope
   2:     oScopeFind (out Node) >> boolean   % find declaration of last accepted identifier
   2:     oScopeFindRequire (out Node)       % find declaration of last accepted identifier.
                                             % Go into error recovery if not found.
   2:     ;
      
      
   2: mechanism install_mech:
   2:     oInstallSystemOperations (inout int next_operation)   % Predefine some operations
   2:     oInstallSystemTypes (out Node int_type)   % Predefine some types.
                                                    % Return nType declaration of int type.
   2:     ;
      
   2: mechanism write_mech:
   2:     oWriteTables (Node global_scope);   % Write files, given global scope of symbol table.
      
   2: rules
      
      % ---------------------- Global Variables --------------------
      
   2: Node    IntType             % nType node for built-in "int" type
   2: Node    CurrentRule         % nRule node for current rule being declared
   2: int     NumGlobals          % number of global variables in program
   2: int     NumLocals           % number of local variables in current rule
   2: int     RuleLocalSpaceAddr  % address of LocalSpace argument for rule
   2: int     NextOperation       % code for next semantic operation decl
   2: int     NextError           % next error code
   2: Node    GlobalScope         % global nScope
      
      % -------------------- Forward Declarations ------------------
      
   2: Section >> boolean;
   2: ValueList (node_type class, inout int value, boolean str_alias_allowed, Node t);
   2: OperationDefinition >> boolean;
   2: RuleSectionDefinition >> boolean;
   2: RuleBodyDefinition (Node r);
   2: RuleRedefinition (Node r);
   2: Statement >> boolean;
   2: CallOperation (Node o);
   2: ActualParams (Node r) >> int;
   2: CallRule (Node r);
   2: CallUndefinedRule;
   2: Assignment (Node i);
   2: CopyChoiceTable (int num_options);
   2: Expr (out Node t);
   2: Lvalue (out Node t);
   2: Lvalue_HaveIdent (Node i, out Node t);
   2: Const (out Node t) >> int;
   2: IntConst >> int;
   2: LookupType (out Node i);
   2: LookupInput (out Node i);
   2: LookupOutput (out Node i);
   2: LookupValue (out Node i);
   2: LookupError (out Node i);
   2: RequireType (Node i);
   2: RequireInput (Node i);
   2: RequireOutput (Node i);
   2: RequireValue (Node i);
   2: RequireError (Node i);
   2: RequireRule (Node i);
   2: RequireNoType (Node r);
   2: RequireMatchValueType (Node v, Node t);
   2: MatchType (Node t1, Node t2) >> boolean;
   2: RequireMatchType (Node t1, Node t2);
   2: MatchIntType (Node t) >> boolean;
   2: RequireMatchIntType (Node t);
   2: EmitValue (Node i);
   2: EmitAddr (Node v);
      
      % ------------------------- Main Parser ----------------------
      
   2: ProcessSSL:
   4:     int   global_space_addr  % address of iGlobalSpace arg for global vars
      
   4:     oScopeBegin (GlobalScope)
      
  10:     NextError = 0
  16:     NextOperation = 0
      
  22:     oInstallSystemOperations (NextOperation)
  28:     oInstallSystemTypes (IntType)
      
  34:     NumGlobals = 0                 % Count global variables
  40:     .iGlobalSpace                  % Make space for global variables
  42:     global_space_addr = Here   .iSpace
      
      
  49:     {[ @Section
  52:         | true:
  53:         | *:  >
  60:     ]}
      
  62:     @FixForwardCalls
      
  64:     inc (NumGlobals)   % because globals addressed from 1 (addr 0 unused)
  70:     oPatch (global_space_addr, NumGlobals)
      
  79:     oScopeEnd
      
  80:     oWriteTables (GlobalScope)
  87:     ;
      
      
      % Returns true if a section found
      
  87: Section >> boolean:
      
  89:     [
  89:         | pTitle:      @Title
  93:         | pInput:      @Input
  97:         | pOutput:     @Output
 101:         | pError:      @Error
 105:         | pType:       @Type
 109:         | pInclude:    @Include
 113:         | pMechanism:  @Mechanism
 117:         | pRules:      @Rules
      
 121:         | pEof:        >> false      % end of file
 126:     ]
 148:     >> true
 152:     ;
      
      % ------------------------- Sections -------------------------
      
 152: Title:
 154:     ':' pStrLit oTitleSet ';' ;
      
 162: Input:
 164:     int  next_value
 164:     ':'
 166:     next_value = 0
 172:     @ValueList (nInput, next_value, true, Null)
 188:     ';';
      
 191: Output:
 193:     int  next_value
 193:     ':'
 195:     next_value = 0
 201:     @ValueList (nOutput, next_value, true, Null)
 217:     ';';
      
 220: Error:
 222:     ':'
 224:     @ValueList (nError, NextError, false, Null)
 240:     ';';
      
 243: Type:
 245:     Node  t
 245:     int   next_value
      
 245:     pIdent  t = oNodeNew (nType)  oNodeSetInt (t, qIdent, LAST_ID)
 268:     oScopeDeclare (t)
 274:     ':'
 276:     next_value = 0
 282:     @ValueList (nValue, next_value, false, t)
 298:     ';';
      
 301: Include:
 303:     pStrLit oInclude;
      
 307: Mechanism:
 309:     Node  m
      
 309:     pIdent
 311:     m = oNodeNew (nMechanism)  oNodeSetInt(m, qIdent, LAST_ID)
 332:     oScopeDeclare (m)
      
 338:     ':'
 340:     {[ @OperationDefinition
 343:         | true:
 344:         | *:  >
 351:     ]}
 353:     ';' ;
      
 356: Rules:
 358:     {[ @RuleSectionDefinition
 361:         | true:
 362:         | *:  >
 369:     ]}
 371:     pEnd ;
      
      
      % ------------------------- Value List ----------------------
      
 374: ValueList (node_type class, inout int value, boolean str_alias_allowed, Node t):
 376:     Node  p, t2
 376:     {[
 376:         | pIdent:
 378:             p = oNodeNew (class)  oNodeSetInt (p, qIdent, LAST_ID)
      
 399:             [ class
 402:                 | nValue :    oNodeSet (p, qType, t)
 415:                 | * :
 420:             ]
      
 420:             [ | pStrLit:
 422:                 [ str_alias_allowed
 425:                     | true:  oShortFormAdd (p)   % Associate short form with declaration
 432:                     | *:     #eAliasNotAllowed
 439:                 ]
 439:               | *:
 444:             ]
      
 444:             [ | '=':       value = @Const(t2)
 457:                            [ @MatchType (t, t2)
 468:                                | true :
 469:                                | false :  @RequireMatchIntType(t2)
 478:                            ]
 486:               |*:
 491:             ]
 491:             oNodeSetInt (p, qValue, value)
 503:             inc (value)
      
 509:             oScopeDeclare (p)
      
 515:         | *:  >
 522:     ]};
      
      % ------------------------- Variables ------------------------
      
      %  Declare a list of variables, given class (local/global),
      %  nType, and a counter used to assign addresses for that class.
      
 525: DeclareVariables (node_type class, Node t, inout int addr_counter):
 527:     Node  i
 527:     {
 527:         pIdent
 529:         i = oNodeNew(class)  oNodeSetInt(i, qIdent, LAST_ID)
 550:         oNodeSet (i, qType, t)
      
              % Assign address to variable
 562:         inc (addr_counter)   oNodeSetInt (i, qAddr, addr_counter)
      
 580:         oScopeDeclare (i)
      
 586:         [ | ',' :
 588:           | * :   >
 595:         ]
 595:     };
      
      %  Declare a list of global variables, given nType.
      
 598: DeclareGlobals (Node t):
 600:     @DeclareVariables (nGlobal, t, NumGlobals);
      
      %  Declare a list of local variables, given nType.
      
 614: DeclareLocals (Node t):
 616:     @DeclareVariables (nLocal, t, NumLocals);
      
      
      %  Defines formal parameters (if any) in current scope.
      %  The caller should have called oScopeBegin to begin a
      %  scope just for parameters.  (This gives a simple way
      %  to check if an operation/rule has parameters).
      %  Does not end the scope.
      %
      %  nParam's may be named or unnamed (qIdent == 0)
      %
      %  Parameters are assigned addresses in reverse order
      %  from n to 1.  This is for efficient stack access.
      %  E.g. func(a,b,c):  address of a:3, b:2, c:1
      %  (Later I would like to instead push actuals in reverse order)
      
 630: FormalParamDefinition (Node scope):
 632:     int        num_params
 632:     node_type  dir
 632:     Node       p, t
      
 632:     [ | '(' :
 634:       | *   : >>
 640:     ]
      
 640:     num_params = 0      % Count the parameters, to assign addresses
      
 646:     {
 646:         inc (num_params)
      
              % parameter direction
 652:         [
 652:             | pIn :     dir = nInParam
 660:             | pOut :    dir = nOutParam
 668:             | pInOut :  dir = nInOutParam
 676:             | * :       dir = nInParam
 691:         ]
      
              % parameter type
 691:         pIdent  @LookupType (t)
      
 700:         p = oNodeNew(dir)
 710:         oNodeSet (p, qType, t)
      
              % parameter name
 722:         [
 722:             | pIdent :  oNodeSetInt (p, qIdent, LAST_ID)   % named parameter
 735:             | * :       % unnamed parameter
 740:         ]
      
 740:         oScopeDeclare (p)       % declare nParam
      
 746:         [
 746:             | ',' :
 748:             | * :   >
 755:         ]
 755:     }
      
 757:     ')'
      
          %  Now go back and assign addresses to the parameters
      
 759:     p = oNodeGet (scope, qDecls)
      
 772:     {
 772:         [ equal_zero (num_params)
 779:             | true:  >
 782:             | false:
 784:         ]
      
 792:         oNodeSetInt (p, qAddr, num_params)
      
 804:         dec (num_params)
 810:         oNodeNext (p)
 816:     }
 819:     ;
      
      %  Redefine formal parameters during declaration of actual rule (with body).
      %  Previously, parameters were declared by a forward declaration or by usage.
      %  Ensure that types match.  Update parameter names to new names given.
      %  (All parameters must be named since this will be the final declaration).
      %
      %  Previous parameter nScope is given, and scope has been opened.
      %  (Addresses were assigned previously, no need to do it again).
      %  NOTE: I probably don't really want to open the previous scope since the
      %  old param names are not valid.
      
 819: FormalParamRedefinition (Node scope):
 821:     Node      p
 821:     node_type dir, dir2
 821:     Node      t, t2
      
 821:     p = oNodeGet (scope, qDecls)       % previous param declarations
      
 834:     [ | '(' :
 836:       | *   : [ oNodeNull(p)
 848:                   | true :
 849:                   | * :    #eParameterMismatch
 856:               ]
 856:               >>
 857:     ]
      
 857:     {
 857:         [ oNodeNull(p)
 864:             | true :    #eParameterMismatch  % too many params given this time
 867:             | false :
 869:         ]
      
 877:         dir = oNodeType(p)         % previous direction
              % parameter direction
 887:         [
 887:             | pIn :     dir2 = nInParam
 895:             | pOut :    dir2 = nOutParam
 903:             | pInOut :  dir2 = nInOutParam
 911:             | * :       dir2 = nInParam
 926:         ]
 926:         [ equal_node_type (dir, dir2)
 936:             | true :
 937:             | * :     #eParameterMismatch
 944:         ]
      
 944:         t = oNodeGet (p, qType)    % previous type
 957:         pIdent  @LookupType(t2)    % parameter type
 966:         @RequireMatchType (t, t2)
      
              % parameter name
 976:         pIdent  oNodeSetInt (p, qIdent, LAST_ID)    % must be named
      
 989:         oNodeNext (p)
      
 995:         [
 995:             | ',' :
 997:             | * :   >
1004:         ]
1004:     }
      
1006:     ')'
      
1008:     [ oNodeNull(p)
1015:         | true :
1016:         | * :    #eParameterMismatch   % Not enough params given this time
1023:     ]
1024:     ;
      
      
      % ------------------------- Operations -----------------------
      
      %  Returns true if definition found
      
1024: OperationDefinition >> boolean:
1026:     Node  op, s, t
1026:     [
1026:         | pIdent:
1028:         | *:        >> false
1036:     ]
      
1036:     op = oNodeNew (nOperation)  oNodeSetInt (op, qIdent, LAST_ID)
1057:     oNodeSetInt (op, qValue, NextOperation)
1069:     inc (NextOperation)
      
1075:     oScopeBegin (s)   % parameter scope
      
1081:     @FormalParamDefinition(s)
      
1088:     oNodeSet (op, qParamScope, s)
      
1100:     [ | '>>': pIdent  @LookupType (t)   oNodeSet (op, qType, t)
1123:       |*:     %  qType is Null by default
1128:     ]
      
1128:     oScopeEnd      % parameter scope
      
1129:     oScopeDeclare (op)
      
1135:     >> true
1139:     ;
      
      % ------------------------- Rules ----------------------------
      
      %  Parse a definition in the rules secition.
      %  This could be:
      %      a rule definition, a rule prototype, or a global variable definition.
      %  Returns true if one of the above found
      
1139: RuleSectionDefinition >> boolean:
1141:     Node  i
1141:     [
1141:         | pIdent:
1143:         | * :        >> false
1151:     ]
      
1151:     [ oScopeFind (i)
1158:         | false:     @RuleDefinition
1161:         | true:
1163:             [ oNodeType(i)
1170:                 | nType :  @DeclareGlobals(i)
1178:                 | nRule :  @RuleRedefinition(i)    % Should be body of fwd declared rule
1187:                 | * :      #eNotRuleOrGlobalDefn  >> true  % True to skip to next
1199:             ]
1199:     ]
      
1207:     >> true
1211:     ;
      
      %   Define the parameters, and possibly the body, of a rule
      %   that has not been defined previously.
      %   Just parsed ident of rule.
      
1211: RuleDefinition:
1213:     Node  r
1213:     Node  s
1213:     Node  t
      
1213:     oDocNewRule
      
1214:     r = oNodeNew(nRule)  oNodeSetInt(r, qIdent, LAST_ID)
1235:     CurrentRule = r
      
      
1241:     oScopeBegin (s)                 % param scope
1247:     @FormalParamDefinition(s)
1254:     oNodeSet (r, qParamScope, s)    % leave scope open, to access params during rule
      
1266:     [ | '>>':   pIdent  @LookupType(t)  oNodeSet (r, qType, t)
1289:       | * :
1294:     ]
      
1294:     [
1294:         | ':' :  @RuleBodyDefinition (r)
1303:         | * :    % No body; a forward declaration of the rule.
1308:     ]
1308:     ';'
      
1310:     oScopeEnd            % parameters scope (already linked to nRule above)
      
1311:     oScopeDeclare (r)    % declare nRule
                               % (Note, can't call rule recursively since not defined until end)
1318:     ;
      
      
      % Given the nRule node
      
1318: RuleBodyDefinition (Node r):
1320:     Node  s
      
1320:     oNodeSetInt (r, qValue, Here)      % Address of rule is now defined
1331:     oNodeSetBoolean (r, qAddrDefined, yes)
      
1343:     oScopeBegin (s)       % rule variables scope
      
1349:     NumLocals = 0
      
1355:     .iLocalSpace 
1357:     RuleLocalSpaceAddr = Here   .iSpace
      
1364:     {[ @Statement
1367:         | true:
1368:         | *:  >
1375:     ]}
      
1377:     .iReturn
      
1379:     oPatch (RuleLocalSpaceAddr, NumLocals)
      
1388:     oScopeEnd            % rule variables scope
1389:     oNodeSet (r, qScope, s)
      
1402:     ;
      
      
      %   Redefine a rule (to provide body of a forward-declared rule).
      %   Given the existing nRule declaration.
      
1402: RuleRedefinition (Node r):
1404:     Node  s, p
1404:     Node  t, t2
      
1404:     [ oNodeGetBoolean (r, qAddrDefined)
1414:         | yes :   #eRuleBodyAlreadyDeclared  >>
1418:         | * :
1423:     ]
      
1423:     oDocNewRule
      
1424:     CurrentRule = r
      
1430:     s = oNodeGet(r, qParamScope)
1443:     oScopeOpen (s)   % Make the existing parameters visible.
                           % (Actually, probably don't want to do this).
      
1449:     @FormalParamRedefinition (s)   % verify types, update param names
      
          % Verify return type matches previous declaration/usage
1456:     t = oNodeGet (r, qType)
1469:     [ | '>>':   pIdent  @LookupType(t2)  @RequireMatchType(t, t2)
1490:       | * :     @RequireMatchType(t, Null)
1505:     ]
      
1505:     ':'
1507:     @RuleBodyDefinition (r)
1514:     ';'
      
1516:     oScopeEnd            % parameters scope (already linked to nRule)
1518:     ;
      
      % ------------------------- Statements -----------------------
      
      %  Returns true if statement found
      
1518: Statement >> boolean:
1520:     Node  i
1520:     Node  t, t2
      
1520:     [
1520:         | pStrLit:           % input alias
1522:             oShortFormLookup(i)  @RequireInput(i)
1535:             .iInput @EmitValue(i)
      
1544:         | pIdent:            % input or operation
1546:             oScopeFindRequire(i)
1552:             [ oNodeType(i)
      
1559:                 | nInput:      .iInput @EmitValue(i)
      
1569:                 | nOperation:  @RequireNoType(i) @CallOperation(i)
      
1585:                 | nType:       @DeclareLocals(i)
      
1594:                 | *:           @Assignment(i)
1610:             ]
      
1610: 	| '#':
1612:             pIdent  @LookupError(i)
1621:             .iError @EmitValue(i)
      
1630: 	| '.':
1632: 	    [ | pIdent:    @LookupOutput(i)
1641:               | pStrLit:   oShortFormLookup(i) @RequireOutput(i)
1656:             ]
1664:             .iEmit @EmitValue(i)
      
1673: 	| '@':
1675: 	    pIdent
1677:             [ oScopeFind(i)
1684:                 | true :
1685:                     @RequireRule(i)  @RequireNoType(i)
1699:                     @CallRule(i)
      
1706:                 | false :
1708:                     @CallUndefinedRule
1710:             ]
      
1718: 	| '>>':
1720:             t = oNodeGet (CurrentRule, qType)
1733: 	    [ oNodeNull(t)
1740:                 | true :
1741:                 | * :       @Expr(t2)  @RequireMatchType(t, t2)
1763:             ]
1763:             .iReturn
      
1765: 	| '{':
1767:             oPatchPushHere (patchLoop)
1773:             oPatchMark (patchBreak)
1779: 	    {[ @Statement
1782: 		| true:
1783: 		| *:  >
1790: 	    ]}
1792: 	    '}'
1794:             .iJumpBack
1796:             oPatchPopBack (patchLoop)
      
                  % Fix up break statements
1802:             {[ oPatchAtMark (patchBreak)
1809:                 | false :    oPatchPopFwd (patchBreak)
1816:                 | * :        >
1823:             ]}
      
1825: 	| '>':
1827:             [ oPatchAnyEntries (patchLoop)
1834:                 | false:  #eNotInLoop
1837:                 | *:
1842:             ]
1842:             .iJumpForward  oPatchPushHere (patchBreak)  .iSpace
      
1852: 	| '?':  .iInputAny
      
1856: 	| '[':  @Choice
      
1860:         | *:    >> false    % Not a statement
1886:     ]
1886:     >> true ;
      
      
      %  Given nOperation
      
1890: CallOperation (Node o):
1892:     int  num_params
      
1892:     num_params = @ActualParams (o)
      
1903:     @EmitValue(o)        % call operation
      
1910:     [ equal_zero (num_params)
1917:         | true :
1918:         | false :     .iPop oEmitInt(num_params)
1928:     ]
1937:     ;
      
      
      %  Given nOperation or nRule.  Returns number of parameters.
      
1937: ActualParams (Node r) >> int:
      
1939:     int   num_params
1939:     Node  param_scope, p
1939:     Node  t, t2
      
1939:     param_scope = oNodeGet (r, qParamScope)  % Always present, but might contain no nParams
1952:     p = oNodeGet (param_scope, qDecls)
      
1965:     [ oNodeNull(p)
      
1972:         | true :    >> 0
1976:         | false :
1978:     ]
      
1986:     num_params = 0
      
1992:     '('
      
1994:     {
1994:         inc (num_params)
      
              %  ----------------------------
      
              %  One actual parameter.
      
2000:         t = oNodeGet (p, qType)    % formal param type
      
2013:         [ oNodeType(p)
2020:             | nInParam :                @Expr (t2)
2028:             | nOutParam, nInOutParam :  @Lvalue (t2)
2037:         ]
              
2047:         @RequireMatchType (t, t2)
2057:         .iPushResult
      
              %  ----------------------------
      
2059:         oNodeNext (p)
      
2065:         [ oNodeNull (p)
2072:             | true :   >
2075:             | false :
2077:         ]
      
2085:         ','
2087:     }
      
2089:     ')'
      
2091:     >> num_params
2095:     ;
      
      
      
      %  Called for a nRule whose parameter types are defined.
      %  The rule address might not yet be known.
      
2095: CallRule (Node r):
2097:     int  num_params
      
2097:     num_params = @ActualParams(r)
      
2108:     [ oNodeGetBoolean (r, qAddrDefined)     % A call to a forward-declared rule?
2118:         | yes :   .iCall @EmitValue(r)
2128:         | no :    .iCall oPatchPushHere(patchCall) 
2138:                          oPatchPushInt (patchCall, oNodeGetInt(r, qIdent))
2154:                          .iSpace
2156:     ]
      
          % Pop actual params
2164:     [ equal_zero (num_params)
2171:         | true :
2172:         | false :     .iPop oEmitInt(num_params)
2182:     ]
2191:     ;
      
      
      %  Implicitly declare a rule that has not previously been declared.
      %  Rule name is last accepted identifier.
      %  Implicitly declares InParam parameters, and no return type.
      
2191: CallUndefinedRule:
2193:     Node  r, s, t, p
2193:     int   id, num_params, addr
      
2193:     r = oNodeNew (nRule)  id = LAST_ID  oNodeSetInt (r, qIdent, id)
2220:     oNodeSetBoolean(r, qAddrDefined, false)
      
          % Implicit parameters
      
2232:     oScopeBegin (s)
2238:     oNodeSet (r, qParamScope, s)
      
2250:     num_params = 0
      
2256:     [ | '(' :
      
2258:         {
2258:             @Expr(t)
2265:             p = oNodeNew (nInParam)  oNodeSet(p, qType, t)
2287:             oScopeDeclare(p)
2293:             inc(num_params)
      
2299:             [ | ',' :
2301:               | * :   >
2308:             ]
2308:         }
      
              % Assign parameter addresses
      
2310:         addr = num_params
2316:         p = oNodeGet (s, qDecls)
2329:         {
2329:             [ oNodeNull(p)
2336:                 | true :  >
2339:                 | false :
2341:             ]
2349:             oNodeSetInt (p, qAddr, addr)
2361:             dec (addr)
2367:             oNodeNext (p)
2373:         }
      
2375:       | * :
2380:     ]
      
2380:     oScopeEnd    % param scope
2381:     oScopeDeclare (r)
      
          % Now call rule
      
2387:     .iCall
2389:     oPatchPushHere (patchCall)
2395:     oPatchPushInt (patchCall, id)
2404:     .iSpace
      
2406:     [ equal_zero (num_params)
2413:         | true :
2414:         | * :     .iPop oEmitInt(num_params)
2427:     ];
      
      
      %  Already parsed pIdent and determined it is not a rule/type/operation.
      
2428: Assignment (Node i):
2430:     Node t, t2
2430:     @Lvalue_HaveIdent(i,t)
2440:     .iPushResult
2442:     '='
2444:     @Expr(t2)  @RequireMatchType(t,t2)
2461:     .iAssign
2464:     ;
      
2464: Choice:
2466:     int    num_options    % count the number of options in the choice
2466:     kind   choice_kind    % input choice, expr choice, expr undefined type choice
2466:     Node   choice_type    % type of expr choice
2466:     Node   t
2466:     Node   i
2466:     int    val
      
          %  Determine if this is an input choice or a value choice.
          %  For value choice, determine type of value (if known).
      
2466:     [
2466:         | '|' :
2468:             .iInputChoice   choice_kind = kInput
      
2476:         | * :
2481:             @Expr(choice_type)  .iChoice
      
                  % Expr indicates forward use of undefined rule by returning type Null.
                  % We will indicate this for ourselves by setting kind to kUnknown.
      
2490:             [ oNodeNull(choice_type)
2497:                 | true :    choice_kind = kUnknown   % flag that this is expr choice, unknown type
2504:                 | false:    choice_kind = kType      % flag that this is expr choice, known type
2512:             ]
      
2520:             '|'
2522:     ]
      
2522:     oPatchPushHere (patchChoiceTableAddr)
2528:     .iSpace
      
2530:     oPatchMark (patchChoiceTable)    % build up choice table in this stack
2536:     oPatchMark (patchChoiceExit)     % remember end of each option
2542:     num_options = 0                  % count options
      
2548:     {
2548:         [
2548:             | '*':     % default code (must be last option)
2550:                 ':'
2552:                 @CopyChoiceTable (num_options)
      
2559:                 {[ @Statement
2562:                     | true :
2563:                     | *: >
2570: 	        ]}
2572:                 ']'
      
                      % Finish up
2574:                 @FixChoiceExits
2576:                 >>
      
2577:             | * :
2582:                 {
2582:                     [ choice_kind
      
2585:                         | kType :         % expr choice
2586:                             val = @Const(t)
2597:                             @RequireMatchType (choice_type, t)
      
2607:                         | kUnknown :      % expr choice, type not known yet
2609:                             val = @Const(choice_type)
      
                                  % NOTE: now that we know type of forward rule in expr, we could update nRule
      
                                  % Now know type
2620:                             choice_kind = kType
      
2626:                         | kInput :        % input choice
2628:                             [ | pIdent :  @LookupInput(i)
2637:                               | pStrLit : oShortFormLookup(i) @RequireInput(i)
2652:                             ]
2660:                             val = oNodeGetInt (i, qValue)
2673:                     ]
      
2683:                     oPatchPushHere (patchChoiceTable)
2689:                     oPatchPushInt  (patchChoiceTable, val)
2698:                     inc (num_options)
      
2704:                     [
2704:                         | ':' :   >
2708:                         | ',' :
2710:                     ]
2718:                 }
2720:         ]
      
              % Code for this option:
      
2720:         {[ @Statement
2723:             | true:
2724:             | *:  >
2731:         ]}
      
2733:         [
2733:             | ']' :     % end of choice, no default
2735:                 .iJumpForward
2737:                 oPatchPushHere (patchChoiceExit) .iSpace
2745:                 @CopyChoiceTable (num_options)
      
2752:                 .iEndChoice
      
2754:                 @FixChoiceExits
2756:                 >>
      
2757:             | '|' :     % more options follow
2759:                 .iJumpForward
2761:                 oPatchPushHere (patchChoiceExit) .iSpace
2769:         ]
2777:     };
      
      
      %  Install choice table here, given number of options.
      %  Order of options is opposite that in the source (note for error recovery)
      
2780: CopyChoiceTable (int num_options):
2782:     oPatchPopFwd (patchChoiceTableAddr)    % fix pointer to table
2788:     oEmitInt (num_options)                 % # table entries
2794:     {[ oPatchAtMark (patchChoiceTable)
2801:         | false :
2802:             oPatchPopValue (patchChoiceTable)
2808:             oPatchPopBack (patchChoiceTable)
2814:         | * :   >
2821:     ]};
          
      % Fix jumps from end of each option to end of choice
      
2824: FixChoiceExits:
2826:     {[ oPatchAtMark (patchChoiceExit)
2833:         | false:    oPatchPopFwd (patchChoiceExit)
2840:         | *:        >
2847:     ]};
      
2850: FixForwardCalls:
2852:     {[ oPatchAnyEntries (patchCall)
2859:         | true :    oPatchPopCall (patchCall)
2866:         | * :       >
2873:     ]};
      
      %  ------------------------------------------------------- 
      
      %  Emits code for expression (with result in ssl_result).
      %  Returns nType of expression.
      
2876: Expr (out Node t):
2878:     Node  i
2878:     [
2878:         | pIdent :
      
2880:             [ oScopeFind (i)
2887:                 | true :
2888:                     [ oNodeType (i)
2895:                         | nRule :        oWarning(wRuleMissingAtSign) @CallRule(i)
2909:                         | nOperation :   @CallOperation(i)
2918:                         | nValue :       .iSetResult    @EmitValue(i)
2929:                         | nInParam :     .iGetParam     @EmitAddr(i)
2940:                         | nOutParam :    .iGetFromParam @EmitAddr(i)
2951:                         | nInOutParam :  .iGetFromParam @EmitAddr(i)
2962:                         | nLocal :       .iGetLocal     @EmitAddr(i)
2973:                         | nGlobal :      .iGetGlobal    @EmitAddr(i)
2984:                         | * : #eIdentNotAllowedInExpr
3005:                     ]
      
3005:                     t = oNodeGet (i, qType)         % Get type of identifier
3018:                     [ oNodeNull(t)
3025:                         | true:  #eNotTyped   % e.g. call with no return value
3028:                         | * :
3033:                     ]
      
3033:                 | false :
3035:                     t = Null  #eUndeclaredIdentifier
3043:             ]
      
3051:         | '@' :
3053: 	    pIdent
3055:             [ oScopeFind (i)
3062:                 | true :
3063:                     @RequireRule(i) @CallRule(i)
3077:                     t = oNodeGet (i, qType)
3090:                     [ oNodeNull (t)
3097:                         | true:  #eNotTyped   % e.g. call with no return value
3100:                         | * :
3105:                     ]
      
3105:                 | false :
                          % Call before defined.  Limited use in this case.
                          % The nType pushed will be NULL.  We don't know the real type.
                          % This is really just allowed so we can have simple rules in a Choice expression.
      
3107:                     @CallUndefinedRule
3109:                     t = Null
3115:             ]
      
3123:         | '-' :
3125:             pIntLit   .iSetResult  oEmitInt(negate(TOKEN_VALUE))
3138:             t = IntType
3144:         | pIntLit :
3146:             .iSetResult  oEmitInt(TOKEN_VALUE)
3153:             t = IntType
3159:     ];
      
      %  Emits code for lvalue (putting address of variable in ssl_result).
      %  Returns nType of the referenced value.
      
3172: Lvalue (out Node t):
3174:     Node i
3174:     [
3174:         | pIdent :
      
3176:             [ oScopeFind(i)
3183:                 | true :      @Lvalue_HaveIdent(i,t)
      
3194:                 | false :     % a forward use of rule, illegal as lvalue
3196:                     t = Null  #eIllegalLvalue
3204:             ]
      
3212:         | '-' :   pIntLit     t = Null    #eIllegalLvalue
3224:         | pIntLit :           t = Null    #eIllegalLvalue
3234:     ];
      
      %  Emit code for lvalue, given nDeclaration of identifier.
      %  Return lvalue's nType
      
3245: Lvalue_HaveIdent (Node i, out Node t):
3247:     [ oNodeType(i)
3254:         | nInParam :     .iGetAddrParam  @EmitAddr(i)
3264:         | nOutParam :    .iGetParam      @EmitAddr(i)
3275:         | nInOutParam :  .iGetParam      @EmitAddr(i)
3286:         | nLocal :       .iGetAddrLocal  @EmitAddr(i)
3297:         | nGlobal :      .iGetAddrGlobal @EmitAddr(i)
3308:         | * : #eIllegalLvalue
3323:     ]
3323:     t = oNodeGet (i, qType)         % Get type of identifier
3337:     ;
      
      %  Return a constant value.  Also return the type of the value.
      %  No code is generated.
      
3337: Const (out Node t) >> int:
3339:     Node  i
3339:     int   val
3339:     [
3339:         | pIdent :
3341:             @LookupValue (i)
3348:             val = oNodeGetInt (i, qValue)
3361:             t = oNodeGet (i, qType)
3374:         | '-' :
3376:             pIntLit
3378:             val = negate(TOKEN_VALUE)
3387:             t = IntType
3393:         | pIntLit :
3395:             val = TOKEN_VALUE
3400:             t = IntType
3406:     ]
3416:     >> val;
      
      %  Return integer constant.  Only values of type "int" are
      %  permitted.  No code is generated.
      
3420: IntConst >> int:
3422:     Node t
3422:     int  i
3422:     i = @Const (t)  @RequireMatchIntType (t)
3440:     >> i;
      
      %  ------------------------------------------------------- 
      
      %  Assert that the ident we just read is a particular kind of
      %  identifier.  Return the declaration node of the identifier.
      
3444: LookupType (out Node i):
3446:     oScopeFindRequire (i)
3452:     @RequireType (i);
      
3460: LookupInput (out Node i):
3462:     oScopeFindRequire (i)
3468:     @RequireInput (i);
      
3476: LookupOutput (out Node i):
3478:     oScopeFindRequire (i)
3484:     @RequireOutput (i);
      
3492: LookupValue (out Node i):
3494:     oScopeFindRequire (i)
3500:     @RequireValue (i);
      
3508: LookupError (out Node i):
3510:     oScopeFindRequire (i)
3516:     @RequireError (i);
      
      %  Assert that the given nDeclaration represents a particular
      %  kind of declaration.
      
3524: RequireType (Node i):
3526:     [ oNodeType(i)
3533:         | nType :
3534:         | * :    #eNotAType
3541:     ];
      
3542: RequireInput (Node i):
3544:     [ oNodeType(i)
3551:         | nInput :
3552:         | * :    #eNotInput
3559:     ];
      
3560: RequireOutput (Node i):
3562:     [ oNodeType(i)
3569:         | nOutput :
3570:         | * :    #eNotOutput
3577:     ];
      
3578: RequireValue (Node i):
3580:     [ oNodeType(i)
3587:         | nValue :
3588:         | * :    #eNotAValue
3595:     ];
      
3596: RequireError (Node i):
3598:     [ oNodeType(i)
3605:         | nError :
3606:         | * :    #eNotAnErrSig
3613:     ];
      
3614: RequireRule (Node i):
3616:     [ oNodeType(i)
3623:         | nRule :
3624:         | * :    #eNotARule
3631:     ];
      
      %  Require that rule/operation has no return type
      
3632: RequireNoType (Node r):
3634:     [ oNodeNull (oNodeGet(r, qType))
3648:         | false: #eChoiceOpRuleOutOfPlace
3651:         | * :
3656:     ];
      
      %  Given a value nDeclaration, and a nType.
      %  Ensure that the value symbol has the type nType.
      
3657: RequireMatchValueType (Node v, Node t):
3659:     [ oNodeEqual (oNodeGet(v, qType), t)
3676:         | true :
3677:         | * :    #eWrongType
3684:     ];
      
      
      %  Do two types match?
      
3685: MatchType (Node t1, Node t2) >> boolean:
3687:     >> oNodeEqual (t1, t2);
      
3698: RequireMatchType (Node t1, Node t2):
3700:     [ oNodeEqual (t1, t2)
3710:         | true :
3711:         | * :    #eWrongType
3718:     ];
      
      %  Is the nType "int"?
      
3719: MatchIntType (Node t) >> boolean:
3721:     >> oNodeEqual (t, IntType);
      
3732: RequireMatchIntType (Node t):
3734:     [ oNodeEqual (t, IntType)
3744:         | true :
3745:         | * :     #eWrongType
3752:     ];
      
      
      %  ------------------------------------------------------- 
      
      
      %  Emit the value of an identifier declaration, given its nDeclaration
      
3753: EmitValue (Node i):
3755:     oEmitInt (oNodeGetInt(i, qValue));
      
      %  Emit the addr of a variable, given its declaration
      
3769: EmitAddr (Node v):
3771:     oEmitInt (oNodeGetInt(v, qAddr));
      
3785: end
      
3785: 

Generated code:

   0: oGlobalSpace 9
   2: oLocalSpace 1
   4: oGetAddrGlobal 8
   6: oPushResult
   7: oScopeBegin
   8: oPop 1
  10: oGetAddrGlobal 7
  12: oPushResult
  13: oSetResult 0
  15: oAssign
  16: oGetAddrGlobal 6
  18: oPushResult
  19: oSetResult 0
  21: oAssign
  22: oGetAddrGlobal 6
  24: oPushResult
  25: oInstallSystemOperations
  26: oPop 1
  28: oGetAddrGlobal 1
  30: oPushResult
  31: oInstallSystemTypes
  32: oPop 1
  34: oGetAddrGlobal 3
  36: oPushResult
  37: oSetResult 0
  39: oAssign
  40: oEmit 15
  42: oGetAddrLocal 1
  44: oPushResult
  45: Here
  46: oAssign
  47: oEmit 25
  49: oCall 87
  51: oChoice 55
  53: oJumpForward 60
  55: Choice Lookup Table
           1     53
  58: oJumpForward 62
  60: oJumpBack 49
  62: oCall 2850
  64: oGetAddrGlobal 3
  66: oPushResult
  67: inc
  68: oPop 1
  70: oGetLocal 1
  72: oPushResult
  73: oGetGlobal 3
  75: oPushResult
  76: oPatch
  77: oPop 2
  79: oScopeEnd
  80: oGetGlobal 8
  82: oPushResult
  83: oWriteTables
  84: oPop 1
  86: oReturn
  87: oLocalSpace 0
  89: oInputChoice 128
  91: oCall 152
  93: oJumpForward 148
  95: oCall 162
  97: oJumpForward 148
  99: oCall 191
 101: oJumpForward 148
 103: oCall 220
 105: oJumpForward 148
 107: oCall 243
 109: oJumpForward 148
 111: oCall 301
 113: oJumpForward 148
 115: oCall 307
 117: oJumpForward 148
 119: oCall 356
 121: oJumpForward 148
 123: oSetResult 0
 125: oReturn
 126: oJumpForward 148
 128: Choice Lookup Table
          22    123
          31    119
          29    115
          30    111
          27    107
          28    103
          26     99
          25     95
          24     91
 147: oEndChoice
 148: oSetResult 1
 150: oReturn
 151: oReturn
 152: oLocalSpace 0
 154: oInput 5
 156: oInput 2
 158: oTitleSet
 159: oInput 6
 161: oReturn
 162: oLocalSpace 1
 164: oInput 5
 166: oGetAddrLocal 1
 168: oPushResult
 169: oSetResult 0
 171: oAssign
 172: oSetResult 5
 174: oPushResult
 175: oGetAddrLocal 1
 177: oPushResult
 178: oSetResult 1
 180: oPushResult
 181: oSetResult 0
 183: oPushResult
 184: oCall 374
 186: oPop 4
 188: oInput 6
 190: oReturn
 191: oLocalSpace 1
 193: oInput 5
 195: oGetAddrLocal 1
 197: oPushResult
 198: oSetResult 0
 200: oAssign
 201: oSetResult 6
 203: oPushResult
 204: oGetAddrLocal 1
 206: oPushResult
 207: oSetResult 1
 209: oPushResult
 210: oSetResult 0
 212: oPushResult
 213: oCall 374
 215: oPop 4
 217: oInput 6
 219: oReturn
 220: oLocalSpace 0
 222: oInput 5
 224: oSetResult 7
 226: oPushResult
 227: oGetAddrGlobal 7
 229: oPushResult
 230: oSetResult 0
 232: oPushResult
 233: oSetResult 0
 235: oPushResult
 236: oCall 374
 238: oPop 4
 240: oInput 6
 242: oReturn
 243: oLocalSpace 2
 245: oInput 0
 247: oGetAddrLocal 1
 249: oPushResult
 250: oSetResult 8
 252: oPushResult
 253: oNodeNew
 254: oPop 1
 256: oAssign
 257: oGetLocal 1
 259: oPushResult
 260: oSetResult 3
 262: oPushResult
 263: LAST_ID
 264: oPushResult
 265: oNodeSetInt
 266: oPop 3
 268: oGetLocal 1
 270: oPushResult
 271: oScopeDeclare
 272: oPop 1
 274: oInput 5
 276: oGetAddrLocal 2
 278: oPushResult
 279: oSetResult 0
 281: oAssign
 282: oSetResult 9
 284: oPushResult
 285: oGetAddrLocal 2
 287: oPushResult
 288: oSetResult 0
 290: oPushResult
 291: oGetLocal 1
 293: oPushResult
 294: oCall 374
 296: oPop 4
 298: oInput 6
 300: oReturn
 301: oLocalSpace 0
 303: oInput 2
 305: oInclude
 306: oReturn
 307: oLocalSpace 1
 309: oInput 0
 311: oGetAddrLocal 1
 313: oPushResult
 314: oSetResult 10
 316: oPushResult
 317: oNodeNew
 318: oPop 1
 320: oAssign
 321: oGetLocal 1
 323: oPushResult
 324: oSetResult 3
 326: oPushResult
 327: LAST_ID
 328: oPushResult
 329: oNodeSetInt
 330: oPop 3
 332: oGetLocal 1
 334: oPushResult
 335: oScopeDeclare
 336: oPop 1
 338: oInput 5
 340: oCall 1024
 342: oChoice 346
 344: oJumpForward 351
 346: Choice Lookup Table
           1    344
 349: oJumpForward 353
 351: oJumpBack 340
 353: oInput 6
 355: oReturn
 356: oLocalSpace 0
 358: oCall 1139
 360: oChoice 364
 362: oJumpForward 369
 364: Choice Lookup Table
           1    362
 367: oJumpForward 371
 369: oJumpBack 358
 371: oInput 32
 373: oReturn
 374: oLocalSpace 2
 376: oInputChoice 517
 378: oGetAddrLocal 1
 380: oPushResult
 381: oGetParam 4
 383: oPushResult
 384: oNodeNew
 385: oPop 1
 387: oAssign
 388: oGetLocal 1
 390: oPushResult
 391: oSetResult 3
 393: oPushResult
 394: LAST_ID
 395: oPushResult
 396: oNodeSetInt
 397: oPop 3
 399: oGetParam 4
 401: oChoice 417
 403: oGetLocal 1
 405: oPushResult
 406: oSetResult 5
 408: oPushResult
 409: oGetParam 1
 411: oPushResult
 412: oNodeSet
 413: oPop 3
 415: oJumpForward 420
 417: Choice Lookup Table
           9    403
 420: oInputChoice 441
 422: oGetParam 2
 424: oChoice 434
 426: oGetLocal 1
 428: oPushResult
 429: oShortFormAdd
 430: oPop 1
 432: oJumpForward 439
 434: Choice Lookup Table
           1    426
 437: oError 18
 439: oJumpForward 444
 441: Choice Lookup Table
           2    422
 444: oInputChoice 488
 446: oGetParam 3
 448: oPushResult
 449: oGetAddrLocal 2
 451: oPushResult
 452: oCall 3337
 454: oPop 1
 456: oAssign
 457: oGetParam 1
 459: oPushResult
 460: oGetLocal 2
 462: oPushResult
 463: oCall 3685
 465: oPop 2
 467: oChoice 480
 469: oJumpForward 486
 471: oGetLocal 2
 473: oPushResult
 474: oCall 3732
 476: oPop 1
 478: oJumpForward 486
 480: Choice Lookup Table
           0    471
           1    469
 485: oEndChoice
 486: oJumpForward 491
 488: Choice Lookup Table
           4    446
 491: oGetLocal 1
 493: oPushResult
 494: oSetResult 4
 496: oPushResult
 497: oGetFromParam 3
 499: oPushResult
 500: oNodeSetInt
 501: oPop 3
 503: oGetParam 3
 505: oPushResult
 506: inc
 507: oPop 1
 509: oGetLocal 1
 511: oPushResult
 512: oScopeDeclare
 513: oPop 1
 515: oJumpForward 522
 517: Choice Lookup Table
           0    378
 520: oJumpForward 524
 522: oJumpBack 376
 524: oReturn
 525: oLocalSpace 1
 527: oInput 0
 529: oGetAddrLocal 1
 531: oPushResult
 532: oGetParam 3
 534: oPushResult
 535: oNodeNew
 536: oPop 1
 538: oAssign
 539: oGetLocal 1
 541: oPushResult
 542: oSetResult 3
 544: oPushResult
 545: LAST_ID
 546: oPushResult
 547: oNodeSetInt
 548: oPop 3
 550: oGetLocal 1
 552: oPushResult
 553: oSetResult 5
 555: oPushResult
 556: oGetParam 2
 558: oPushResult
 559: oNodeSet
 560: oPop 3
 562: oGetParam 1
 564: oPushResult
 565: inc
 566: oPop 1
 568: oGetLocal 1
 570: oPushResult
 571: oSetResult 10
 573: oPushResult
 574: oGetFromParam 1
 576: oPushResult
 577: oNodeSetInt
 578: oPop 3
 580: oGetLocal 1
 582: oPushResult
 583: oScopeDeclare
 584: oPop 1
 586: oInputChoice 590
 588: oJumpForward 595
 590: Choice Lookup Table
           7    588
 593: oJumpForward 597
 595: oJumpBack 527
 597: oReturn
 598: oLocalSpace 0
 600: oSetResult 19
 602: oPushResult
 603: oGetParam 1
 605: oPushResult
 606: oGetAddrGlobal 3
 608: oPushResult
 609: oCall 525
 611: oPop 3
 613: oReturn
 614: oLocalSpace 0
 616: oSetResult 18
 618: oPushResult
 619: oGetParam 1
 621: oPushResult
 622: oGetAddrGlobal 4
 624: oPushResult
 625: oCall 525
 627: oPop 3
 629: oReturn
 630: oLocalSpace 4
 632: oInputChoice 636
 634: oJumpForward 640
 636: Choice Lookup Table
           8    634
 639: oReturn
 640: oGetAddrLocal 1
 642: oPushResult
 643: oSetResult 0
 645: oAssign
 646: oGetAddrLocal 1
 648: oPushResult
 649: inc
 650: oPop 1
 652: oInputChoice 678
 654: oGetAddrLocal 2
 656: oPushResult
 657: oSetResult 15
 659: oAssign
 660: oJumpForward 691
 662: oGetAddrLocal 2
 664: oPushResult
 665: oSetResult 16
 667: oAssign
 668: oJumpForward 691
 670: oGetAddrLocal 2
 672: oPushResult
 673: oSetResult 17
 675: oAssign
 676: oJumpForward 691
 678: Choice Lookup Table
          35    670
          34    662
          33    654
 685: oGetAddrLocal 2
 687: oPushResult
 688: oSetResult 15
 690: oAssign
 691: oInput 0
 693: oGetAddrLocal 4
 695: oPushResult
 696: oCall 3444
 698: oPop 1
 700: oGetAddrLocal 3
 702: oPushResult
 703: oGetLocal 2
 705: oPushResult
 706: oNodeNew
 707: oPop 1
 709: oAssign
 710: oGetLocal 3
 712: oPushResult
 713: oSetResult 5
 715: oPushResult
 716: oGetLocal 4
 718: oPushResult
 719: oNodeSet
 720: oPop 3
 722: oInputChoice 737
 724: oGetLocal 3
 726: oPushResult
 727: oSetResult 3
 729: oPushResult
 730: LAST_ID
 731: oPushResult
 732: oNodeSetInt
 733: oPop 3
 735: oJumpForward 740
 737: Choice Lookup Table
           0    724
 740: oGetLocal 3
 742: oPushResult
 743: oScopeDeclare
 744: oPop 1
 746: oInputChoice 750
 748: oJumpForward 755
 750: Choice Lookup Table
           7    748
 753: oJumpForward 757
 755: oJumpBack 646
 757: oInput 9
 759: oGetAddrLocal 3
 761: oPushResult
 762: oGetParam 1
 764: oPushResult
 765: oSetResult 2
 767: oPushResult
 768: oNodeGet
 769: oPop 2
 771: oAssign
 772: oGetLocal 1
 774: oPushResult
 775: equal_zero
 776: oPop 1
 778: oChoice 786
 780: oJumpForward 818
 782: oJumpForward 792
 784: oJumpForward 792
 786: Choice Lookup Table
           0    784
           1    780
 791: oEndChoice
 792: oGetLocal 3
 794: oPushResult
 795: oSetResult 10
 797: oPushResult
 798: oGetLocal 1
 800: oPushResult
 801: oNodeSetInt
 802: oPop 3
 804: oGetAddrLocal 1
 806: oPushResult
 807: dec
 808: oPop 1
 810: oGetAddrLocal 3
 812: oPushResult
 813: oNodeNext
 814: oPop 1
 816: oJumpBack 772
 818: oReturn
 819: oLocalSpace 5
 821: oGetAddrLocal 1
 823: oPushResult
 824: oGetParam 1
 826: oPushResult
 827: oSetResult 2
 829: oPushResult
 830: oNodeGet
 831: oPop 2
 833: oAssign
 834: oInputChoice 838
 836: oJumpForward 857
 838: Choice Lookup Table
           8    836
 841: oGetLocal 1
 843: oPushResult
 844: oNodeNull
 845: oPop 1
 847: oChoice 851
 849: oJumpForward 856
 851: Choice Lookup Table
           1    849
 854: oError 16
 856: oReturn
 857: oGetLocal 1
 859: oPushResult
 860: oNodeNull
 861: oPop 1
 863: oChoice 871
 865: oError 16
 867: oJumpForward 877
 869: oJumpForward 877
 871: Choice Lookup Table
           0    869
           1    865
 876: oEndChoice
 877: oGetAddrLocal 2
 879: oPushResult
 880: oGetLocal 1
 882: oPushResult
 883: oNodeType
 884: oPop 1
 886: oAssign
 887: oInputChoice 913
 889: oGetAddrLocal 3
 891: oPushResult
 892: oSetResult 15
 894: oAssign
 895: oJumpForward 926
 897: oGetAddrLocal 3
 899: oPushResult
 900: oSetResult 16
 902: oAssign
 903: oJumpForward 926
 905: oGetAddrLocal 3
 907: oPushResult
 908: oSetResult 17
 910: oAssign
 911: oJumpForward 926
 913: Choice Lookup Table
          35    905
          34    897
          33    889
 920: oGetAddrLocal 3
 922: oPushResult
 923: oSetResult 15
 925: oAssign
 926: oGetLocal 2
 928: oPushResult
 929: oGetLocal 3
 931: oPushResult
 932: equal_node_type
 933: oPop 2
 935: oChoice 939
 937: oJumpForward 944
 939: Choice Lookup Table
           1    937
 942: oError 16
 944: oGetAddrLocal 4
 946: oPushResult
 947: oGetLocal 1
 949: oPushResult
 950: oSetResult 5
 952: oPushResult
 953: oNodeGet
 954: oPop 2
 956: oAssign
 957: oInput 0
 959: oGetAddrLocal 5
 961: oPushResult
 962: oCall 3444
 964: oPop 1
 966: oGetLocal 4
 968: oPushResult
 969: oGetLocal 5
 971: oPushResult
 972: oCall 3698
 974: oPop 2
 976: oInput 0
 978: oGetLocal 1
 980: oPushResult
 981: oSetResult 3
 983: oPushResult
 984: LAST_ID
 985: oPushResult
 986: oNodeSetInt
 987: oPop 3
 989: oGetAddrLocal 1
 991: oPushResult
 992: oNodeNext
 993: oPop 1
 995: oInputChoice 999
 997: oJumpForward 1004
 999: Choice Lookup Table
           7    997
1002: oJumpForward 1006
1004: oJumpBack 857
1006: oInput 9
1008: oGetLocal 1
1010: oPushResult
1011: oNodeNull
1012: oPop 1
1014: oChoice 1018
1016: oJumpForward 1023
1018: Choice Lookup Table
           1   1016
1021: oError 16
1023: oReturn
1024: oLocalSpace 3
1026: oInputChoice 1030
1028: oJumpForward 1036
1030: Choice Lookup Table
           0   1028
1033: oSetResult 0
1035: oReturn
1036: oGetAddrLocal 1
1038: oPushResult
1039: oSetResult 11
1041: oPushResult
1042: oNodeNew
1043: oPop 1
1045: oAssign
1046: oGetLocal 1
1048: oPushResult
1049: oSetResult 3
1051: oPushResult
1052: LAST_ID
1053: oPushResult
1054: oNodeSetInt
1055: oPop 3
1057: oGetLocal 1
1059: oPushResult
1060: oSetResult 4
1062: oPushResult
1063: oGetGlobal 6
1065: oPushResult
1066: oNodeSetInt
1067: oPop 3
1069: oGetAddrGlobal 6
1071: oPushResult
1072: inc
1073: oPop 1
1075: oGetAddrLocal 2
1077: oPushResult
1078: oScopeBegin
1079: oPop 1
1081: oGetLocal 2
1083: oPushResult
1084: oCall 630
1086: oPop 1
1088: oGetLocal 1
1090: oPushResult
1091: oSetResult 6
1093: oPushResult
1094: oGetLocal 2
1096: oPushResult
1097: oNodeSet
1098: oPop 3
1100: oInputChoice 1125
1102: oInput 0
1104: oGetAddrLocal 3
1106: oPushResult
1107: oCall 3444
1109: oPop 1
1111: oGetLocal 1
1113: oPushResult
1114: oSetResult 5
1116: oPushResult
1117: oGetLocal 3
1119: oPushResult
1120: oNodeSet
1121: oPop 3
1123: oJumpForward 1128
1125: Choice Lookup Table
          10   1102
1128: oScopeEnd
1129: oGetLocal 1
1131: oPushResult
1132: oScopeDeclare
1133: oPop 1
1135: oSetResult 1
1137: oReturn
1138: oReturn
1139: oLocalSpace 1
1141: oInputChoice 1145
1143: oJumpForward 1151
1145: Choice Lookup Table
           0   1143
1148: oSetResult 0
1150: oReturn
1151: oGetAddrLocal 1
1153: oPushResult
1154: oScopeFind
1155: oPop 1
1157: oChoice 1201
1159: oCall 1211
1161: oJumpForward 1207
1163: oGetLocal 1
1165: oPushResult
1166: oNodeType
1167: oPop 1
1169: oChoice 1189
1171: oGetLocal 1
1173: oPushResult
1174: oCall 598
1176: oPop 1
1178: oJumpForward 1199
1180: oGetLocal 1
1182: oPushResult
1183: oCall 1402
1185: oPop 1
1187: oJumpForward 1199
1189: Choice Lookup Table
          12   1180
           8   1171
1194: oError 13
1196: oSetResult 1
1198: oReturn
1199: oJumpForward 1207
1201: Choice Lookup Table
           1   1163
           0   1159
1206: oEndChoice
1207: oSetResult 1
1209: oReturn
1210: oReturn
1211: oLocalSpace 3
1213: oDocNewRule
1214: oGetAddrLocal 1
1216: oPushResult
1217: oSetResult 12
1219: oPushResult
1220: oNodeNew
1221: oPop 1
1223: oAssign
1224: oGetLocal 1
1226: oPushResult
1227: oSetResult 3
1229: oPushResult
1230: LAST_ID
1231: oPushResult
1232: oNodeSetInt
1233: oPop 3
1235: oGetAddrGlobal 2
1237: oPushResult
1238: oGetLocal 1
1240: oAssign
1241: oGetAddrLocal 2
1243: oPushResult
1244: oScopeBegin
1245: oPop 1
1247: oGetLocal 2
1249: oPushResult
1250: oCall 630
1252: oPop 1
1254: oGetLocal 1
1256: oPushResult
1257: oSetResult 6
1259: oPushResult
1260: oGetLocal 2
1262: oPushResult
1263: oNodeSet
1264: oPop 3
1266: oInputChoice 1291
1268: oInput 0
1270: oGetAddrLocal 3
1272: oPushResult
1273: oCall 3444
1275: oPop 1
1277: oGetLocal 1
1279: oPushResult
1280: oSetResult 5
1282: oPushResult
1283: oGetLocal 3
1285: oPushResult
1286: oNodeSet
1287: oPop 3
1289: oJumpForward 1294
1291: Choice Lookup Table
          10   1268
1294: oInputChoice 1305
1296: oGetLocal 1
1298: oPushResult
1299: oCall 1318
1301: oPop 1
1303: oJumpForward 1308
1305: Choice Lookup Table
           5   1296
1308: oInput 6
1310: oScopeEnd
1311: oGetLocal 1
1313: oPushResult
1314: oScopeDeclare
1315: oPop 1
1317: oReturn
1318: oLocalSpace 1
1320: oGetParam 1
1322: oPushResult
1323: oSetResult 4
1325: oPushResult
1326: Here
1327: oPushResult
1328: oNodeSetInt
1329: oPop 3
1331: oGetParam 1
1333: oPushResult
1334: oSetResult 8
1336: oPushResult
1337: oSetResult 1
1339: oPushResult
1340: oNodeSetBoolean
1341: oPop 3
1343: oGetAddrLocal 1
1345: oPushResult
1346: oScopeBegin
1347: oPop 1
1349: oGetAddrGlobal 4
1351: oPushResult
1352: oSetResult 0
1354: oAssign
1355: oEmit 16
1357: oGetAddrGlobal 5
1359: oPushResult
1360: Here
1361: oAssign
1362: oEmit 25
1364: oCall 1518
1366: oChoice 1370
1368: oJumpForward 1375
1370: Choice Lookup Table
           1   1368
1373: oJumpForward 1377
1375: oJumpBack 1364
1377: oEmit 8
1379: oGetGlobal 5
1381: oPushResult
1382: oGetGlobal 4
1384: oPushResult
1385: oPatch
1386: oPop 2
1388: oScopeEnd
1389: oGetParam 1
1391: oPushResult
1392: oSetResult 7
1394: oPushResult
1395: oGetLocal 1
1397: oPushResult
1398: oNodeSet
1399: oPop 3
1401: oReturn
1402: oLocalSpace 4
1404: oGetParam 1
1406: oPushResult
1407: oSetResult 8
1409: oPushResult
1410: oNodeGetBoolean
1411: oPop 2
1413: oChoice 1420
1415: oError 14
1417: oReturn
1418: oJumpForward 1423
1420: Choice Lookup Table
           1   1415
1423: oDocNewRule
1424: oGetAddrGlobal 2
1426: oPushResult
1427: oGetParam 1
1429: oAssign
1430: oGetAddrLocal 1
1432: oPushResult
1433: oGetParam 1
1435: oPushResult
1436: oSetResult 6
1438: oPushResult
1439: oNodeGet
1440: oPop 2
1442: oAssign
1443: oGetLocal 1
1445: oPushResult
1446: oScopeOpen
1447: oPop 1
1449: oGetLocal 1
1451: oPushResult
1452: oCall 819
1454: oPop 1
1456: oGetAddrLocal 3
1458: oPushResult
1459: oGetParam 1
1461: oPushResult
1462: oSetResult 5
1464: oPushResult
1465: oNodeGet
1466: oPop 2
1468: oAssign
1469: oInputChoice 1492
1471: oInput 0
1473: oGetAddrLocal 4
1475: oPushResult
1476: oCall 3444
1478: oPop 1
1480: oGetLocal 3
1482: oPushResult
1483: oGetLocal 4
1485: oPushResult
1486: oCall 3698
1488: oPop 2
1490: oJumpForward 1505
1492: Choice Lookup Table
          10   1471
1495: oGetLocal 3
1497: oPushResult
1498: oSetResult 0
1500: oPushResult
1501: oCall 3698
1503: oPop 2
1505: oInput 5
1507: oGetParam 1
1509: oPushResult
1510: oCall 1318
1512: oPop 1
1514: oInput 6
1516: oScopeEnd
1517: oReturn
1518: oLocalSpace 3
1520: oInputChoice 1862
1522: oGetAddrLocal 1
1524: oPushResult
1525: oShortFormLookup
1526: oPop 1
1528: oGetLocal 1
1530: oPushResult
1531: oCall 3542
1533: oPop 1
1535: oEmit 2
1537: oGetLocal 1
1539: oPushResult
1540: oCall 3753
1542: oPop 1
1544: oJumpForward 1886
1546: oGetAddrLocal 1
1548: oPushResult
1549: oScopeFindRequire
1550: oPop 1
1552: oGetLocal 1
1554: oPushResult
1555: oNodeType
1556: oPop 1
1558: oChoice 1596
1560: oEmit 2
1562: oGetLocal 1
1564: oPushResult
1565: oCall 3753
1567: oPop 1
1569: oJumpForward 1610
1571: oGetLocal 1
1573: oPushResult
1574: oCall 3632
1576: oPop 1
1578: oGetLocal 1
1580: oPushResult
1581: oCall 1890
1583: oPop 1
1585: oJumpForward 1610
1587: oGetLocal 1
1589: oPushResult
1590: oCall 614
1592: oPop 1
1594: oJumpForward 1610
1596: Choice Lookup Table
           8   1587
          11   1571
           5   1560
1603: oGetLocal 1
1605: oPushResult
1606: oCall 2428
1608: oPop 1
1610: oJumpForward 1886
1612: oInput 0
1614: oGetAddrLocal 1
1616: oPushResult
1617: oCall 3508
1619: oPop 1
1621: oEmit 5
1623: oGetLocal 1
1625: oPushResult
1626: oCall 3753
1628: oPop 1
1630: oJumpForward 1886
1632: oInputChoice 1658
1634: oGetAddrLocal 1
1636: oPushResult
1637: oCall 3476
1639: oPop 1
1641: oJumpForward 1664
1643: oGetAddrLocal 1
1645: oPushResult
1646: oShortFormLookup
1647: oPop 1
1649: oGetLocal 1
1651: oPushResult
1652: oCall 3560
1654: oPop 1
1656: oJumpForward 1664
1658: Choice Lookup Table
           2   1643
           0   1634
1663: oEndChoice
1664: oEmit 4
1666: oGetLocal 1
1668: oPushResult
1669: oCall 3753
1671: oPop 1
1673: oJumpForward 1886
1675: oInput 0
1677: oGetAddrLocal 1
1679: oPushResult
1680: oScopeFind
1681: oPop 1
1683: oChoice 1712
1685: oGetLocal 1
1687: oPushResult
1688: oCall 3614
1690: oPop 1
1692: oGetLocal 1
1694: oPushResult
1695: oCall 3632
1697: oPop 1
1699: oGetLocal 1
1701: oPushResult
1702: oCall 2095
1704: oPop 1
1706: oJumpForward 1718
1708: oCall 2191
1710: oJumpForward 1718
1712: Choice Lookup Table
           0   1708
           1   1685
1717: oEndChoice
1718: oJumpForward 1886
1720: oGetAddrLocal 2
1722: oPushResult
1723: oGetGlobal 2
1725: oPushResult
1726: oSetResult 5
1728: oPushResult
1729: oNodeGet
1730: oPop 2
1732: oAssign
1733: oGetLocal 2
1735: oPushResult
1736: oNodeNull
1737: oPop 1
1739: oChoice 1743
1741: oJumpForward 1763
1743: Choice Lookup Table
           1   1741
1746: oGetAddrLocal 3
1748: oPushResult
1749: oCall 2876
1751: oPop 1
1753: oGetLocal 2
1755: oPushResult
1756: oGetLocal 3
1758: oPushResult
1759: oCall 3698
1761: oPop 2
1763: oEmit 8
1765: oJumpForward 1886
1767: oSetResult 4
1769: oPushResult
1770: oPatchPushHere
1771: oPop 1
1773: oSetResult 5
1775: oPushResult
1776: oPatchMark
1777: oPop 1
1779: oCall 1518
1781: oChoice 1785
1783: oJumpForward 1790
1785: Choice Lookup Table
           1   1783
1788: oJumpForward 1792
1790: oJumpBack 1779
1792: oInput 13
1794: oEmit 1
1796: oSetResult 4
1798: oPushResult
1799: oPatchPopBack
1800: oPop 1
1802: oSetResult 5
1804: oPushResult
1805: oPatchAtMark
1806: oPop 1
1808: oChoice 1818
1810: oSetResult 5
1812: oPushResult
1813: oPatchPopFwd
1814: oPop 1
1816: oJumpForward 1823
1818: Choice Lookup Table
           0   1810
1821: oJumpForward 1825
1823: oJumpBack 1802
1825: oJumpForward 1886
1827: oSetResult 4
1829: oPushResult
1830: oPatchAnyEntries
1831: oPop 1
1833: oChoice 1839
1835: oError 7
1837: oJumpForward 1842
1839: Choice Lookup Table
           0   1835
1842: oEmit 0
1844: oSetResult 5
1846: oPushResult
1847: oPatchPushHere
1848: oPop 1
1850: oEmit 25
1852: oJumpForward 1886
1854: oEmit 3
1856: oJumpForward 1886
1858: oCall 2464
1860: oJumpForward 1886
1862: Choice Lookup Table
          14   1858
          21   1854
          11   1827
          12   1767
          10   1720
          17   1675
          18   1632
          20   1612
           0   1546
           2   1522
1883: oSetResult 0
1885: oReturn
1886: oSetResult 1
1888: oReturn
1889: oReturn
1890: oLocalSpace 1
1892: oGetAddrLocal 1
1894: oPushResult
1895: oGetParam 1
1897: oPushResult
1898: oCall 1937
1900: oPop 1
1902: oAssign
1903: oGetParam 1
1905: oPushResult
1906: oCall 3753
1908: oPop 1
1910: oGetLocal 1
1912: oPushResult
1913: equal_zero
1914: oPop 1
1916: oChoice 1930
1918: oJumpForward 1936
1920: oEmit 13
1922: oGetLocal 1
1924: oPushResult
1925: oEmitInt
1926: oPop 1
1928: oJumpForward 1936
1930: Choice Lookup Table
           0   1920
           1   1918
1935: oEndChoice
1936: oReturn
1937: oLocalSpace 5
1939: oGetAddrLocal 2
1941: oPushResult
1942: oGetParam 1
1944: oPushResult
1945: oSetResult 6
1947: oPushResult
1948: oNodeGet
1949: oPop 2
1951: oAssign
1952: oGetAddrLocal 3
1954: oPushResult
1955: oGetLocal 2
1957: oPushResult
1958: oSetResult 2
1960: oPushResult
1961: oNodeGet
1962: oPop 2
1964: oAssign
1965: oGetLocal 3
1967: oPushResult
1968: oNodeNull
1969: oPop 1
1971: oChoice 1980
1973: oSetResult 0
1975: oReturn
1976: oJumpForward 1986
1978: oJumpForward 1986
1980: Choice Lookup Table
           0   1978
           1   1973
1985: oEndChoice
1986: oGetAddrLocal 1
1988: oPushResult
1989: oSetResult 0
1991: oAssign
1992: oInput 8
1994: oGetAddrLocal 1
1996: oPushResult
1997: inc
1998: oPop 1
2000: oGetAddrLocal 4
2002: oPushResult
2003: oGetLocal 3
2005: oPushResult
2006: oSetResult 5
2008: oPushResult
2009: oNodeGet
2010: oPop 2
2012: oAssign
2013: oGetLocal 3
2015: oPushResult
2016: oNodeType
2017: oPop 1
2019: oChoice 2039
2021: oGetAddrLocal 5
2023: oPushResult
2024: oCall 2876
2026: oPop 1
2028: oJumpForward 2047
2030: oGetAddrLocal 5
2032: oPushResult
2033: oCall 3172
2035: oPop 1
2037: oJumpForward 2047
2039: Choice Lookup Table
          17   2030
          16   2030
          15   2021
2046: oEndChoice
2047: oGetLocal 4
2049: oPushResult
2050: oGetLocal 5
2052: oPushResult
2053: oCall 3698
2055: oPop 2
2057: oEmit 12
2059: oGetAddrLocal 3
2061: oPushResult
2062: oNodeNext
2063: oPop 1
2065: oGetLocal 3
2067: oPushResult
2068: oNodeNull
2069: oPop 1
2071: oChoice 2079
2073: oJumpForward 2089
2075: oJumpForward 2085
2077: oJumpForward 2085
2079: Choice Lookup Table
           0   2077
           1   2073
2084: oEndChoice
2085: oInput 7
2087: oJumpBack 1994
2089: oInput 9
2091: oGetLocal 1
2093: oReturn
2094: oReturn
2095: oLocalSpace 1
2097: oGetAddrLocal 1
2099: oPushResult
2100: oGetParam 1
2102: oPushResult
2103: oCall 1937
2105: oPop 1
2107: oAssign
2108: oGetParam 1
2110: oPushResult
2111: oSetResult 8
2113: oPushResult
2114: oNodeGetBoolean
2115: oPop 2
2117: oChoice 2158
2119: oEmit 7
2121: oGetParam 1
2123: oPushResult
2124: oCall 3753
2126: oPop 1
2128: oJumpForward 2164
2130: oEmit 7
2132: oSetResult 3
2134: oPushResult
2135: oPatchPushHere
2136: oPop 1
2138: oSetResult 3
2140: oPushResult
2141: oGetParam 1
2143: oPushResult
2144: oSetResult 3
2146: oPushResult
2147: oNodeGetInt
2148: oPop 2
2150: oPushResult
2151: oPatchPushInt
2152: oPop 2
2154: oEmit 25
2156: oJumpForward 2164
2158: Choice Lookup Table
           0   2130
           1   2119
2163: oEndChoice
2164: oGetLocal 1
2166: oPushResult
2167: equal_zero
2168: oPop 1
2170: oChoice 2184
2172: oJumpForward 2190
2174: oEmit 13
2176: oGetLocal 1
2178: oPushResult
2179: oEmitInt
2180: oPop 1
2182: oJumpForward 2190
2184: Choice Lookup Table
           0   2174
           1   2172
2189: oEndChoice
2190: oReturn
2191: oLocalSpace 7
2193: oGetAddrLocal 1
2195: oPushResult
2196: oSetResult 12
2198: oPushResult
2199: oNodeNew
2200: oPop 1
2202: oAssign
2203: oGetAddrLocal 5
2205: oPushResult
2206: LAST_ID
2207: oAssign
2208: oGetLocal 1
2210: oPushResult
2211: oSetResult 3
2213: oPushResult
2214: oGetLocal 5
2216: oPushResult
2217: oNodeSetInt
2218: oPop 3
2220: oGetLocal 1
2222: oPushResult
2223: oSetResult 8
2225: oPushResult
2226: oSetResult 0
2228: oPushResult
2229: oNodeSetBoolean
2230: oPop 3
2232: oGetAddrLocal 2
2234: oPushResult
2235: oScopeBegin
2236: oPop 1
2238: oGetLocal 1
2240: oPushResult
2241: oSetResult 6
2243: oPushResult
2244: oGetLocal 2
2246: oPushResult
2247: oNodeSet
2248: oPop 3
2250: oGetAddrLocal 6
2252: oPushResult
2253: oSetResult 0
2255: oAssign
2256: oInputChoice 2377
2258: oGetAddrLocal 3
2260: oPushResult
2261: oCall 2876
2263: oPop 1
2265: oGetAddrLocal 4
2267: oPushResult
2268: oSetResult 15
2270: oPushResult
2271: oNodeNew
2272: oPop 1
2274: oAssign
2275: oGetLocal 4
2277: oPushResult
2278: oSetResult 5
2280: oPushResult
2281: oGetLocal 3
2283: oPushResult
2284: oNodeSet
2285: oPop 3
2287: oGetLocal 4
2289: oPushResult
2290: oScopeDeclare
2291: oPop 1
2293: oGetAddrLocal 6
2295: oPushResult
2296: inc
2297: oPop 1
2299: oInputChoice 2303
2301: oJumpForward 2308
2303: Choice Lookup Table
           7   2301
2306: oJumpForward 2310
2308: oJumpBack 2258
2310: oGetAddrLocal 7
2312: oPushResult
2313: oGetLocal 6
2315: oAssign
2316: oGetAddrLocal 4
2318: oPushResult
2319: oGetLocal 2
2321: oPushResult
2322: oSetResult 2
2324: oPushResult
2325: oNodeGet
2326: oPop 2
2328: oAssign
2329: oGetLocal 4
2331: oPushResult
2332: oNodeNull
2333: oPop 1
2335: oChoice 2343
2337: oJumpForward 2375
2339: oJumpForward 2349
2341: oJumpForward 2349
2343: Choice Lookup Table
           0   2341
           1   2337
2348: oEndChoice
2349: oGetLocal 4
2351: oPushResult
2352: oSetResult 10
2354: oPushResult
2355: oGetLocal 7
2357: oPushResult
2358: oNodeSetInt
2359: oPop 3
2361: oGetAddrLocal 7
2363: oPushResult
2364: dec
2365: oPop 1
2367: oGetAddrLocal 4
2369: oPushResult
2370: oNodeNext
2371: oPop 1
2373: oJumpBack 2329
2375: oJumpForward 2380
2377: Choice Lookup Table
           8   2258
2380: oScopeEnd
2381: oGetLocal 1
2383: oPushResult
2384: oScopeDeclare
2385: oPop 1
2387: oEmit 7
2389: oSetResult 3
2391: oPushResult
2392: oPatchPushHere
2393: oPop 1
2395: oSetResult 3
2397: oPushResult
2398: oGetLocal 5
2400: oPushResult
2401: oPatchPushInt
2402: oPop 2
2404: oEmit 25
2406: oGetLocal 6
2408: oPushResult
2409: equal_zero
2410: oPop 1
2412: oChoice 2416
2414: oJumpForward 2427
2416: Choice Lookup Table
           1   2414
2419: oEmit 13
2421: oGetLocal 6
2423: oPushResult
2424: oEmitInt
2425: oPop 1
2427: oReturn
2428: oLocalSpace 2
2430: oGetParam 1
2432: oPushResult
2433: oGetAddrLocal 1
2435: oPushResult
2436: oCall 3245
2438: oPop 2
2440: oEmit 12
2442: oInput 4
2444: oGetAddrLocal 2
2446: oPushResult
2447: oCall 2876
2449: oPop 1
2451: oGetLocal 1
2453: oPushResult
2454: oGetLocal 2
2456: oPushResult
2457: oCall 3698
2459: oPop 2
2461: oEmit 24
2463: oReturn
2464: oLocalSpace 6
2466: oInputChoice 2478
2468: oEmit 6
2470: oGetAddrLocal 2
2472: oPushResult
2473: oSetResult 2
2475: oAssign
2476: oJumpForward 2522
2478: Choice Lookup Table
          16   2468
2481: oGetAddrLocal 3
2483: oPushResult
2484: oCall 2876
2486: oPop 1
2488: oEmit 10
2490: oGetLocal 3
2492: oPushResult
2493: oNodeNull
2494: oPop 1
2496: oChoice 2514
2498: oGetAddrLocal 2
2500: oPushResult
2501: oSetResult 1
2503: oAssign
2504: oJumpForward 2520
2506: oGetAddrLocal 2
2508: oPushResult
2509: oSetResult 5
2511: oAssign
2512: oJumpForward 2520
2514: Choice Lookup Table
           0   2506
           1   2498
2519: oEndChoice
2520: oInput 16
2522: oSetResult 0
2524: oPushResult
2525: oPatchPushHere
2526: oPop 1
2528: oEmit 25
2530: oSetResult 1
2532: oPushResult
2533: oPatchMark
2534: oPop 1
2536: oSetResult 2
2538: oPushResult
2539: oPatchMark
2540: oPop 1
2542: oGetAddrLocal 1
2544: oPushResult
2545: oSetResult 0
2547: oAssign
2548: oInputChoice 2579
2550: oInput 5
2552: oGetLocal 1
2554: oPushResult
2555: oCall 2780
2557: oPop 1
2559: oCall 1518
2561: oChoice 2565
2563: oJumpForward 2570
2565: Choice Lookup Table
           1   2563
2568: oJumpForward 2572
2570: oJumpBack 2559
2572: oInput 15
2574: oCall 2824
2576: oReturn
2577: oJumpForward 2720
2579: Choice Lookup Table
          19   2550
2582: oGetLocal 2
2584: oChoice 2675
2586: oGetAddrLocal 6
2588: oPushResult
2589: oGetAddrLocal 4
2591: oPushResult
2592: oCall 3337
2594: oPop 1
2596: oAssign
2597: oGetLocal 3
2599: oPushResult
2600: oGetLocal 4
2602: oPushResult
2603: oCall 3698
2605: oPop 2
2607: oJumpForward 2683
2609: oGetAddrLocal 6
2611: oPushResult
2612: oGetAddrLocal 3
2614: oPushResult
2615: oCall 3337
2617: oPop 1
2619: oAssign
2620: oGetAddrLocal 2
2622: oPushResult
2623: oSetResult 5
2625: oAssign
2626: oJumpForward 2683
2628: oInputChoice 2654
2630: oGetAddrLocal 5
2632: oPushResult
2633: oCall 3460
2635: oPop 1
2637: oJumpForward 2660
2639: oGetAddrLocal 5
2641: oPushResult
2642: oShortFormLookup
2643: oPop 1
2645: oGetLocal 5
2647: oPushResult
2648: oCall 3542
2650: oPop 1
2652: oJumpForward 2660
2654: Choice Lookup Table
           2   2639
           0   2630
2659: oEndChoice
2660: oGetAddrLocal 6
2662: oPushResult
2663: oGetLocal 5
2665: oPushResult
2666: oSetResult 4
2668: oPushResult
2669: oNodeGetInt
2670: oPop 2
2672: oAssign
2673: oJumpForward 2683
2675: Choice Lookup Table
           2   2628
           1   2609
           5   2586
2682: oEndChoice
2683: oSetResult 1
2685: oPushResult
2686: oPatchPushHere
2687: oPop 1
2689: oSetResult 1
2691: oPushResult
2692: oGetLocal 6
2694: oPushResult
2695: oPatchPushInt
2696: oPop 2
2698: oGetAddrLocal 1
2700: oPushResult
2701: inc
2702: oPop 1
2704: oInputChoice 2712
2706: oJumpForward 2720
2708: oJumpForward 2718
2710: oJumpForward 2718
2712: Choice Lookup Table
           7   2710
           5   2706
2717: oEndChoice
2718: oJumpBack 2582
2720: oCall 1518
2722: oChoice 2726
2724: oJumpForward 2731
2726: Choice Lookup Table
           1   2724
2729: oJumpForward 2733
2731: oJumpBack 2720
2733: oInputChoice 2771
2735: oEmit 0
2737: oSetResult 2
2739: oPushResult
2740: oPatchPushHere
2741: oPop 1
2743: oEmit 25
2745: oGetLocal 1
2747: oPushResult
2748: oCall 2780
2750: oPop 1
2752: oEmit 11
2754: oCall 2824
2756: oReturn
2757: oJumpForward 2777
2759: oEmit 0
2761: oSetResult 2
2763: oPushResult
2764: oPatchPushHere
2765: oPop 1
2767: oEmit 25
2769: oJumpForward 2777
2771: Choice Lookup Table
          16   2759
          15   2735
2776: oEndChoice
2777: oJumpBack 2548
2779: oReturn
2780: oLocalSpace 0
2782: oSetResult 0
2784: oPushResult
2785: oPatchPopFwd
2786: oPop 1
2788: oGetParam 1
2790: oPushResult
2791: oEmitInt
2792: oPop 1
2794: oSetResult 1
2796: oPushResult
2797: oPatchAtMark
2798: oPop 1
2800: oChoice 2816
2802: oSetResult 1
2804: oPushResult
2805: oPatchPopValue
2806: oPop 1
2808: oSetResult 1
2810: oPushResult
2811: oPatchPopBack
2812: oPop 1
2814: oJumpForward 2821
2816: Choice Lookup Table
           0   2802
2819: oJumpForward 2823
2821: oJumpBack 2794
2823: oReturn
2824: oLocalSpace 0
2826: oSetResult 2
2828: oPushResult
2829: oPatchAtMark
2830: oPop 1
2832: oChoice 2842
2834: oSetResult 2
2836: oPushResult
2837: oPatchPopFwd
2838: oPop 1
2840: oJumpForward 2847
2842: Choice Lookup Table
           0   2834
2845: oJumpForward 2849
2847: oJumpBack 2826
2849: oReturn
2850: oLocalSpace 0
2852: oSetResult 3
2854: oPushResult
2855: oPatchAnyEntries
2856: oPop 1
2858: oChoice 2868
2860: oSetResult 3
2862: oPushResult
2863: oPatchPopCall
2864: oPop 1
2866: oJumpForward 2873
2868: Choice Lookup Table
           1   2860
2871: oJumpForward 2875
2873: oJumpBack 2852
2875: oReturn
2876: oLocalSpace 1
2878: oInputChoice 3161
2880: oGetAddrLocal 1
2882: oPushResult
2883: oScopeFind
2884: oPop 1
2886: oChoice 3045
2888: oGetLocal 1
2890: oPushResult
2891: oNodeType
2892: oPop 1
2894: oChoice 2986
2896: oSetResult 0
2898: oPushResult
2899: oWarning
2900: oPop 1
2902: oGetLocal 1
2904: oPushResult
2905: oCall 2095
2907: oPop 1
2909: oJumpForward 3005
2911: oGetLocal 1
2913: oPushResult
2914: oCall 1890
2916: oPop 1
2918: oJumpForward 3005
2920: oEmit 9
2922: oGetLocal 1
2924: oPushResult
2925: oCall 3753
2927: oPop 1
2929: oJumpForward 3005
2931: oEmit 17
2933: oGetLocal 1
2935: oPushResult
2936: oCall 3769
2938: oPop 1
2940: oJumpForward 3005
2942: oEmit 18
2944: oGetLocal 1
2946: oPushResult
2947: oCall 3769
2949: oPop 1
2951: oJumpForward 3005
2953: oEmit 18
2955: oGetLocal 1
2957: oPushResult
2958: oCall 3769
2960: oPop 1
2962: oJumpForward 3005
2964: oEmit 19
2966: oGetLocal 1
2968: oPushResult
2969: oCall 3769
2971: oPop 1
2973: oJumpForward 3005
2975: oEmit 20
2977: oGetLocal 1
2979: oPushResult
2980: oCall 3769
2982: oPop 1
2984: oJumpForward 3005
2986: Choice Lookup Table
          19   2975
          18   2964
          17   2953
          16   2942
          15   2931
           9   2920
          11   2911
          12   2896
3003: oError 11
3005: oGetParam 1
3007: oPushResult
3008: oGetLocal 1
3010: oPushResult
3011: oSetResult 5
3013: oPushResult
3014: oNodeGet
3015: oPop 2
3017: oAssign
3018: oGetFromParam 1
3020: oPushResult
3021: oNodeNull
3022: oPop 1
3024: oChoice 3030
3026: oError 10
3028: oJumpForward 3033
3030: Choice Lookup Table
           1   3026
3033: oJumpForward 3051
3035: oGetParam 1
3037: oPushResult
3038: oSetResult 0
3040: oAssign
3041: oError 17
3043: oJumpForward 3051
3045: Choice Lookup Table
           0   3035
           1   2888
3050: oEndChoice
3051: oJumpForward 3171
3053: oInput 0
3055: oGetAddrLocal 1
3057: oPushResult
3058: oScopeFind
3059: oPop 1
3061: oChoice 3117
3063: oGetLocal 1
3065: oPushResult
3066: oCall 3614
3068: oPop 1
3070: oGetLocal 1
3072: oPushResult
3073: oCall 2095
3075: oPop 1
3077: oGetParam 1
3079: oPushResult
3080: oGetLocal 1
3082: oPushResult
3083: oSetResult 5
3085: oPushResult
3086: oNodeGet
3087: oPop 2
3089: oAssign
3090: oGetFromParam 1
3092: oPushResult
3093: oNodeNull
3094: oPop 1
3096: oChoice 3102
3098: oError 10
3100: oJumpForward 3105
3102: Choice Lookup Table
           1   3098
3105: oJumpForward 3123
3107: oCall 2191
3109: oGetParam 1
3111: oPushResult
3112: oSetResult 0
3114: oAssign
3115: oJumpForward 3123
3117: Choice Lookup Table
           0   3107
           1   3063
3122: oEndChoice
3123: oJumpForward 3171
3125: oInput 1
3127: oEmit 9
3129: TOKEN_VALUE
3130: oPushResult
3131: negate
3132: oPop 1
3134: oPushResult
3135: oEmitInt
3136: oPop 1
3138: oGetParam 1
3140: oPushResult
3141: oGetGlobal 1
3143: oAssign
3144: oJumpForward 3171
3146: oEmit 9
3148: TOKEN_VALUE
3149: oPushResult
3150: oEmitInt
3151: oPop 1
3153: oGetParam 1
3155: oPushResult
3156: oGetGlobal 1
3158: oAssign
3159: oJumpForward 3171
3161: Choice Lookup Table
           1   3146
           3   3125
          17   3053
           0   2880
3170: oEndChoice
3171: oReturn
3172: oLocalSpace 1
3174: oInputChoice 3236
3176: oGetAddrLocal 1
3178: oPushResult
3179: oScopeFind
3180: oPop 1
3182: oChoice 3206
3184: oGetLocal 1
3186: oPushResult
3187: oGetParam 1
3189: oPushResult
3190: oCall 3245
3192: oPop 2
3194: oJumpForward 3212
3196: oGetParam 1
3198: oPushResult
3199: oSetResult 0
3201: oAssign
3202: oError 12
3204: oJumpForward 3212
3206: Choice Lookup Table
           0   3196
           1   3184
3211: oEndChoice
3212: oJumpForward 3244
3214: oInput 1
3216: oGetParam 1
3218: oPushResult
3219: oSetResult 0
3221: oAssign
3222: oError 12
3224: oJumpForward 3244
3226: oGetParam 1
3228: oPushResult
3229: oSetResult 0
3231: oAssign
3232: oError 12
3234: oJumpForward 3244
3236: Choice Lookup Table
           1   3226
           3   3214
           0   3176
3243: oEndChoice
3244: oReturn
3245: oLocalSpace 0
3247: oGetParam 2
3249: oPushResult
3250: oNodeType
3251: oPop 1
3253: oChoice 3310
3255: oEmit 21
3257: oGetParam 2
3259: oPushResult
3260: oCall 3769
3262: oPop 1
3264: oJumpForward 3323
3266: oEmit 17
3268: oGetParam 2
3270: oPushResult
3271: oCall 3769
3273: oPop 1
3275: oJumpForward 3323
3277: oEmit 17
3279: oGetParam 2
3281: oPushResult
3282: oCall 3769
3284: oPop 1
3286: oJumpForward 3323
3288: oEmit 22
3290: oGetParam 2
3292: oPushResult
3293: oCall 3769
3295: oPop 1
3297: oJumpForward 3323
3299: oEmit 23
3301: oGetParam 2
3303: oPushResult
3304: oCall 3769
3306: oPop 1
3308: oJumpForward 3323
3310: Choice Lookup Table
          19   3299
          18   3288
          17   3277
          16   3266
          15   3255
3321: oError 12
3323: oGetParam 1
3325: oPushResult
3326: oGetParam 2
3328: oPushResult
3329: oSetResult 5
3331: oPushResult
3332: oNodeGet
3333: oPop 2
3335: oAssign
3336: oReturn
3337: oLocalSpace 2
3339: oInputChoice 3408
3341: oGetAddrLocal 1
3343: oPushResult
3344: oCall 3492
3346: oPop 1
3348: oGetAddrLocal 2
3350: oPushResult
3351: oGetLocal 1
3353: oPushResult
3354: oSetResult 4
3356: oPushResult
3357: oNodeGetInt
3358: oPop 2
3360: oAssign
3361: oGetParam 1
3363: oPushResult
3364: oGetLocal 1
3366: oPushResult
3367: oSetResult 5
3369: oPushResult
3370: oNodeGet
3371: oPop 2
3373: oAssign
3374: oJumpForward 3416
3376: oInput 1
3378: oGetAddrLocal 2
3380: oPushResult
3381: TOKEN_VALUE
3382: oPushResult
3383: negate
3384: oPop 1
3386: oAssign
3387: oGetParam 1
3389: oPushResult
3390: oGetGlobal 1
3392: oAssign
3393: oJumpForward 3416
3395: oGetAddrLocal 2
3397: oPushResult
3398: TOKEN_VALUE
3399: oAssign
3400: oGetParam 1
3402: oPushResult
3403: oGetGlobal 1
3405: oAssign
3406: oJumpForward 3416
3408: Choice Lookup Table
           1   3395
           3   3376
           0   3341
3415: oEndChoice
3416: oGetLocal 2
3418: oReturn
3419: oReturn
3420: oLocalSpace 2
3422: oGetAddrLocal 2
3424: oPushResult
3425: oGetAddrLocal 1
3427: oPushResult
3428: oCall 3337
3430: oPop 1
3432: oAssign
3433: oGetLocal 1
3435: oPushResult
3436: oCall 3732
3438: oPop 1
3440: oGetLocal 2
3442: oReturn
3443: oReturn
3444: oLocalSpace 0
3446: oGetParam 1
3448: oPushResult
3449: oScopeFindRequire
3450: oPop 1
3452: oGetFromParam 1
3454: oPushResult
3455: oCall 3524
3457: oPop 1
3459: oReturn
3460: oLocalSpace 0
3462: oGetParam 1
3464: oPushResult
3465: oScopeFindRequire
3466: oPop 1
3468: oGetFromParam 1
3470: oPushResult
3471: oCall 3542
3473: oPop 1
3475: oReturn
3476: oLocalSpace 0
3478: oGetParam 1
3480: oPushResult
3481: oScopeFindRequire
3482: oPop 1
3484: oGetFromParam 1
3486: oPushResult
3487: oCall 3560
3489: oPop 1
3491: oReturn
3492: oLocalSpace 0
3494: oGetParam 1
3496: oPushResult
3497: oScopeFindRequire
3498: oPop 1
3500: oGetFromParam 1
3502: oPushResult
3503: oCall 3578
3505: oPop 1
3507: oReturn
3508: oLocalSpace 0
3510: oGetParam 1
3512: oPushResult
3513: oScopeFindRequire
3514: oPop 1
3516: oGetFromParam 1
3518: oPushResult
3519: oCall 3596
3521: oPop 1
3523: oReturn
3524: oLocalSpace 0
3526: oGetParam 1
3528: oPushResult
3529: oNodeType
3530: oPop 1
3532: oChoice 3536
3534: oJumpForward 3541
3536: Choice Lookup Table
           8   3534
3539: oError 1
3541: oReturn
3542: oLocalSpace 0
3544: oGetParam 1
3546: oPushResult
3547: oNodeType
3548: oPop 1
3550: oChoice 3554
3552: oJumpForward 3559
3554: Choice Lookup Table
           5   3552
3557: oError 3
3559: oReturn
3560: oLocalSpace 0
3562: oGetParam 1
3564: oPushResult
3565: oNodeType
3566: oPop 1
3568: oChoice 3572
3570: oJumpForward 3577
3572: Choice Lookup Table
           6   3570
3575: oError 4
3577: oReturn
3578: oLocalSpace 0
3580: oGetParam 1
3582: oPushResult
3583: oNodeType
3584: oPop 1
3586: oChoice 3590
3588: oJumpForward 3595
3590: Choice Lookup Table
           9   3588
3593: oError 2
3595: oReturn
3596: oLocalSpace 0
3598: oGetParam 1
3600: oPushResult
3601: oNodeType
3602: oPop 1
3604: oChoice 3608
3606: oJumpForward 3613
3608: Choice Lookup Table
           7   3606
3611: oError 6
3613: oReturn
3614: oLocalSpace 0
3616: oGetParam 1
3618: oPushResult
3619: oNodeType
3620: oPop 1
3622: oChoice 3626
3624: oJumpForward 3631
3626: Choice Lookup Table
          12   3624
3629: oError 5
3631: oReturn
3632: oLocalSpace 0
3634: oGetParam 1
3636: oPushResult
3637: oSetResult 5
3639: oPushResult
3640: oNodeGet
3641: oPop 2
3643: oPushResult
3644: oNodeNull
3645: oPop 1
3647: oChoice 3653
3649: oError 8
3651: oJumpForward 3656
3653: Choice Lookup Table
           0   3649
3656: oReturn
3657: oLocalSpace 0
3659: oGetParam 2
3661: oPushResult
3662: oSetResult 5
3664: oPushResult
3665: oNodeGet
3666: oPop 2
3668: oPushResult
3669: oGetParam 1
3671: oPushResult
3672: oNodeEqual
3673: oPop 2
3675: oChoice 3679
3677: oJumpForward 3684
3679: Choice Lookup Table
           1   3677
3682: oError 0
3684: oReturn
3685: oLocalSpace 0
3687: oGetParam 2
3689: oPushResult
3690: oGetParam 1
3692: oPushResult
3693: oNodeEqual
3694: oPop 2
3696: oReturn
3697: oReturn
3698: oLocalSpace 0
3700: oGetParam 2
3702: oPushResult
3703: oGetParam 1
3705: oPushResult
3706: oNodeEqual
3707: oPop 2
3709: oChoice 3713
3711: oJumpForward 3718
3713: Choice Lookup Table
           1   3711
3716: oError 0
3718: oReturn
3719: oLocalSpace 0
3721: oGetParam 1
3723: oPushResult
3724: oGetGlobal 1
3726: oPushResult
3727: oNodeEqual
3728: oPop 2
3730: oReturn
3731: oReturn
3732: oLocalSpace 0
3734: oGetParam 1
3736: oPushResult
3737: oGetGlobal 1
3739: oPushResult
3740: oNodeEqual
3741: oPop 2
3743: oChoice 3747
3745: oJumpForward 3752
3747: Choice Lookup Table
           1   3745
3750: oError 0
3752: oReturn
3753: oLocalSpace 0
3755: oGetParam 1
3757: oPushResult
3758: oSetResult 4
3760: oPushResult
3761: oNodeGetInt
3762: oPop 2
3764: oPushResult
3765: oEmitInt
3766: oPop 1
3768: oReturn
3769: oLocalSpace 0
3771: oGetParam 1
3773: oPushResult
3774: oSetResult 10
3776: oPushResult
3777: oNodeGetInt
3778: oPop 2
3780: oPushResult
3781: oEmitInt
3782: oPop 1
3784: oReturn
