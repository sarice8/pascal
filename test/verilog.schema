
Schema VERILOG Root LibraryUnit Is

%  Object is the initial item.
%  Any object can be made into a LIST, if nodes are appended together.
%  Each object has a LIST or NODE flag.
%  Each object has a unique object number, to save tree to a file.
%  Each object has a NEXT field, so an object can be part of one (1) LIST.

%  I've called range attributes "qLow, qHigh" even though the
%  range can be ascending or descending.  Should change this.

Object ::= nModule
nModule =>
	qIdent:     Integer4
	qPorts:     List      (nPort)           [Pri,Opt]
	qParams:    List      (nAssign)         [Pri,Opt]
	qInputs:    List      (nInputDecl)      [Pri,Opt]
	qOutputs:   List      (nOutputDecl)     [Pri,Opt]
	qInOuts:    List      (nInOutDecl)      [Pri,Opt]
	qRegs:      List      (nRegDecl)        [Pri,Opt]
	qTimes:     List      (nTimeDecl)       [Pri,Opt]
	qIntegers:  List      (nIntegerDecl)    [Pri,Opt]
	qReals:     List      (nRealDecl)       [Pri,Opt]

Object ::= nPort
nPort =>
	qIdent:     Integer4                    [Opt]
	qExpr:      List      (nPortRef)        [Pri,Opt]
	            % if >1 qExpr in List, they are concated refs using {}

Object ::= nPortRef
nPortRef =>
	qIdent:     Integer4
	qLow:       Node      (nConstExpr)      [Pri,Opt]
	qHigh:      Node      (nConstExpr)      [Pri,Opt]

Object ::= nInputDecl
nInputDecl =>
	qLow:       Node      (nConstExpr)      [Pri,Opt]
	qHigh:      Node      (nConstExpr)      [Pri,Opt]
	qVars:      List      (nVar)            [Pri]

Object ::= nOutputDecl
nOutputDecl =>
	qLow:       Node      (nConstExpr)      [Pri,Opt]
	qHigh:      Node      (nConstExpr)      [Pri,Opt]
	qVars:      List      (nVar)            [Pri]

Object ::= nInOutDecl
nInOutDecl =>
	qLow:       Node      (nConstExpr)      [Pri,Opt]
	qHigh:      Node      (nConstExpr)      [Pri,Opt]
	qVars:      List      (nVar)            [Pri]

Object ::= nVar
nVar =>
	qIdent:     Integer4

Object ::= nRegDecl
nRegDecl =>
	qLow:       Node      (nConstExpr)      [Pri,Opt]
	qHigh:      Node      (nConstExpr)      [Pri,Opt]
	qRegVars:   List      (nRegVar)         [Pri]

Object ::= nRegVar
nRegVar =>
	qIdent:     Integer4
	qLow:       Node      (nConstExpr)      [Pri,Opt]  % if present, require
	qHigh:      Node      (nConstExpr)      [Pri,Opt]  % both qLow and qHigh

Object ::= nTimeDecl
nTimeDecl =>
	qRegVars:   List      (nRegVar)         [Pri]

Object ::= nIntegerDecl
nIntegerDecl =>
	qRegVars:   List      (nRegVar)         [Pri]

Object ::= nRealDecl
nRealDecl =>
	qVars:      List      (nVar)            [Pri]


Object ::= nMacromodule
	% TO BE DEFINED

Object ::= nPrimitive
	% TO BE DEFINED

Object ::= nPort
	% TO BE DEFINED

End
