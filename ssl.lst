      %  sccsid = "%W% %G% %U% %P%";
      
   2: title: 'SSL Translator 1.3.2 -- September 14 ''93';
      
      %
      % *****************************************************************************
      %
      %   Syntax/Semantic Language Compiler
      %
      %   by Steve Rice
      %
      %   Aug 31, 1989
      %
      % *****************************************************************************
      %
      %   ssl.ssl             SSL compiler
      %
      %   HISTORY
      % -----------------------------------------------------------------------------
      %   08/31/89 | Steve  | Translated from my SSL processor hardcoded in C
      %   09/08/89 |        | SSL processor now functional, except for error recovery
      %   10/18/89 |        | Added 'title' section
      %   02/03/90 |        | Change to ssl.c: Added debugger output
      %   03/20/91 |        | Change to ssl.c: Increased string table size
      %   03/26/91 |        | Fixed bug in handling of statement ">>value"
      %            |        | Fixed bug in handling of choice using a choice rule
      %            |        | defined later
      %   04/24/91 |        | Change to ssl.c: Increased identifier size to 50 chars
      %   05/05/91 |        | Change to ssl.c: Increased identifier table size to
      %            |        | 600, and moved names out of table. New limit 256 chars.
      %            |        | Added "include" feature.
      %   05/21/91 |        | Multiple "error" sections will use distinct error #'s
      %            |        | Added postprocess optimization: reduce chains of jumps
      %   06/04/91 |        | Change to ssl.c: Write rule addresses to code file
      %   08/23/93 |        | Fix some loops so error recovery can terminate
      %   08/25/93 |        | Reimplement using schema database for symbol table
      %   08/27/93 |        | Add new language features: local variables,
      %            |        | multiple parameters, inout parameters,
      %            |        | expressions with nested function calls.
      %            |        | (User program requires the 2.0 runtime model for new
      %            |        | instructions in generated code).
      %   08/29/93 |        | Reimplement compiler using above new language features
      %            |        | (typically using local variables rather than stacks)
      %   09/14/93 |        | Split into two passes: collect definitions, generate
      %            |        | code for rules.  So user is not required to provide
      %            |        | forward definitions for rules with out parameters.
      %            |        |
      % 
      % *****************************************************************************
      %
      
   2: input:
   2:     pIdent
   2:     pIntLit
   2:     pStrLit
   2:     pMinus      '-'
   2:     pEquals     '='
   2:     pColon      ':'
   2:     pSemiColon  ';'
   2:     pComma      ','
   2:     pLParen     '('
   2:     pRParen     ')'
   2:     pReturn     '>>'
   2:     pBreak      '>'
   2:     pLCurly     '{'
   2:     pRCurly     '}'
   2:     pLSquare    '['
   2:     pRSquare    ']'
   2:     pBar        '|'
   2:     pCall       '@'
   2:     pEmit       '.'
   2:     pStar       '*'
   2:     pErr        '#'
   2:     pQuestion   '?'
   2:     pEof
   2:     pInvalid
      
      %  keywords
      
   2:     pTitle
   2:     pInput
   2:     pOutput
   2:     pType
   2:     pError
   2:     pMechanism
   2:     pInclude
   2:     pRules
   2:     pEnd
   2:     pIn
   2:     pOut
   2:     pInOut
   2:     ;
      
      
   2: output:
      
      %  codes for SSL machine instructions
      
   2:     iJumpForward
   2:     iJumpBack
   2:     iInput
   2:     iInputAny
   2:     iEmit
   2:     iError
   2:     iInputChoice
   2:     iCall
   2:     iReturn
   2:     iSetResult
   2:     iChoice
   2:     iEndChoice
   2:     iPushResult      % push ssl_result on variable stack
   2:     iPop             % (n)  discard n entries from variable stack
   2:     iBreak           % instruction used by debugger
   2:     iGlobalSpace     % (n)  make space for n globals on variable stack (sets initial fp)
   2:     iLocalSpace      % (n)  make space for n locals on variable stack
   2:     iGetParam        % (n)  ssl_result = value of param n
   2:     iGetFromParam    % (n)  ssl_result = value of variable whose address is in param n
   2:     iGetLocal        % (n)  ssl_result = value of local var n
   2:     iGetGlobal       % (n)  ssl_result = value of global var n
   2:     iGetAddrParam    % (n)  ssl_result = addr of param n
   2:     iGetAddrLocal    % (n)  ssl_result = addr of local var n
   2:     iGetAddrGlobal   % (n)  ssl_result = addr of global var n
   2:     iAssign          % variable whose address is pushed on stack = ssl_result; pop stack
      
      %   NOTE: Any instructions added here should also be added to
      %         the system_operations table in ssl.c
      %         as well as optimize_table, list_generated_code.
      
      %  other output
      
   2:     iSpace;          % emit a dummy value; a value will be patched here later
      
   2: error:
   2:    eWrongType
   2:    eNotAType
   2:    eNotAValue
   2:    eNotInput
   2:    eNotOutput
   2:    eNotARule
   2:    eNotAnErrSig
   2:    eNotInLoop
   2:    eChoiceOpRuleOutOfPlace
   2:    eUndeclRuleParamsNotSupported
   2:    eNotTyped
   2:    eIdentNotAllowedInExpr
   2:    eIllegalLvalue
   2:    eNotRuleOrGlobalDefn
   2:    eRuleBodyAlreadyDeclared
   2:    eReturnTypeMismatch
   2:    eParameterMismatch
   2:    eUndeclaredIdentifier
   2:    eAliasNotAllowed
   2:    eCantInitGlobalVarsYet
   2:    eRedeclaration
   2:    ;
      
      
   2: include 'ssl_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nOutput
   2: 	nError
   2: 	nType
   2: 	nValue
   2: 	nMechanism
   2: 	nOperation
   2: 	nRule
   2: 	nVariable
   2: 	nParam
   2: 	nInParam
   2: 	nOutParam
   2: 	nInOutParam
   2: 	nLocal
   2: 	nGlobal
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qParentScope
   2: 	qDecls
   2: 	qIdent
   2: 	qValue
   2: 	qType
   2: 	qParamScope
   2: 	qScope
   2: 	qAddrDefined
   2: 	qTypeDefined
   2: 	qAddr
   2: 	;
      
      
      
   2: type boolean:
   2:     false    = 0
   2:     true     = 1
   2:     no       = 0
   2:     yes      = 1;
      
   2: type warning:
   2:     wRuleMissingAtSign
   2:     wReturnValueIgnored
   2:     ;
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:     Null = 0
   2:     ;
      
   2: type kind:
   2:     kIllegal        % not an identifier
   2:     kUnknown        % new identifier
   2:     kInput
   2:     kOutput
   2:     kError
   2:     kType
   2:     kVal            % an element of a type
   2:     kMech
   2:     kOp
   2:     kRule
   2:     kVar
   2:     ;
      
   2: type pass:
   2:     CollectDefinitionsPass
   2:     CodeGenerationPass
   2:     ;
      
   2: mechanism scanner_mech:
   2:     oResetInput               % reset input to start (if required)
   2:     oStartListing             % start listing if requested; collect debug line numbers
   2:     ;
      
   2: mechanism warning_mech:
   2:     oWarning (warning);       % issue warning message,
                                    % continue normally (not in error recovery mode)
      
   2: mechanism more_errors_mech:
   2:     oUndeclaredRule (int id)     % Report that rule id was referenced, but never
                                       % declared (i.e. no body).  No error recovery mode.
   2:     ;
      
   2: mechanism emit_mech:
   2:     oEmitInt (int)            % emit an integer into the generated code
   2:     Here >> int               % return the current address in the generated code
   2:     oPatch (int addr, int val) % patch an integer into any address in the generated code
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     equal_zero (int) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ;
      
   2: mechanism shortForm:          % keep a table of string shortforms for input/output
   2:     oShortFormAdd (Node)      % associate current StrLit token with nDeclaration
   2:     oShortFormLookup (out Node);   % look up strLit, return associated nDeclaration
      
      
      % keep different patch stacks, each with a stack of position markers:
      
   2: type patchStack:
   2:     patchChoiceTableAddr    % addr where pointer to table is stored
   2:     patchChoiceTable        % build up choice table here (value,addr)
   2:     patchChoiceExit         % addrs where jumps at end of each option are
   2:     patchCall               % (addr,ident) where calls to undefined rules are
   2:     patchLoop               % addr of start of a loop
   2:     patchBreak;             % addrs where jumps out of a loop are
      
   2: mechanism patch_mech:
   2:     oPatchMark(patchStack)             % mark current position on a stack
   2:     oPatchAtMark(patchStack) >> boolean     % true if all items since
                                                 %   last mark are popped
                                                 %   (mark is dropped if true)
   2:     oPatchPushHere(patchStack)         % put current address on a patch stack
   2:     oPatchPushInt (patchStack, int)    % put int on a patch stack
   2:     oPatchPushIdent(patchStack)        % put last ident on a patch stack
   2:     oPatchAnyEntries(patchStack) >> boolean    % are there any entries?
   2:     oPatchPopFwd(patchStack)           % fix table, storing here-x at x,
                                             %   where x is on top of the stack
   2:     oPatchPopBack(patchStack)          % emit here-x here (advance 'here')
   2:     oPatchPopValue(patchStack)         % emit x here (advance 'here')
   2:     oPatchPopCall(patchStack);         % fix table, storing value of ident i
                                             %   at x, where i is on top of stack
                                             %   and x is under it  (pop both)
      
   2: mechanism titleMech:
   2:     oTitleSet;          % define title to be strlit just read
      
   2: mechanism doc:         % display documentary info
   2:     oDocNewRule;        % print "Rule <token>"
      
   2: mechanism include_mech:
   2:     oInclude;           % include the SSL file whose name is in the
                             % string token just accepted
      
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeNext (inout Node)               % advance Node to next in list    
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin (out Node)             % create a new scope.  Subsequent declarations will go here.
                                             % Sets nScope's qParent to parent scope.
   2:     oScopeOpen (Node)                  % open an existing scope.  Its definitions become visible again.
   2:     oScopeEnd                          % end current scope.  Subsequent declarations will go to parent scope.
   2:     oScopeDeclare (Node)               % declare node in current scope
   2:     oScopeFind (out Node) >> boolean   % find declaration of last accepted identifier
   2:     oScopeFindInCurrentScope >> Node   % find declaration of last accepted identifier, only in current scope
   2:     oScopeFindRequire (out Node)       % find declaration of last accepted identifier.
                                             % Go into error recovery if not found.
   2:     ;
      
      
   2: mechanism install_mech:
   2:     oInstallSystemOperations (inout int next_operation)   % Predefine some operations
   2:     oInstallSystemTypes (out Node int_type, out Node token_type)   % Predefine some types.
                                                    % Return nType declaration of types int, token.
   2:     ;
      
   2: mechanism write_mech:
   2:     oWriteTables (Node global_scope);   % Write files, given global scope of symbol table.
      
   2: rules
      
      % ---------------------- Global Variables --------------------
      
   2: pass    CurrentPass         % which of two passes are we in?
   2: Node    IntType             % nType node for built-in "int" type
   2: Node    TokenType           % nType node for built-in "token" type (input tokens)
   2: Node    CurrentRule         % nRule node for current rule being declared
   2: int     NumGlobals          % number of global variables in program
   2: int     NumLocals           % number of local variables in current rule
   2: int     RuleLocalSpaceAddr  % address of LocalSpace argument for rule
   2: int     NextOperation       % code for next semantic operation decl
   2: int     NextError           % next error code
   2: Node    GlobalScope         % global nScope
      
      % -------------------- Forward Declarations ------------------
      
   2: Section >> boolean;
   2: ValueList (node_type class, inout int value, boolean str_alias_allowed, Node t);
   2: OperationDefinition >> boolean;
   2: RuleSectionDefinition >> boolean;
   2: RuleBodyDefinition (Node r);
   2: RuleRedefinition (Node r);
   2: Statement >> boolean;
   2: CallOperation (Node o);
   2: ActualParams (Node r) >> int;
   2: CallRule (Node r);
   2: CallUndefinedRule;
   2: Assignment (Node i);
   2: CopyChoiceTable (int num_options);
   2: Expr (out Node t);
   2: Lvalue (out Node t);
   2: Lvalue_HaveIdent (Node i, out Node t);
   2: Const (out Node t) >> int;
   2: IntConst >> int;
   2: LookupType (out Node i);
   2: LookupInput (out Node i);
   2: LookupOutput (out Node i);
   2: LookupValue (out Node i);
   2: LookupError (out Node i);
   2: RequireType (Node i);
   2: RequireInput (Node i);
   2: RequireOutput (Node i);
   2: RequireValue (Node i);
   2: RequireError (Node i);
   2: RequireRule (Node i);
   2: RequireNoType (Node r);
   2: RequireMatchValueType (Node v, Node t);
   2: MatchType (Node t1, Node t2) >> boolean;
   2: RequireMatchType (Node t1, Node t2);
   2: MatchIntType (Node t) >> boolean;
   2: RequireMatchIntType (Node t);
   2: EmitValue (Node i);
   2: EmitAddr (Node v);
      
      % ------------------------- Main Parser ----------------------
      
   2: ProcessSSL:
   4:     @CollectDefinitions     % first pass through input
   6:     oResetInput
   7:     @CodeGeneration         % second pass through input
  10:     ;
      
      
  10: CollectDefinitions:
      
  12:     CurrentPass = CollectDefinitionsPass
      
  18:     oScopeBegin (GlobalScope)
      
  24:     NextError = 0
  30:     NextOperation = 0
      
  36:     oInstallSystemOperations (NextOperation)
  42:     oInstallSystemTypes (IntType, TokenType)
      
  51:     NumGlobals = 0                 % Count global variables
      
  57:     {[ @Section
  60:         | true:
  61:         | *:  >
  68:     ]}
      
  70:     oScopeEnd
  72:     ;
      
      
  72: CodeGeneration:
      
  74:     CurrentPass = CodeGenerationPass
      
  80:     oScopeOpen (GlobalScope)   % Re-open scope
      
  86:     oStartListing   % Listing done in second pass, so it contains
                          % addresses of generated code.
                          % Also, collects line numbers for debugging.
      
          % Make space for global variables (inc because addressed from 1, not 0)
  87:     inc (NumGlobals)   .iGlobalSpace  oEmitInt(NumGlobals)
      
 101:     {[ @Section
 104:         | true:
 105:         | *:  >
 112:     ]}
      
 114:     @FixForwardCalls
 116:     @VerifyAllRulesDeclared
      
 118:     oScopeEnd
      
 119:     oWriteTables (GlobalScope)
 126:     ;
      
      
      % Returns true if a section found
      
 126: Section >> boolean:
      
 128:     [ CurrentPass
 131:         | CollectDefinitionsPass :
 132:             [
 132:                 | pTitle:      @Title
 136:                 | pInput:      @Input
 140:                 | pOutput:     @Output
 144:                 | pError:      @Error
 148:                 | pType:       @Type
 152:                 | pInclude:    @Include
 156:                 | pMechanism:  @Mechanism
 160:                 | pRules:      @Rules
 164:                 | pEof:        >> false      % end of file
 169:             ]
      
 191:         | CodeGenerationPass :
 193:             [
 193:                 | pTitle, pInput, pOutput, pError, pType, pMechanism :
 195:                                @SkipSection
      
 197:                 | pInclude:    @Include
 201:                 | pRules:      @Rules
 205:                 | pEof:        >> false      % end of file
 210:             ]
 232:     ]
 240:     >> true
 244:     ;
      
 244: SkipSection:
 246:     {[
 246:         | ';' : >
 250:         | * :   ?
 256:     ]};
      
      % ------------------------- Sections -------------------------
      
 259: Title:
 261:     ':' pStrLit oTitleSet ';' ;
      
      % Input tokens are values of the predefined "token" type
 269: Input:
 271:     int  next_value
 271:     ':'
 273:     next_value = 0
 279:     @ValueList (nValue, next_value, true, TokenType)
 295:     ';';
      
 298: Output:
 300:     int  next_value
 300:     ':'
 302:     next_value = 0
 308:     @ValueList (nOutput, next_value, true, Null)
 324:     ';';
      
 327: Error:
 329:     ':'
 331:     @ValueList (nError, NextError, false, Null)
 347:     ';';
      
      
 350: Type:
 352:     Node  t
 352:     int   next_value
      
 352:     pIdent
 354:     [ oScopeFind (t)
 361:         | false:
 362:             t = oNodeNew (nType)  oNodeSetInt (t, qIdent, LAST_ID)
 383:             oScopeDeclare (t)
      
 389:         | true:
      
                  % Extend existing definition (to add more values)
                  % Note, new values will start from 0 again unless told otherwise!
      
 391:             @RequireType (t)
 398:     ]
      
 406:     ':'
 408:     next_value = 0
 414:     @ValueList (nValue, next_value, false, t)
 430:     ';';
      
      
 433: Include:
 435:     pStrLit oInclude;
      
 439: Mechanism:
 441:     Node  m
      
 441:     pIdent
 443:     m = oNodeNew (nMechanism)  oNodeSetInt(m, qIdent, LAST_ID)
 464:     oScopeDeclare (m)
      
 470:     ':'
 472:     {[ @OperationDefinition
 475:         | true:
 476:         | *:  >
 483:     ]}
 485:     ';' ;
      
 488: Rules:
 490:     {[ @RuleSectionDefinition
 493:         | true:
 494:         | *:  >
 501:     ]}
 503:     pEnd ;
      
      
      % ------------------------- Value List ----------------------
      
 506: ValueList (node_type class, inout int value, boolean str_alias_allowed, Node t):
 508:     Node  p, t2
 508:     {[
 508:         | pIdent:
 510:             p = oNodeNew (class)  oNodeSetInt (p, qIdent, LAST_ID)
      
 531:             [ class
 534:                 | nValue :    oNodeSet (p, qType, t)
 547:                 | * :
 552:             ]
      
 552:             [ | pStrLit:
 554:                 [ str_alias_allowed
 557:                     | true:  oShortFormAdd (p)   % Associate short form with declaration
 564:                     | *:     #eAliasNotAllowed
 571:                 ]
 571:               | *:
 576:             ]
      
 576:             [ | '=':       value = @Const(t2)
 589:                            [ @MatchType (t, t2)
 600:                                | true :
 601:                                | false :  @RequireMatchIntType(t2)
 610:                            ]
 618:               |*:
 623:             ]
 623:             oNodeSetInt (p, qValue, value)
 635:             inc (value)
      
 641:             oScopeDeclare (p)
      
 647:         | *:  >
 654:     ]};
      
      % ------------------------- Variables ------------------------
      
      %  Declare a list of variables, given class (local/global),
      %  nType, and a counter used to assign addresses for that class.
      
 657: DeclareVariables (node_type class, Node t, inout int addr_counter):
 659:     Node  i
 659:     {
 659:         pIdent
 661:         i = oNodeNew(class)  oNodeSetInt(i, qIdent, LAST_ID)
 682:         oNodeSet (i, qType, t)
      
              % Assign address to variable
 694:         inc (addr_counter)   oNodeSetInt (i, qAddr, addr_counter)
      
 712:         [ oNodeNull( oScopeFindInCurrentScope )
 718:             | false : #eRedeclaration
 721:             | * :
 726:         ]
 726:         oScopeDeclare (i)
      
              % optional initialization
 732:         [ | '=' :
      
                  % Unfortunately I can't allow initialization of global vars yet.
                  % This is only because @SkipGlobals would need to know how to skip the
                  % initialization expression, which is a little hard. It could be implemented
                  % but didn't do it yet.
 734:             [ class
 737:                 | nGlobal :  #eCantInitGlobalVarsYet
 740:                 | * :
 745:             ]
      
 745:             Node tv, t2
 745:             @Lvalue_HaveIdent(i,tv)
 755:             .iPushResult
 757:             @Expr(t2)  @RequireMatchType(tv,t2)
 774:             .iAssign
 776:           | * :
 781:         ]
      
 781:         [ | ',' :
 783:           | * :   >
 790:         ]
 790:     };
      
      %  Declare a list of global variables, given nType.
      
 793: DeclareGlobals (Node t):
 795:     @DeclareVariables (nGlobal, t, NumGlobals);
      
      %  Declare a list of local variables, given nType.
      
 809: DeclareLocals (Node t):
 811:     @DeclareVariables (nLocal, t, NumLocals);
      
      
      %  Skip list of global variables, during second pass.
      
 825: SkipGlobals:
 827:     {
 827:         pIdent
 829:         [ | ',' : | * : > ]
 838:     };
      
      
      %  Defines formal parameters (if any) in current scope.
      %  The caller should have called oScopeBegin to begin a
      %  scope just for parameters.  (This gives a simple way
      %  to check if an operation/rule has parameters).
      %  Does not end the scope.
      %
      %  nParam's may be named or unnamed (qIdent == 0)
      %
      %  Parameters are assigned addresses in reverse order
      %  from n to 1.  This is for efficient stack access.
      %  E.g. func(a,b,c):  address of a:3, b:2, c:1
      %  (Later I would like to instead push actuals in reverse order)
      
 841: FormalParamDefinition (Node scope):
 843:     int        num_params
 843:     node_type  dir
 843:     Node       p, t
      
 843:     [ | '(' :
 845:       | *   : >>
 851:     ]
      
 851:     num_params = 0      % Count the parameters, to assign addresses
      
 857:     {
 857:         inc (num_params)
      
              % parameter direction
 863:         [
 863:             | pIn :     dir = nInParam
 871:             | pOut :    dir = nOutParam
 879:             | pInOut :  dir = nInOutParam
 887:             | * :       dir = nInParam
 902:         ]
      
              % parameter type
 902:         pIdent  @LookupType (t)
      
 911:         p = oNodeNew(dir)
 921:         oNodeSet (p, qType, t)
      
              % parameter name
 933:         [
 933:             | pIdent :  oNodeSetInt (p, qIdent, LAST_ID)   % named parameter
 946:             | * :       % unnamed parameter
 951:         ]
      
 951:         oScopeDeclare (p)       % declare nParam
      
 957:         [
 957:             | ',' :
 959:             | * :   >
 966:         ]
 966:     }
      
 968:     ')'
      
          %  Now go back and assign addresses to the parameters
      
 970:     p = oNodeGet (scope, qDecls)
      
 983:     {
 983:         [ equal_zero (num_params)
 990:             | true:  >
 993:             | false:
 995:         ]
      
1003:         oNodeSetInt (p, qAddr, num_params)
      
1015:         dec (num_params)
1021:         oNodeNext (p)
1027:     }
1030:     ;
      
      %  Redefine formal parameters, perhaps during declaration of actual rule (with body).
      %  Previously, parameters were declared by a forward declaration or by usage.
      %  Ensure that types match.  Update parameter names to new names given.
      %
      %  Previous parameter nScope is given, and scope has been opened.
      %  (Addresses were assigned previously, no need to do it again).
      %  NOTE: I probably don't really want to open the previous scope since the
      %  old param names are not valid.
      
1030: FormalParamRedefinition (Node scope):
1032:     Node      p
1032:     node_type dir, dir2
1032:     Node      t, t2
      
1032:     p = oNodeGet (scope, qDecls)       % previous param declarations
      
1045:     [ | '(' :
1047:       | *   : [ oNodeNull(p)
1059:                   | true :
1060:                   | * :    #eParameterMismatch
1067:               ]
1067:               >>
1068:     ]
      
1068:     {
1068:         [ oNodeNull(p)
1075:             | true :    #eParameterMismatch  % too many params given this time
1078:             | false :
1080:         ]
      
1088:         dir = oNodeType(p)         % previous direction
              % parameter direction
1098:         [
1098:             | pIn :     dir2 = nInParam
1106:             | pOut :    dir2 = nOutParam
1114:             | pInOut :  dir2 = nInOutParam
1122:             | * :       dir2 = nInParam
1137:         ]
1137:         [ equal_node_type (dir, dir2)
1147:             | true :
1148:             | * :     #eParameterMismatch
1155:         ]
      
1155:         t = oNodeGet (p, qType)    % previous type
1168:         pIdent  @LookupType(t2)    % parameter type
1177:         @RequireMatchType (t, t2)
      
              % parameter name
1187:         [
1187:             | pIdent :  oNodeSetInt (p, qIdent, LAST_ID)
1200:             | * :       oNodeSetInt (p, qIdent, 0)   % currently unnamed
1217:         ]
      
1217:         oNodeNext (p)
      
1223:         [
1223:             | ',' :
1225:             | * :   >
1232:         ]
1232:     }
      
1234:     ')'
      
1236:     [ oNodeNull(p)
1243:         | true :
1244:         | * :    #eParameterMismatch   % Not enough params given this time
1251:     ]
1252:     ;
      
      
      % ------------------------- Operations -----------------------
      
      %  Returns true if definition found
      
1252: OperationDefinition >> boolean:
1254:     Node  op, s, t
1254:     [
1254:         | pIdent:
1256:         | *:        >> false
1264:     ]
      
1264:     op = oNodeNew (nOperation)  oNodeSetInt (op, qIdent, LAST_ID)
1285:     oNodeSetInt (op, qValue, NextOperation)
1297:     inc (NextOperation)
      
1303:     oScopeBegin (s)   % parameter scope
      
1309:     @FormalParamDefinition(s)
      
1316:     oNodeSet (op, qParamScope, s)
      
1328:     [ | '>>': pIdent  @LookupType (t)   oNodeSet (op, qType, t)
1351:       |*:     %  qType is Null by default
1356:     ]
      
1356:     oScopeEnd      % parameter scope
      
1357:     oScopeDeclare (op)
      
1363:     >> true
1367:     ;
      
      % ------------------------- Rules ----------------------------
      
      %  Parse a definition in the rules secition.
      %  This could be:
      %      a rule definition, a rule prototype, or a global variable definition.
      %  Returns true if one of the above found
      
1367: RuleSectionDefinition >> boolean:
1369:     Node  i
1369:     [
1369:         | pIdent:
1371:         | * :        >> false
1379:     ]
      
1379:     [ oScopeFind (i)
1386:         | false:     @RuleDefinition
1389:         | true:
1391:             [ oNodeType(i)
1398:                 | nType :  [ CurrentPass
1402:                                | CollectDefinitionsPass :  @DeclareGlobals(i)
1410:                                | CodeGenerationPass :      @SkipGlobals
1414:                            ]
1422:                 | nRule :  @RuleRedefinition(i)    % Probably body of fwd declared rule
1431:                 | * :      #eNotRuleOrGlobalDefn  >> true  % True to skip to next
1443:             ]
1443:     ]
      
1451:     >> true
1455:     ;
      
      
      % Skip a rule body during first pass (may begin with ':', or may not be a body)
1455: SkipRule:
1457:     {[
1457:         | ';' : >
1461:         | * :   ?
1467:     ]};
      
      %   Define the parameters, and possibly the body, of a rule
      %   that has not been defined previously.
      %   Just parsed ident of rule.
      
1470: RuleDefinition:
1472:     Node  r
1472:     Node  s
1472:     Node  t
      
1472:     oDocNewRule
      
1473:     r = oNodeNew(nRule)  oNodeSetInt(r, qIdent, LAST_ID)
1494:     CurrentRule = r
      
      
1500:     oScopeBegin (s)                 % param scope
1506:     @FormalParamDefinition(s)
1513:     oNodeSet (r, qParamScope, s)    % leave scope open, to access params during rule
      
1525:     [ | '>>':   pIdent  @LookupType(t)  oNodeSet (r, qType, t)
1548:       | * :
1553:     ]
      
1553:     [ CurrentPass
1556:         | CollectDefinitionsPass :
1557:             @SkipRule
1559:         | CodeGenerationPass :
1561:             [
1561:                 | ':' :  @RuleBodyDefinition (r)
1570:                 | * :    % No body; a forward declaration of the rule.
1575:             ]
1575:             ';'
1577:     ]
      
      
1585:     oScopeEnd            % parameters scope (already linked to nRule above)
      
1586:     oScopeDeclare (r)    % declare nRule
                               % (Note, can't call rule recursively since not defined until end)
1593:     ;
      
      
      % Given the nRule node
      
1593: RuleBodyDefinition (Node r):
1595:     Node  s
      
1595:     oNodeSetInt (r, qValue, Here)      % Address of rule is now defined
1606:     oNodeSetBoolean (r, qAddrDefined, yes)
      
1618:     oScopeBegin (s)       % rule variables scope
      
1624:     NumLocals = 0
      
1630:     .iLocalSpace 
1632:     RuleLocalSpaceAddr = Here   .iSpace
      
1639:     {[ @Statement
1642:         | true:
1643:         | *:  >
1650:     ]}
      
1652:     .iReturn
      
1654:     oPatch (RuleLocalSpaceAddr, NumLocals)
      
1663:     oScopeEnd            % rule variables scope
1664:     oNodeSet (r, qScope, s)
      
1677:     ;
      
      
      %   Redefine a rule (to provide body of a forward-declared rule).
      %   Given the existing nRule declaration.
      
1677: RuleRedefinition (Node r):
1679:     Node  s, p
1679:     Node  t, t2
      
1679:     [ oNodeGetBoolean (r, qAddrDefined)
1689:         | yes :   #eRuleBodyAlreadyDeclared  >>
1693:         | * :
1698:     ]
      
1698:     oDocNewRule
      
1699:     CurrentRule = r
      
1705:     s = oNodeGet(r, qParamScope)
1718:     oScopeOpen (s)   % Make the existing parameters visible.
                           % (Actually, probably don't want to do this).
      
1724:     @FormalParamRedefinition (s)   % verify types, update param names
      
          % Verify return type matches previous declaration/usage
1731:     t = oNodeGet (r, qType)
1744:     [ | '>>':   pIdent  @LookupType(t2)  @RequireMatchType(t, t2)
1765:       | * :     @RequireMatchType(t, Null)
1780:     ]
      
1780:     [ CurrentPass
1783:         | CollectDefinitionsPass :
1784:             @SkipRule
1786:         | CodeGenerationPass :
1788:             [
1788:                 | ':' :  @RuleBodyDefinition (r)
1797:                 | * :    % No body; a forward declaration of the rule.
1802:             ]
1802:             ';'
1804:     ]
      
1812:     oScopeEnd            % parameters scope (already linked to nRule)
1814:     ;
      
      % ------------------------- Statements -----------------------
      
      %  Returns true if statement found
      
1814: Statement >> boolean:
1816:     Node  i
1816:     Node  t, t2
1816:     Node  s
      
1816:     [
1816:         | pStrLit:           % input alias
1818:             oShortFormLookup(i)  @RequireInput(i)
1831:             .iInput @EmitValue(i)
      
1840:         | pIdent:            % input or operation
1842:             oScopeFindRequire(i)
1848:             [ oNodeType(i)
      
      %  | nInput:      .iInput @EmitValue(i)
      
1855:                 | nOperation:  @RequireNoType(i) @CallOperation(i)
      
1870:                 | nType:       @DeclareLocals(i)
      
1879:                 | nValue:      @RequireInput(i)
1888:                                .iInput @EmitValue(i)
      
1897:                 | *:           @Assignment(i)
1913:             ]
      
1913: 	| '#':
1915:             pIdent  @LookupError(i)
1924:             .iError @EmitValue(i)
      
1933: 	| '.':
1935: 	    [ | pIdent:    @LookupOutput(i)
1944:               | pStrLit:   oShortFormLookup(i) @RequireOutput(i)
1959:             ]
1967:             .iEmit @EmitValue(i)
      
1976: 	| '@':
1978: 	    pIdent
1980:             [ oScopeFind(i)
1987:                 | true :
1988:                     @RequireRule(i)  @RequireNoType(i)
2002:                     @CallRule(i)
      
2009:                 | false :
2011:                     @CallUndefinedRule
2013:             ]
      
2021: 	| '>>':
2023:             t = oNodeGet (CurrentRule, qType)
2036: 	    [ oNodeNull(t)
2043:                 | true :
2044:                 | * :       @Expr(t2)  @RequireMatchType(t, t2)
2066:             ]
2066:             .iReturn
      
2068: 	| '{':
2070:             oScopeBegin( s )
2076:             oPatchPushHere (patchLoop)
2082:             oPatchMark (patchBreak)
2088: 	    {[ @Statement
2091: 		| true:
2092: 		| *:  >
2099: 	    ]}
2101: 	    '}'
2103:             .iJumpBack
2105:             oPatchPopBack (patchLoop)
      
                  % Fix up break statements
2111:             {[ oPatchAtMark (patchBreak)
2118:                 | false :    oPatchPopFwd (patchBreak)
2125:                 | * :        >
2132:             ]}
2134:             oScopeEnd
      
2135: 	| '>':
2137:             [ oPatchAnyEntries (patchLoop)
2144:                 | false:  #eNotInLoop
2147:                 | *:
2152:             ]
2152:             .iJumpForward  oPatchPushHere (patchBreak)  .iSpace
      
2162: 	| '?':  .iInputAny
      
2166: 	| '[':  @Choice
      
2170:         | *:    >> false    % Not a statement
2196:     ]
2196:     >> true ;
      
      
      %  Given nOperation
      
2200: CallOperation (Node o):
2202:     int  num_params
      
2202:     num_params = @ActualParams (o)
      
2213:     @EmitValue(o)        % call operation
      
2220:     [ equal_zero (num_params)
2227:         | true :
2228:         | false :     .iPop oEmitInt(num_params)
2238:     ]
2247:     ;
      
      
      %  Given nOperation or nRule.  Returns number of parameters.
      
2247: ActualParams (Node r) >> int:
      
2249:     int   num_params
2249:     Node  param_scope, p
2249:     Node  t, t2
      
2249:     param_scope = oNodeGet (r, qParamScope)  % Always present, but might contain no nParams
2262:     p = oNodeGet (param_scope, qDecls)
      
2275:     [ oNodeNull(p)
      
2282:         | true :    >> 0
2286:         | false :
2288:     ]
      
2296:     num_params = 0
      
2302:     '('
      
2304:     {
2304:         inc (num_params)
      
              %  ----------------------------
      
              %  One actual parameter.
      
2310:         t = oNodeGet (p, qType)    % formal param type
      
2323:         [ oNodeType(p)
2330:             | nInParam :                @Expr (t2)
2338:             | nOutParam, nInOutParam :  @Lvalue (t2)
2347:         ]
              
2357:         @RequireMatchType (t, t2)
2367:         .iPushResult
      
              %  ----------------------------
      
2369:         oNodeNext (p)
      
2375:         [ oNodeNull (p)
2382:             | true :   >
2385:             | false :
2387:         ]
      
2395:         ','
2397:     }
      
2399:     ')'
      
2401:     >> num_params
2405:     ;
      
      
      
      %  Called for a nRule whose parameter types are defined.
      %  The rule address might not yet be known.
      
2405: CallRule (Node r):
2407:     int  num_params
      
2407:     num_params = @ActualParams(r)
      
2418:     [ oNodeGetBoolean (r, qAddrDefined)     % A call to a forward-declared rule?
2428:         | yes :   .iCall @EmitValue(r)
2438:         | no :    .iCall oPatchPushHere(patchCall) 
2448:                          oPatchPushInt (patchCall, oNodeGetInt(r, qIdent))
2464:                          .iSpace
2466:     ]
      
          % Pop actual params
2474:     [ equal_zero (num_params)
2481:         | true :
2482:         | false :     .iPop oEmitInt(num_params)
2492:     ]
2501:     ;
      
      
      %  Implicitly declare a rule that has not previously been declared.
      %  Rule name is last accepted identifier.
      %  Implicitly declares InParam parameters, and no return type.
      %
      %  Rule is declared in GlobalScope.
      
2501: CallUndefinedRule:
2503:     Node  r, s, t, p
2503:     int   id, num_params, addr
      
          % Global scope opened so that rule will be declared in it,
          % and so the parameters we declare for the rule will have the
          % correct ParentScope
      
2503:     oScopeOpen (GlobalScope)
      
      
2509:     r = oNodeNew (nRule)  id = LAST_ID  oNodeSetInt (r, qIdent, id)
2536:     oNodeSetBoolean(r, qAddrDefined, false)
      
          % Implicit parameters
      
2548:     oScopeBegin (s)
2554:     oNodeSet (r, qParamScope, s)
      
2566:     num_params = 0
      
2572:     [ | '(' :
      
2574:         {
2574:             @Expr(t)
2581:             .iPushResult
2583:             p = oNodeNew (nInParam)  oNodeSet(p, qType, t)
2605:             oScopeDeclare(p)
2611:             inc(num_params)
      
2617:             [ | ',' :
2619:               | * :   >
2626:             ]
2626:         }
2628:         ')'
      
              % Assign parameter addresses
      
2630:         addr = num_params
2636:         p = oNodeGet (s, qDecls)
2649:         {
2649:             [ oNodeNull(p)
2656:                 | true :  >
2659:                 | false :
2661:             ]
2669:             oNodeSetInt (p, qAddr, addr)
2681:             dec (addr)
2687:             oNodeNext (p)
2693:         }
      
2695:       | * :
2700:     ]
      
2700:     oScopeEnd    % param scope
2701:     oScopeDeclare (r)
      
2707:     oScopeEnd    % GlobalScope
      
      
          % Now call rule
      
2708:     .iCall
2710:     oPatchPushHere (patchCall)
2716:     oPatchPushInt (patchCall, id)
2725:     .iSpace
      
2727:     [ equal_zero (num_params)
2734:         | true :
2735:         | * :     .iPop oEmitInt(num_params)
2748:     ];
      
      
      %  Already parsed pIdent and determined it is not a rule/type/operation/value.
      
2749: Assignment (Node i):
2751:     Node t, t2
2751:     @Lvalue_HaveIdent(i,t)
2761:     .iPushResult
2763:     '='
2765:     @Expr(t2)  @RequireMatchType(t,t2)
2782:     .iAssign
2785:     ;
      
2785: Choice:
2787:     int    num_options    % count the number of options in the choice
2787:     kind   choice_kind    % input choice, expr choice, expr undefined type choice
2787:     Node   choice_type    % type of expr choice
2787:     Node   t
2787:     Node   i
2787:     Node   s
2787:     int    val
      
          %  Determine if this is an input choice or a value choice.
          %  For value choice, determine type of value (if known).
      
2787:     [
2787:         | '|' :
2789:             .iInputChoice   choice_kind = kInput
      
2797:         | * :
2802:             @Expr(choice_type)  .iChoice
      
                  % Expr indicates forward use of undefined rule by returning type Null.
                  % We will indicate this for ourselves by setting kind to kUnknown.
      
2811:             [ oNodeNull(choice_type)
2818:                 | true :    choice_kind = kUnknown   % flag that this is expr choice, unknown type
2825:                 | false:    choice_kind = kType      % flag that this is expr choice, known type
2833:             ]
      
2841:             '|'
2843:     ]
      
2843:     oPatchPushHere (patchChoiceTableAddr)
2849:     .iSpace
      
2851:     oPatchMark (patchChoiceTable)    % build up choice table in this stack
2857:     oPatchMark (patchChoiceExit)     % remember end of each option
2863:     num_options = 0                  % count options
      
2869:     {
2869:         [
2869:             | '*':     % default code (must be last option)
2871:                 ':'
2873:                 @CopyChoiceTable (num_options)
      
2880:                 oScopeBegin( s )
2886:                 {[ @Statement
2889:                     | true :
2890:                     | *: >
2897:                 ]}
2899:                 oScopeEnd
2900:                 ']'
      
                      % Finish up
2902:                 @FixChoiceExits
2904:                 >>
      
2905:             | * :
2910:                 {
2910:                     [ choice_kind
      
2913:                         | kType :         % expr choice
2914:                             val = @Const(t)
2925:                             @RequireMatchType (choice_type, t)
      
2935:                         | kUnknown :      % expr choice, type not known yet
2937:                             val = @Const(choice_type)
      
                                  % NOTE: now that we know type of forward rule in expr, we could update nRule
      
                                  % Now know type
2948:                             choice_kind = kType
      
2954:                         | kInput :        % input choice
2956:                             val = @Const(t)
2967:                             @RequireMatchTokenType(t)
2974:                     ]
      
2984:                     oPatchPushHere (patchChoiceTable)
2990:                     oPatchPushInt  (patchChoiceTable, val)
2999:                     inc (num_options)
      
3005:                     [
3005:                         | ':' :   >
3009:                         | ',' :
3011:                     ]
3019:                 }
3021:         ]
      
              % Code for this option:
3021:         oScopeBegin( s )
3027:         {[ @Statement
3030:             | true:
3031:             | *:  >
3038:         ]}
3040:         oScopeEnd
3041:         [
3041:             | ']' :     % end of choice, no default
3043:                 .iJumpForward
3045:                 oPatchPushHere (patchChoiceExit) .iSpace
3053:                 @CopyChoiceTable (num_options)
      
3060:                 .iEndChoice
      
3062:                 @FixChoiceExits
3064:                 >>
      
3065:             | '|' :     % more options follow
3067:                 .iJumpForward
3069:                 oPatchPushHere (patchChoiceExit) .iSpace
3077:         ]
3085:     };
      
      
      %  Install choice table here, given number of options.
      %  Order of options is opposite that in the source (note for error recovery)
      
3088: CopyChoiceTable (int num_options):
3090:     oPatchPopFwd (patchChoiceTableAddr)    % fix pointer to table
3096:     oEmitInt (num_options)                 % # table entries
3102:     {[ oPatchAtMark (patchChoiceTable)
3109:         | false :
3110:             oPatchPopValue (patchChoiceTable)
3116:             oPatchPopBack (patchChoiceTable)
3122:         | * :   >
3129:     ]};
          
      % Fix jumps from end of each option to end of choice
      
3132: FixChoiceExits:
3134:     {[ oPatchAtMark (patchChoiceExit)
3141:         | false:    oPatchPopFwd (patchChoiceExit)
3148:         | *:        >
3155:     ]};
      
3158: FixForwardCalls:
3160:     {[ oPatchAnyEntries (patchCall)
3167:         | true :    oPatchPopCall (patchCall)
3174:         | * :       >
3181:     ]};
      
      % Ensure that there are no rules referenced but never declared
3184: VerifyAllRulesDeclared:
3186:     Node  n
3186:     n = oNodeGet (GlobalScope, qDecls)
3199:     {
3199:         [ oNodeNull(n)
3206:             | true : >
3209:             | false :
3211:         ]
      
3219:         [ oNodeType(n)
3226:             | nRule :
3227:                 [ oNodeGetBoolean (n, qAddrDefined)
3237:                     | false :   oUndeclaredRule(oNodeGetInt(n, qIdent))
3251:                     | * :
3256:                 ]
3256:             | * :
3261:         ]
      
3261:         oNodeNext(n)
3267:     };
      
      %  ------------------------------------------------------- 
      
      %  Emits code for expression (with result in ssl_result).
      %  Returns nType of expression.
      
3270: Expr (out Node t):
3272:     Node  i
3272:     [
3272:         | pIdent :
      
3274:             [ oScopeFind (i)
3281:                 | true :
3282:                     [ oNodeType (i)
3289:                         | nRule :        oWarning(wRuleMissingAtSign) @CallRule(i)
3303:                         | nOperation :   @CallOperation(i)
3312:                         | nValue :       .iSetResult    @EmitValue(i)
3323:                         | nInParam :     .iGetParam     @EmitAddr(i)
3334:                         | nOutParam :    .iGetFromParam @EmitAddr(i)
3345:                         | nInOutParam :  .iGetFromParam @EmitAddr(i)
3356:                         | nLocal :       .iGetLocal     @EmitAddr(i)
3367:                         | nGlobal :      .iGetGlobal    @EmitAddr(i)
3378:                         | * : #eIdentNotAllowedInExpr
3399:                     ]
      
3399:                     t = oNodeGet (i, qType)         % Get type of identifier
3412:                     [ oNodeNull(t)
3419:                         | true:  #eNotTyped   % e.g. call with no return value
3422:                         | * :
3427:                     ]
      
3427:                 | false :
3429:                     t = Null  #eUndeclaredIdentifier
3437:             ]
      
3445:         | '@' :
3447: 	    pIdent
3449:             [ oScopeFind (i)
3456:                 | true :
3457:                     @RequireRule(i) @CallRule(i)
3471:                     t = oNodeGet (i, qType)
3484:                     [ oNodeNull (t)
3491:                         | true:  #eNotTyped   % e.g. call with no return value
3494:                         | * :
3499:                     ]
      
3499:                 | false :
                          % Call before defined.  Limited use in this case.
                          % The nType pushed will be NULL.  We don't know the real type.
                          % This is really just allowed so we can have simple rules in a Choice expression.
      
3501:                     @CallUndefinedRule
3503:                     t = Null
3509:             ]
      
3517:         | '-' :
3519:             pIntLit   .iSetResult  oEmitInt(negate(TOKEN_VALUE))
3532:             t = IntType
3538:         | pIntLit :
3540:             .iSetResult  oEmitInt(TOKEN_VALUE)
3547:             t = IntType
3553:     ];
      
      %  Emits code for lvalue (putting address of variable in ssl_result).
      %  Returns nType of the referenced value.
      
3566: Lvalue (out Node t):
3568:     Node i
3568:     [
3568:         | pIdent :
      
3570:             [ oScopeFind(i)
3577:                 | true :      @Lvalue_HaveIdent(i,t)
      
3588:                 | false :     % a forward use of rule, illegal as lvalue
3590:                     t = Null  #eIllegalLvalue
3598:             ]
      
3606:         | '-' :   pIntLit     t = Null    #eIllegalLvalue
3618:         | pIntLit :           t = Null    #eIllegalLvalue
3628:     ];
      
      %  Emit code for lvalue, given nDeclaration of identifier.
      %  Return lvalue's nType
      
3639: Lvalue_HaveIdent (Node i, out Node t):
3641:     [ oNodeType(i)
3648:         | nInParam :     .iGetAddrParam  @EmitAddr(i)
3658:         | nOutParam :    .iGetParam      @EmitAddr(i)
3669:         | nInOutParam :  .iGetParam      @EmitAddr(i)
3680:         | nLocal :       .iGetAddrLocal  @EmitAddr(i)
3691:         | nGlobal :      .iGetAddrGlobal @EmitAddr(i)
3702:         | * : #eIllegalLvalue
3717:     ]
3717:     t = oNodeGet (i, qType)         % Get type of identifier
3731:     ;
      
      %  Return a constant value.  Also return the type of the value.
      %  No code is generated.
      
3731: Const (out Node t) >> int:
3733:     Node  i
3733:     int   val
3733:     [
3733:         | pIdent :
3735:             @LookupValue (i)
3742:             val = oNodeGetInt (i, qValue)
3755:             t = oNodeGet (i, qType)
3768:         | '-' :
3770:             pIntLit
3772:             val = negate(TOKEN_VALUE)
3781:             t = IntType
3787:         | pIntLit :
3789:             val = TOKEN_VALUE
3794:             t = IntType
3800:         | pStrLit :
3802:             oShortFormLookup (i)
3808:             val = oNodeGetInt (i, qValue)
3821:             t = oNodeGet (i, qType)
3834:     ]
3846:     >> val;
      
      %  Return integer constant.  Only values of type "int" are
      %  permitted.  No code is generated.
      
3850: IntConst >> int:
3852:     Node t
3852:     int  i
3852:     i = @Const (t)  @RequireMatchIntType (t)
3870:     >> i;
      
      %  ------------------------------------------------------- 
      
      %  Assert that the ident we just read is a particular kind of
      %  identifier.  Return the declaration node of the identifier.
      
3874: LookupType (out Node i):
3876:     oScopeFindRequire (i)
3882:     @RequireType (i);
      
3890: LookupInput (out Node i):
3892:     oScopeFindRequire (i)
3898:     @RequireInput (i);
      
3906: LookupOutput (out Node i):
3908:     oScopeFindRequire (i)
3914:     @RequireOutput (i);
      
3922: LookupValue (out Node i):
3924:     oScopeFindRequire (i)
3930:     @RequireValue (i);
      
3938: LookupError (out Node i):
3940:     oScopeFindRequire (i)
3946:     @RequireError (i);
      
      %  Assert that the given nDeclaration represents a particular
      %  kind of declaration.
      
3954: RequireType (Node i):
3956:     [ oNodeType(i)
3963:         | nType :
3964:         | * :    #eNotAType
3971:     ];
      
      %  Ensure that value is an input token (value of type "token")
3972: RequireInput (Node i):
3974:     [ oNodeEqual(oNodeGet(i, qType), TokenType)
3991:         | true :
3992:         | * :    #eNotInput
3999:     ];
      
4000: RequireOutput (Node i):
4002:     [ oNodeType(i)
4009:         | nOutput :
4010:         | * :    #eNotOutput
4017:     ];
      
4018: RequireValue (Node i):
4020:     [ oNodeType(i)
4027:         | nValue :
4028:         | * :    #eNotAValue
4035:     ];
      
4036: RequireError (Node i):
4038:     [ oNodeType(i)
4045:         | nError :
4046:         | * :    #eNotAnErrSig
4053:     ];
      
4054: RequireRule (Node i):
4056:     [ oNodeType(i)
4063:         | nRule :
4064:         | * :    #eNotARule
4071:     ];
      
      %  Require that rule/operation has no return type
      
4072: RequireNoType (Node r):
4074:     [ oNodeNull (oNodeGet(r, qType))
4088:         | false: oWarning(wReturnValueIgnored)  % #eChoiceOpRuleOutOfPlace
4095:         | * :
4100:     ];
      
      %  Given a value nDeclaration, and a nType.
      %  Ensure that the value symbol has the type nType.
      
4101: RequireMatchValueType (Node v, Node t):
4103:     [ oNodeEqual (oNodeGet(v, qType), t)
4120:         | true :
4121:         | * :    #eWrongType
4128:     ];
      
      
      %  Do two types match?
      
4129: MatchType (Node t1, Node t2) >> boolean:
4131:     >> oNodeEqual (t1, t2);
      
4142: RequireMatchType (Node t1, Node t2):
4144:     [ oNodeEqual (t1, t2)
4154:         | true :
4155:         | * :    #eWrongType
4162:     ];
      
      %  Is the nType "int"?
      
4163: MatchIntType (Node t) >> boolean:
4165:     >> oNodeEqual (t, IntType);
      
4176: RequireMatchIntType (Node t):
4178:     [ oNodeEqual (t, IntType)
4188:         | true :
4189:         | * :     #eWrongType
4196:     ];
      
4197: RequireMatchTokenType (Node t):
4199:     [ oNodeEqual (t, TokenType)
4209:         | true :
4210:         | * :     #eNotInput
4217:     ];
      
      %  ------------------------------------------------------- 
      
      
      %  Emit the value of an identifier declaration, given its nDeclaration
      
4218: EmitValue (Node i):
4220:     oEmitInt (oNodeGetInt(i, qValue));
      
      %  Emit the addr of a variable, given its declaration
      
4234: EmitAddr (Node v):
4236:     oEmitInt (oNodeGetInt(v, qAddr));
      
4250: end
      
4250: 

Generated code:

   0: oGlobalSpace 11
   2: oLocalSpace 0
   4: oCall 10
   6: oResetInput
   7: oCall 72
   9: oReturn
  10: oLocalSpace 0
  12: oGetAddrGlobal 1
  14: oPushResult
  15: oSetResult 0
  17: oAssign
  18: oGetAddrGlobal 10
  20: oPushResult
  21: oScopeBegin
  22: oPop 1
  24: oGetAddrGlobal 9
  26: oPushResult
  27: oSetResult 0
  29: oAssign
  30: oGetAddrGlobal 8
  32: oPushResult
  33: oSetResult 0
  35: oAssign
  36: oGetAddrGlobal 8
  38: oPushResult
  39: oInstallSystemOperations
  40: oPop 1
  42: oGetAddrGlobal 2
  44: oPushResult
  45: oGetAddrGlobal 3
  47: oPushResult
  48: oInstallSystemTypes
  49: oPop 2
  51: oGetAddrGlobal 5
  53: oPushResult
  54: oSetResult 0
  56: oAssign
  57: oCall 126
  59: oChoice 63
  61: oJumpForward 68
  63: Choice Lookup Table
           1     61
  66: oJumpForward 70
  68: oJumpBack 57
  70: oScopeEnd
  71: oReturn
  72: oLocalSpace 0
  74: oGetAddrGlobal 1
  76: oPushResult
  77: oSetResult 1
  79: oAssign
  80: oGetGlobal 10
  82: oPushResult
  83: oScopeOpen
  84: oPop 1
  86: oStartListing
  87: oGetAddrGlobal 5
  89: oPushResult
  90: inc
  91: oPop 1
  93: oEmit 15
  95: oGetGlobal 5
  97: oPushResult
  98: oEmitInt
  99: oPop 1
 101: oCall 126
 103: oChoice 107
 105: oJumpForward 112
 107: Choice Lookup Table
           1    105
 110: oJumpForward 114
 112: oJumpBack 101
 114: oCall 3158
 116: oCall 3184
 118: oScopeEnd
 119: oGetGlobal 10
 121: oPushResult
 122: oWriteTables
 123: oPop 1
 125: oReturn
 126: oLocalSpace 0
 128: oGetGlobal 1
 130: oChoice 234
 132: oInputChoice 171
 134: oCall 259
 136: oJumpForward 191
 138: oCall 269
 140: oJumpForward 191
 142: oCall 298
 144: oJumpForward 191
 146: oCall 327
 148: oJumpForward 191
 150: oCall 350
 152: oJumpForward 191
 154: oCall 433
 156: oJumpForward 191
 158: oCall 439
 160: oJumpForward 191
 162: oCall 488
 164: oJumpForward 191
 166: oSetResult 0
 168: oReturn
 169: oJumpForward 191
 171: Choice Lookup Table
          22    166
          31    162
          29    158
          30    154
          27    150
          28    146
          26    142
          25    138
          24    134
 190: oEndChoice
 191: oJumpForward 240
 193: oInputChoice 212
 195: oCall 244
 197: oJumpForward 232
 199: oCall 433
 201: oJumpForward 232
 203: oCall 488
 205: oJumpForward 232
 207: oSetResult 0
 209: oReturn
 210: oJumpForward 232
 212: Choice Lookup Table
          22    207
          31    203
          30    199
          29    195
          27    195
          28    195
          26    195
          25    195
          24    195
 231: oEndChoice
 232: oJumpForward 240
 234: Choice Lookup Table
           1    193
           0    132
 239: oEndChoice
 240: oSetResult 1
 242: oReturn
 243: oReturn
 244: oLocalSpace 0
 246: oInputChoice 252
 248: oJumpForward 258
 250: oJumpForward 256
 252: Choice Lookup Table
           6    248
 255: oInputAny
 256: oJumpBack 246
 258: oReturn
 259: oLocalSpace 0
 261: oInput 5
 263: oInput 2
 265: oTitleSet
 266: oInput 6
 268: oReturn
 269: oLocalSpace 1
 271: oInput 5
 273: oGetAddrLocal 1
 275: oPushResult
 276: oSetResult 0
 278: oAssign
 279: oSetResult 8
 281: oPushResult
 282: oGetAddrLocal 1
 284: oPushResult
 285: oSetResult 1
 287: oPushResult
 288: oGetGlobal 3
 290: oPushResult
 291: oCall 506
 293: oPop 4
 295: oInput 6
 297: oReturn
 298: oLocalSpace 1
 300: oInput 5
 302: oGetAddrLocal 1
 304: oPushResult
 305: oSetResult 0
 307: oAssign
 308: oSetResult 5
 310: oPushResult
 311: oGetAddrLocal 1
 313: oPushResult
 314: oSetResult 1
 316: oPushResult
 317: oSetResult 0
 319: oPushResult
 320: oCall 506
 322: oPop 4
 324: oInput 6
 326: oReturn
 327: oLocalSpace 0
 329: oInput 5
 331: oSetResult 6
 333: oPushResult
 334: oGetAddrGlobal 9
 336: oPushResult
 337: oSetResult 0
 339: oPushResult
 340: oSetResult 0
 342: oPushResult
 343: oCall 506
 345: oPop 4
 347: oInput 6
 349: oReturn
 350: oLocalSpace 2
 352: oInput 0
 354: oGetAddrLocal 1
 356: oPushResult
 357: oScopeFind
 358: oPop 1
 360: oChoice 400
 362: oGetAddrLocal 1
 364: oPushResult
 365: oSetResult 7
 367: oPushResult
 368: oNodeNew
 369: oPop 1
 371: oAssign
 372: oGetLocal 1
 374: oPushResult
 375: oSetResult 3
 377: oPushResult
 378: LAST_ID
 379: oPushResult
 380: oNodeSetInt
 381: oPop 3
 383: oGetLocal 1
 385: oPushResult
 386: oScopeDeclare
 387: oPop 1
 389: oJumpForward 406
 391: oGetLocal 1
 393: oPushResult
 394: oCall 3954
 396: oPop 1
 398: oJumpForward 406
 400: Choice Lookup Table
           1    391
           0    362
 405: oEndChoice
 406: oInput 5
 408: oGetAddrLocal 2
 410: oPushResult
 411: oSetResult 0
 413: oAssign
 414: oSetResult 8
 416: oPushResult
 417: oGetAddrLocal 2
 419: oPushResult
 420: oSetResult 0
 422: oPushResult
 423: oGetLocal 1
 425: oPushResult
 426: oCall 506
 428: oPop 4
 430: oInput 6
 432: oReturn
 433: oLocalSpace 0
 435: oInput 2
 437: oInclude
 438: oReturn
 439: oLocalSpace 1
 441: oInput 0
 443: oGetAddrLocal 1
 445: oPushResult
 446: oSetResult 9
 448: oPushResult
 449: oNodeNew
 450: oPop 1
 452: oAssign
 453: oGetLocal 1
 455: oPushResult
 456: oSetResult 3
 458: oPushResult
 459: LAST_ID
 460: oPushResult
 461: oNodeSetInt
 462: oPop 3
 464: oGetLocal 1
 466: oPushResult
 467: oScopeDeclare
 468: oPop 1
 470: oInput 5
 472: oCall 1252
 474: oChoice 478
 476: oJumpForward 483
 478: Choice Lookup Table
           1    476
 481: oJumpForward 485
 483: oJumpBack 472
 485: oInput 6
 487: oReturn
 488: oLocalSpace 0
 490: oCall 1367
 492: oChoice 496
 494: oJumpForward 501
 496: Choice Lookup Table
           1    494
 499: oJumpForward 503
 501: oJumpBack 490
 503: oInput 32
 505: oReturn
 506: oLocalSpace 2
 508: oInputChoice 649
 510: oGetAddrLocal 1
 512: oPushResult
 513: oGetParam 4
 515: oPushResult
 516: oNodeNew
 517: oPop 1
 519: oAssign
 520: oGetLocal 1
 522: oPushResult
 523: oSetResult 3
 525: oPushResult
 526: LAST_ID
 527: oPushResult
 528: oNodeSetInt
 529: oPop 3
 531: oGetParam 4
 533: oChoice 549
 535: oGetLocal 1
 537: oPushResult
 538: oSetResult 5
 540: oPushResult
 541: oGetParam 1
 543: oPushResult
 544: oNodeSet
 545: oPop 3
 547: oJumpForward 552
 549: Choice Lookup Table
           8    535
 552: oInputChoice 573
 554: oGetParam 2
 556: oChoice 566
 558: oGetLocal 1
 560: oPushResult
 561: oShortFormAdd
 562: oPop 1
 564: oJumpForward 571
 566: Choice Lookup Table
           1    558
 569: oError 18
 571: oJumpForward 576
 573: Choice Lookup Table
           2    554
 576: oInputChoice 620
 578: oGetParam 3
 580: oPushResult
 581: oGetAddrLocal 2
 583: oPushResult
 584: oCall 3731
 586: oPop 1
 588: oAssign
 589: oGetParam 1
 591: oPushResult
 592: oGetLocal 2
 594: oPushResult
 595: oCall 4129
 597: oPop 2
 599: oChoice 612
 601: oJumpForward 618
 603: oGetLocal 2
 605: oPushResult
 606: oCall 4176
 608: oPop 1
 610: oJumpForward 618
 612: Choice Lookup Table
           0    603
           1    601
 617: oEndChoice
 618: oJumpForward 623
 620: Choice Lookup Table
           4    578
 623: oGetLocal 1
 625: oPushResult
 626: oSetResult 4
 628: oPushResult
 629: oGetFromParam 3
 631: oPushResult
 632: oNodeSetInt
 633: oPop 3
 635: oGetParam 3
 637: oPushResult
 638: inc
 639: oPop 1
 641: oGetLocal 1
 643: oPushResult
 644: oScopeDeclare
 645: oPop 1
 647: oJumpForward 654
 649: Choice Lookup Table
           0    510
 652: oJumpForward 656
 654: oJumpBack 508
 656: oReturn
 657: oLocalSpace 3
 659: oInput 0
 661: oGetAddrLocal 1
 663: oPushResult
 664: oGetParam 3
 666: oPushResult
 667: oNodeNew
 668: oPop 1
 670: oAssign
 671: oGetLocal 1
 673: oPushResult
 674: oSetResult 3
 676: oPushResult
 677: LAST_ID
 678: oPushResult
 679: oNodeSetInt
 680: oPop 3
 682: oGetLocal 1
 684: oPushResult
 685: oSetResult 5
 687: oPushResult
 688: oGetParam 2
 690: oPushResult
 691: oNodeSet
 692: oPop 3
 694: oGetParam 1
 696: oPushResult
 697: inc
 698: oPop 1
 700: oGetLocal 1
 702: oPushResult
 703: oSetResult 10
 705: oPushResult
 706: oGetFromParam 1
 708: oPushResult
 709: oNodeSetInt
 710: oPop 3
 712: oScopeFindInCurrentScope
 713: oPushResult
 714: oNodeNull
 715: oPop 1
 717: oChoice 723
 719: oError 20
 721: oJumpForward 726
 723: Choice Lookup Table
           0    719
 726: oGetLocal 1
 728: oPushResult
 729: oScopeDeclare
 730: oPop 1
 732: oInputChoice 778
 734: oGetParam 3
 736: oChoice 742
 738: oError 19
 740: oJumpForward 745
 742: Choice Lookup Table
          18    738
 745: oGetLocal 1
 747: oPushResult
 748: oGetAddrLocal 2
 750: oPushResult
 751: oCall 3639
 753: oPop 2
 755: oEmit 12
 757: oGetAddrLocal 3
 759: oPushResult
 760: oCall 3270
 762: oPop 1
 764: oGetLocal 2
 766: oPushResult
 767: oGetLocal 3
 769: oPushResult
 770: oCall 4142
 772: oPop 2
 774: oEmit 24
 776: oJumpForward 781
 778: Choice Lookup Table
           4    734
 781: oInputChoice 785
 783: oJumpForward 790
 785: Choice Lookup Table
           7    783
 788: oJumpForward 792
 790: oJumpBack 659
 792: oReturn
 793: oLocalSpace 0
 795: oSetResult 18
 797: oPushResult
 798: oGetParam 1
 800: oPushResult
 801: oGetAddrGlobal 5
 803: oPushResult
 804: oCall 657
 806: oPop 3
 808: oReturn
 809: oLocalSpace 0
 811: oSetResult 17
 813: oPushResult
 814: oGetParam 1
 816: oPushResult
 817: oGetAddrGlobal 6
 819: oPushResult
 820: oCall 657
 822: oPop 3
 824: oReturn
 825: oLocalSpace 0
 827: oInput 0
 829: oInputChoice 833
 831: oJumpForward 838
 833: Choice Lookup Table
           7    831
 836: oJumpForward 840
 838: oJumpBack 827
 840: oReturn
 841: oLocalSpace 4
 843: oInputChoice 847
 845: oJumpForward 851
 847: Choice Lookup Table
           8    845
 850: oReturn
 851: oGetAddrLocal 1
 853: oPushResult
 854: oSetResult 0
 856: oAssign
 857: oGetAddrLocal 1
 859: oPushResult
 860: inc
 861: oPop 1
 863: oInputChoice 889
 865: oGetAddrLocal 2
 867: oPushResult
 868: oSetResult 14
 870: oAssign
 871: oJumpForward 902
 873: oGetAddrLocal 2
 875: oPushResult
 876: oSetResult 15
 878: oAssign
 879: oJumpForward 902
 881: oGetAddrLocal 2
 883: oPushResult
 884: oSetResult 16
 886: oAssign
 887: oJumpForward 902
 889: Choice Lookup Table
          35    881
          34    873
          33    865
 896: oGetAddrLocal 2
 898: oPushResult
 899: oSetResult 14
 901: oAssign
 902: oInput 0
 904: oGetAddrLocal 4
 906: oPushResult
 907: oCall 3874
 909: oPop 1
 911: oGetAddrLocal 3
 913: oPushResult
 914: oGetLocal 2
 916: oPushResult
 917: oNodeNew
 918: oPop 1
 920: oAssign
 921: oGetLocal 3
 923: oPushResult
 924: oSetResult 5
 926: oPushResult
 927: oGetLocal 4
 929: oPushResult
 930: oNodeSet
 931: oPop 3
 933: oInputChoice 948
 935: oGetLocal 3
 937: oPushResult
 938: oSetResult 3
 940: oPushResult
 941: LAST_ID
 942: oPushResult
 943: oNodeSetInt
 944: oPop 3
 946: oJumpForward 951
 948: Choice Lookup Table
           0    935
 951: oGetLocal 3
 953: oPushResult
 954: oScopeDeclare
 955: oPop 1
 957: oInputChoice 961
 959: oJumpForward 966
 961: Choice Lookup Table
           7    959
 964: oJumpForward 968
 966: oJumpBack 857
 968: oInput 9
 970: oGetAddrLocal 3
 972: oPushResult
 973: oGetParam 1
 975: oPushResult
 976: oSetResult 2
 978: oPushResult
 979: oNodeGet
 980: oPop 2
 982: oAssign
 983: oGetLocal 1
 985: oPushResult
 986: equal_zero
 987: oPop 1
 989: oChoice 997
 991: oJumpForward 1029
 993: oJumpForward 1003
 995: oJumpForward 1003
 997: Choice Lookup Table
           0    995
           1    991
1002: oEndChoice
1003: oGetLocal 3
1005: oPushResult
1006: oSetResult 10
1008: oPushResult
1009: oGetLocal 1
1011: oPushResult
1012: oNodeSetInt
1013: oPop 3
1015: oGetAddrLocal 1
1017: oPushResult
1018: dec
1019: oPop 1
1021: oGetAddrLocal 3
1023: oPushResult
1024: oNodeNext
1025: oPop 1
1027: oJumpBack 983
1029: oReturn
1030: oLocalSpace 5
1032: oGetAddrLocal 1
1034: oPushResult
1035: oGetParam 1
1037: oPushResult
1038: oSetResult 2
1040: oPushResult
1041: oNodeGet
1042: oPop 2
1044: oAssign
1045: oInputChoice 1049
1047: oJumpForward 1068
1049: Choice Lookup Table
           8   1047
1052: oGetLocal 1
1054: oPushResult
1055: oNodeNull
1056: oPop 1
1058: oChoice 1062
1060: oJumpForward 1067
1062: Choice Lookup Table
           1   1060
1065: oError 16
1067: oReturn
1068: oGetLocal 1
1070: oPushResult
1071: oNodeNull
1072: oPop 1
1074: oChoice 1082
1076: oError 16
1078: oJumpForward 1088
1080: oJumpForward 1088
1082: Choice Lookup Table
           0   1080
           1   1076
1087: oEndChoice
1088: oGetAddrLocal 2
1090: oPushResult
1091: oGetLocal 1
1093: oPushResult
1094: oNodeType
1095: oPop 1
1097: oAssign
1098: oInputChoice 1124
1100: oGetAddrLocal 3
1102: oPushResult
1103: oSetResult 14
1105: oAssign
1106: oJumpForward 1137
1108: oGetAddrLocal 3
1110: oPushResult
1111: oSetResult 15
1113: oAssign
1114: oJumpForward 1137
1116: oGetAddrLocal 3
1118: oPushResult
1119: oSetResult 16
1121: oAssign
1122: oJumpForward 1137
1124: Choice Lookup Table
          35   1116
          34   1108
          33   1100
1131: oGetAddrLocal 3
1133: oPushResult
1134: oSetResult 14
1136: oAssign
1137: oGetLocal 2
1139: oPushResult
1140: oGetLocal 3
1142: oPushResult
1143: equal_node_type
1144: oPop 2
1146: oChoice 1150
1148: oJumpForward 1155
1150: Choice Lookup Table
           1   1148
1153: oError 16
1155: oGetAddrLocal 4
1157: oPushResult
1158: oGetLocal 1
1160: oPushResult
1161: oSetResult 5
1163: oPushResult
1164: oNodeGet
1165: oPop 2
1167: oAssign
1168: oInput 0
1170: oGetAddrLocal 5
1172: oPushResult
1173: oCall 3874
1175: oPop 1
1177: oGetLocal 4
1179: oPushResult
1180: oGetLocal 5
1182: oPushResult
1183: oCall 4142
1185: oPop 2
1187: oInputChoice 1202
1189: oGetLocal 1
1191: oPushResult
1192: oSetResult 3
1194: oPushResult
1195: LAST_ID
1196: oPushResult
1197: oNodeSetInt
1198: oPop 3
1200: oJumpForward 1217
1202: Choice Lookup Table
           0   1189
1205: oGetLocal 1
1207: oPushResult
1208: oSetResult 3
1210: oPushResult
1211: oSetResult 0
1213: oPushResult
1214: oNodeSetInt
1215: oPop 3
1217: oGetAddrLocal 1
1219: oPushResult
1220: oNodeNext
1221: oPop 1
1223: oInputChoice 1227
1225: oJumpForward 1232
1227: Choice Lookup Table
           7   1225
1230: oJumpForward 1234
1232: oJumpBack 1068
1234: oInput 9
1236: oGetLocal 1
1238: oPushResult
1239: oNodeNull
1240: oPop 1
1242: oChoice 1246
1244: oJumpForward 1251
1246: Choice Lookup Table
           1   1244
1249: oError 16
1251: oReturn
1252: oLocalSpace 3
1254: oInputChoice 1258
1256: oJumpForward 1264
1258: Choice Lookup Table
           0   1256
1261: oSetResult 0
1263: oReturn
1264: oGetAddrLocal 1
1266: oPushResult
1267: oSetResult 10
1269: oPushResult
1270: oNodeNew
1271: oPop 1
1273: oAssign
1274: oGetLocal 1
1276: oPushResult
1277: oSetResult 3
1279: oPushResult
1280: LAST_ID
1281: oPushResult
1282: oNodeSetInt
1283: oPop 3
1285: oGetLocal 1
1287: oPushResult
1288: oSetResult 4
1290: oPushResult
1291: oGetGlobal 8
1293: oPushResult
1294: oNodeSetInt
1295: oPop 3
1297: oGetAddrGlobal 8
1299: oPushResult
1300: inc
1301: oPop 1
1303: oGetAddrLocal 2
1305: oPushResult
1306: oScopeBegin
1307: oPop 1
1309: oGetLocal 2
1311: oPushResult
1312: oCall 841
1314: oPop 1
1316: oGetLocal 1
1318: oPushResult
1319: oSetResult 6
1321: oPushResult
1322: oGetLocal 2
1324: oPushResult
1325: oNodeSet
1326: oPop 3
1328: oInputChoice 1353
1330: oInput 0
1332: oGetAddrLocal 3
1334: oPushResult
1335: oCall 3874
1337: oPop 1
1339: oGetLocal 1
1341: oPushResult
1342: oSetResult 5
1344: oPushResult
1345: oGetLocal 3
1347: oPushResult
1348: oNodeSet
1349: oPop 3
1351: oJumpForward 1356
1353: Choice Lookup Table
          10   1330
1356: oScopeEnd
1357: oGetLocal 1
1359: oPushResult
1360: oScopeDeclare
1361: oPop 1
1363: oSetResult 1
1365: oReturn
1366: oReturn
1367: oLocalSpace 1
1369: oInputChoice 1373
1371: oJumpForward 1379
1373: Choice Lookup Table
           0   1371
1376: oSetResult 0
1378: oReturn
1379: oGetAddrLocal 1
1381: oPushResult
1382: oScopeFind
1383: oPop 1
1385: oChoice 1445
1387: oCall 1470
1389: oJumpForward 1451
1391: oGetLocal 1
1393: oPushResult
1394: oNodeType
1395: oPop 1
1397: oChoice 1433
1399: oGetGlobal 1
1401: oChoice 1416
1403: oGetLocal 1
1405: oPushResult
1406: oCall 793
1408: oPop 1
1410: oJumpForward 1422
1412: oCall 825
1414: oJumpForward 1422
1416: Choice Lookup Table
           1   1412
           0   1403
1421: oEndChoice
1422: oJumpForward 1443
1424: oGetLocal 1
1426: oPushResult
1427: oCall 1677
1429: oPop 1
1431: oJumpForward 1443
1433: Choice Lookup Table
          11   1424
           7   1399
1438: oError 13
1440: oSetResult 1
1442: oReturn
1443: oJumpForward 1451
1445: Choice Lookup Table
           1   1391
           0   1387
1450: oEndChoice
1451: oSetResult 1
1453: oReturn
1454: oReturn
1455: oLocalSpace 0
1457: oInputChoice 1463
1459: oJumpForward 1469
1461: oJumpForward 1467
1463: Choice Lookup Table
           6   1459
1466: oInputAny
1467: oJumpBack 1457
1469: oReturn
1470: oLocalSpace 3
1472: oDocNewRule
1473: oGetAddrLocal 1
1475: oPushResult
1476: oSetResult 11
1478: oPushResult
1479: oNodeNew
1480: oPop 1
1482: oAssign
1483: oGetLocal 1
1485: oPushResult
1486: oSetResult 3
1488: oPushResult
1489: LAST_ID
1490: oPushResult
1491: oNodeSetInt
1492: oPop 3
1494: oGetAddrGlobal 4
1496: oPushResult
1497: oGetLocal 1
1499: oAssign
1500: oGetAddrLocal 2
1502: oPushResult
1503: oScopeBegin
1504: oPop 1
1506: oGetLocal 2
1508: oPushResult
1509: oCall 841
1511: oPop 1
1513: oGetLocal 1
1515: oPushResult
1516: oSetResult 6
1518: oPushResult
1519: oGetLocal 2
1521: oPushResult
1522: oNodeSet
1523: oPop 3
1525: oInputChoice 1550
1527: oInput 0
1529: oGetAddrLocal 3
1531: oPushResult
1532: oCall 3874
1534: oPop 1
1536: oGetLocal 1
1538: oPushResult
1539: oSetResult 5
1541: oPushResult
1542: oGetLocal 3
1544: oPushResult
1545: oNodeSet
1546: oPop 3
1548: oJumpForward 1553
1550: Choice Lookup Table
          10   1527
1553: oGetGlobal 1
1555: oChoice 1579
1557: oCall 1455
1559: oJumpForward 1585
1561: oInputChoice 1572
1563: oGetLocal 1
1565: oPushResult
1566: oCall 1593
1568: oPop 1
1570: oJumpForward 1575
1572: Choice Lookup Table
           5   1563
1575: oInput 6
1577: oJumpForward 1585
1579: Choice Lookup Table
           1   1561
           0   1557
1584: oEndChoice
1585: oScopeEnd
1586: oGetLocal 1
1588: oPushResult
1589: oScopeDeclare
1590: oPop 1
1592: oReturn
1593: oLocalSpace 1
1595: oGetParam 1
1597: oPushResult
1598: oSetResult 4
1600: oPushResult
1601: Here
1602: oPushResult
1603: oNodeSetInt
1604: oPop 3
1606: oGetParam 1
1608: oPushResult
1609: oSetResult 8
1611: oPushResult
1612: oSetResult 1
1614: oPushResult
1615: oNodeSetBoolean
1616: oPop 3
1618: oGetAddrLocal 1
1620: oPushResult
1621: oScopeBegin
1622: oPop 1
1624: oGetAddrGlobal 6
1626: oPushResult
1627: oSetResult 0
1629: oAssign
1630: oEmit 16
1632: oGetAddrGlobal 7
1634: oPushResult
1635: Here
1636: oAssign
1637: oEmit 25
1639: oCall 1814
1641: oChoice 1645
1643: oJumpForward 1650
1645: Choice Lookup Table
           1   1643
1648: oJumpForward 1652
1650: oJumpBack 1639
1652: oEmit 8
1654: oGetGlobal 7
1656: oPushResult
1657: oGetGlobal 6
1659: oPushResult
1660: oPatch
1661: oPop 2
1663: oScopeEnd
1664: oGetParam 1
1666: oPushResult
1667: oSetResult 7
1669: oPushResult
1670: oGetLocal 1
1672: oPushResult
1673: oNodeSet
1674: oPop 3
1676: oReturn
1677: oLocalSpace 4
1679: oGetParam 1
1681: oPushResult
1682: oSetResult 8
1684: oPushResult
1685: oNodeGetBoolean
1686: oPop 2
1688: oChoice 1695
1690: oError 14
1692: oReturn
1693: oJumpForward 1698
1695: Choice Lookup Table
           1   1690
1698: oDocNewRule
1699: oGetAddrGlobal 4
1701: oPushResult
1702: oGetParam 1
1704: oAssign
1705: oGetAddrLocal 1
1707: oPushResult
1708: oGetParam 1
1710: oPushResult
1711: oSetResult 6
1713: oPushResult
1714: oNodeGet
1715: oPop 2
1717: oAssign
1718: oGetLocal 1
1720: oPushResult
1721: oScopeOpen
1722: oPop 1
1724: oGetLocal 1
1726: oPushResult
1727: oCall 1030
1729: oPop 1
1731: oGetAddrLocal 3
1733: oPushResult
1734: oGetParam 1
1736: oPushResult
1737: oSetResult 5
1739: oPushResult
1740: oNodeGet
1741: oPop 2
1743: oAssign
1744: oInputChoice 1767
1746: oInput 0
1748: oGetAddrLocal 4
1750: oPushResult
1751: oCall 3874
1753: oPop 1
1755: oGetLocal 3
1757: oPushResult
1758: oGetLocal 4
1760: oPushResult
1761: oCall 4142
1763: oPop 2
1765: oJumpForward 1780
1767: Choice Lookup Table
          10   1746
1770: oGetLocal 3
1772: oPushResult
1773: oSetResult 0
1775: oPushResult
1776: oCall 4142
1778: oPop 2
1780: oGetGlobal 1
1782: oChoice 1806
1784: oCall 1455
1786: oJumpForward 1812
1788: oInputChoice 1799
1790: oGetParam 1
1792: oPushResult
1793: oCall 1593
1795: oPop 1
1797: oJumpForward 1802
1799: Choice Lookup Table
           5   1790
1802: oInput 6
1804: oJumpForward 1812
1806: Choice Lookup Table
           1   1788
           0   1784
1811: oEndChoice
1812: oScopeEnd
1813: oReturn
1814: oLocalSpace 4
1816: oInputChoice 2172
1818: oGetAddrLocal 1
1820: oPushResult
1821: oShortFormLookup
1822: oPop 1
1824: oGetLocal 1
1826: oPushResult
1827: oCall 3972
1829: oPop 1
1831: oEmit 2
1833: oGetLocal 1
1835: oPushResult
1836: oCall 4218
1838: oPop 1
1840: oJumpForward 2196
1842: oGetAddrLocal 1
1844: oPushResult
1845: oScopeFindRequire
1846: oPop 1
1848: oGetLocal 1
1850: oPushResult
1851: oNodeType
1852: oPop 1
1854: oChoice 1899
1856: oGetLocal 1
1858: oPushResult
1859: oCall 4072
1861: oPop 1
1863: oGetLocal 1
1865: oPushResult
1866: oCall 2200
1868: oPop 1
1870: oJumpForward 1913
1872: oGetLocal 1
1874: oPushResult
1875: oCall 809
1877: oPop 1
1879: oJumpForward 1913
1881: oGetLocal 1
1883: oPushResult
1884: oCall 3972
1886: oPop 1
1888: oEmit 2
1890: oGetLocal 1
1892: oPushResult
1893: oCall 4218
1895: oPop 1
1897: oJumpForward 1913
1899: Choice Lookup Table
           8   1881
           7   1872
          10   1856
1906: oGetLocal 1
1908: oPushResult
1909: oCall 2749
1911: oPop 1
1913: oJumpForward 2196
1915: oInput 0
1917: oGetAddrLocal 1
1919: oPushResult
1920: oCall 3938
1922: oPop 1
1924: oEmit 5
1926: oGetLocal 1
1928: oPushResult
1929: oCall 4218
1931: oPop 1
1933: oJumpForward 2196
1935: oInputChoice 1961
1937: oGetAddrLocal 1
1939: oPushResult
1940: oCall 3906
1942: oPop 1
1944: oJumpForward 1967
1946: oGetAddrLocal 1
1948: oPushResult
1949: oShortFormLookup
1950: oPop 1
1952: oGetLocal 1
1954: oPushResult
1955: oCall 4000
1957: oPop 1
1959: oJumpForward 1967
1961: Choice Lookup Table
           2   1946
           0   1937
1966: oEndChoice
1967: oEmit 4
1969: oGetLocal 1
1971: oPushResult
1972: oCall 4218
1974: oPop 1
1976: oJumpForward 2196
1978: oInput 0
1980: oGetAddrLocal 1
1982: oPushResult
1983: oScopeFind
1984: oPop 1
1986: oChoice 2015
1988: oGetLocal 1
1990: oPushResult
1991: oCall 4054
1993: oPop 1
1995: oGetLocal 1
1997: oPushResult
1998: oCall 4072
2000: oPop 1
2002: oGetLocal 1
2004: oPushResult
2005: oCall 2405
2007: oPop 1
2009: oJumpForward 2021
2011: oCall 2501
2013: oJumpForward 2021
2015: Choice Lookup Table
           0   2011
           1   1988
2020: oEndChoice
2021: oJumpForward 2196
2023: oGetAddrLocal 2
2025: oPushResult
2026: oGetGlobal 4
2028: oPushResult
2029: oSetResult 5
2031: oPushResult
2032: oNodeGet
2033: oPop 2
2035: oAssign
2036: oGetLocal 2
2038: oPushResult
2039: oNodeNull
2040: oPop 1
2042: oChoice 2046
2044: oJumpForward 2066
2046: Choice Lookup Table
           1   2044
2049: oGetAddrLocal 3
2051: oPushResult
2052: oCall 3270
2054: oPop 1
2056: oGetLocal 2
2058: oPushResult
2059: oGetLocal 3
2061: oPushResult
2062: oCall 4142
2064: oPop 2
2066: oEmit 8
2068: oJumpForward 2196
2070: oGetAddrLocal 4
2072: oPushResult
2073: oScopeBegin
2074: oPop 1
2076: oSetResult 4
2078: oPushResult
2079: oPatchPushHere
2080: oPop 1
2082: oSetResult 5
2084: oPushResult
2085: oPatchMark
2086: oPop 1
2088: oCall 1814
2090: oChoice 2094
2092: oJumpForward 2099
2094: Choice Lookup Table
           1   2092
2097: oJumpForward 2101
2099: oJumpBack 2088
2101: oInput 13
2103: oEmit 1
2105: oSetResult 4
2107: oPushResult
2108: oPatchPopBack
2109: oPop 1
2111: oSetResult 5
2113: oPushResult
2114: oPatchAtMark
2115: oPop 1
2117: oChoice 2127
2119: oSetResult 5
2121: oPushResult
2122: oPatchPopFwd
2123: oPop 1
2125: oJumpForward 2132
2127: Choice Lookup Table
           0   2119
2130: oJumpForward 2134
2132: oJumpBack 2111
2134: oScopeEnd
2135: oJumpForward 2196
2137: oSetResult 4
2139: oPushResult
2140: oPatchAnyEntries
2141: oPop 1
2143: oChoice 2149
2145: oError 7
2147: oJumpForward 2152
2149: Choice Lookup Table
           0   2145
2152: oEmit 0
2154: oSetResult 5
2156: oPushResult
2157: oPatchPushHere
2158: oPop 1
2160: oEmit 25
2162: oJumpForward 2196
2164: oEmit 3
2166: oJumpForward 2196
2168: oCall 2785
2170: oJumpForward 2196
2172: Choice Lookup Table
          14   2168
          21   2164
          11   2137
          12   2070
          10   2023
          17   1978
          18   1935
          20   1915
           0   1842
           2   1818
2193: oSetResult 0
2195: oReturn
2196: oSetResult 1
2198: oReturn
2199: oReturn
2200: oLocalSpace 1
2202: oGetAddrLocal 1
2204: oPushResult
2205: oGetParam 1
2207: oPushResult
2208: oCall 2247
2210: oPop 1
2212: oAssign
2213: oGetParam 1
2215: oPushResult
2216: oCall 4218
2218: oPop 1
2220: oGetLocal 1
2222: oPushResult
2223: equal_zero
2224: oPop 1
2226: oChoice 2240
2228: oJumpForward 2246
2230: oEmit 13
2232: oGetLocal 1
2234: oPushResult
2235: oEmitInt
2236: oPop 1
2238: oJumpForward 2246
2240: Choice Lookup Table
           0   2230
           1   2228
2245: oEndChoice
2246: oReturn
2247: oLocalSpace 5
2249: oGetAddrLocal 2
2251: oPushResult
2252: oGetParam 1
2254: oPushResult
2255: oSetResult 6
2257: oPushResult
2258: oNodeGet
2259: oPop 2
2261: oAssign
2262: oGetAddrLocal 3
2264: oPushResult
2265: oGetLocal 2
2267: oPushResult
2268: oSetResult 2
2270: oPushResult
2271: oNodeGet
2272: oPop 2
2274: oAssign
2275: oGetLocal 3
2277: oPushResult
2278: oNodeNull
2279: oPop 1
2281: oChoice 2290
2283: oSetResult 0
2285: oReturn
2286: oJumpForward 2296
2288: oJumpForward 2296
2290: Choice Lookup Table
           0   2288
           1   2283
2295: oEndChoice
2296: oGetAddrLocal 1
2298: oPushResult
2299: oSetResult 0
2301: oAssign
2302: oInput 8
2304: oGetAddrLocal 1
2306: oPushResult
2307: inc
2308: oPop 1
2310: oGetAddrLocal 4
2312: oPushResult
2313: oGetLocal 3
2315: oPushResult
2316: oSetResult 5
2318: oPushResult
2319: oNodeGet
2320: oPop 2
2322: oAssign
2323: oGetLocal 3
2325: oPushResult
2326: oNodeType
2327: oPop 1
2329: oChoice 2349
2331: oGetAddrLocal 5
2333: oPushResult
2334: oCall 3270
2336: oPop 1
2338: oJumpForward 2357
2340: oGetAddrLocal 5
2342: oPushResult
2343: oCall 3566
2345: oPop 1
2347: oJumpForward 2357
2349: Choice Lookup Table
          16   2340
          15   2340
          14   2331
2356: oEndChoice
2357: oGetLocal 4
2359: oPushResult
2360: oGetLocal 5
2362: oPushResult
2363: oCall 4142
2365: oPop 2
2367: oEmit 12
2369: oGetAddrLocal 3
2371: oPushResult
2372: oNodeNext
2373: oPop 1
2375: oGetLocal 3
2377: oPushResult
2378: oNodeNull
2379: oPop 1
2381: oChoice 2389
2383: oJumpForward 2399
2385: oJumpForward 2395
2387: oJumpForward 2395
2389: Choice Lookup Table
           0   2387
           1   2383
2394: oEndChoice
2395: oInput 7
2397: oJumpBack 2304
2399: oInput 9
2401: oGetLocal 1
2403: oReturn
2404: oReturn
2405: oLocalSpace 1
2407: oGetAddrLocal 1
2409: oPushResult
2410: oGetParam 1
2412: oPushResult
2413: oCall 2247
2415: oPop 1
2417: oAssign
2418: oGetParam 1
2420: oPushResult
2421: oSetResult 8
2423: oPushResult
2424: oNodeGetBoolean
2425: oPop 2
2427: oChoice 2468
2429: oEmit 7
2431: oGetParam 1
2433: oPushResult
2434: oCall 4218
2436: oPop 1
2438: oJumpForward 2474
2440: oEmit 7
2442: oSetResult 3
2444: oPushResult
2445: oPatchPushHere
2446: oPop 1
2448: oSetResult 3
2450: oPushResult
2451: oGetParam 1
2453: oPushResult
2454: oSetResult 3
2456: oPushResult
2457: oNodeGetInt
2458: oPop 2
2460: oPushResult
2461: oPatchPushInt
2462: oPop 2
2464: oEmit 25
2466: oJumpForward 2474
2468: Choice Lookup Table
           0   2440
           1   2429
2473: oEndChoice
2474: oGetLocal 1
2476: oPushResult
2477: equal_zero
2478: oPop 1
2480: oChoice 2494
2482: oJumpForward 2500
2484: oEmit 13
2486: oGetLocal 1
2488: oPushResult
2489: oEmitInt
2490: oPop 1
2492: oJumpForward 2500
2494: Choice Lookup Table
           0   2484
           1   2482
2499: oEndChoice
2500: oReturn
2501: oLocalSpace 7
2503: oGetGlobal 10
2505: oPushResult
2506: oScopeOpen
2507: oPop 1
2509: oGetAddrLocal 1
2511: oPushResult
2512: oSetResult 11
2514: oPushResult
2515: oNodeNew
2516: oPop 1
2518: oAssign
2519: oGetAddrLocal 5
2521: oPushResult
2522: LAST_ID
2523: oAssign
2524: oGetLocal 1
2526: oPushResult
2527: oSetResult 3
2529: oPushResult
2530: oGetLocal 5
2532: oPushResult
2533: oNodeSetInt
2534: oPop 3
2536: oGetLocal 1
2538: oPushResult
2539: oSetResult 8
2541: oPushResult
2542: oSetResult 0
2544: oPushResult
2545: oNodeSetBoolean
2546: oPop 3
2548: oGetAddrLocal 2
2550: oPushResult
2551: oScopeBegin
2552: oPop 1
2554: oGetLocal 1
2556: oPushResult
2557: oSetResult 6
2559: oPushResult
2560: oGetLocal 2
2562: oPushResult
2563: oNodeSet
2564: oPop 3
2566: oGetAddrLocal 6
2568: oPushResult
2569: oSetResult 0
2571: oAssign
2572: oInputChoice 2697
2574: oGetAddrLocal 3
2576: oPushResult
2577: oCall 3270
2579: oPop 1
2581: oEmit 12
2583: oGetAddrLocal 4
2585: oPushResult
2586: oSetResult 14
2588: oPushResult
2589: oNodeNew
2590: oPop 1
2592: oAssign
2593: oGetLocal 4
2595: oPushResult
2596: oSetResult 5
2598: oPushResult
2599: oGetLocal 3
2601: oPushResult
2602: oNodeSet
2603: oPop 3
2605: oGetLocal 4
2607: oPushResult
2608: oScopeDeclare
2609: oPop 1
2611: oGetAddrLocal 6
2613: oPushResult
2614: inc
2615: oPop 1
2617: oInputChoice 2621
2619: oJumpForward 2626
2621: Choice Lookup Table
           7   2619
2624: oJumpForward 2628
2626: oJumpBack 2574
2628: oInput 9
2630: oGetAddrLocal 7
2632: oPushResult
2633: oGetLocal 6
2635: oAssign
2636: oGetAddrLocal 4
2638: oPushResult
2639: oGetLocal 2
2641: oPushResult
2642: oSetResult 2
2644: oPushResult
2645: oNodeGet
2646: oPop 2
2648: oAssign
2649: oGetLocal 4
2651: oPushResult
2652: oNodeNull
2653: oPop 1
2655: oChoice 2663
2657: oJumpForward 2695
2659: oJumpForward 2669
2661: oJumpForward 2669
2663: Choice Lookup Table
           0   2661
           1   2657
2668: oEndChoice
2669: oGetLocal 4
2671: oPushResult
2672: oSetResult 10
2674: oPushResult
2675: oGetLocal 7
2677: oPushResult
2678: oNodeSetInt
2679: oPop 3
2681: oGetAddrLocal 7
2683: oPushResult
2684: dec
2685: oPop 1
2687: oGetAddrLocal 4
2689: oPushResult
2690: oNodeNext
2691: oPop 1
2693: oJumpBack 2649
2695: oJumpForward 2700
2697: Choice Lookup Table
           8   2574
2700: oScopeEnd
2701: oGetLocal 1
2703: oPushResult
2704: oScopeDeclare
2705: oPop 1
2707: oScopeEnd
2708: oEmit 7
2710: oSetResult 3
2712: oPushResult
2713: oPatchPushHere
2714: oPop 1
2716: oSetResult 3
2718: oPushResult
2719: oGetLocal 5
2721: oPushResult
2722: oPatchPushInt
2723: oPop 2
2725: oEmit 25
2727: oGetLocal 6
2729: oPushResult
2730: equal_zero
2731: oPop 1
2733: oChoice 2737
2735: oJumpForward 2748
2737: Choice Lookup Table
           1   2735
2740: oEmit 13
2742: oGetLocal 6
2744: oPushResult
2745: oEmitInt
2746: oPop 1
2748: oReturn
2749: oLocalSpace 2
2751: oGetParam 1
2753: oPushResult
2754: oGetAddrLocal 1
2756: oPushResult
2757: oCall 3639
2759: oPop 2
2761: oEmit 12
2763: oInput 4
2765: oGetAddrLocal 2
2767: oPushResult
2768: oCall 3270
2770: oPop 1
2772: oGetLocal 1
2774: oPushResult
2775: oGetLocal 2
2777: oPushResult
2778: oCall 4142
2780: oPop 2
2782: oEmit 24
2784: oReturn
2785: oLocalSpace 7
2787: oInputChoice 2799
2789: oEmit 6
2791: oGetAddrLocal 2
2793: oPushResult
2794: oSetResult 2
2796: oAssign
2797: oJumpForward 2843
2799: Choice Lookup Table
          16   2789
2802: oGetAddrLocal 3
2804: oPushResult
2805: oCall 3270
2807: oPop 1
2809: oEmit 10
2811: oGetLocal 3
2813: oPushResult
2814: oNodeNull
2815: oPop 1
2817: oChoice 2835
2819: oGetAddrLocal 2
2821: oPushResult
2822: oSetResult 1
2824: oAssign
2825: oJumpForward 2841
2827: oGetAddrLocal 2
2829: oPushResult
2830: oSetResult 5
2832: oAssign
2833: oJumpForward 2841
2835: Choice Lookup Table
           0   2827
           1   2819
2840: oEndChoice
2841: oInput 16
2843: oSetResult 0
2845: oPushResult
2846: oPatchPushHere
2847: oPop 1
2849: oEmit 25
2851: oSetResult 1
2853: oPushResult
2854: oPatchMark
2855: oPop 1
2857: oSetResult 2
2859: oPushResult
2860: oPatchMark
2861: oPop 1
2863: oGetAddrLocal 1
2865: oPushResult
2866: oSetResult 0
2868: oAssign
2869: oInputChoice 2907
2871: oInput 5
2873: oGetLocal 1
2875: oPushResult
2876: oCall 3088
2878: oPop 1
2880: oGetAddrLocal 6
2882: oPushResult
2883: oScopeBegin
2884: oPop 1
2886: oCall 1814
2888: oChoice 2892
2890: oJumpForward 2897
2892: Choice Lookup Table
           1   2890
2895: oJumpForward 2899
2897: oJumpBack 2886
2899: oScopeEnd
2900: oInput 15
2902: oCall 3132
2904: oReturn
2905: oJumpForward 3021
2907: Choice Lookup Table
          19   2871
2910: oGetLocal 2
2912: oChoice 2976
2914: oGetAddrLocal 7
2916: oPushResult
2917: oGetAddrLocal 4
2919: oPushResult
2920: oCall 3731
2922: oPop 1
2924: oAssign
2925: oGetLocal 3
2927: oPushResult
2928: oGetLocal 4
2930: oPushResult
2931: oCall 4142
2933: oPop 2
2935: oJumpForward 2984
2937: oGetAddrLocal 7
2939: oPushResult
2940: oGetAddrLocal 3
2942: oPushResult
2943: oCall 3731
2945: oPop 1
2947: oAssign
2948: oGetAddrLocal 2
2950: oPushResult
2951: oSetResult 5
2953: oAssign
2954: oJumpForward 2984
2956: oGetAddrLocal 7
2958: oPushResult
2959: oGetAddrLocal 4
2961: oPushResult
2962: oCall 3731
2964: oPop 1
2966: oAssign
2967: oGetLocal 4
2969: oPushResult
2970: oCall 4197
2972: oPop 1
2974: oJumpForward 2984
2976: Choice Lookup Table
           2   2956
           1   2937
           5   2914
2983: oEndChoice
2984: oSetResult 1
2986: oPushResult
2987: oPatchPushHere
2988: oPop 1
2990: oSetResult 1
2992: oPushResult
2993: oGetLocal 7
2995: oPushResult
2996: oPatchPushInt
2997: oPop 2
2999: oGetAddrLocal 1
3001: oPushResult
3002: inc
3003: oPop 1
3005: oInputChoice 3013
3007: oJumpForward 3021
3009: oJumpForward 3019
3011: oJumpForward 3019
3013: Choice Lookup Table
           7   3011
           5   3007
3018: oEndChoice
3019: oJumpBack 2910
3021: oGetAddrLocal 6
3023: oPushResult
3024: oScopeBegin
3025: oPop 1
3027: oCall 1814
3029: oChoice 3033
3031: oJumpForward 3038
3033: Choice Lookup Table
           1   3031
3036: oJumpForward 3040
3038: oJumpBack 3027
3040: oScopeEnd
3041: oInputChoice 3079
3043: oEmit 0
3045: oSetResult 2
3047: oPushResult
3048: oPatchPushHere
3049: oPop 1
3051: oEmit 25
3053: oGetLocal 1
3055: oPushResult
3056: oCall 3088
3058: oPop 1
3060: oEmit 11
3062: oCall 3132
3064: oReturn
3065: oJumpForward 3085
3067: oEmit 0
3069: oSetResult 2
3071: oPushResult
3072: oPatchPushHere
3073: oPop 1
3075: oEmit 25
3077: oJumpForward 3085
3079: Choice Lookup Table
          16   3067
          15   3043
3084: oEndChoice
3085: oJumpBack 2869
3087: oReturn
3088: oLocalSpace 0
3090: oSetResult 0
3092: oPushResult
3093: oPatchPopFwd
3094: oPop 1
3096: oGetParam 1
3098: oPushResult
3099: oEmitInt
3100: oPop 1
3102: oSetResult 1
3104: oPushResult
3105: oPatchAtMark
3106: oPop 1
3108: oChoice 3124
3110: oSetResult 1
3112: oPushResult
3113: oPatchPopValue
3114: oPop 1
3116: oSetResult 1
3118: oPushResult
3119: oPatchPopBack
3120: oPop 1
3122: oJumpForward 3129
3124: Choice Lookup Table
           0   3110
3127: oJumpForward 3131
3129: oJumpBack 3102
3131: oReturn
3132: oLocalSpace 0
3134: oSetResult 2
3136: oPushResult
3137: oPatchAtMark
3138: oPop 1
3140: oChoice 3150
3142: oSetResult 2
3144: oPushResult
3145: oPatchPopFwd
3146: oPop 1
3148: oJumpForward 3155
3150: Choice Lookup Table
           0   3142
3153: oJumpForward 3157
3155: oJumpBack 3134
3157: oReturn
3158: oLocalSpace 0
3160: oSetResult 3
3162: oPushResult
3163: oPatchAnyEntries
3164: oPop 1
3166: oChoice 3176
3168: oSetResult 3
3170: oPushResult
3171: oPatchPopCall
3172: oPop 1
3174: oJumpForward 3181
3176: Choice Lookup Table
           1   3168
3179: oJumpForward 3183
3181: oJumpBack 3160
3183: oReturn
3184: oLocalSpace 1
3186: oGetAddrLocal 1
3188: oPushResult
3189: oGetGlobal 10
3191: oPushResult
3192: oSetResult 2
3194: oPushResult
3195: oNodeGet
3196: oPop 2
3198: oAssign
3199: oGetLocal 1
3201: oPushResult
3202: oNodeNull
3203: oPop 1
3205: oChoice 3213
3207: oJumpForward 3269
3209: oJumpForward 3219
3211: oJumpForward 3219
3213: Choice Lookup Table
           0   3211
           1   3207
3218: oEndChoice
3219: oGetLocal 1
3221: oPushResult
3222: oNodeType
3223: oPop 1
3225: oChoice 3258
3227: oGetLocal 1
3229: oPushResult
3230: oSetResult 8
3232: oPushResult
3233: oNodeGetBoolean
3234: oPop 2
3236: oChoice 3253
3238: oGetLocal 1
3240: oPushResult
3241: oSetResult 3
3243: oPushResult
3244: oNodeGetInt
3245: oPop 2
3247: oPushResult
3248: oUndeclaredRule
3249: oPop 1
3251: oJumpForward 3256
3253: Choice Lookup Table
           0   3238
3256: oJumpForward 3261
3258: Choice Lookup Table
          11   3227
3261: oGetAddrLocal 1
3263: oPushResult
3264: oNodeNext
3265: oPop 1
3267: oJumpBack 3199
3269: oReturn
3270: oLocalSpace 1
3272: oInputChoice 3555
3274: oGetAddrLocal 1
3276: oPushResult
3277: oScopeFind
3278: oPop 1
3280: oChoice 3439
3282: oGetLocal 1
3284: oPushResult
3285: oNodeType
3286: oPop 1
3288: oChoice 3380
3290: oSetResult 0
3292: oPushResult
3293: oWarning
3294: oPop 1
3296: oGetLocal 1
3298: oPushResult
3299: oCall 2405
3301: oPop 1
3303: oJumpForward 3399
3305: oGetLocal 1
3307: oPushResult
3308: oCall 2200
3310: oPop 1
3312: oJumpForward 3399
3314: oEmit 9
3316: oGetLocal 1
3318: oPushResult
3319: oCall 4218
3321: oPop 1
3323: oJumpForward 3399
3325: oEmit 17
3327: oGetLocal 1
3329: oPushResult
3330: oCall 4234
3332: oPop 1
3334: oJumpForward 3399
3336: oEmit 18
3338: oGetLocal 1
3340: oPushResult
3341: oCall 4234
3343: oPop 1
3345: oJumpForward 3399
3347: oEmit 18
3349: oGetLocal 1
3351: oPushResult
3352: oCall 4234
3354: oPop 1
3356: oJumpForward 3399
3358: oEmit 19
3360: oGetLocal 1
3362: oPushResult
3363: oCall 4234
3365: oPop 1
3367: oJumpForward 3399
3369: oEmit 20
3371: oGetLocal 1
3373: oPushResult
3374: oCall 4234
3376: oPop 1
3378: oJumpForward 3399
3380: Choice Lookup Table
          18   3369
          17   3358
          16   3347
          15   3336
          14   3325
           8   3314
          10   3305
          11   3290
3397: oError 11
3399: oGetParam 1
3401: oPushResult
3402: oGetLocal 1
3404: oPushResult
3405: oSetResult 5
3407: oPushResult
3408: oNodeGet
3409: oPop 2
3411: oAssign
3412: oGetFromParam 1
3414: oPushResult
3415: oNodeNull
3416: oPop 1
3418: oChoice 3424
3420: oError 10
3422: oJumpForward 3427
3424: Choice Lookup Table
           1   3420
3427: oJumpForward 3445
3429: oGetParam 1
3431: oPushResult
3432: oSetResult 0
3434: oAssign
3435: oError 17
3437: oJumpForward 3445
3439: Choice Lookup Table
           0   3429
           1   3282
3444: oEndChoice
3445: oJumpForward 3565
3447: oInput 0
3449: oGetAddrLocal 1
3451: oPushResult
3452: oScopeFind
3453: oPop 1
3455: oChoice 3511
3457: oGetLocal 1
3459: oPushResult
3460: oCall 4054
3462: oPop 1
3464: oGetLocal 1
3466: oPushResult
3467: oCall 2405
3469: oPop 1
3471: oGetParam 1
3473: oPushResult
3474: oGetLocal 1
3476: oPushResult
3477: oSetResult 5
3479: oPushResult
3480: oNodeGet
3481: oPop 2
3483: oAssign
3484: oGetFromParam 1
3486: oPushResult
3487: oNodeNull
3488: oPop 1
3490: oChoice 3496
3492: oError 10
3494: oJumpForward 3499
3496: Choice Lookup Table
           1   3492
3499: oJumpForward 3517
3501: oCall 2501
3503: oGetParam 1
3505: oPushResult
3506: oSetResult 0
3508: oAssign
3509: oJumpForward 3517
3511: Choice Lookup Table
           0   3501
           1   3457
3516: oEndChoice
3517: oJumpForward 3565
3519: oInput 1
3521: oEmit 9
3523: TOKEN_VALUE
3524: oPushResult
3525: negate
3526: oPop 1
3528: oPushResult
3529: oEmitInt
3530: oPop 1
3532: oGetParam 1
3534: oPushResult
3535: oGetGlobal 2
3537: oAssign
3538: oJumpForward 3565
3540: oEmit 9
3542: TOKEN_VALUE
3543: oPushResult
3544: oEmitInt
3545: oPop 1
3547: oGetParam 1
3549: oPushResult
3550: oGetGlobal 2
3552: oAssign
3553: oJumpForward 3565
3555: Choice Lookup Table
           1   3540
           3   3519
          17   3447
           0   3274
3564: oEndChoice
3565: oReturn
3566: oLocalSpace 1
3568: oInputChoice 3630
3570: oGetAddrLocal 1
3572: oPushResult
3573: oScopeFind
3574: oPop 1
3576: oChoice 3600
3578: oGetLocal 1
3580: oPushResult
3581: oGetParam 1
3583: oPushResult
3584: oCall 3639
3586: oPop 2
3588: oJumpForward 3606
3590: oGetParam 1
3592: oPushResult
3593: oSetResult 0
3595: oAssign
3596: oError 12
3598: oJumpForward 3606
3600: Choice Lookup Table
           0   3590
           1   3578
3605: oEndChoice
3606: oJumpForward 3638
3608: oInput 1
3610: oGetParam 1
3612: oPushResult
3613: oSetResult 0
3615: oAssign
3616: oError 12
3618: oJumpForward 3638
3620: oGetParam 1
3622: oPushResult
3623: oSetResult 0
3625: oAssign
3626: oError 12
3628: oJumpForward 3638
3630: Choice Lookup Table
           1   3620
           3   3608
           0   3570
3637: oEndChoice
3638: oReturn
3639: oLocalSpace 0
3641: oGetParam 2
3643: oPushResult
3644: oNodeType
3645: oPop 1
3647: oChoice 3704
3649: oEmit 21
3651: oGetParam 2
3653: oPushResult
3654: oCall 4234
3656: oPop 1
3658: oJumpForward 3717
3660: oEmit 17
3662: oGetParam 2
3664: oPushResult
3665: oCall 4234
3667: oPop 1
3669: oJumpForward 3717
3671: oEmit 17
3673: oGetParam 2
3675: oPushResult
3676: oCall 4234
3678: oPop 1
3680: oJumpForward 3717
3682: oEmit 22
3684: oGetParam 2
3686: oPushResult
3687: oCall 4234
3689: oPop 1
3691: oJumpForward 3717
3693: oEmit 23
3695: oGetParam 2
3697: oPushResult
3698: oCall 4234
3700: oPop 1
3702: oJumpForward 3717
3704: Choice Lookup Table
          18   3693
          17   3682
          16   3671
          15   3660
          14   3649
3715: oError 12
3717: oGetParam 1
3719: oPushResult
3720: oGetParam 2
3722: oPushResult
3723: oSetResult 5
3725: oPushResult
3726: oNodeGet
3727: oPop 2
3729: oAssign
3730: oReturn
3731: oLocalSpace 2
3733: oInputChoice 3836
3735: oGetAddrLocal 1
3737: oPushResult
3738: oCall 3922
3740: oPop 1
3742: oGetAddrLocal 2
3744: oPushResult
3745: oGetLocal 1
3747: oPushResult
3748: oSetResult 4
3750: oPushResult
3751: oNodeGetInt
3752: oPop 2
3754: oAssign
3755: oGetParam 1
3757: oPushResult
3758: oGetLocal 1
3760: oPushResult
3761: oSetResult 5
3763: oPushResult
3764: oNodeGet
3765: oPop 2
3767: oAssign
3768: oJumpForward 3846
3770: oInput 1
3772: oGetAddrLocal 2
3774: oPushResult
3775: TOKEN_VALUE
3776: oPushResult
3777: negate
3778: oPop 1
3780: oAssign
3781: oGetParam 1
3783: oPushResult
3784: oGetGlobal 2
3786: oAssign
3787: oJumpForward 3846
3789: oGetAddrLocal 2
3791: oPushResult
3792: TOKEN_VALUE
3793: oAssign
3794: oGetParam 1
3796: oPushResult
3797: oGetGlobal 2
3799: oAssign
3800: oJumpForward 3846
3802: oGetAddrLocal 1
3804: oPushResult
3805: oShortFormLookup
3806: oPop 1
3808: oGetAddrLocal 2
3810: oPushResult
3811: oGetLocal 1
3813: oPushResult
3814: oSetResult 4
3816: oPushResult
3817: oNodeGetInt
3818: oPop 2
3820: oAssign
3821: oGetParam 1
3823: oPushResult
3824: oGetLocal 1
3826: oPushResult
3827: oSetResult 5
3829: oPushResult
3830: oNodeGet
3831: oPop 2
3833: oAssign
3834: oJumpForward 3846
3836: Choice Lookup Table
           2   3802
           1   3789
           3   3770
           0   3735
3845: oEndChoice
3846: oGetLocal 2
3848: oReturn
3849: oReturn
3850: oLocalSpace 2
3852: oGetAddrLocal 2
3854: oPushResult
3855: oGetAddrLocal 1
3857: oPushResult
3858: oCall 3731
3860: oPop 1
3862: oAssign
3863: oGetLocal 1
3865: oPushResult
3866: oCall 4176
3868: oPop 1
3870: oGetLocal 2
3872: oReturn
3873: oReturn
3874: oLocalSpace 0
3876: oGetParam 1
3878: oPushResult
3879: oScopeFindRequire
3880: oPop 1
3882: oGetFromParam 1
3884: oPushResult
3885: oCall 3954
3887: oPop 1
3889: oReturn
3890: oLocalSpace 0
3892: oGetParam 1
3894: oPushResult
3895: oScopeFindRequire
3896: oPop 1
3898: oGetFromParam 1
3900: oPushResult
3901: oCall 3972
3903: oPop 1
3905: oReturn
3906: oLocalSpace 0
3908: oGetParam 1
3910: oPushResult
3911: oScopeFindRequire
3912: oPop 1
3914: oGetFromParam 1
3916: oPushResult
3917: oCall 4000
3919: oPop 1
3921: oReturn
3922: oLocalSpace 0
3924: oGetParam 1
3926: oPushResult
3927: oScopeFindRequire
3928: oPop 1
3930: oGetFromParam 1
3932: oPushResult
3933: oCall 4018
3935: oPop 1
3937: oReturn
3938: oLocalSpace 0
3940: oGetParam 1
3942: oPushResult
3943: oScopeFindRequire
3944: oPop 1
3946: oGetFromParam 1
3948: oPushResult
3949: oCall 4036
3951: oPop 1
3953: oReturn
3954: oLocalSpace 0
3956: oGetParam 1
3958: oPushResult
3959: oNodeType
3960: oPop 1
3962: oChoice 3966
3964: oJumpForward 3971
3966: Choice Lookup Table
           7   3964
3969: oError 1
3971: oReturn
3972: oLocalSpace 0
3974: oGetParam 1
3976: oPushResult
3977: oSetResult 5
3979: oPushResult
3980: oNodeGet
3981: oPop 2
3983: oPushResult
3984: oGetGlobal 3
3986: oPushResult
3987: oNodeEqual
3988: oPop 2
3990: oChoice 3994
3992: oJumpForward 3999
3994: Choice Lookup Table
           1   3992
3997: oError 3
3999: oReturn
4000: oLocalSpace 0
4002: oGetParam 1
4004: oPushResult
4005: oNodeType
4006: oPop 1
4008: oChoice 4012
4010: oJumpForward 4017
4012: Choice Lookup Table
           5   4010
4015: oError 4
4017: oReturn
4018: oLocalSpace 0
4020: oGetParam 1
4022: oPushResult
4023: oNodeType
4024: oPop 1
4026: oChoice 4030
4028: oJumpForward 4035
4030: Choice Lookup Table
           8   4028
4033: oError 2
4035: oReturn
4036: oLocalSpace 0
4038: oGetParam 1
4040: oPushResult
4041: oNodeType
4042: oPop 1
4044: oChoice 4048
4046: oJumpForward 4053
4048: Choice Lookup Table
           6   4046
4051: oError 6
4053: oReturn
4054: oLocalSpace 0
4056: oGetParam 1
4058: oPushResult
4059: oNodeType
4060: oPop 1
4062: oChoice 4066
4064: oJumpForward 4071
4066: Choice Lookup Table
          11   4064
4069: oError 5
4071: oReturn
4072: oLocalSpace 0
4074: oGetParam 1
4076: oPushResult
4077: oSetResult 5
4079: oPushResult
4080: oNodeGet
4081: oPop 2
4083: oPushResult
4084: oNodeNull
4085: oPop 1
4087: oChoice 4097
4089: oSetResult 1
4091: oPushResult
4092: oWarning
4093: oPop 1
4095: oJumpForward 4100
4097: Choice Lookup Table
           0   4089
4100: oReturn
4101: oLocalSpace 0
4103: oGetParam 2
4105: oPushResult
4106: oSetResult 5
4108: oPushResult
4109: oNodeGet
4110: oPop 2
4112: oPushResult
4113: oGetParam 1
4115: oPushResult
4116: oNodeEqual
4117: oPop 2
4119: oChoice 4123
4121: oJumpForward 4128
4123: Choice Lookup Table
           1   4121
4126: oError 0
4128: oReturn
4129: oLocalSpace 0
4131: oGetParam 2
4133: oPushResult
4134: oGetParam 1
4136: oPushResult
4137: oNodeEqual
4138: oPop 2
4140: oReturn
4141: oReturn
4142: oLocalSpace 0
4144: oGetParam 2
4146: oPushResult
4147: oGetParam 1
4149: oPushResult
4150: oNodeEqual
4151: oPop 2
4153: oChoice 4157
4155: oJumpForward 4162
4157: Choice Lookup Table
           1   4155
4160: oError 0
4162: oReturn
4163: oLocalSpace 0
4165: oGetParam 1
4167: oPushResult
4168: oGetGlobal 2
4170: oPushResult
4171: oNodeEqual
4172: oPop 2
4174: oReturn
4175: oReturn
4176: oLocalSpace 0
4178: oGetParam 1
4180: oPushResult
4181: oGetGlobal 2
4183: oPushResult
4184: oNodeEqual
4185: oPop 2
4187: oChoice 4191
4189: oJumpForward 4196
4191: Choice Lookup Table
           1   4189
4194: oError 0
4196: oReturn
4197: oLocalSpace 0
4199: oGetParam 1
4201: oPushResult
4202: oGetGlobal 3
4204: oPushResult
4205: oNodeEqual
4206: oPop 2
4208: oChoice 4212
4210: oJumpForward 4217
4212: Choice Lookup Table
           1   4210
4215: oError 3
4217: oReturn
4218: oLocalSpace 0
4220: oGetParam 1
4222: oPushResult
4223: oSetResult 4
4225: oPushResult
4226: oNodeGetInt
4227: oPop 2
4229: oPushResult
4230: oEmitInt
4231: oPop 1
4233: oReturn
4234: oLocalSpace 0
4236: oGetParam 1
4238: oPushResult
4239: oSetResult 10
4241: oPushResult
4242: oNodeGetInt
4243: oPop 2
4245: oPushResult
4246: oEmitInt
4247: oPop 1
4249: oReturn
