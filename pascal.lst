   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pStrLit
   2:    pCharLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushAddrGlobal   % <offset> - push ptr to global var (same as tPushConstP)
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tCastBtoI         % zero-extend uint8_t to int32_t
   2:    tCastItoB         % truncate int32_t to uint8_t
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tNot              % negate top boolean
   2:    tEqualB
   2:    tNotEqualB
   2:    tGreaterB         % B is uint8_t, so these are unsigned comparisons
   2:    tLessB
   2:    tGreaterEqualB
   2:    tLessEqualB
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too, but I'm moving to tEqualB etc for those
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tGreaterP
   2:    tLessP
   2:    tGreaterEqualP
   2:    tLessEqualP
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteChar        %  "     "    : write char, pop
   2:    tWriteStr         %  "     "    : write string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteCR          %  "     "    : write cr
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    eCantUsePredSuccOnEnumWithValueGaps
   2:    eCantDereference
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nBuiltInFunc
   2: 	nBuiltInProc
   2: 	nConst
   2: 	nEnumValue
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nTypedConst
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nIntegerType
   2: 	nByteType
   2: 	nBooleanType
   2: 	nBooleanCFType
   2: 	nCharType
   2: 	nStringType
   2: 	nPointerType
   2: 	nUniversalPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qNameTable
   2: 	qHasGap
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
      % intrinsic types & type constructs
      
   2: type typ:
   2:    tyNone     = 0    % in ptrTyp field of TT, means no ptr to type defined
   2:    tyInteger
   2:    tyBoolean
   2:    tyChar
   2:    tyString
   2:    tyFile            % tyInteger..tyFile are scalars (types on their own)
   2:    tyPointer         % following are type constructor classes...
   2:    tyArray           %   (they are not type#'s)
   2:    tyRecord
   2:    tyParams          % like record; a collection of proc/func params
   2:    tySet;
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     oMAXINT >> int    % the maximum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % adds a predefined id to the scanner's id table, and returns the id code
   2:     oIdAdd_mysystem >> int
   2:     oIdAdd_File >> int
   2:     oIdAdd_Integer >> int
   2:     oIdAdd_Boolean >> int
   2:     oIdAdd_Char >> int
   2:     oIdAdd_Byte >> int
   2:     oIdAdd_Pointer >> int
   2:     oIdAdd_String >> int
   2:     oIdAdd_True >> int
   2:     oIdAdd_False >> int
   2:     oIdAdd_Ord >> int
   2:     oIdAdd_Chr >> int
   2:     oIdAdd_Pred >> int
   2:     oIdAdd_Succ >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValueNegate                % negate top value
   2:    oValueTop >> int            % get top value on value stack
   2:    oValuePop;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      
   2: int     mysystemId               % id of identifier "mysystem"
      
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanCFType
   2: Node    CharType
   2: Node    ByteType
   2: Node    UniversalPointerType
   2: Node    StringType
      
      % nBuiltInFunc
   2: Node    BuiltIn_Ord
   2: Node    BuiltIn_Chr
   2: Node    BuiltIn_Pred
   2: Node    BuiltIn_Succ
      
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: EnumTypeRef( out Node resultType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: OrdinalHigh( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowCF( out Label falseLabel );
   2: BoolExprAllowCF( out Label falseLabel );
   2: BoolTermAllowCF( out Label falseLabel );
   2: BoolFactorAllowCF( out Label falseLabel );
   2: ArithExprAllowCF( out Label falseLabel );
   2: TermAllowCF( out Label falseLabel );
   2: FactorAllowCF( out Label falseLabel );
   2: PrimaryAllowCF( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueVar( Node decl, boolean writeable );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: CFToVal( inout Label falseLabel );
   2: ValToCF( out Label falseLabel );
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Declarations ----------------------------
      
   2: Program:
   4:    Node t
      
   4:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
   9:    oScopeBegin( 0, allocGlobal )
  18:    Node rootScope = oScopeCurrent
      
  23:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
  25:    .tEnter  oEmitInt( 0 )
  33:    Label mainLabel = oLabelNew
      
  38:    .tAllocActuals  oEmitInt( 0 )
  46:    .tCall  oEmitLabel( mainLabel )
  54:    .tFreeActuals  oEmitInt( 0 )
  62:    .tReturn
      
  64:    pProgram
  66:    pIdent
      
  68:    Node program = oNodeNew( nProgram )
  78:    oNodeSetInt( program, qIdent, LAST_ID )
  89:    oNodeSet( workspace, qProgram, program )
      
      
 101:    [
 101:       | '(' :
 103:          pIdent      % input, output files
      
 105:          t = @newIdent( nVar, LAST_ID )
 118:          oNodeSet( t, qType, FileType )
 130:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
 136:          ','
 138:          pIdent
      
 140:          t = @newIdent( nVar, LAST_ID )
 153:          oNodeSet( t, qType, FileType )
 165:          oScopeDeclareAlloc( t )
      
 171:          ')'
 173:       | * :
 178:    ]
 178:    ';'
      
 180:    @UsesMySystem( program )
         % The uses clause may only appear once, immediately after the program declaration.
 187:    [
 187:       | pUses :  @UsesClause( program )
 196:       | * :
 201:    ]
 201:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
 208:    oScopeBegin( 0, allocGlobal )
 217:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
 222:    oScopeBegin( 0, allocDown )
 231:    oNodeSet( oScopeCurrent, qExtends, globalScope )
 242:    initScope = oScopeCurrent
 247:    oNodeSet( program, qMainRoutineScope, initScope )
 259:    oScopeEnd
      
 260:    @BlockDecls( nGlobalVar )
      
      
 267:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
 273:    boolean isMain = true
 279:    @BlockStmt( mainLabel, globalScope, isMain )
      
 292:    oScopeEnd   % main routine scope
      
 293:    '.'
 295:    @CheckForUndefinedLabels
 297:    oScopeEnd   % global scope
 298:    @EndUsedUnits( program )   % used units scopes
 306:    ;
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
 306: UsesClause( Node user ):
 308:    {
 308:       pIdent
 310:       @Uses( LAST_ID, user )
 319:       [
 319:          | ',' :
 321:          | * :  >
 328:       ]
 328:    }   
 330:    ';'
 333:    ;
      
      
      % Process an implicit "uses mysystem" in every module, except in the mysystem unit itself.
      % (I'm calling the unit mysystem rather than system, so fpc doesn't use it to replace its own system unit.)
      %
 333: UsesMySystem( Node user ):
 335:    [ equal( oNodeGetInt( user, qIdent ), mysystemId )
 352:       | true :  >>
 354:       | * :
 359:    ]
 359:    @Uses( mysystemId, user )
 370:    ;
      
      
      % The given user module uses a unit with the given id,
      % which may or may not have been loaded already.
      %
 370: Uses( int id, Node user ):
 372:    Node unit = @FindOrCompileUnit( id )
 383:    [ equal_node( unit, Null )
 393:       | false :
 394:          oNodeAddLast( user, qUsedUnits, unit )
      
               % Put a declaration in the current scope, naming the unit and pointing to it.
               % This is to allow references to  <unit>.<identifier_in_unit>
 406:          Node unitRef = oNodeNew( nUnitRef )
 416:          oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 435:          oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 454:          oScopeDeclare( unitRef )
 460:       | * :
 465:    ];
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 466: ResolveUnitRef( inout Node decl ):
 468:    [ oNodeType( decl )
 475:       | nUnitRef :
 476:          Node scope = oNodeGet( decl, qPublicScope )
 489:          '.'
 491:          pIdent
 493:          decl = oScopeFindRequireInScope( scope )
 503:       | * :
 508:    ];
      
      
 509: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 511:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 524:    {
 524:       Node unit = oNodeIterValue( unitIt )
 534:       [ oNodeNull( unit )
 541:          | false :
 542:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 555:          | * :
 560:             >
 562:       ]
 562:       oNodeIterNext( unitIt )
 568:    }
 571:    ;
      
 571: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 573:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 586:    {
 586:       Node unit = oNodeIterValue( unitIt )
 596:       [ oNodeNull( unit )
 603:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 604:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 620:                | true :
 621:                | false :  #eInternalScopeMismatch
 625:             ]
 633:             oScopeEnd
 634:          | * :
 639:             >
 641:       ]
 641:       oNodeIterPrev( unitIt )
 647:    }
 650:    ;
      
      
 650: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 652:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 671:    [ equal_node( unit, Null )
 681:       | false :  >> unit
 685:       | * :
 690:    ]
      
         % If not, search for the source file on disk
 690:    boolean ok = oIncludeUnitFile( id )
 700:    [ ok
 703:       | false :  #eCantFindUnitFile  >> Null
 709:       | * :
 714:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 714:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 720:    oIncludeEnd
 721:    >> unit;
      
      
      
 725: Unit >> Node:
 727:    pUnit
 729:    pIdent
 731:    Node unit = oNodeNew( nUnit )
 741:    oNodeSetInt( unit, qIdent, LAST_ID )
 752:    Node unitImpl = oNodeNew( nUnitImpl )
 762:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 773:    oNodeSet( unit, qImpl, unitImpl )
 785:    ';'
      
         % mandatory sections
      
 787:    pInterface
 789:    @UsesMySystem( unit )
 796:    [
 796:       | pUses :   @UsesClause( unit )
 805:       | * :
 810:    ]
 810:    @EnterUsedUnits( unit )
      
 817:    oScopeBegin( 0, allocGlobal )
 826:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 837:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 842:    oScopeBegin( 0, allocDown )
 851:    initScope = oScopeCurrent
 856:    oNodeSet( unit, qInitRoutineScope, initScope )
 868:    oScopeEnd
      
 869:    @UnitInterface( unit )
 876:    oScopeEnd  % interface scope
      
 877:    pImplementation
 879:    @UsesMySystem( unitImpl )
 886:    [
 886:       | pUses :   @UsesClause( unitImpl )
 895:       | * :
 900:    ]
 900:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 907:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 920:    oScopeBegin( 0, allocGlobal )
 929:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
 940:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
 958:    globalScope = oScopeCurrent
 963:    @UnitImplementation( unit )
      
 970:    [
 970:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
 982:       | * :                @UnitInitialization( unit, false )  % implicit init routine
 997:    ]
 997:    [
 997:       | pFinalization :  @UnitFinalization( unit, true )
1009:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
1024:    ]
1024:    pEnd  '.'
      
1028:    oScopeEnd  % impl scope
1029:    oScopeEnd  % interface scope
1030:    @EndUsedUnits( unitImpl )  % used units scopes
1037:    @EndUsedUnits( unit )
1044:    oNodeAddLast( workspace, qUnits, unit )
1056:    >> unit;
      
      
1060: UnitInterface( Node unit ):
1062:    {[
1062:       | pConst :     @ConstDecl
1066:       | pType :      @TypeDecl
1070:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
1079:       | pProcedure :
1081:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
1087:          [
1087:             | pExternal :
1089:                @ExternalDecl( decl )
1096:                ';'
1098:             | * :
1103:          ]
      
1103:       | pFunction :
1105:          Node decl = @FuncHeaderDecl
1111:          [
1111:             | pExternal :
1113:                @ExternalDecl( decl )
1120:                ';'
1122:             | * :
1127:          ]
      
1127:       | * :          >
1142:    ]}
1145:    ;
      
1145: UnitImplementation( Node unit ):
1147:    @BlockDecls( nGlobalVar )
1155:    ;
      
      
1155: UnitInitialization( Node unit, boolean hasStmts ):
1157:    Label label = oLabelNew
1162:    .tLabel  oEmitLabel( label )
1170:    oNodeSetLabel( unit, qInitLabel, label )
      
1182:    int patchLS
1182:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
1191:    Node scope
1191:    Code initCode
      
1191:    scope = oNodeGet( unit, qPublicScope )
1204:    initCode = oNodeGetCode( scope, qInitCode )
1217:    oEmitCode( initCode )
1223:    oNodeSetCode( scope, qInitCode, codeNull )
      
1235:    scope = oNodeGet( unit, qPrivateScope )
1248:    initCode = oNodeGetCode( scope, qInitCode )
1261:    oEmitCode( initCode )
1267:    oNodeSetCode( scope, qInitCode, codeNull )
      
1279:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1292:    [ hasStmts
1295:       | true :     
1296:          @Statement
1298:          {[
1298:             | ';' :  @Statement
1302:             | * :    >
1309:          ]}
1311:       | * :
1316:    ]
      
1316:    .tReturn
      
1318:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1330:    oPatch( patchLS, localSpace )
1339:    oScopeEnd   % init routine scope, for temporaries
1341:    ;
      
      
1341: UnitFinalization( Node unit, boolean hasStmts ):
1343:    Label label = oLabelNew
1348:    .tLabel  oEmitLabel( label )
1356:    oNodeSetLabel( unit, qFinalLabel, label )
      
1368:    int patchLS
1368:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1377:    oScopeBegin( 0, allocDown )
      
1386:    [ hasStmts
1389:       | true :     
1390:          @Statement
1392:          {[
1392:             | ';' :  @Statement
1396:             | * :    >
1403:          ]}
1405:       | * :
1410:    ]
      
1410:    .tReturn
      
1412:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1424:    oPatch( patchLS, localSpace )
1433:    oScopeEnd   % final routine scope, for temporaries
1435:    ;
      
      
1435: Block( node_type varNodeType, Label labelForBody ):
1437:    @BlockDecls( varNodeType )
1444:    @BlockStmt( labelForBody, oScopeCurrent, false )
1456:    @CheckForUndefinedLabels
1459:    ;
      
      
1459: BlockDecls( node_type varNodeType ):
1461:    {[
1461:       | pConst :     @ConstDecl
1465:       | pType :      @TypeDecl
1469:       | pVar :       @VarDecl( varNodeType )
1478:       | pLabel :     @LabelDecl
1482:       | pProcedure : @ProcDecl
1486:       | pFunction :  @FuncDecl
1490:       | * :          >
1507:    ]}
1509:    @CheckForUndefinedMethods
1512:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
1512: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
1515:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
1515: CheckForUndefinedLabels:
1517:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
1529:    {
1529:       Node decl = oNodeIterValue( it )
1539:       [ oNodeNull( decl )
1546:          | false :
1547:          | * :  >
1554:       ]
1554:       [ oNodeType( decl )
1561:          | nLabel :
1562:             [ oNodeGetBoolean( decl, qDefined )
1572:                | false :
1573:                   [ oNodeGetBoolean( decl, qUsed )
1583:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
1586:                      | * :
1591:                   ]
1591:                | * :
1596:             ]
1596:          | * :
1601:       ]
1601:       oNodeIterNext( it )
1607:    }
1610:    ;
      
      
1610: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1612:    NodeIter it = oNodeGetIter( workspace, qUnits )
1625:    {
1625:       Node unit = oNodeIterValue( it )
1635:       [ oNodeNull( unit )
1642:          | true :  >
1645:          | false :
1647:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1655:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1670:             .tFreeActuals  oEmitInt( 0 )
1678:             oNodeIterNext( it )
1684:       ]
1692:    };
      
      
1695: FinalizeUnits:
1697:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1710:    {
1710:       Node unit = oNodeIterValue( it )
1720:       [ oNodeNull( unit )
1727:          | true :  >
1730:          | false :
1732:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1740:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1755:             .tFreeActuals  oEmitInt( 0 )
1763:             oNodeIterPrev( it )
1769:       ]
1777:    };
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
1780: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
1782:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
1790:    int patchLS
1790:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
1799:    [ isMain
1802:       | true :  @InitializeUnits
1805:       | * :
1810:    ]
      
         % insert any code for initialization of this scope's variables
1810:    Code initCode = oNodeGetCode( varScope, qInitCode )
1823:    oEmitCode( initCode )
1829:    oNodeSetCode( varScope, qInitCode, codeNull )
      
1841:    @Statement
      
1843:    [ isMain
1846:       | true :  @FinalizeUnits
1849:       | * :
1854:    ]
      
1854:    .tReturn
      
1856:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1868:    oPatch( patchLS, localSpace )
1878:    ;
      
      
      % modifers that may appear on a proc/function declaration.
      %
1878: MethodModifiers( Node decl ):
1880:    {[
1880:       | pCdecl :
1882:          oNodeSetBoolean( decl, qCdecl, true )
1894:          ';'
      
1896:       | * : >
1903:    ]}
1906:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
1906: GetOrCreateInitCode( Node scope ) >> Code:
1908:    Code initCode = oNodeGetCode( scope, qInitCode )
1921:    [ equal_code( initCode, codeNull )
1931:       | true :
1932:          initCode = oCodeNew
1937:          oNodeSetCode( scope, qInitCode, initCode )
1949:       | * :
1954:    ]
1954:    >> initCode;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note, I'll hold off on issuing the .tLabelExtern until we see that
      % the external method is actually called.  Otherwise we'd fill each output file
      % with all the external method names in my included libraries, which seems dumb.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
1958: ExternalDecl( Node decl ):
1960:    [ equal_zero( @DeclLevel( decl ) )
1972:       | false :  #eExternalMethodCannotBeNested
1975:       | * :
1980:    ]
1980:    oNodeSetBoolean( decl, qExternal, true )
1992:    [
1992:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
1994:          [
1994:             | pName :
1996:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
1998:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
2009:             | * :
2014:          ]
2014:       | * :
2019:    ]
2020:    ;
      
      
2020: ProcHeaderDecl >> Node:
2022:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2024:    boolean redeclaring = false
2030:    Node decl = oScopeFindInCurrentScope
      
2035:    [ oNodeNull( decl )
2042:       | true :
               % first declaration
2043:          decl = @newIdent( nProc, LAST_ID )
2056:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2067:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2069:          redeclaring = true
2075:          [ oNodeGetBoolean( decl, qBodyDefined )
2085:             | true : #eAlreadyDefined
2088:             | * :
2093:          ]
2093:          [ oNodeGetBoolean( decl, qExternal )
2103:             | true : #eAlreadyDefined
2106:             | * :
2111:          ]
2111:          [ oNodeType( decl )
2118:             | nProc :
2119:             | * : #eAlreadyDefined   % wrong kind
2126:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2126:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2145:          oNodeSet( decl, qParams, Null )
2157:    ]
      
2165:    int level = @ScopeLevel
2171:    boolean nested = greater( level, 0 )
2184:    inc( level )
2190:    oScopeBegin( level, allocUp )
2199:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2204:    [ nested
2207:       | true :
2208:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2223:       | * :
2228:    ]
      
2228:    @FormalArgDecl
2230:    oNodeSet( decl, qParams, paramScope )
2242:    oScopeEnd
2243:    ';'
      
2245:    [ redeclaring
2248:       | false : oScopeDeclare( decl )
2255:       | true :  % TO DO: check that qParams is consistent with qOldParams
2257:    ]
      
2265:    @MethodModifiers( decl )
2272:    >> decl;
      
      
2276: ProcDecl:
2278:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
2284:    [
2284:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2286:       | pExternal : @ExternalDecl( decl )
      
2295:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2302:          Node paramScope = oNodeGet( decl, qParams )
2315:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
2321:          int level = oNodeGetInt( paramScope, qLevel )
2334:          oScopeBegin( level, allocDown )
2343:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2354:          Label label = oNodeGetLabel( decl, qValue )
2367:          @Block( nLocalVar, label )
2377:          oNodeSetBoolean( decl, qBodyDefined, true )
2389:          oScopeEnd
      
2390:          oScopeEnd  % paramScope
2391:    ]
2391:    ';';
      
      
      
2394: FuncHeaderDecl >> Node:
2396:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2398:    boolean redeclaring = false
2404:    Node decl = oScopeFindInCurrentScope
      
2409:    [ oNodeNull( decl )
2416:       | true :
               % first declaration
2417:          decl = @newIdent( nFunc, LAST_ID )
2430:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2441:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2443:          redeclaring = true
2449:          [ oNodeGetBoolean( decl, qBodyDefined )
2459:             | true : #eAlreadyDefined
2462:             | * :
2467:          ]
2467:          [ oNodeType( decl )
2474:             | nFunc :
2475:             | * : #eAlreadyDefined   % wrong kind
2482:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2482:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2501:          oNodeSet( decl, qParams, Null )
2513:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
2532:          oNodeSet( decl, qType, Null )
2544:    ]
      
2552:    int level = @ScopeLevel
2558:    boolean nested = greater( level, 0 )
2571:    inc( level )
2577:    oScopeBegin( level, allocUp )
2586:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2591:    [ nested
2594:       | true :
2595:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2610:       | * :
2615:    ]
      
2615:    @FormalArgDecl
2617:    oNodeSet( decl, qParams, paramScope )
      
2629:    ':'
      
2631:    Node theType
2631:    @TypeRef( theType )
2638:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2650:    Node ptrType = @PointerTypeTo( theType )
2661:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2677:    oScopeEnd
2678:    ';'
      
2680:    [ redeclaring
2683:       | false : oScopeDeclare( decl )
2690:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2692:    ]
      
2700:    @MethodModifiers( decl )
      
2707:    >> decl;
      
      
2711: FuncDecl:
2713:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2719:    [
2719:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2721:       | pExternal : @ExternalDecl( decl )
      
2730:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2737:          Node paramScope = oNodeGet( decl, qParams )
2750:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2756:          int level = oNodeGetInt( paramScope, qLevel )
2769:          oScopeBegin( level, allocDown )
2778:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2789:          Label label = oNodeGetLabel( decl, qValue )
2802:          @Block( nLocalVar, label )
2812:          oNodeSetBoolean( decl, qBodyDefined, true )
2824:          oScopeEnd
      
2825:          oScopeEnd  % paramScope
2826:    ]
2826:    ';';
      
      
2829: FormalArgDecl:
2831:    [
2831:       | '(' :
2833:          {
2833:             NodeVec decls = oNodeVecNew
2838:             Node decl
2838:             boolean isInOut = false
      
2844:             [
2844:                | pVar : isInOut = true
2852:                | * :
2857:             ]
      
2857:             {  pIdent
      
2859:                decl = @newIdent( nParam, LAST_ID )
2872:                oNodeSetBoolean( decl, qInOut, isInOut )
2884:                oNodeVecAppend( decls, decl )
      
2893:                [
2893:                   | ':' : >
2897:                   | ',' :
2899:                ]
2907:             }
      
2909:             Node theType
2909:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
2916:             Node allocType
2916:             [ isInOut
2919:                | true :   allocType = @PointerTypeTo( theType )
2931:                | * :      allocType = theType
2942:             ]
      
2942:             int i = 0
2948:             {[ equal( i, oNodeVecSize( decls ) )
2962:                | false :
2963:                   decl = oNodeVecElement( decls, i )
      
2976:                   oNodeSet( decl, qType, theType )
2988:                   oScopeDeclare( decl )
2994:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
3010:                   inc( i )
3016:                | * :
3021:                   >
3023:             ]}
      
3025:             oNodeVecDelete( decls )
      
3031:             [
3031:                | ')' : >
3035:                | ';' :
3037:             ]
3045:          }
3047:       | * :
3052:    ];
      
      
3053: ConstDecl:
3055:    {[
3055:       | pIdent :
3057:          [
3057:             | ':' :
3059:                @TypedConstDecl
3061:             | * :
3066:                @UntypedConstDecl
3068:          ]
3068:       | * :
3073:          >
3075:    ]};
      
      
      % Parse an untyped const declaration.
      % We've just accepted the identifier.
      %
3078: UntypedConstDecl:
3080:    Node decl = @newIdent( nConst, LAST_ID )
3093:    '='
      
3095:    @ConstExpr
         % TO DO: currently ConstExpr leaves int result on oValue stack
3097:    int val = oValueTop
3102:    oValuePop
3103:    oNodeSetInt( decl, qValue, val )
      
         % TO DO: different types.  Currently assumes int!
         % Untyped const decl is supposed to allow:
         %   ordinal types, set types, pointer types (but only Nil), real types, char, string.
3115:    oNodeSet( decl, qType, IntegerType )
      
3127:    oScopeDeclare( decl )
3133:    ';'
3136:    ;
      
      
      % Parse a typed const declaration.
      % We've just accepted the identifier and ':'
      %
3136: TypedConstDecl:
3138:    Node decl = @newIdent( nTypedConst, LAST_ID )
      
3151:    Node theType
3151:    @TypeRef( theType )
3158:    oNodeSet( decl, qType, theType )
      
         % TO DO: array and record consts are allocated in global memory,
         % with global offset stored as decl value.
         % Scalar consts are not allocated in memory, and their value is
         % stored directly as the decl value.
      
         % TO DO: skip subranges, similar to oTypeSNodeType.
3170:    [ oNodeType( theType )
3177:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType:
               % Parse expression and store value in decl
3178:          '='
      
3180:          @ConstExpr
               % TO DO: currently ConstExpr leaves int result on oValue stack
3182:          int val = oValueTop
3187:          oValuePop
3188:          oNodeSetInt( decl, qValue, val )
3200:          oScopeDeclare( decl )
3206:          ';'
      
3208:       | nStringType, nFileType, nPointerType, nUniversalPointerType :
3210:          #eNotImplemented
      
3212:       | nArrayType, nRecordType :
               % Allocate global space, store address in decl.
               % Push into global scope init code stream (since we'll be issuing code
               % rather than creating static data, at the moment).
               % Parse expression and store in global memory.
3214:          oScopeEnter( globalScope )
3220:          int addr = oScopeAllocType( theType )
3230:          oScopeEnd
3231:          oCodePush( @GetOrCreateInitCode( globalScope ) )
3242:          oNodeSetInt( decl, qValue, addr )
3254:          '='
3256:          @TypedConstInit( theType, addr )
3266:          oCodePop
3267:          oScopeDeclare( decl )
3273:          ';'
3275:    ]
3302:    ;
      
      
      % Parse the initial value of a constant that's being stored in global memory.
      % (An array or record constant, and recursively all its elements.)
      % Given the type, and the address in global memory for the const value.
      % The caller has already pushed into the global init code stream.
      %
3302: TypedConstInit( Node theType, int addr ):
      
         % TO DO: skip subranges, similar to oTypeSNodeTYpe
3304:    [ oNodeType( theType )
3311:       | nArrayType :
3312:          Node baseType = oNodeGet( theType, qBaseType )
3325:          Node indexType = oNodeGet( theType, qIndexType )
3338:          int low = @OrdinalLow( indexType )
3349:          int high = @OrdinalHigh( indexType )
3360:          int elementSize = oNodeGetInt( baseType, qSize )
      
3373:          '('
               % Loop over elements
3375:          int i = low
3381:          {
3381:             @TypedConstInit( baseType, addr )
3391:             [ equal( i, high )
3401:                | true : >
3404:                | false :
3406:             ]
3414:             ','
3416:             addr = add( addr, elementSize )
3429:             inc( i )
3435:          }
3437:          ')'
      
3439:       | nRecordType :
3441:          '('
3443:          Node fieldScope = oNodeGet( theType, qScope )
               % Loop over zero or more named fields.  It's not necessary to name them all.
               % fpc says the names that are given should be in order, but I'm not requiring that.
               % Since this is global memory, uninitialized fields will be left as 0.
3456:          {
3456:             [
3456:                | pIdent :
3458:                | * :  >
3465:             ]
3465:             Node field = oScopeFindRequireInScope( fieldScope )
3475:             ':'
3477:             Node fieldType = oNodeGet( field, qType )
3490:             int fieldAddr = add( addr, oNodeGetInt( field, qValue ) )
3510:             @TypedConstInit( fieldType, fieldAddr )
3520:             [
3520:                | ';' :
3522:                | * :  >
3529:             ]
3529:          }
3531:          ')'
      
3533:       | nBooleanType, nByteType, nCharType:
3535:          .tPushAddrGlobal  oEmitInt( addr )
3543:          @ConstExpr
3545:          .tPushConstI  oEmitInt( oValueTop )
3552:          oValuePop
3553:          .tAssignB
      
3555:       | nIntegerType, nEnumType:
3557:          .tPushAddrGlobal  oEmitInt( addr )
3565:          @ConstExpr
3567:          .tPushConstI  oEmitInt( oValueTop )
3574:          oValuePop
3575:          .tAssignI
      
3577:       | nStringType, nFileType, nPointerType, nUniversalPointerType :
3579:          #eNotImplemented
3581:    ]
3608:    ;
      
      
3608: TypeDecl:
3610:    {[
3610:       | pIdent :
3612:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3625:          '='
3627:          Node theType
3627:          @TypeRef( theType )
3634:          oNodeSet( decl, qType, theType )
3646:          oScopeDeclare( decl )
3652:          ';'
3654:       | * :
3659:          >
3661:    ]};
      
3664: VarDecl( node_type varNodeType ):
3666:    {[
3666:       | pIdent :
3668:          NodeVec decls = oNodeVecNew
3673:          Node decl
3673:          {
3673:             decl = @newIdent( varNodeType, LAST_ID )
3686:             oNodeVecAppend( decls, decl )
3695:             [
3695:                | ',' :
3697:                   pIdent
3699:                | * :
3704:                   >
3706:             ]
3706:          }
3708:          ':'
3710:          Node theType
3710:          @TypeRef( theType )
      
3717:          int i = 0
3723:          {[ equal( i, oNodeVecSize( decls ) )
3737:             | false :
3738:                decl = oNodeVecElement( decls, i )
3751:                oNodeSet( decl, qType, theType )
3763:                oScopeDeclareAlloc( decl )
3769:                inc( i )
3775:             | * :
3780:               >
3782:          ]}
      
               % optional initialization
3784:          [
3784:             | '=' :
3786:                [ oNodeVecSize( decls )
3793:                   | 1 :
3794:                   | * :  #eOnlyOneVarCanBeInitialized
3801:                ]
      
                     % we need an initCode stream for this scope
3801:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3811:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3817:                boolean changedScope = false
3823:                [ equal_zero( @ScopeLevel )
3830:                   | true : oScopeEnter( initScope )
3837:                            changedScope = true
3843:                   | * :
3848:                ]
                     % generate assignment in initCode stream
3848:                @LValueVar( decl, true )
3858:                @Expr
3860:                @CoerceType
3862:                @Assign
3864:                [ changedScope
3867:                   | true : oScopeEnd
3869:                   | * :
3874:                ]
3874:                oCodePop
                   
3875:             | * :
3880:          ]
      
3880:          oNodeVecDelete( decls )
3886:          ';'
3888:       | * :
3893:          >
3895:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3898: LabelDecl:
3900:    {
3900:       Node decl
3900:       [
3900:          | pIdent :
3902:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3904:             oChangeIntLitToLabelIdent
3905:       ]
3913:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
3926:       Label label = oLabelNew
3931:       oNodeSetLabel( decl, qValue, label )
3943:       oScopeDeclare( decl )
3949:       [
3949:          | ',' :
3951:          | * :
3956:             >
3958:       ]
3958:    }
3960:    ';'
3963:    ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
3963: TypeRef( out Node resultType ):
3965:    [
3965:       | pIdent :           % previously named type (including intrinsics)
3967:          Node decl = oScopeFindRequire
3972:          @ResolveUnitRef( decl )
3979:          [ oNodeType( decl )
3986:             | nTypeDecl :
3987:                resultType = oNodeGet( decl, qType )
4000:             | * :
4005:                #eNotType
4007:                resultType = IntegerType
4013:          ]
         
4013:       | pArray :
4015:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
4017:          NodeVec dimensions = oNodeVecNew
      
4022:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
4022:             Node subrange = oNodeNew( nSubrangeType )
                  % TO DO: currently assuming subrange of integer
4032:             oNodeSet( subrange, qBaseType, IntegerType )
      
                  % TO DO: currently ConstExpr leaves int result on oValue stack
4044:             @ConstExpr
4046:             oNodeSetInt( subrange, qLow, oValueTop )
4057:             oValuePop
4058:             '..'
4060:             @ConstExpr
4062:             oNodeSetInt( subrange, qHigh, oValueTop )
4073:             oValuePop
4074:             oNodeSetInt( subrange, qSize, 4 )   % maybe don't need
      
4086:             oTypeAdd( subrange )
      
4092:             Node a = oNodeNew( nArrayType )
4102:             oNodeSet( a, qIndexType, subrange )
      
4114:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
4123:             [
4123:                | ']' : >
4127:                | ',' :
4129:             ]
4137:          }
      
4139:          pOf
4141:          Node baseType
4141:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
4148:          int dim = oNodeVecSize( dimensions )
      
4158:          {
4158:              dec(dim)
      
4164:              Node a = oNodeVecElement( dimensions, dim )
      
4177:              oNodeSet( a, qBaseType, baseType )
4189:              Node subrange = oNodeGet( a, qIndexType )
4202:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
4229:              inc( width )
4235:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
4261:              oTypeAdd( a )
4267:              baseType = a
      
4273:              [ equal_zero(dim)
4280:                  | true:  >
4283:                  | *:
4288:              ]
4288:          }
      
4290:          resultType = oNodeVecElement( dimensions, 0 )
4303:          oNodeVecDelete( dimensions )
      
4309:       | '^' :
4311:          Node theType
4311:          @TypeRef( theType )
4318:          resultType = @PointerTypeTo( theType )
      
4329:       | pRecord :
4331:          resultType = oNodeNew( nRecordType )
4341:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
4350:          @VarDecl( nRecordField )
      
4357:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
4369:          [ equal_zero( size )
4376:             | true : #eRecordEmpty
4379:             | * :
4384:          ]
      
4384:          pEnd
      
4386:          oNodeSet( resultType, qScope, oScopeCurrent )
4397:          oNodeSetInt( resultType, qSize, size )
4409:          oScopeEnd
4410:          oTypeAdd( resultType )
      
      
4416:       | '(' :
               % An enum type declaration.
4418:          @EnumTypeRef( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
4425:       | pSet :
4427:          pOf
4429:          Node theType
4429:          @TypeRef( theType )
4436:       | * :       % this works for cases except where expr starts with an id
4451:          @ConstExpr '..' @ConstExpr
4457:    ];
      
      
      % Parse an enum type.
      % We've already accepted the '('
      % Returns the new type.
      %
4458: EnumTypeRef( out Node resultType ):
      
4460:    resultType = oNodeNew( nEnumType )
4470:    int value = 0
4476:    int numValues = 0
4482:    boolean first = true
      
         % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
         % That will let programs use either <val> or <enumType>.<val>
4488:    Node outerScope = oScopeCurrent
4493:    oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
4502:    {
            % TO DO: assert that name not already seen in this scope, i.e. this enum.
            %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
            %  It might be in some other higher/used scope.
4502:       pIdent
4504:       Node decl = @newIdent( nEnumValue, LAST_ID )
4517:       Node decl2 = @newIdent( nEnumValue, LAST_ID )
4530:       oNodeSet( decl, qType, resultType )
4542:       oNodeSet( decl2, qType, resultType )
      
            % build up name table, for i/o
4554:       int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
4567:       oNodeSetInt( decl, qNameOffset, nameOffset )
4579:       oNodeSetInt( decl2, qNameOffset, nameOffset )
4591:       [
4591:          | '=', ':=' :
4593:             @ConstExpr
                  % value must be ascending
                  % this obviously doesn't apply to the first value
4595:             [ equal_zero( numValues )
4602:                | false :
4603:                   [ greater( oValueTop, value )
4612:                      | false :   #eEnumValueNotAscending
4615:                      | * :
4620:                   ]
4620:                | * :
4625:             ]
4625:             [ equal( value, oValueTop )
4634:                | false :
                        % The values differ from 0..N-1.  pred/succ may not be used with this type.
4635:                   oNodeSetBoolean( resultType, qHasGap, true )
4647:                | * :
4652:             ]
4652:             value = oValueTop
4657:             oValuePop
4658:          | * :
4665:       ]
4665:       oNodeSetInt( decl, qValue, value )
4677:       oNodeSetInt( decl2, qValue, value )
4689:       oScopeDeclare( decl )
      
4695:       oScopeEnter( outerScope )
4701:       oScopeDeclare( decl2 )
4707:       oScopeEnd
      
4708:       inc( value )
4714:       inc( numValues )
4720:       [
4720:          | ',' :
4722:          | * :    >
4729:       ]
4729:    }
4731:    ')'
      
4733:    oNodeSet( resultType, qScope, oScopeCurrent )
4744:    oNodeSetInt( resultType, qSize, 4 )   % always integer sized
4756:    oScopeEnd
      
         % Finish creation of the name table
         %    struct {
         %      int    value;
         %      int    padding;
         %      char*  name;
         %    } table[ numValues + 1 ];
         %  final entry will have name == nullptr
         %
         % I'll need to generate init code, to store pointers in global data,
         % since I don't have a relocation mechanism for static data at the moment.
4757:    oCodePush( @GetOrCreateInitCode( globalScope ) )
4768:    oScopeEnter( globalScope )
4774:    int size = multiply( add( numValues, 1 ), 16 )
4794:    int addr = oScopeAlloc( size, 8 )
4807:    oScopeEnd
4808:    oNodeSetInt( resultType, qNameTable, addr )
         % loop over enum values
4820:    NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
4840:    {
4840:       Node enumValue = oNodeIterValue( it )
4850:       [ oNodeNull( enumValue )
4857:          | true :  >
4860:          | * :
4865:       ]
4865:       .tPushAddrGlobal  oEmitInt( addr )
4873:       .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
4888:       .tAssignI
4890:       addr = add( addr, 8 )
4903:       .tPushAddrGlobal  oEmitInt( addr )
4911:       .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
4926:       .tAssignP
4928:       addr = add( addr, 8 )
4941:       oNodeIterNext( it )
4947:    }
         % final table entry
4949:    .tPushAddrGlobal  oEmitInt( addr )
4957:    .tPushConstI  oEmitInt( 0 )
4965:    .tAssignI
4967:    addr = add( addr, 8 )
4980:    .tPushAddrGlobal  oEmitInt( addr )
4988:    .tPushConstI  oEmitInt( 0 )
4996:    .tAssignP
4998:    addr = add( addr, 8 )
5011:    oCodePop
      
5012:    oTypeAdd( resultType )
5019:    ;
      
      
      % --------------------------- Const Expressions --------------------------
      
      % Constant expressions: currently, only literal integers or previously
      % named constant integers are supported, possibly with a negation.
      % Constant expressions are evaluated at compile time.
      
5019: ConstExpr:
5021:    [
5021:       | pIntLit :
5023:          oValuePush( TOKEN_VALUE )
5028:       | pIdent :
5030:          Node decl = oScopeFindRequire
5035:          @ResolveUnitRef( decl )
5042:          [ oNodeType( decl )
5049:             | nConst :
5050:                oValuePush( oNodeGetInt( decl, qValue ) )
5063:             | * :
5068:                #eNotConst
5070:                oValuePush( 0 )
5076:          ]
5076:       | pMinus :
5078:          @ConstExpr
5080:          oValueNegate
5081:    ];
      
      
      
      % ------------------------------ Expressions -----------------------------
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanCFType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
5092: Expr:
5094:    Label falseLabel = labelNull
      
5100:    @ExprAllowCF( falseLabel )
5107:    @CFToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
5115: BooleanExprControlFlow( out Label falseLabel ):
5117:    @ExprAllowCF( falseLabel )
5124:    [ oTypeSNodeType
5126:       | nBooleanCFType :
5127:       | nBooleanType :
               % convert value to control flow
5129:          falseLabel = oLabelNew
5134:          .tJumpFalse  oEmitLabel( falseLabel )
5142:       | * :
5149:          #eNotBoolean
5151:    ]
5151:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
5153: CFToVal( inout Label falseLabel ):
5155:    [ oTypeSNodeType
5157:       | nBooleanCFType :
5158:          Label doneLabel = oLabelNew
5163:          .tPushConstI  oEmitInt( 1 )
5171:          .tJump  oEmitLabel( doneLabel )
5179:          .tLabel  oEmitLabel( falseLabel )
5187:          .tPushConstI  oEmitInt( 0 )
5195:          .tLabel  oEmitLabel( doneLabel )
5203:          oTypeSPop
5204:          oTypeSPush( BooleanType )
5210:          falseLabel = labelNull
5216:       | * :
5221:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
5222: ValToCF( out Label falseLabel ):
5224:    [ oTypeSNodeType
5226:       | nBooleanType :
5227:          falseLabel = oLabelNew
5232:          .tJumpFalse  oEmitLabel( falseLabel )
5240:          oTypeSPop
5241:          oTypeSPush( BooleanCFType )
5247:       | * :
5252:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanCFType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanCFType.
      % In this case, falseLabel is ignored.
      %
5253: ExprAllowCF( out Label falseLabel ):
5255:    @BoolExprAllowCF( falseLabel )
5262:    {[
5262:       | '=' :
5264:          @CFToVal( falseLabel )
5271:          @PromoteToIntOptional
5273:          @BoolExprAllowCF( falseLabel )
5280:          @CFToVal( falseLabel )
5287:          @PromoteToIntOptional
5289:          @MatchTypes
5291:          [ oTypeSNodeType
5293:             | nBooleanType, nCharType :     .tEqualB
5296:             | nIntegerType, nEnumType :     .tEqualI
5300:             | nPointerType, nUniversalPointerType :    .tEqualP
5304:             | nStringType :                 #eNotImplemented
5308:             | * :                           #eNotAllowed
5327:          ]
5327:          oTypeSPop
5328:          oTypeSPush( BooleanType )
      
5334:       | '<>' :
5336:          @CFToVal( falseLabel )
5343:          @PromoteToIntOptional
5345:          @BoolExprAllowCF( falseLabel )
5352:          @CFToVal( falseLabel )
5359:          @PromoteToIntOptional
5361:          @MatchTypes
5363:          [ oTypeSNodeType
5365:             | nBooleanType, nCharType :     .tNotEqualB
5368:             | nIntegerType, nEnumType :     .tNotEqualI
5372:             | nPointerType, nUniversalPointerType :    .tNotEqualP
5376:             | nStringType :                 #eNotImplemented
5380:             | * :                           #eNotAllowed
5399:          ]
5399:          oTypeSPop
5400:          oTypeSPush( BooleanType )
      
5406:       | '<' :
5408:          @CFToVal( falseLabel )
5415:          @PromoteToIntOptional
5417:          @BoolExprAllowCF( falseLabel )
5424:          @CFToVal( falseLabel )
5431:          @PromoteToIntOptional
5433:          @MatchTypes
5435:          [ oTypeSNodeType
5437:             | nBooleanType, nCharType :     .tLessB
5440:             | nIntegerType, nEnumType :     .tLessI
5444:             | nPointerType, nUniversalPointerType :   .tLessP
5448:             | nStringType :                 #eNotImplemented
5452:             | * :                           #eNotAllowed
5471:          ]
5471:          oTypeSPop
5472:          oTypeSPush( BooleanType )
      
5478:       | '>' :
5480:          @CFToVal( falseLabel )
5487:          @PromoteToIntOptional
5489:          @BoolExprAllowCF( falseLabel )
5496:          @CFToVal( falseLabel )
5503:          @PromoteToIntOptional
5505:          @MatchTypes
5507:          [ oTypeSNodeType
5509:             | nBooleanType, nCharType :     .tGreaterB
5512:             | nIntegerType, nEnumType :     .tGreaterI
5516:             | nPointerType, nUniversalPointerType :   .tGreaterP
5520:             | nStringType :                 #eNotImplemented
5524:             | * :                           #eNotAllowed
5543:          ]
5543:          oTypeSPop
5544:          oTypeSPush( BooleanType )
      
5550:       | '<=' :
5552:          @CFToVal( falseLabel )
5559:          @PromoteToIntOptional
5561:          @BoolExprAllowCF( falseLabel )
5568:          @CFToVal( falseLabel )
5575:          @PromoteToIntOptional
5577:          @MatchTypes
5579:          [ oTypeSNodeType
5581:             | nBooleanType, nCharType :     .tLessEqualB
5584:             | nIntegerType, nEnumType :     .tLessEqualI
5588:             | nPointerType, nUniversalPointerType :   .tLessEqualP
5592:             | nStringType :                 #eNotImplemented
5596:             | * :                           #eNotAllowed
5615:          ]
5615:          oTypeSPop
5616:          oTypeSPush( BooleanType )
      
5622:       | '>=' :
5624:          @CFToVal( falseLabel )
5631:          @PromoteToIntOptional
5633:          @BoolExprAllowCF( falseLabel )
5640:          @CFToVal( falseLabel )
5647:          @PromoteToIntOptional
5649:          @MatchTypes
5651:          [ oTypeSNodeType
5653:             | nBooleanType, nCharType :     .tGreaterEqualB
5656:             | nIntegerType, nEnumType :     .tGreaterEqualI
5660:             | nPointerType, nUniversalPointerType :   .tGreaterEqualP
5664:             | nStringType :                 #eNotImplemented
5668:             | * :                           #eNotAllowed
5687:          ]
5687:          oTypeSPop
5688:          oTypeSPush( BooleanType )
      
5694:       | * :
5709:          >
5711:    ]};
      
      
5714: BoolExprAllowCF( out Label falseLabel ):
5716:    Label trueLabel = labelNull
      
5722:    @BoolTermAllowCF( falseLabel )
5729:    {[
5729:       | pOr :
5731:          [ oTypeSNodeType
5733:             | nBooleanCFType :
                     % We are true here. Jump ahead to done
5734:                [ equal_label( trueLabel, labelNull )
5744:                   | true :  trueLabel = oLabelNew
5750:                   | * :
5755:                ]
5755:                .tJump  oEmitLabel( trueLabel )
5763:             | nBooleanType :
5765:                @ValToCF( falseLabel )
                     % We are true here. Jump ahead to done
5772:                [ equal_label( trueLabel, labelNull )
5782:                   | true :  trueLabel = oLabelNew
5788:                   | * :
5793:                ]
5793:                .tJump  oEmitLabel( trueLabel )
5801:             | * : #eNotBoolean
5810:          ]
5810:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5811:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5819:          falseLabel = labelNull
5825:          @BoolTermAllowCF( falseLabel )
      
5832:          [ oTypeSNodeType
5834:             | nBooleanCFType :
5835:             | nBooleanType :
5837:                @ValToCF( falseLabel )
5844:             | * : #eNotBoolean
5853:          ]
      
5853:          oTypeSPop
5854:          oTypeSPush( BooleanCFType )
      
5860:       | * :
5865:          >
5867:    ]}
      
         % any short-circuit trues jump here to the end
5869:    [ equal_label( trueLabel, labelNull )
5879:       | false :
5880:          .tLabel  oEmitLabel( trueLabel )
5888:       | * :
5893:    ]
5894:    ;
      
      
5894: BoolTermAllowCF( out Label falseLabel ):
5896:    Label overallFalseLabel = labelNull
      
5902:    @BoolFactorAllowCF( falseLabel )
5909:    {[
5909:       | pAnd :
5911:          [ oTypeSNodeType
5913:             | nBooleanCFType :
5914:             | nBooleanType :
5916:                @ValToCF( falseLabel )
5923:             | * :
5930:                #eNotBoolean
5932:          ]
5932:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
5933:          [ equal_label( overallFalseLabel, labelNull )
5943:             | true :
5944:                overallFalseLabel = oLabelNew
5949:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
5963:                falseLabel = overallFalseLabel
5969:             | * :
5974:          ]
      
5974:          Label factorFalseLabel = labelNull
5980:          @BoolFactorAllowCF( factorFalseLabel )
      
5987:          [ oTypeSNodeType
5989:             | nBooleanCFType :
5990:             | nBooleanType :
5992:                @ValToCF( factorFalseLabel )
5999:             | * : #eNotBoolean
6008:          ]
6008:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
6022:       | * :
6027:          >
6029:    ]};
      
6032: BoolFactorAllowCF( out Label falseLabel ):
6034:    [
6034:       | pNot :
6036:          Label factorFalseLabel = labelNull
      
6042:          @BoolFactorAllowCF( factorFalseLabel )
6049:          [ oTypeSNodeType
6051:             | nBooleanCFType :
                     % We have control flow, and are sitting at the point that has value false.
6052:                falseLabel = oLabelNew
6057:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
6065:                .tLabel  oEmitLabel( factorFalseLabel )
      
6073:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
6075:                .tNot
      
6077:             | * : #eNotBoolean
6086:          ]
      
6086:       | * :
6091:          @ArithExprAllowCF( falseLabel )
6098:    ];
      
6099: ArithExprAllowCF( out Label falseLabel ):
6101:    @TermAllowCF( falseLabel )
6108:    {[
6108:       | '+' :
6110:          [ oTypeSNodeType
6112:             | nIntegerType, nByteType :
6113:                @PromoteToIntPop
6115:                @TermAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
6122:                @PromoteToInt
6124:                .tAddI
6126:             | nStringType, nCharType :
                     % String concatenation
6128:                #eNotImplemented
6130:             | nPointerType, nUniversalPointerType :
6132:                Node elementType = oNodeGet( oTypeSTop, qBaseType )
6144:                int elementSize = oNodeGetInt( elementType, qSize )
6157:                @TermAllowCF( falseLabel )  % actually not allowing CF
6164:                @PromoteToIntPop
6166:                [ equal( elementSize, 1 )
6176:                   | false :
6177:                      .tPushConstI  oEmitInt( elementSize )
6185:                      .tMultI
6187:                   | * :
6192:                ]
6192:                .tAddPI
6194:             | * :
6209:                #eNotAllowed
6211:          ]
      
6211:       | '-' :
               % TO DO: pointer arithmetic, as above
      
6213:          @PromoteToIntPop
6215:          @TermAllowCF( falseLabel )
6222:          @PromoteToInt
6224:          .tSubI
6226:       | * :
6233:          >
6235:    ]};
      
6238: TermAllowCF( out Label falseLabel ):
6240:    @FactorAllowCF( falseLabel )
6247:    {[
6247:       | pTimes :
6249:          @PromoteToIntPop
6251:          @FactorAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
6258:          @PromoteToInt
6260:          .tMultI
6262:       | pDivide :
6264:          @PromoteToIntPop
6266:          @FactorAllowCF( falseLabel )
6273:          @PromoteToInt
6275:          .tDivI
6277:       | * :
6284:          >
6286:    ]};
      
6289: FactorAllowCF( out Label falseLabel ):
6291:    [
6291:       | pPlus :
6293:          @PrimaryAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
               % TO DO: unary +/- is supposed to leave expression type as-is.
6300:          @PromoteToInt
6302:       | pMinus :
6304:          @PrimaryAllowCF( falseLabel )
               % TO DO: unary +/- is supposed to leave expression type as-is.
6311:          @PromoteToInt
6313:          .tNegI
6315:       | * :
6322:          @PrimaryAllowCF( falseLabel )
6329:    ];
      
6330: PrimaryAllowCF( out Label falseLabel ):
6332:    [
6332:       | pIntLit :
6334:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6341:          oTypeSPush( IntegerType )
      
6347:       | pCharLit :
6349:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6356:          oTypeSPush( CharType )
      
6362:       | '(' :
6364:          @ExprAllowCF( falseLabel )
6371:          ')'
      
6373:       | pStrLit :
6375:          int addr = oStringAllocLit( CURRENT_STRLIT )     % store in global data
6384:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: do we need to create a type with the literal's length?
6392:          oTypeSPush( StringType )
      
6398:       | pIdent :
6400:          Node decl = oScopeFindRequire
6405:          @ResolveUnitRef( decl )
6412:          Node theType
      
6412:          [ oNodeType( decl )
6419:             | nFunc :
6420:                @Call( decl )
      
6427:             | nBuiltInFunc :
6429:                @CallBuiltInFunc( decl )
      
6436:             | nConst, nEnumValue :
6438:                theType = oNodeGet( decl, qType )
6451:                oTypeSPush( theType )
6457:                [ oTypeSNodeType
6459:                   | nIntegerType, nEnumType, nBooleanType :
6460:                      .tPushConstI @EmitValue( decl )
6469:                   | * :
6478:                      #eNotImplemented
6480:                ]
      
6480:             | nGlobalVar, nLocalVar, nParam, nTypedConst :
6482:                @VarExpr( decl )
      
6489:             | * :
6508:                #eNotValue
6510:                oTypeSPush( IntegerType )
6516:          ]
      
6516:       | '@' :        % @var -- pointer to var
6518:          pIdent
      
6520:          Node decl = oScopeFindRequire
6525:          @ResolveUnitRef( decl )
6532:          Node theType
      
               % writeable is false because we're not on the left hand side of an assignment,
               % or passign into a var parameter.  So it's ok to take the address of a typed const.
6532:          @LValueVar( decl, false )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
6542:          theType = oTypeSTop
6547:          oTypeSPop
6548:          Node ptrType = @PointerTypeTo( theType )
6559:          oTypeSPush( ptrType )
      
6565:       | * :
6580:          #eNotValue
6582:          oTypeSPush( IntegerType )
6588:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
6589: VarExpr( Node decl ):
6591:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
6604:    int uplevels = @DeclUpLevels( decl )
      
6615:    oTypeSPush( theType )
6621:    [ oTypeSNodeType
6623:       | nIntegerType, nEnumType :
6624:          [ oNodeType( decl )
6631:             | nGlobalVar, nTypedConst :   .tPushGlobalI  @EmitValue( decl )
6641:             | nLocalVar :
6643:                [ equal_zero( uplevels )
6650:                   | true :  .tPushLocalI  @EmitValue( decl )
6660:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
6680:                ]
6680:             | nParam :
6682:                [ oNodeGetBoolean( decl, qInOut )
6692:                   | true :    % VAR param points to the var.  Auto dereference.
6693:                      [ equal_zero( uplevels )
6700:                         | true :  .tPushParamP  @EmitValue( decl )
6710:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6730:                      ]
6730:                      .tFetchI
6732:                   | * :
6737:                      [ equal_zero( uplevels )
6744:                         | true :  .tPushParamI  @EmitValue( decl )
6754:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
6774:                      ]
6774:                ]
6774:          ]
      
6786:       | nBooleanType, nByteType, nCharType :
6788:          [ oNodeType( decl )
6795:             | nGlobalVar, nTypedConst :   .tPushGlobalB  @EmitValue( decl )
6805:             | nLocalVar :
6807:                [ equal_zero( uplevels )
6814:                   | true :  .tPushLocalB  @EmitValue( decl )
6824:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
6844:                ]
6844:             | nParam :
6846:                [ oNodeGetBoolean( decl, qInOut )
6856:                   | true :    % VAR param points to the var.  Auto dereference.
6857:                      [ equal_zero( uplevels )
6864:                         | true :  .tPushParamP  @EmitValue( decl )
6874:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6894:                      ]
6894:                      .tFetchB
6896:                   | * :
6901:                      [ equal_zero( uplevels )
6908:                         | true :  .tPushParamB  @EmitValue( decl )
6918:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
6938:                      ]
6938:                ]
6938:          ]
      
6950:       | nStringType, nFileType :
6952:          #eNotImplemented
      
6954:       | nPointerType, nUniversalPointerType :
6956:          [ oNodeType( decl )
6963:             | nGlobalVar, nTypedConst :   .tPushGlobalP @EmitValue( decl )
6973:             | nLocalVar :
6975:                [ equal_zero( uplevels )
6982:                   | true :  .tPushLocalP  @EmitValue( decl )
6992:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
7012:                ]
7012:             | nParam :
7014:                [ oNodeGetBoolean( decl, qInOut )
7024:                   | true :    % VAR param points to the var.  Auto dereference.
7025:                      [ equal_zero( uplevels )
7032:                         | true :  .tPushParamP  @EmitValue( decl )
7042:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7062:                      ]
7062:                      .tFetchP
7064:                   | * :
7069:                      [ equal_zero( uplevels )
7076:                         | true :  .tPushParamP  @EmitValue( decl )
7086:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7106:                      ]
7106:                ]               
7106:          ]
7118:          [
7118:             | '^' :             % dereferenced
7120:                oTypeSPop
7121:                oTypeSPush( oNodeGet( theType, qBaseType ) )
7134:                @LValueIndexes
7136:                @FetchVar
7138:             | '[' :             % dereferencing pointer like an array [0..] of baseType
7140:                @PointerArraySubscript
                     % modify addr for any subsequent subscripts, field references, etc
7142:                @LValueIndexes
7144:                @FetchVar
7146:             | * :               % just ptr value alone
7153:          ]
      
7153:       | nArrayType, nRecordType :
               % compound type
               % first, push addr of start of var
7155:          [ oNodeType( decl )
7162:             | nGlobalVar, nTypedConst :   .tPushAddrGlobal @EmitValue( decl )
7172:             | nLocalVar :
7174:                [ equal_zero( uplevels )
7181:                   | true :  .tPushAddrLocal  @EmitValue( decl )
7191:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
7211:                ]
7211:             | nParam :
7213:                [ oNodeGetBoolean( decl, qInOut )
7223:                   | true :    % VAR param points to the var.  Auto dereference.
7224:                      [ equal_zero( uplevels )
7231:                         | true :  .tPushParamP  @EmitValue( decl )
7241:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7261:                      ]
7261:                   | * :
7266:                      [ equal_zero( uplevels )
7273:                         | true :  .tPushAddrParam  @EmitValue( decl )
7283:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
7303:                      ]
7303:                ]
7303:          ]
               % modify addr for subscripts, field references, etc
7315:          @LValueIndexes
               % get final value
7317:          @FetchVar
7319:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
7346: FetchVar:
7348:    [ oTypeSNodeType
7350:       | nIntegerType, nEnumType :  .tFetchI
7353:       | nBooleanType, nByteType, nCharType :  .tFetchB
7357:       | nStringType, nFileType :   #eNotImplemented
7361:       | nPointerType :             .tFetchP
7365:       | nUniversalPointerType :    #eCantDereference
7369:       | nArrayType, nRecordType :  % compound type; leave as addr
7371:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
7398: LValueIndexes:
7400:    {[
7400:       | '[' :
7402:          [ oTypeSNodeType
7404:             | nArrayType :    @ArraySubscripts
7407:             | nPointerType :  @PointerArraySubscript
7411:             | * :             #eNotArray
7420:          ]
7420:       | '.' :       @RecordFieldRef
7424:       | '^' :       @PointerDeref
7428:       | * :         >
7439:    ]};
      
7442: ArraySubscripts:
7444:    [ oTypeSNodeType
7446:       | nArrayType :
7447:       | * :       #eNotArray
7454:    ]
7454:    {
7454:       [ oTypeSNodeType
7456:          | nArrayType :
7457:          | * :    #eTooManySubscripts
7464:       ]
      
            % low subscript of this dimension
7464:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
7481:       Node baseType
7481:       baseType = oNodeGet( oTypeSTop, qBaseType )
7493:       oTypeSPop
7494:       oTypeSPush( baseType )
      
7500:       @Expr
7502:       @RequireIntPop
            % adjust for low subscript
7504:       [ equal_zero( low )
7511:          | false :
7512:             .tPushConstI oEmitInt( low ) .tSubI
7522:          | * :
7527:       ]
      
            % multiply by element size
7527:       int size = oNodeGetInt( baseType, qSize )
7540:       [ equal( size, 1 )
7550:          | false :
7551:             .tPushConstI oEmitInt( size ) .tMultI
7561:          | * :
7566:       ]
      
            % update start address
7566:       .tAddPI
7568:       [
7568:          | ']' :  >
7572:          | ',' :
7574:       ]
7582:    };
      
      
      % pointer[index] - similar to array[index] where index counts from 0.
      % On entry, the pointer value is on the stack, and pointer type is on the type stack.
      % We've already accepted the '['.
      % On exit, the address of the pointed-to element is on the stack,
      % and the element type is on the type stack.
      %
7585: PointerArraySubscript:
7587:    [ oTypeSNodeType
7589:       | nPointerType :
7590:       | * :    #eCantDereference
7597:    ]
         % replace type stack with base type
7597:    Node baseType = oNodeGet( oTypeSTop, qBaseType )
7609:    oTypeSPop
7610:    oTypeSPush( baseType )
         
7616:    @Expr
7618:    @RequireIntPop
         % multiply by element size
7620:    int size = oNodeGetInt( baseType, qSize )
7633:    [ equal( size, 1 )
7643:       | false :
7644:          .tPushConstI  oEmitInt( size )  .tMultI
7654:       | * :
7659:    ]
         % update start address
7659:    .tAddPI
7661:    ']';
      
      
7664: RecordFieldRef:
7666:    [ oTypeSNodeType
7668:       | nRecordType :
7669:       | * :    #eNotRecord
7676:    ]
7676:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
7688:    pIdent
7690:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
7695:    [ oNodeType( field )
7702:       | nRecordField :
7703:       | * :   #eNotRecordField
7710:    ]
7710:    oScopeEnd
7711:    int offset = oNodeGetInt( field, qValue )
7724:    [ equal_zero( offset )
7731:       | false :
7732:          .tPushConstI oEmitInt( offset ) .tAddPI
7742:       | * :
7747:    ]
      
         % replace the type on the type stack, with the field type
7747:    oTypeSPop
7748:    oTypeSPush( oNodeGet( field, qType ) )
7762:    ;
      
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
7762: PointerDeref:
7764:    [ oTypeSNodeType
7766:       | nPointerType :
7767:       | nUniversalPointerType :   #eCantDereference
7771:       | * :       #eNotPointer
7780:    ]
7780:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
7782:    Node theType = oTypeSTop
7787:    oTypeSPop
7788:    oTypeSPush( oNodeGet( theType, qBaseType ) )
7802:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
7802: CoerceType:
7804:    node_type nt = oTypeSNodeType
7809:    oTypeSPop
7810:    [ equal_node_type( nt, oTypeSNodeType )
7819:       | false :
               % Can we implicitly convert the value to the desired type?
7820:          [ oTypeSNodeType
7822:             | nIntegerType :
7823:                [ nt
7826:                   | nByteType :   .tCastBtoI  >>
7830:                   | * :
7835:                ]
7835:             | nByteType :
7837:                [ nt
7840:                   | nIntegerType :   .tCastItoB  >>
7844:                   | * :
7849:                ]
7849:             | nPointerType :
7851:                [ nt
7854:                   | nUniversalPointerType :  >>
7856:                   | * :
7861:                ]
7861:             | nUniversalPointerType :
7863:                [ nt
7866:                   | nPointerType :  >>
7868:                ]
7874:             | * :
7885:          ]
7885:          #eTypeMismatch
7887:       | * :
7892:    ];
      
      
      % Called on first use of an extern method
      %
7893: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
7895:    int strAddr
7895:    String externalName = oNodeGetString( method, qExternalName )
7908:    [ equal_string( externalName, stringNull )
7918:       | true :
7919:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
7940:       | false :
7942:          strAddr = oStringAllocLit( externalName )
7952:    ]
7960:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
7976:    ;
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
7976: Call( Node method ):
      
         % Prior to first call, issue extern label for a called method.
         % I don't want to issue .tLabelExtern for unused methods, that seems inefficient.
7978:    [ oNodeGetBoolean( method, qExternal )
7988:       | true :
7989:          [ oNodeGetBoolean( method, qUsed )
7999:             | false :
                     % define the extern label on first use
8000:                @DefineExternLabel( method )
8007:             | * :
8012:          ]
8012:      | * :
8017:    ]
8017:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
8029:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
8042:    Node resultType
8042:    int tempOffset
      
8042:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
8059:    [ isFunc
8062:       | true :
8063:          resultType = oNodeGet( method, qType )
8076:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
8086:       | * :
8091:    ]
         
      
8091:    Node paramScope = oNodeGet( method, qParams )
8104:    int actualsSize = oNodeGetInt( paramScope, qSize )
8117:    [ cdecl
8120:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
8129:       | false :  .tAllocActuals  oEmitInt( actualsSize )
8139:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
8147:    [ greater( @DeclLevel( method ), 0 )
8162:       | true :
8163:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
8171:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
8190:          .tAssignP
8192:       | * :
8197:    ]
      
      
8197:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
8210:    Node param = oNodeIterValue( paramIter )
8220:    [
8220:       | '(' :
            
8222:          {
8222:             [ oNodeNull( param )
8229:                | true : >
8232:                | * :
8237:             ]
      
8237:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
8250:             .tPushAddrActual oEmitInt( offset )
8258:             oTypeSPush( oNodeGet( param, qType ) )
      
8271:             [ oNodeGetBoolean( param, qInOut )
8281:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
8282:                           @LValueExpr( true )
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
8289:                           @MatchTypes
      
8291:                           .tAssignP
      
8293:                | false :  @Expr
8297:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
8299:                           [ oTypeSNodeType
8301:                              | nIntegerType, nEnumType : .tAssignI
8304:                              | nBooleanType, nByteType, nCharType :  .tAssignB
8308:                              | nStringType, nFileType :   #eNotImplemented
8312:                              | nPointerType, nUniversalPointerType :  .tAssignP
8316:                              | nArrayType, nRecordType :
                                       % compound types: copy value into actuals space
8318:                                  int size = oNodeGetInt( oTypeSTop, qSize )
8330:                                  .tCopy  oEmitInt( size )    % multi-word copy
8338:                           ]
8364:             ]
8372:             oTypeSPop
      
8373:             oNodeIterNext( paramIter )
8379:             param = oNodeIterValue( paramIter )
8389:             [ oNodeNull( param )
8396:                | true :  >
8399:                | false :
8401:             ]
      
8409:             ','
8411:          }
      
8413:          ')'
      
8415:       | * :
8420:    ]
      
8420:    [ oNodeNull( param )
8427:       | false :    #eMissingParameter
8430:       | * :
8435:    ]
      
8435:    [ isFunc
8438:       | true :
               % Pass result temp as an additional VAR parameter.
8439:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
8454:          .tPushAddrLocal  oEmitInt( tempOffset )
8462:          .tAssignP
8464:       | * :
8469:    ]
      
8469:    [ cdecl
8472:       | true :
8473:          .tCallCdecl  @EmitValue( method )
8482:       | false :
8484:          .tCall   @EmitValue( method )
8493:    ]
      
8501:    [ isFunc
8504:       | true :
               % push return value from temp
8505:          oTypeSPush( resultType )
      
8511:          [ oTypeSNodeType
8513:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
8522:             | nBooleanType, nByteType, nCharType :   .tPushLocalB  oEmitInt( tempOffset )
8532:             | nStringType, nFileType :  #eNotImplemented
8536:             | nPointerType, nUniversalPointerType :   .tPushLocalP  oEmitInt( tempOffset )
8546:             | nArrayType, nRecordType :   % compound type: push address
8548:                                .tPushAddrLocal  oEmitInt( tempOffset )
8556:          ]
8582:       | * :
8587:    ]
         
8587:    .tFreeActuals  oEmitInt( actualsSize )
8596:    ;
      
      
      % Parse a call to a built-in function, identified by the just-accepted identifier.
      % This will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
8596: CallBuiltInFunc( Node method ):
      
         % Ord(x)
8598:    [ oNodeEqual( method, BuiltIn_Ord )
8608:       | true :
               % parameter is any scalar type (including boolean, enum, char)
               % result is integer
8609:          '('
8611:          @Expr
8613:          [ oTypeSNodeType
8615:             | nIntegerType, nEnumType :
8616:             | nBooleanType, nByteType, nCharType :  .tCastBtoI
8620:             | * :  #eTypeMismatch
8635:          ]
8635:          oTypeSPop
8636:          oTypeSPush( IntegerType )
8642:          ')'
8644:          >>
8645:       | * :
8650:    ]
      
         % Chr(x)
8650:    [ oNodeEqual( method, BuiltIn_Chr )
8660:       | true :
               % parameter is integer
               % result is char
8661:          '('
8663:          @Expr
8665:          [ oTypeSNodeType
8667:             | nIntegerType :    .tCastItoB
8670:             | nByteType :
8672:             | * :  #eTypeMismatch
8681:          ]
8681:          oTypeSPop
8682:          oTypeSPush( CharType )
8688:          ')'
8690:          >>
8691:       | * :
8696:    ]
      
         % Pred(x)
8696:    [ oNodeEqual( method, BuiltIn_Pred )
8706:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
8707:          '('
8709:          @Expr
8711:          [ oTypeSNodeType
8713:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
8714:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
8723:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
8726:                   | * :
8731:                ]
8731:             | * :  #eTypeMismatch
8738:          ]
8738:          .tDecI
8740:          ')'
8742:          >>
8743:       | * :
8748:    ]
      
         % Succ(x)
8748:    [ oNodeEqual( method, BuiltIn_Succ )
8758:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
8759:          '('
8761:          @Expr
8763:          [ oTypeSNodeType
8765:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
8766:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
8775:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
8778:                   | * :
8783:                ]
8783:             | * :  #eTypeMismatch
8790:          ]
8790:          .tIncI
8792:          ')'
8794:          >>
8795:       | * :
8800:    ]
      
8800:    #eNotImplemented
8803:    ;
      
      
      % ------------------------------ Statements -----------------------------
      
8803: Statement:
8805:    [
8805:       | pWriteln :     @WritelnStmt
8809:       | pWrite :       @WriteStmt
8813:       | pReadln :      @ReadlnStmt
8817:       | pRead :        @ReadStmt
8821:       | pIf :          @IfStmt
8825:       | pWhile :       @WhileStmt
8829:       | pFor :         @ForStmt
8833:       | pRepeat :      @RepeatStmt
8837:       | pBreak :       @BreakStmt
8841:       | pContinue :    @ContinueStmt
8845:       | pBegin :       @BeginStmt
8849:       | pIdent :       @LabelOrAssignOrCallStmt
8853:       | pGoto :        @GotoStmt
8857:       | pIntLit :      % should be an integer label
8859:                        oChangeIntLitToLabelIdent
8860:                        @LabelOrAssignOrCallStmt
8862:       | * :            % null statement : don't accept any tokens
8893:    ];
      
      
8894: LabelOrAssignOrCallStmt:
8896:    Node decl = oScopeFindRequire
8901:    @ResolveUnitRef( decl )
8908:    [ oNodeType( decl )
8915:       | nLabel :                          @LabelDefinition( decl )
8923:                                           @Statement
8925:       | nProc :                           @Call( decl )
8934:       | nGlobalVar, nLocalVar, nParam :   @AssignStmt( decl )
8943:       | nFunc :                           @AssignResultStmt( decl )
8952:       | * :                               #eBadStatement
8969:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
8970: LabelDefinition( Node decl ):
8972:    [ oNodeGetBoolean( decl, qDefined )
8982:       | true :  #eAlreadyDefined
8985:       | * :
8990:    ]
8990:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
9005:    oNodeSetBoolean( decl, qDefined, true )
9017:    ':'
9020:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
9020: AssignStmt( Node decl ):
      
9022:    @LValueVar( decl, true )
9032:    ':=' 
9034:    @Expr
9036:    @CoerceType
9038:    @Assign
9041:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack (already coerced to the lvalue type),
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
9041: Assign:
9043:    [ oTypeSNodeType
9045:       | nIntegerType, nEnumType :  .tAssignI
9048:       | nBooleanType, nByteType, nCharType :  .tAssignB
9052:       | nStringType, nFileType :   #eNotImplemented
9056:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9060:       | nArrayType, nRecordType :
9062:           int size = oNodeGetInt( oTypeSTop, qSize )
9074:           .tCopy  oEmitInt( size )    % multi-word copy
9082:    ]
9108:    oTypeSPop
9110:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
9110: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
9112:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
9128:       | false :   #eNotCurrentFunction
9131:       | * :
9136:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
9136:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
9151:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
9164:    ':='
9166:    @Expr
9168:    @CoerceType
9170:    [ oTypeSNodeType
9172:       | nIntegerType, nEnumType : .tAssignI
9175:       | nBooleanType, nByteType, nCharType :  .tAssignB
9179:       | nStringType, nFileType :   #eNotImplemented
9183:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9187:       | nArrayType, nRecordType :
9189:           int size = oNodeGetInt( oTypeSTop, qSize )
9201:           .tCopy  oEmitInt( size )    % multi-word copy
9209:    ]
9235:    oTypeSPop
9237:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
9237: LValueExpr( boolean writeable ):
         % At the moment, all lvalue expressions start with a variable name.
         % I think there can also be typecasts, not supported yet.  Check standard syntax.
9239:    pIdent
9241:    Node decl = oScopeFindRequire
9246:    @ResolveUnitRef( decl )
9253:    [ oNodeType( decl )
9260:       | nGlobalVar, nLocalVar, nParam, nTypedConst :
9261:       | * :  #eNotVar
9274:    ]
9274:    @LValueVar( decl, writeable )
9285:    ;
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
9285: LValueVar( Node decl, boolean writeable ):
9287:    [ oNodeType( decl )
9294:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
9304:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
9315:       | nParam :
9317:          [ oNodeGetBoolean( decl, qInOut )
9327:             | true :   % VAR param points to variable.  No dereference.
9328:                        .tPushParamP @EmitValue( decl )
9337:             | * :      .tPushAddrParam @EmitValue( decl )
9351:          ]
9351:       | nTypedConst :
9353:          [ writeable
9356:             | false :  .tPushAddrGlobal @EmitValue( decl )                       
9366:             | * :      #eNotVar
9373:          ]
9373:       | * :            #eNotVar
9386:    ]
      
9386:    oTypeSPush( oNodeGet( decl, qType ) )
9399:    @LValueIndexes        % handle subscripts, if any
9402:    ;
      
      
9402: IncVar( Node decl ):
9404:    @LValueVar( decl, true )
9414:    @RequireIntPop
9416:    @VarExpr( decl )
9423:    oTypeSPop
9424:    .tIncI
9426:    .tAssignI;
      
9429: DecVar( Node decl ):
9431:    @LValueVar( decl, true )
9441:    @RequireIntPop
9443:    @VarExpr( decl )
9450:    oTypeSPop
9451:    .tDecI
9453:    .tAssignI;
      
      
9456: IfStmt:
9458:    Label falseLabel = labelNull
      
9464:    @BooleanExprControlFlow( falseLabel )
9471:    pThen
9473:    @Statement
9475:    [
9475:       | pElse :
9477:          Label doneLabel = oLabelNew
      
9482:          .tJump  oEmitLabel( doneLabel )
9490:          .tLabel oEmitLabel( falseLabel )
9498:          @Statement
9500:          .tLabel oEmitLabel( doneLabel )
      
9508:       | * :
9513:          .tLabel oEmitLabel( falseLabel )
9521:    ];
      
      
9522: ForStmt:
9524:    pIdent
      
9526:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
9531:    @LValueVar( decl, true )
9541:    @RequireIntPop
      
9543:    ':='
      
9545:    @Expr
9547:    @RequireIntPop
9549:    .tAssignI
      
9551:    Label breakLabel = oLabelNew
      
9556:    Label checkLabel = oLabelNew
9561:    .tJump  oEmitLabel( checkLabel )
      
9569:    Label continueLabel = oLabelNew
9574:    .tLabel  oEmitLabel( continueLabel )
9582:    [
9582:       | pTo :
9584:          @IncVar( decl )
9591:          .tLabel  oEmitLabel( checkLabel )
9599:          @VarExpr( decl )  oTypeSPop
9607:          @Expr
9609:          @RequireIntPop
9611:          .tGreaterI
9613:          .tJumpTrue  oEmitLabel( breakLabel )
9621:       | pDownto :
9623:          @DecVar( decl )
9630:          .tLabel  oEmitLabel( checkLabel )
9638:          @VarExpr( decl )  oTypeSPop
9646:          @Expr
9648:          @RequireIntPop
9650:          .tLessI
9652:          .tJumpTrue  oEmitLabel( breakLabel )
9660:    ]
9668:    oLoopPush( continueLabel, breakLabel )
9677:    pDo
9679:    @Statement
9681:    .tJump  oEmitLabel( continueLabel )
9689:    .tLabel  oEmitLabel( breakLabel )
9697:    oLoopPop;
      
      
9699: RepeatStmt:
9701:    Label continueLabel = oLabelNew
9706:    .tLabel  oEmitLabel( continueLabel )
      
9714:    Label breakLabel = oLabelNew
      
9719:    oLoopPush( continueLabel, breakLabel )
9728:    @Statement
9730:    {[
9730:       | ';' :
9732:          @Statement
9734:       | pUntil :
9736:          Label falseLabel
9736:          @BooleanExprControlFlow( falseLabel )
9743:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
9757:          >
9759:    ]}
9769:    .tLabel  oEmitLabel( breakLabel )
9777:    oLoopPop;
      
      
9779: WhileStmt:
9781:    Label continueLabel = oLabelNew
9786:    .tLabel  oEmitLabel( continueLabel )
      
9794:    Label breakLabel
9794:    @BooleanExprControlFlow( breakLabel )
      
9801:    oLoopPush( continueLabel, breakLabel )
9810:    pDo
9812:    @Statement
9814:    .tJump  oEmitLabel( continueLabel )
9822:    .tLabel  oEmitLabel( breakLabel )
9830:    oLoopPop;
      
      
9832: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
9834:    [ equal_label( oLoopContinueLabel, labelNull )
9843:       | true :
9844:          #eNotInALoop
9846:       | false :
9848:          .tJump  oEmitLabel( oLoopContinueLabel )
9855:    ];
      
      
9864: BreakStmt:
9866:    [ equal_label( oLoopBreakLabel, labelNull )
9875:       | true :
9876:          #eNotInALoop
9878:       | false :
9880:          .tJump  oEmitLabel( oLoopBreakLabel )
9887:    ];
      
      
9896: GotoStmt:
9898:    [
9898:       | pIdent :
9900:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
9902:          oChangeIntLitToLabelIdent
9903:    ]
      
         % Some pascals have rules about where you can jump (to a sibling statement or
         % higher level statement in the block, but not into a lower lower level statement.)
         % fpc just says "jumping into a nested statement can have strange effects."
         % I'm going to follow that and not prohibit any goto, as long as it's in the same block.
      
         % Label must be declared in the same block (same scope) it is used.
         % Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
9911:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
9920:    oNodeSetBoolean( decl, qUsed, true )
9932:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
9948:    ;
      
      
9948: BeginStmt:
9950:    @Statement
9952:    {[
9952:       | ';' :   @Statement
9956:       | pEnd :  >
9960:    ]};
      
      
9971: WritelnStmt:
9973:    @WriteStmt
9975:    .tWriteCR;
      
      
9978: WriteStmt:
9980:    [
9980:       | '(' :
9982:          {
9982:             @Expr
9984:             [ oTypeSNodeType
9986:                | nIntegerType :             .tWriteI
9989:                | nBooleanType :             .tWriteBool
9993:                | nByteType :                .tCastBtoI  .tWriteI
9999:                | nCharType :                .tWriteChar
10003:                | nStringType :              .tWriteStr
10007:                | nFileType :                #eNotImplemented
10011:                | nEnumType :
                        % write name via table lookup
10013:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
10027:                   .tWriteEnum
10029:                | nPointerType, nUniversalPointerType :   .tWriteP
10033:                | * :                        #eNotAllowed
10056:             ]
10056:             oTypeSPop
10057:             [
10057:                | ')' : >
10061:                | ',' :
10063:             ]
10071:          }
10073:       | * :
10078:    ];
      
      
10079: ReadlnStmt:      % ***
         % TO DO
10082:    ;
      
10082: ReadStmt:
         % TO DO
10085:    ;
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
10085: ScopeLevel >> int:
10087:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
10097: DeclLevel( Node decl ) >> int:
10099:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
10117: DeclUpLevels( Node decl ) >> int:
10119:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
10135: MatchTypes:
10137:    node_type nt = oTypeSNodeType
10142:    oTypeSPop
10143:    [ equal_node_type( nt, oTypeSNodeType )
10152:       | false :
               % Some implicit conversion is allowed even here
10153:          [ oTypeSNodeType
10155:             | nPointerType :
10156:                [ nt
10159:                   | nUniversalPointerType :  >>
10161:                   | * :
10166:                ]
10166:             | nUniversalPointerType :
10168:                [ nt
10171:                   | nPointerType :  >>
10173:                   | * :
10178:                ]
10178:             | * :
10185:          ]
10185:          #eTypeMismatch
10187:       | * :
10192:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
10193: RequireIntPop:
10195:    [ oTypeSNodeType
10197:       | nIntegerType :
10198:       | * :          #eNotInteger
10205:    ]
10205:    oTypeSPop;
      
10207: RequireInt:
10209:    [ oTypeSNodeType
10211:       | nIntegerType :
10212:       | * :          #eNotInteger
10219:    ];
      
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Pop the type stack.
      %
10220: PromoteToIntPop:
10222:    [ oTypeSNodeType
10224:       | nIntegerType :
10225:       | nByteType :        .tCastBtoI
10229:       | * :                #eNotInteger
10238:    ]
10238:    oTypeSPop;
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Leave integer on the type stack.
      %
10240: PromoteToInt:
10242:    [ oTypeSNodeType
10244:       | nIntegerType :
10245:       | nByteType :        .tCastBtoI
10249:                            oTypeSPop
10250:                            oTypeSPush( IntegerType )
10256:       | * :                #eNotInteger
10265:    ];
      
      
      % If the top value is implicitly convertable to integer, do so.
      % Otherwise leave it as-is.
      %
10266: PromoteToIntOptional:
10268:    [ oTypeSNodeType
10270:       | nByteType :        .tCastBtoI
10273:                            oTypeSPop
10274:                            oTypeSPush( IntegerType )
10280:       | * :
10285:    ];
      
      
      
      
10286: RequireBoolPop:
10288:    [ oTypeSNodeType
10290:       | nBooleanType :
10291:       | * :          #eNotBoolean
10298:    ]
10298:    oTypeSPop;
      
10300: RequireBool:
10302:    [ oTypeSNodeType
10304:       | nBooleanType :
10305:       | * :          #eNotBoolean
10312:    ];
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
10313: newType( node_type nt, int size ) >> Node:
10315:   Node node = oNodeNew( nt )
10325:   oNodeSetInt( node, qSize, size )
10337:   oTypeAdd( node )
10343:   >> node
10347:   ;
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
10347: newIdent( node_type nt, int id ) >> Node:
10349:   Node t = oNodeNew( nt )
10359:   oNodeSetInt( t, qIdent, id )
10371:   >> t
10375:   ;
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
10375: PointerTypeTo( Node theType ) >> Node:
10377:    Node ptrType = oNodeGet( theType, qPointerType )
10390:    [ oNodeNull( ptrType )
10397:       | true :
10398:          ptrType = oNodeNew( nPointerType )
10408:          oNodeSet( ptrType, qBaseType, theType )
10420:          oNodeSetInt( ptrType, qSize, 8 )
10432:          oTypeAdd( ptrType )
10438:          oNodeSet( theType, qPointerType, ptrType )
10450:       | * :
10455:    ]
10455:    >> ptrType;
      
      
      % Return the low value of an ordinal type
      %
10459: OrdinalLow( Node theType ) >> int:
10461:    [ oNodeType( theType )
10468:       | nIntegerType :  >> oMININT
10471:       | nBooleanType :  >> 0
10476:       | nCharType :     >> 0
10481:       | nEnumType :
10483:          Node enumScope = oNodeGet( theType, qScope )
10496:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
10513:          >> oNodeGetInt( first, qValue )
10523:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
10535:       | * :             #eNotOrdinalType
10550:                         >> 0
10553:    ];
      
      
      % Return the high value of an ordinal type
      %
10554: OrdinalHigh( Node theType ) >> int:
10556:    [ oNodeType( theType )
10563:       | nIntegerType :  >> oMAXINT
10566:       | nBooleanType :  >> 1
10571:       | nCharType :     >> 255
10576:       | nEnumType :
10578:          Node enumScope = oNodeGet( theType, qScope )
10591:          Node last = oNodeIterValue( oNodeGetIterLast( enumScope, qDecls ) )
10608:          >> oNodeGetInt( last, qValue )
10618:       | nSubrangeType : >> oNodeGetInt( theType, qHigh )
10630:       | * :             #eNotOrdinalType
10645:                         >> 0
10648:    ];
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
10649: EmitValue( Node decl ):
10651:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
10665: DeclareBuiltInFunc( int id ) >> Node:
10667:    Node decl = @newIdent( nBuiltInFunc, id )
10681:    oScopeDeclare( decl )
10687:    >> decl;
      
      
10691: installBuiltIns:
      
         % "mysystem" is the name of a unit that will be available everywhere.
         % Add its name to the id table so we can easily spot the name later.
10693:    mysystemId = oIdAdd_mysystem
      
         % install built-in types
10698:    FileType = @newType( nFileType, 4 )
10712:    IntegerType = @newType( nIntegerType, 4 )
10726:    BooleanType = @newType( nBooleanType, 1 )
10740:    BooleanCFType = @newType( nBooleanCFType, 1 )
10754:    CharType = @newType( nCharType, 1 )
10768:    ByteType = @newType( nByteType, 1 )
         % Universal pointer says base type Byte, but this is only for the sake of
         % pointer arithmetic.  It doesn't matter otherwise, because this type cannot be dereferened.
10782:    UniversalPointerType = @newType( nUniversalPointerType, 8 )
10796:    oNodeSet( UniversalPointerType, qBaseType, ByteType )
10808:    StringType = @newType( nStringType, 256 )    % string with default length 256
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oIdAdd_File
      
10822:    Node t
      
10822:    t = @newIdent( nTypeDecl, oIdAdd_File )
10835:    oNodeSet( t, qType, FileType )
10847:    oScopeDeclare( t )
      
10853:    t = @newIdent( nTypeDecl, oIdAdd_Integer )
10866:    oNodeSet( t, qType, IntegerType )
10878:    oScopeDeclare( t )
      
10884:    t = @newIdent( nTypeDecl, oIdAdd_Boolean )
10897:    oNodeSet( t, qType, BooleanType )
10909:    oScopeDeclare( t )
      
10915:    t = @newIdent( nTypeDecl, oIdAdd_Char )
10928:    oNodeSet( t, qType, CharType )
10940:    oScopeDeclare( t )
      
10946:    t = @newIdent( nTypeDecl, oIdAdd_Byte )
10959:    oNodeSet( t, qType, ByteType )
10971:    oScopeDeclare( t )
      
10977:    t = @newIdent( nTypeDecl, oIdAdd_Pointer )
10990:    oNodeSet( t, qType, UniversalPointerType )
11002:    oScopeDeclare( t )
      
11008:    t = @newIdent( nTypeDecl, oIdAdd_String )
11021:    oNodeSet( t, qType, StringType )
11033:    oScopeDeclare( t )
      
         % Built-in constants
      
11039:    t = @newIdent( nConst, oIdAdd_True )
11052:    oNodeSet( t, qType, BooleanType )
11064:    oNodeSetInt( t, qValue, 1 )
11076:    oScopeDeclare( t )
      
11082:    t = @newIdent( nConst, oIdAdd_False )
11095:    oNodeSet( t, qType, BooleanType )
11107:    oNodeSetInt( t, qValue, 0 )
11119:    oScopeDeclare( t )
      
         % Built-in methods
         % These aren't declared like normal methods, because they may have
         % special rules for parameter types (e.g. any scalar type).
         % Calls to these methods will be handled specially by the compiler.
      
11125:    BuiltIn_Ord = @DeclareBuiltInFunc( oIdAdd_Ord )
11135:    BuiltIn_Chr = @DeclareBuiltInFunc( oIdAdd_Chr )
11145:    BuiltIn_Pred = @DeclareBuiltInFunc( oIdAdd_Pred )
11155:    BuiltIn_Succ = @DeclareBuiltInFunc( oIdAdd_Succ )
11166:    ;
      
11166: end
      
11166: 

Generated code:

   0: oGlobalSpace 17
   2: oLocalSpace 5
   4: oGetAddrGlobal 1
   6: oPushResult
   7: oWorkspaceNew
   8: oAssign
   9: oSetResult 0
  11: oPushResult
  12: oSetResult 0
  14: oPushResult
  15: oScopeBegin
  16: oPop 2
  18: oGetAddrLocal 2
  20: oPushResult
  21: oScopeCurrent
  22: oAssign
  23: oCall 10691
  25: oEmit 64
  27: oSetResult 0
  29: oPushResult
  30: oEmitInt
  31: oPop 1
  33: oGetAddrLocal 3
  35: oPushResult
  36: oLabelNew
  37: oAssign
  38: oEmit 58
  40: oSetResult 0
  42: oPushResult
  43: oEmitInt
  44: oPop 1
  46: oEmit 61
  48: oGetLocal 3
  50: oPushResult
  51: oEmitLabel
  52: oPop 1
  54: oEmit 60
  56: oSetResult 0
  58: oPushResult
  59: oEmitInt
  60: oPop 1
  62: oEmit 63
  64: oInput 28
  66: oInput 0
  68: oGetAddrLocal 4
  70: oPushResult
  71: oSetResult 4
  73: oPushResult
  74: oNodeNew
  75: oPop 1
  77: oAssign
  78: oGetLocal 4
  80: oPushResult
  81: oSetResult 4
  83: oPushResult
  84: LAST_ID
  85: oPushResult
  86: oNodeSetInt
  87: oPop 3
  89: oGetGlobal 1
  91: oPushResult
  92: oSetResult 2
  94: oPushResult
  95: oGetLocal 4
  97: oPushResult
  98: oNodeSet
  99: oPop 3
 101: oInputChoice 175
 103: oInput 0
 105: oGetAddrLocal 1
 107: oPushResult
 108: oSetResult 19
 110: oPushResult
 111: LAST_ID
 112: oPushResult
 113: oCall 10347
 115: oPop 2
 117: oAssign
 118: oGetLocal 1
 120: oPushResult
 121: oSetResult 21
 123: oPushResult
 124: oGetGlobal 5
 126: oPushResult
 127: oNodeSet
 128: oPop 3
 130: oGetLocal 1
 132: oPushResult
 133: oScopeDeclareAlloc
 134: oPop 1
 136: oInput 13
 138: oInput 0
 140: oGetAddrLocal 1
 142: oPushResult
 143: oSetResult 19
 145: oPushResult
 146: LAST_ID
 147: oPushResult
 148: oCall 10347
 150: oPop 2
 152: oAssign
 153: oGetLocal 1
 155: oPushResult
 156: oSetResult 21
 158: oPushResult
 159: oGetGlobal 5
 161: oPushResult
 162: oNodeSet
 163: oPop 3
 165: oGetLocal 1
 167: oPushResult
 168: oScopeDeclareAlloc
 169: oPop 1
 171: oInput 15
 173: oJumpForward 178
 175: Choice Lookup Table
          14    103
 178: oInput 5
 180: oGetLocal 4
 182: oPushResult
 183: oCall 333
 185: oPop 1
 187: oInputChoice 198
 189: oGetLocal 4
 191: oPushResult
 192: oCall 306
 194: oPop 1
 196: oJumpForward 201
 198: Choice Lookup Table
          57    189
 201: oGetLocal 4
 203: oPushResult
 204: oCall 509
 206: oPop 1
 208: oSetResult 0
 210: oPushResult
 211: oSetResult 0
 213: oPushResult
 214: oScopeBegin
 215: oPop 2
 217: oGetAddrGlobal 2
 219: oPushResult
 220: oScopeCurrent
 221: oAssign
 222: oSetResult 0
 224: oPushResult
 225: oSetResult 1
 227: oPushResult
 228: oScopeBegin
 229: oPop 2
 231: oScopeCurrent
 232: oPushResult
 233: oSetResult 16
 235: oPushResult
 236: oGetGlobal 2
 238: oPushResult
 239: oNodeSet
 240: oPop 3
 242: oGetAddrGlobal 3
 244: oPushResult
 245: oScopeCurrent
 246: oAssign
 247: oGetLocal 4
 249: oPushResult
 250: oSetResult 7
 252: oPushResult
 253: oGetGlobal 3
 255: oPushResult
 256: oNodeSet
 257: oPop 3
 259: oScopeEnd
 260: oSetResult 20
 262: oPushResult
 263: oCall 1459
 265: oPop 1
 267: oGetGlobal 3
 269: oPushResult
 270: oScopeEnter
 271: oPop 1
 273: oGetAddrLocal 5
 275: oPushResult
 276: oSetResult 1
 278: oAssign
 279: oGetLocal 3
 281: oPushResult
 282: oGetGlobal 2
 284: oPushResult
 285: oGetLocal 5
 287: oPushResult
 288: oCall 1780
 290: oPop 3
 292: oScopeEnd
 293: oInput 20
 295: oCall 1515
 297: oScopeEnd
 298: oGetLocal 4
 300: oPushResult
 301: oCall 571
 303: oPop 1
 305: oReturn
 306: oLocalSpace 0
 308: oInput 0
 310: LAST_ID
 311: oPushResult
 312: oGetParam 1
 314: oPushResult
 315: oCall 370
 317: oPop 2
 319: oInputChoice 323
 321: oJumpForward 328
 323: Choice Lookup Table
          13    321
 326: oJumpForward 330
 328: oJumpBack 308
 330: oInput 5
 332: oReturn
 333: oLocalSpace 0
 335: oGetParam 1
 337: oPushResult
 338: oSetResult 4
 340: oPushResult
 341: oNodeGetInt
 342: oPop 2
 344: oPushResult
 345: oGetGlobal 4
 347: oPushResult
 348: equal
 349: oPop 2
 351: oChoice 356
 353: oReturn
 354: oJumpForward 359
 356: Choice Lookup Table
           1    353
 359: oGetGlobal 4
 361: oPushResult
 362: oGetParam 1
 364: oPushResult
 365: oCall 370
 367: oPop 2
 369: oReturn
 370: oLocalSpace 2
 372: oGetAddrLocal 1
 374: oPushResult
 375: oGetParam 2
 377: oPushResult
 378: oCall 650
 380: oPop 1
 382: oAssign
 383: oGetLocal 1
 385: oPushResult
 386: oSetResult 0
 388: oPushResult
 389: equal_node
 390: oPop 2
 392: oChoice 462
 394: oGetParam 1
 396: oPushResult
 397: oSetResult 5
 399: oPushResult
 400: oGetLocal 1
 402: oPushResult
 403: oNodeAddLast
 404: oPop 3
 406: oGetAddrLocal 2
 408: oPushResult
 409: oSetResult 10
 411: oPushResult
 412: oNodeNew
 413: oPop 1
 415: oAssign
 416: oGetLocal 2
 418: oPushResult
 419: oSetResult 4
 421: oPushResult
 422: oGetLocal 1
 424: oPushResult
 425: oSetResult 4
 427: oPushResult
 428: oNodeGetInt
 429: oPop 2
 431: oPushResult
 432: oNodeSetInt
 433: oPop 3
 435: oGetLocal 2
 437: oPushResult
 438: oSetResult 9
 440: oPushResult
 441: oGetLocal 1
 443: oPushResult
 444: oSetResult 9
 446: oPushResult
 447: oNodeGet
 448: oPop 2
 450: oPushResult
 451: oNodeSet
 452: oPop 3
 454: oGetLocal 2
 456: oPushResult
 457: oScopeDeclare
 458: oPop 1
 460: oJumpForward 465
 462: Choice Lookup Table
           0    394
 465: oReturn
 466: oLocalSpace 1
 468: oGetFromParam 1
 470: oPushResult
 471: oNodeType
 472: oPop 1
 474: oChoice 505
 476: oGetAddrLocal 1
 478: oPushResult
 479: oGetFromParam 1
 481: oPushResult
 482: oSetResult 9
 484: oPushResult
 485: oNodeGet
 486: oPop 2
 488: oAssign
 489: oInput 20
 491: oInput 0
 493: oGetParam 1
 495: oPushResult
 496: oGetLocal 1
 498: oPushResult
 499: oScopeFindRequireInScope
 500: oPop 1
 502: oAssign
 503: oJumpForward 508
 505: Choice Lookup Table
          10    476
 508: oReturn
 509: oLocalSpace 2
 511: oGetAddrLocal 1
 513: oPushResult
 514: oGetParam 1
 516: oPushResult
 517: oSetResult 5
 519: oPushResult
 520: oNodeGetIter
 521: oPop 2
 523: oAssign
 524: oGetAddrLocal 2
 526: oPushResult
 527: oGetLocal 1
 529: oPushResult
 530: oNodeIterValue
 531: oPop 1
 533: oAssign
 534: oGetLocal 2
 536: oPushResult
 537: oNodeNull
 538: oPop 1
 540: oChoice 557
 542: oGetLocal 2
 544: oPushResult
 545: oSetResult 9
 547: oPushResult
 548: oNodeGet
 549: oPop 2
 551: oPushResult
 552: oScopeEnter
 553: oPop 1
 555: oJumpForward 562
 557: Choice Lookup Table
           0    542
 560: oJumpForward 570
 562: oGetAddrLocal 1
 564: oPushResult
 565: oNodeIterNext
 566: oPop 1
 568: oJumpBack 524
 570: oReturn
 571: oLocalSpace 2
 573: oGetAddrLocal 1
 575: oPushResult
 576: oGetParam 1
 578: oPushResult
 579: oSetResult 5
 581: oPushResult
 582: oNodeGetIterLast
 583: oPop 2
 585: oAssign
 586: oGetAddrLocal 2
 588: oPushResult
 589: oGetLocal 1
 591: oPushResult
 592: oNodeIterValue
 593: oPop 1
 595: oAssign
 596: oGetLocal 2
 598: oPushResult
 599: oNodeNull
 600: oPop 1
 602: oChoice 636
 604: oScopeCurrent
 605: oPushResult
 606: oGetLocal 2
 608: oPushResult
 609: oSetResult 9
 611: oPushResult
 612: oNodeGet
 613: oPop 2
 615: oPushResult
 616: oNodeEqual
 617: oPop 2
 619: oChoice 627
 621: oJumpForward 633
 623: oError 25
 625: oJumpForward 633
 627: Choice Lookup Table
           0    623
           1    621
 632: oEndChoice
 633: oScopeEnd
 634: oJumpForward 641
 636: Choice Lookup Table
           0    604
 639: oJumpForward 649
 641: oGetAddrLocal 1
 643: oPushResult
 644: oNodeIterPrev
 645: oPop 1
 647: oJumpBack 586
 649: oReturn
 650: oLocalSpace 2
 652: oGetAddrLocal 1
 654: oPushResult
 655: oGetGlobal 1
 657: oPushResult
 658: oSetResult 1
 660: oPushResult
 661: oSetResult 4
 663: oPushResult
 664: oGetParam 1
 666: oPushResult
 667: oNodeFind
 668: oPop 4
 670: oAssign
 671: oGetLocal 1
 673: oPushResult
 674: oSetResult 0
 676: oPushResult
 677: equal_node
 678: oPop 2
 680: oChoice 687
 682: oGetLocal 1
 684: oReturn
 685: oJumpForward 690
 687: Choice Lookup Table
           0    682
 690: oGetAddrLocal 2
 692: oPushResult
 693: oGetParam 1
 695: oPushResult
 696: oIncludeUnitFile
 697: oPop 1
 699: oAssign
 700: oGetLocal 2
 702: oChoice 711
 704: oError 24
 706: oSetResult 0
 708: oReturn
 709: oJumpForward 714
 711: Choice Lookup Table
           0    704
 714: oGetAddrLocal 1
 716: oPushResult
 717: oCall 725
 719: oAssign
 720: oIncludeEnd
 721: oGetLocal 1
 723: oReturn
 724: oReturn
 725: oLocalSpace 2
 727: oInput 58
 729: oInput 0
 731: oGetAddrLocal 1
 733: oPushResult
 734: oSetResult 5
 736: oPushResult
 737: oNodeNew
 738: oPop 1
 740: oAssign
 741: oGetLocal 1
 743: oPushResult
 744: oSetResult 4
 746: oPushResult
 747: LAST_ID
 748: oPushResult
 749: oNodeSetInt
 750: oPop 3
 752: oGetAddrLocal 2
 754: oPushResult
 755: oSetResult 6
 757: oPushResult
 758: oNodeNew
 759: oPop 1
 761: oAssign
 762: oGetLocal 2
 764: oPushResult
 765: oSetResult 4
 767: oPushResult
 768: LAST_ID
 769: oPushResult
 770: oNodeSetInt
 771: oPop 3
 773: oGetLocal 1
 775: oPushResult
 776: oSetResult 8
 778: oPushResult
 779: oGetLocal 2
 781: oPushResult
 782: oNodeSet
 783: oPop 3
 785: oInput 5
 787: oInput 59
 789: oGetLocal 1
 791: oPushResult
 792: oCall 333
 794: oPop 1
 796: oInputChoice 807
 798: oGetLocal 1
 800: oPushResult
 801: oCall 306
 803: oPop 1
 805: oJumpForward 810
 807: Choice Lookup Table
          57    798
 810: oGetLocal 1
 812: oPushResult
 813: oCall 509
 815: oPop 1
 817: oSetResult 0
 819: oPushResult
 820: oSetResult 0
 822: oPushResult
 823: oScopeBegin
 824: oPop 2
 826: oGetLocal 1
 828: oPushResult
 829: oSetResult 9
 831: oPushResult
 832: oScopeCurrent
 833: oPushResult
 834: oNodeSet
 835: oPop 3
 837: oGetAddrGlobal 2
 839: oPushResult
 840: oScopeCurrent
 841: oAssign
 842: oSetResult 0
 844: oPushResult
 845: oSetResult 1
 847: oPushResult
 848: oScopeBegin
 849: oPop 2
 851: oGetAddrGlobal 3
 853: oPushResult
 854: oScopeCurrent
 855: oAssign
 856: oGetLocal 1
 858: oPushResult
 859: oSetResult 13
 861: oPushResult
 862: oGetGlobal 3
 864: oPushResult
 865: oNodeSet
 866: oPop 3
 868: oScopeEnd
 869: oGetLocal 1
 871: oPushResult
 872: oCall 1060
 874: oPop 1
 876: oScopeEnd
 877: oInput 60
 879: oGetLocal 2
 881: oPushResult
 882: oCall 333
 884: oPop 1
 886: oInputChoice 897
 888: oGetLocal 2
 890: oPushResult
 891: oCall 306
 893: oPop 1
 895: oJumpForward 900
 897: Choice Lookup Table
          57    888
 900: oGetLocal 2
 902: oPushResult
 903: oCall 509
 905: oPop 1
 907: oGetLocal 1
 909: oPushResult
 910: oSetResult 9
 912: oPushResult
 913: oNodeGet
 914: oPop 2
 916: oPushResult
 917: oScopeEnter
 918: oPop 1
 920: oSetResult 0
 922: oPushResult
 923: oSetResult 0
 925: oPushResult
 926: oScopeBegin
 927: oPop 2
 929: oGetLocal 1
 931: oPushResult
 932: oSetResult 10
 934: oPushResult
 935: oScopeCurrent
 936: oPushResult
 937: oNodeSet
 938: oPop 3
 940: oScopeCurrent
 941: oPushResult
 942: oSetResult 16
 944: oPushResult
 945: oGetLocal 1
 947: oPushResult
 948: oSetResult 9
 950: oPushResult
 951: oNodeGet
 952: oPop 2
 954: oPushResult
 955: oNodeSet
 956: oPop 3
 958: oGetAddrGlobal 2
 960: oPushResult
 961: oScopeCurrent
 962: oAssign
 963: oGetLocal 1
 965: oPushResult
 966: oCall 1145
 968: oPop 1
 970: oInputChoice 984
 972: oGetLocal 1
 974: oPushResult
 975: oSetResult 1
 977: oPushResult
 978: oCall 1155
 980: oPop 2
 982: oJumpForward 997
 984: Choice Lookup Table
          61    972
 987: oGetLocal 1
 989: oPushResult
 990: oSetResult 0
 992: oPushResult
 993: oCall 1155
 995: oPop 2
 997: oInputChoice 1011
 999: oGetLocal 1
1001: oPushResult
1002: oSetResult 1
1004: oPushResult
1005: oCall 1341
1007: oPop 2
1009: oJumpForward 1024
1011: Choice Lookup Table
          62    999
1014: oGetLocal 1
1016: oPushResult
1017: oSetResult 0
1019: oPushResult
1020: oCall 1341
1022: oPop 2
1024: oInput 36
1026: oInput 20
1028: oScopeEnd
1029: oScopeEnd
1030: oGetLocal 2
1032: oPushResult
1033: oCall 571
1035: oPop 1
1037: oGetLocal 1
1039: oPushResult
1040: oCall 571
1042: oPop 1
1044: oGetGlobal 1
1046: oPushResult
1047: oSetResult 1
1049: oPushResult
1050: oGetLocal 1
1052: oPushResult
1053: oNodeAddLast
1054: oPop 3
1056: oGetLocal 1
1058: oReturn
1059: oReturn
1060: oLocalSpace 2
1062: oInputChoice 1129
1064: oCall 3053
1066: oJumpForward 1142
1068: oCall 3608
1070: oJumpForward 1142
1072: oSetResult 20
1074: oPushResult
1075: oCall 3664
1077: oPop 1
1079: oJumpForward 1142
1081: oGetAddrLocal 1
1083: oPushResult
1084: oCall 2020
1086: oAssign
1087: oInputChoice 1100
1089: oGetLocal 1
1091: oPushResult
1092: oCall 1958
1094: oPop 1
1096: oInput 5
1098: oJumpForward 1103
1100: Choice Lookup Table
          68   1089
1103: oJumpForward 1142
1105: oGetAddrLocal 2
1107: oPushResult
1108: oCall 2394
1110: oAssign
1111: oInputChoice 1124
1113: oGetLocal 2
1115: oPushResult
1116: oCall 1958
1118: oPop 1
1120: oInput 5
1122: oJumpForward 1127
1124: Choice Lookup Table
          68   1113
1127: oJumpForward 1142
1129: Choice Lookup Table
          30   1105
          29   1081
          33   1072
          32   1068
          31   1064
1140: oJumpForward 1144
1142: oJumpBack 1062
1144: oReturn
1145: oLocalSpace 0
1147: oSetResult 20
1149: oPushResult
1150: oCall 1459
1152: oPop 1
1154: oReturn
1155: oLocalSpace 5
1157: oGetAddrLocal 1
1159: oPushResult
1160: oLabelNew
1161: oAssign
1162: oEmit 68
1164: oGetLocal 1
1166: oPushResult
1167: oEmitLabel
1168: oPop 1
1170: oGetParam 2
1172: oPushResult
1173: oSetResult 11
1175: oPushResult
1176: oGetLocal 1
1178: oPushResult
1179: oNodeSetLabel
1180: oPop 3
1182: oEmit 64
1184: oGetAddrLocal 2
1186: oPushResult
1187: Here
1188: oAssign
1189: oEmit 78
1191: oGetAddrLocal 3
1193: oPushResult
1194: oGetParam 2
1196: oPushResult
1197: oSetResult 9
1199: oPushResult
1200: oNodeGet
1201: oPop 2
1203: oAssign
1204: oGetAddrLocal 4
1206: oPushResult
1207: oGetLocal 3
1209: oPushResult
1210: oSetResult 19
1212: oPushResult
1213: oNodeGetCode
1214: oPop 2
1216: oAssign
1217: oGetLocal 4
1219: oPushResult
1220: oEmitCode
1221: oPop 1
1223: oGetLocal 3
1225: oPushResult
1226: oSetResult 19
1228: oPushResult
1229: oSetResult 0
1231: oPushResult
1232: oNodeSetCode
1233: oPop 3
1235: oGetAddrLocal 3
1237: oPushResult
1238: oGetParam 2
1240: oPushResult
1241: oSetResult 10
1243: oPushResult
1244: oNodeGet
1245: oPop 2
1247: oAssign
1248: oGetAddrLocal 4
1250: oPushResult
1251: oGetLocal 3
1253: oPushResult
1254: oSetResult 19
1256: oPushResult
1257: oNodeGetCode
1258: oPop 2
1260: oAssign
1261: oGetLocal 4
1263: oPushResult
1264: oEmitCode
1265: oPop 1
1267: oGetLocal 3
1269: oPushResult
1270: oSetResult 19
1272: oPushResult
1273: oSetResult 0
1275: oPushResult
1276: oNodeSetCode
1277: oPop 3
1279: oGetParam 2
1281: oPushResult
1282: oSetResult 13
1284: oPushResult
1285: oNodeGet
1286: oPop 2
1288: oPushResult
1289: oScopeEnter
1290: oPop 1
1292: oGetParam 1
1294: oChoice 1313
1296: oCall 8803
1298: oInputChoice 1304
1300: oCall 8803
1302: oJumpForward 1309
1304: Choice Lookup Table
           5   1300
1307: oJumpForward 1311
1309: oJumpBack 1298
1311: oJumpForward 1316
1313: Choice Lookup Table
           1   1296
1316: oEmit 63
1318: oGetAddrLocal 5
1320: oPushResult
1321: oScopeCurrent
1322: oPushResult
1323: oSetResult 17
1325: oPushResult
1326: oNodeGetInt
1327: oPop 2
1329: oAssign
1330: oGetLocal 2
1332: oPushResult
1333: oGetLocal 5
1335: oPushResult
1336: oPatch
1337: oPop 2
1339: oScopeEnd
1340: oReturn
1341: oLocalSpace 3
1343: oGetAddrLocal 1
1345: oPushResult
1346: oLabelNew
1347: oAssign
1348: oEmit 68
1350: oGetLocal 1
1352: oPushResult
1353: oEmitLabel
1354: oPop 1
1356: oGetParam 2
1358: oPushResult
1359: oSetResult 12
1361: oPushResult
1362: oGetLocal 1
1364: oPushResult
1365: oNodeSetLabel
1366: oPop 3
1368: oEmit 64
1370: oGetAddrLocal 2
1372: oPushResult
1373: Here
1374: oAssign
1375: oEmit 78
1377: oSetResult 0
1379: oPushResult
1380: oSetResult 1
1382: oPushResult
1383: oScopeBegin
1384: oPop 2
1386: oGetParam 1
1388: oChoice 1407
1390: oCall 8803
1392: oInputChoice 1398
1394: oCall 8803
1396: oJumpForward 1403
1398: Choice Lookup Table
           5   1394
1401: oJumpForward 1405
1403: oJumpBack 1392
1405: oJumpForward 1410
1407: Choice Lookup Table
           1   1390
1410: oEmit 63
1412: oGetAddrLocal 3
1414: oPushResult
1415: oScopeCurrent
1416: oPushResult
1417: oSetResult 17
1419: oPushResult
1420: oNodeGetInt
1421: oPop 2
1423: oAssign
1424: oGetLocal 2
1426: oPushResult
1427: oGetLocal 3
1429: oPushResult
1430: oPatch
1431: oPop 2
1433: oScopeEnd
1434: oReturn
1435: oLocalSpace 0
1437: oGetParam 2
1439: oPushResult
1440: oCall 1459
1442: oPop 1
1444: oGetParam 1
1446: oPushResult
1447: oScopeCurrent
1448: oPushResult
1449: oSetResult 0
1451: oPushResult
1452: oCall 1780
1454: oPop 3
1456: oCall 1515
1458: oReturn
1459: oLocalSpace 0
1461: oInputChoice 1492
1463: oCall 3053
1465: oJumpForward 1507
1467: oCall 3608
1469: oJumpForward 1507
1471: oGetParam 1
1473: oPushResult
1474: oCall 3664
1476: oPop 1
1478: oJumpForward 1507
1480: oCall 3898
1482: oJumpForward 1507
1484: oCall 2276
1486: oJumpForward 1507
1488: oCall 2711
1490: oJumpForward 1507
1492: Choice Lookup Table
          30   1488
          29   1484
          34   1480
          33   1471
          32   1467
          31   1463
1505: oJumpForward 1509
1507: oJumpBack 1461
1509: oCall 1512
1511: oReturn
1512: oLocalSpace 0
1514: oReturn
1515: oLocalSpace 2
1517: oGetAddrLocal 1
1519: oPushResult
1520: oScopeCurrent
1521: oPushResult
1522: oSetResult 15
1524: oPushResult
1525: oNodeGetIter
1526: oPop 2
1528: oAssign
1529: oGetAddrLocal 2
1531: oPushResult
1532: oGetLocal 1
1534: oPushResult
1535: oNodeIterValue
1536: oPop 1
1538: oAssign
1539: oGetLocal 2
1541: oPushResult
1542: oNodeNull
1543: oPop 1
1545: oChoice 1549
1547: oJumpForward 1554
1549: Choice Lookup Table
           0   1547
1552: oJumpForward 1609
1554: oGetLocal 2
1556: oPushResult
1557: oNodeType
1558: oPop 1
1560: oChoice 1598
1562: oGetLocal 2
1564: oPushResult
1565: oSetResult 34
1567: oPushResult
1568: oNodeGetBoolean
1569: oPop 2
1571: oChoice 1593
1573: oGetLocal 2
1575: oPushResult
1576: oSetResult 28
1578: oPushResult
1579: oNodeGetBoolean
1580: oPop 2
1582: oChoice 1588
1584: oError 27
1586: oJumpForward 1591
1588: Choice Lookup Table
           1   1584
1591: oJumpForward 1596
1593: Choice Lookup Table
           0   1573
1596: oJumpForward 1601
1598: Choice Lookup Table
          25   1562
1601: oGetAddrLocal 1
1603: oPushResult
1604: oNodeIterNext
1605: oPop 1
1607: oJumpBack 1529
1609: oReturn
1610: oLocalSpace 2
1612: oGetAddrLocal 1
1614: oPushResult
1615: oGetGlobal 1
1617: oPushResult
1618: oSetResult 1
1620: oPushResult
1621: oNodeGetIter
1622: oPop 2
1624: oAssign
1625: oGetAddrLocal 2
1627: oPushResult
1628: oGetLocal 1
1630: oPushResult
1631: oNodeIterValue
1632: oPop 1
1634: oAssign
1635: oGetLocal 2
1637: oPushResult
1638: oNodeNull
1639: oPop 1
1641: oChoice 1686
1643: oJumpForward 1694
1645: oJumpForward 1692
1647: oEmit 58
1649: oSetResult 0
1651: oPushResult
1652: oEmitInt
1653: oPop 1
1655: oEmit 61
1657: oGetLocal 2
1659: oPushResult
1660: oSetResult 11
1662: oPushResult
1663: oNodeGetLabel
1664: oPop 2
1666: oPushResult
1667: oEmitLabel
1668: oPop 1
1670: oEmit 60
1672: oSetResult 0
1674: oPushResult
1675: oEmitInt
1676: oPop 1
1678: oGetAddrLocal 1
1680: oPushResult
1681: oNodeIterNext
1682: oPop 1
1684: oJumpForward 1692
1686: Choice Lookup Table
           0   1647
           1   1643
1691: oEndChoice
1692: oJumpBack 1625
1694: oReturn
1695: oLocalSpace 2
1697: oGetAddrLocal 1
1699: oPushResult
1700: oGetGlobal 1
1702: oPushResult
1703: oSetResult 1
1705: oPushResult
1706: oNodeGetIterLast
1707: oPop 2
1709: oAssign
1710: oGetAddrLocal 2
1712: oPushResult
1713: oGetLocal 1
1715: oPushResult
1716: oNodeIterValue
1717: oPop 1
1719: oAssign
1720: oGetLocal 2
1722: oPushResult
1723: oNodeNull
1724: oPop 1
1726: oChoice 1771
1728: oJumpForward 1779
1730: oJumpForward 1777
1732: oEmit 58
1734: oSetResult 0
1736: oPushResult
1737: oEmitInt
1738: oPop 1
1740: oEmit 61
1742: oGetLocal 2
1744: oPushResult
1745: oSetResult 12
1747: oPushResult
1748: oNodeGetLabel
1749: oPop 2
1751: oPushResult
1752: oEmitLabel
1753: oPop 1
1755: oEmit 60
1757: oSetResult 0
1759: oPushResult
1760: oEmitInt
1761: oPop 1
1763: oGetAddrLocal 1
1765: oPushResult
1766: oNodeIterPrev
1767: oPop 1
1769: oJumpForward 1777
1771: Choice Lookup Table
           0   1732
           1   1728
1776: oEndChoice
1777: oJumpBack 1710
1779: oReturn
1780: oLocalSpace 3
1782: oEmit 68
1784: oGetParam 3
1786: oPushResult
1787: oEmitLabel
1788: oPop 1
1790: oEmit 64
1792: oGetAddrLocal 1
1794: oPushResult
1795: Here
1796: oAssign
1797: oEmit 78
1799: oGetParam 1
1801: oChoice 1807
1803: oCall 1610
1805: oJumpForward 1810
1807: Choice Lookup Table
           1   1803
1810: oGetAddrLocal 2
1812: oPushResult
1813: oGetParam 2
1815: oPushResult
1816: oSetResult 19
1818: oPushResult
1819: oNodeGetCode
1820: oPop 2
1822: oAssign
1823: oGetLocal 2
1825: oPushResult
1826: oEmitCode
1827: oPop 1
1829: oGetParam 2
1831: oPushResult
1832: oSetResult 19
1834: oPushResult
1835: oSetResult 0
1837: oPushResult
1838: oNodeSetCode
1839: oPop 3
1841: oCall 8803
1843: oGetParam 1
1845: oChoice 1851
1847: oCall 1695
1849: oJumpForward 1854
1851: Choice Lookup Table
           1   1847
1854: oEmit 63
1856: oGetAddrLocal 3
1858: oPushResult
1859: oScopeCurrent
1860: oPushResult
1861: oSetResult 17
1863: oPushResult
1864: oNodeGetInt
1865: oPop 2
1867: oAssign
1868: oGetLocal 1
1870: oPushResult
1871: oGetLocal 3
1873: oPushResult
1874: oPatch
1875: oPop 2
1877: oReturn
1878: oLocalSpace 0
1880: oInputChoice 1898
1882: oGetParam 1
1884: oPushResult
1885: oSetResult 27
1887: oPushResult
1888: oSetResult 1
1890: oPushResult
1891: oNodeSetBoolean
1892: oPop 3
1894: oInput 5
1896: oJumpForward 1903
1898: Choice Lookup Table
          70   1882
1901: oJumpForward 1905
1903: oJumpBack 1880
1905: oReturn
1906: oLocalSpace 1
1908: oGetAddrLocal 1
1910: oPushResult
1911: oGetParam 1
1913: oPushResult
1914: oSetResult 19
1916: oPushResult
1917: oNodeGetCode
1918: oPop 2
1920: oAssign
1921: oGetLocal 1
1923: oPushResult
1924: oSetResult 0
1926: oPushResult
1927: equal_code
1928: oPop 2
1930: oChoice 1951
1932: oGetAddrLocal 1
1934: oPushResult
1935: oCodeNew
1936: oAssign
1937: oGetParam 1
1939: oPushResult
1940: oSetResult 19
1942: oPushResult
1943: oGetLocal 1
1945: oPushResult
1946: oNodeSetCode
1947: oPop 3
1949: oJumpForward 1954
1951: Choice Lookup Table
           1   1932
1954: oGetLocal 1
1956: oReturn
1957: oReturn
1958: oLocalSpace 0
1960: oGetParam 1
1962: oPushResult
1963: oCall 10097
1965: oPop 1
1967: oPushResult
1968: equal_zero
1969: oPop 1
1971: oChoice 1977
1973: oError 23
1975: oJumpForward 1980
1977: Choice Lookup Table
           0   1973
1980: oGetParam 1
1982: oPushResult
1983: oSetResult 25
1985: oPushResult
1986: oSetResult 1
1988: oPushResult
1989: oNodeSetBoolean
1990: oPop 3
1992: oInputChoice 2016
1994: oInputChoice 2011
1996: oInput 2
1998: oGetParam 1
2000: oPushResult
2001: oSetResult 26
2003: oPushResult
2004: CURRENT_STRLIT
2005: oPushResult
2006: oNodeSetString
2007: oPop 3
2009: oJumpForward 2014
2011: Choice Lookup Table
          69   1996
2014: oJumpForward 2019
2016: Choice Lookup Table
           2   1994
2019: oReturn
2020: oLocalSpace 6
2022: oInput 0
2024: oGetAddrLocal 1
2026: oPushResult
2027: oSetResult 0
2029: oAssign
2030: oGetAddrLocal 2
2032: oPushResult
2033: oScopeFindInCurrentScope
2034: oAssign
2035: oGetLocal 2
2037: oPushResult
2038: oNodeNull
2039: oPop 1
2041: oChoice 2159
2043: oGetAddrLocal 2
2045: oPushResult
2046: oSetResult 12
2048: oPushResult
2049: LAST_ID
2050: oPushResult
2051: oCall 10347
2053: oPop 2
2055: oAssign
2056: oGetLocal 2
2058: oPushResult
2059: oSetResult 22
2061: oPushResult
2062: oLabelNew
2063: oPushResult
2064: oNodeSetLabel
2065: oPop 3
2067: oJumpForward 2165
2069: oGetAddrLocal 1
2071: oPushResult
2072: oSetResult 1
2074: oAssign
2075: oGetLocal 2
2077: oPushResult
2078: oSetResult 24
2080: oPushResult
2081: oNodeGetBoolean
2082: oPop 2
2084: oChoice 2090
2086: oError 21
2088: oJumpForward 2093
2090: Choice Lookup Table
           1   2086
2093: oGetLocal 2
2095: oPushResult
2096: oSetResult 25
2098: oPushResult
2099: oNodeGetBoolean
2100: oPop 2
2102: oChoice 2108
2104: oError 21
2106: oJumpForward 2111
2108: Choice Lookup Table
           1   2104
2111: oGetLocal 2
2113: oPushResult
2114: oNodeType
2115: oPop 1
2117: oChoice 2121
2119: oJumpForward 2126
2121: Choice Lookup Table
          12   2119
2124: oError 21
2126: oGetLocal 2
2128: oPushResult
2129: oSetResult 29
2131: oPushResult
2132: oGetLocal 2
2134: oPushResult
2135: oSetResult 23
2137: oPushResult
2138: oNodeGet
2139: oPop 2
2141: oPushResult
2142: oNodeSet
2143: oPop 3
2145: oGetLocal 2
2147: oPushResult
2148: oSetResult 23
2150: oPushResult
2151: oSetResult 0
2153: oPushResult
2154: oNodeSet
2155: oPop 3
2157: oJumpForward 2165
2159: Choice Lookup Table
           0   2069
           1   2043
2164: oEndChoice
2165: oGetAddrLocal 3
2167: oPushResult
2168: oCall 10085
2170: oAssign
2171: oGetAddrLocal 4
2173: oPushResult
2174: oGetLocal 3
2176: oPushResult
2177: oSetResult 0
2179: oPushResult
2180: greater
2181: oPop 2
2183: oAssign
2184: oGetAddrLocal 3
2186: oPushResult
2187: inc
2188: oPop 1
2190: oGetLocal 3
2192: oPushResult
2193: oSetResult 2
2195: oPushResult
2196: oScopeBegin
2197: oPop 2
2199: oGetAddrLocal 5
2201: oPushResult
2202: oScopeCurrent
2203: oAssign
2204: oGetLocal 4
2206: oChoice 2225
2208: oGetAddrLocal 6
2210: oPushResult
2211: oGetGlobal 6
2213: oPushResult
2214: oCall 10375
2216: oPop 1
2218: oPushResult
2219: oScopeAllocType
2220: oPop 1
2222: oAssign
2223: oJumpForward 2228
2225: Choice Lookup Table
           1   2208
2228: oCall 2829
2230: oGetLocal 2
2232: oPushResult
2233: oSetResult 23
2235: oPushResult
2236: oGetLocal 5
2238: oPushResult
2239: oNodeSet
2240: oPop 3
2242: oScopeEnd
2243: oInput 5
2245: oGetLocal 1
2247: oChoice 2259
2249: oGetLocal 2
2251: oPushResult
2252: oScopeDeclare
2253: oPop 1
2255: oJumpForward 2265
2257: oJumpForward 2265
2259: Choice Lookup Table
           1   2257
           0   2249
2264: oEndChoice
2265: oGetLocal 2
2267: oPushResult
2268: oCall 1878
2270: oPop 1
2272: oGetLocal 2
2274: oReturn
2275: oReturn
2276: oLocalSpace 4
2278: oGetAddrLocal 1
2280: oPushResult
2281: oCall 2020
2283: oAssign
2284: oInputChoice 2297
2286: oJumpForward 2391
2288: oGetLocal 1
2290: oPushResult
2291: oCall 1958
2293: oPop 1
2295: oJumpForward 2391
2297: Choice Lookup Table
          68   2288
          67   2286
2302: oGetAddrLocal 2
2304: oPushResult
2305: oGetLocal 1
2307: oPushResult
2308: oSetResult 23
2310: oPushResult
2311: oNodeGet
2312: oPop 2
2314: oAssign
2315: oGetLocal 2
2317: oPushResult
2318: oScopeEnter
2319: oPop 1
2321: oGetAddrLocal 3
2323: oPushResult
2324: oGetLocal 2
2326: oPushResult
2327: oSetResult 14
2329: oPushResult
2330: oNodeGetInt
2331: oPop 2
2333: oAssign
2334: oGetLocal 3
2336: oPushResult
2337: oSetResult 1
2339: oPushResult
2340: oScopeBegin
2341: oPop 2
2343: oGetLocal 1
2345: oPushResult
2346: oSetResult 6
2348: oPushResult
2349: oScopeCurrent
2350: oPushResult
2351: oNodeSet
2352: oPop 3
2354: oGetAddrLocal 4
2356: oPushResult
2357: oGetLocal 1
2359: oPushResult
2360: oSetResult 22
2362: oPushResult
2363: oNodeGetLabel
2364: oPop 2
2366: oAssign
2367: oSetResult 21
2369: oPushResult
2370: oGetLocal 4
2372: oPushResult
2373: oCall 1435
2375: oPop 2
2377: oGetLocal 1
2379: oPushResult
2380: oSetResult 24
2382: oPushResult
2383: oSetResult 1
2385: oPushResult
2386: oNodeSetBoolean
2387: oPop 3
2389: oScopeEnd
2390: oScopeEnd
2391: oInput 5
2393: oReturn
2394: oLocalSpace 8
2396: oInput 0
2398: oGetAddrLocal 1
2400: oPushResult
2401: oSetResult 0
2403: oAssign
2404: oGetAddrLocal 2
2406: oPushResult
2407: oScopeFindInCurrentScope
2408: oAssign
2409: oGetLocal 2
2411: oPushResult
2412: oNodeNull
2413: oPop 1
2415: oChoice 2546
2417: oGetAddrLocal 2
2419: oPushResult
2420: oSetResult 13
2422: oPushResult
2423: LAST_ID
2424: oPushResult
2425: oCall 10347
2427: oPop 2
2429: oAssign
2430: oGetLocal 2
2432: oPushResult
2433: oSetResult 22
2435: oPushResult
2436: oLabelNew
2437: oPushResult
2438: oNodeSetLabel
2439: oPop 3
2441: oJumpForward 2552
2443: oGetAddrLocal 1
2445: oPushResult
2446: oSetResult 1
2448: oAssign
2449: oGetLocal 2
2451: oPushResult
2452: oSetResult 24
2454: oPushResult
2455: oNodeGetBoolean
2456: oPop 2
2458: oChoice 2464
2460: oError 21
2462: oJumpForward 2467
2464: Choice Lookup Table
           1   2460
2467: oGetLocal 2
2469: oPushResult
2470: oNodeType
2471: oPop 1
2473: oChoice 2477
2475: oJumpForward 2482
2477: Choice Lookup Table
          13   2475
2480: oError 21
2482: oGetLocal 2
2484: oPushResult
2485: oSetResult 29
2487: oPushResult
2488: oGetLocal 2
2490: oPushResult
2491: oSetResult 23
2493: oPushResult
2494: oNodeGet
2495: oPop 2
2497: oPushResult
2498: oNodeSet
2499: oPop 3
2501: oGetLocal 2
2503: oPushResult
2504: oSetResult 23
2506: oPushResult
2507: oSetResult 0
2509: oPushResult
2510: oNodeSet
2511: oPop 3
2513: oGetLocal 2
2515: oPushResult
2516: oSetResult 30
2518: oPushResult
2519: oGetLocal 2
2521: oPushResult
2522: oSetResult 21
2524: oPushResult
2525: oNodeGet
2526: oPop 2
2528: oPushResult
2529: oNodeSet
2530: oPop 3
2532: oGetLocal 2
2534: oPushResult
2535: oSetResult 21
2537: oPushResult
2538: oSetResult 0
2540: oPushResult
2541: oNodeSet
2542: oPop 3
2544: oJumpForward 2552
2546: Choice Lookup Table
           0   2443
           1   2417
2551: oEndChoice
2552: oGetAddrLocal 3
2554: oPushResult
2555: oCall 10085
2557: oAssign
2558: oGetAddrLocal 4
2560: oPushResult
2561: oGetLocal 3
2563: oPushResult
2564: oSetResult 0
2566: oPushResult
2567: greater
2568: oPop 2
2570: oAssign
2571: oGetAddrLocal 3
2573: oPushResult
2574: inc
2575: oPop 1
2577: oGetLocal 3
2579: oPushResult
2580: oSetResult 2
2582: oPushResult
2583: oScopeBegin
2584: oPop 2
2586: oGetAddrLocal 5
2588: oPushResult
2589: oScopeCurrent
2590: oAssign
2591: oGetLocal 4
2593: oChoice 2612
2595: oGetAddrLocal 6
2597: oPushResult
2598: oGetGlobal 6
2600: oPushResult
2601: oCall 10375
2603: oPop 1
2605: oPushResult
2606: oScopeAllocType
2607: oPop 1
2609: oAssign
2610: oJumpForward 2615
2612: Choice Lookup Table
           1   2595
2615: oCall 2829
2617: oGetLocal 2
2619: oPushResult
2620: oSetResult 23
2622: oPushResult
2623: oGetLocal 5
2625: oPushResult
2626: oNodeSet
2627: oPop 3
2629: oInput 12
2631: oGetAddrLocal 7
2633: oPushResult
2634: oCall 3963
2636: oPop 1
2638: oGetLocal 2
2640: oPushResult
2641: oSetResult 21
2643: oPushResult
2644: oGetLocal 7
2646: oPushResult
2647: oNodeSet
2648: oPop 3
2650: oGetAddrLocal 8
2652: oPushResult
2653: oGetLocal 7
2655: oPushResult
2656: oCall 10375
2658: oPop 1
2660: oAssign
2661: oGetLocal 2
2663: oPushResult
2664: oSetResult 31
2666: oPushResult
2667: oGetLocal 8
2669: oPushResult
2670: oScopeAllocType
2671: oPop 1
2673: oPushResult
2674: oNodeSetInt
2675: oPop 3
2677: oScopeEnd
2678: oInput 5
2680: oGetLocal 1
2682: oChoice 2694
2684: oGetLocal 2
2686: oPushResult
2687: oScopeDeclare
2688: oPop 1
2690: oJumpForward 2700
2692: oJumpForward 2700
2694: Choice Lookup Table
           1   2692
           0   2684
2699: oEndChoice
2700: oGetLocal 2
2702: oPushResult
2703: oCall 1878
2705: oPop 1
2707: oGetLocal 2
2709: oReturn
2710: oReturn
2711: oLocalSpace 4
2713: oGetAddrLocal 1
2715: oPushResult
2716: oCall 2394
2718: oAssign
2719: oInputChoice 2732
2721: oJumpForward 2826
2723: oGetLocal 1
2725: oPushResult
2726: oCall 1958
2728: oPop 1
2730: oJumpForward 2826
2732: Choice Lookup Table
          68   2723
          67   2721
2737: oGetAddrLocal 2
2739: oPushResult
2740: oGetLocal 1
2742: oPushResult
2743: oSetResult 23
2745: oPushResult
2746: oNodeGet
2747: oPop 2
2749: oAssign
2750: oGetLocal 2
2752: oPushResult
2753: oScopeEnter
2754: oPop 1
2756: oGetAddrLocal 3
2758: oPushResult
2759: oGetLocal 2
2761: oPushResult
2762: oSetResult 14
2764: oPushResult
2765: oNodeGetInt
2766: oPop 2
2768: oAssign
2769: oGetLocal 3
2771: oPushResult
2772: oSetResult 1
2774: oPushResult
2775: oScopeBegin
2776: oPop 2
2778: oGetLocal 1
2780: oPushResult
2781: oSetResult 6
2783: oPushResult
2784: oScopeCurrent
2785: oPushResult
2786: oNodeSet
2787: oPop 3
2789: oGetAddrLocal 4
2791: oPushResult
2792: oGetLocal 1
2794: oPushResult
2795: oSetResult 22
2797: oPushResult
2798: oNodeGetLabel
2799: oPop 2
2801: oAssign
2802: oSetResult 21
2804: oPushResult
2805: oGetLocal 4
2807: oPushResult
2808: oCall 1435
2810: oPop 2
2812: oGetLocal 1
2814: oPushResult
2815: oSetResult 24
2817: oPushResult
2818: oSetResult 1
2820: oPushResult
2821: oNodeSetBoolean
2822: oPop 3
2824: oScopeEnd
2825: oScopeEnd
2826: oInput 5
2828: oReturn
2829: oLocalSpace 6
2831: oInputChoice 3049
2833: oGetAddrLocal 1
2835: oPushResult
2836: oNodeVecNew
2837: oAssign
2838: oGetAddrLocal 3
2840: oPushResult
2841: oSetResult 0
2843: oAssign
2844: oInputChoice 2854
2846: oGetAddrLocal 3
2848: oPushResult
2849: oSetResult 1
2851: oAssign
2852: oJumpForward 2857
2854: Choice Lookup Table
          33   2846
2857: oInput 0
2859: oGetAddrLocal 2
2861: oPushResult
2862: oSetResult 23
2864: oPushResult
2865: LAST_ID
2866: oPushResult
2867: oCall 10347
2869: oPop 2
2871: oAssign
2872: oGetLocal 2
2874: oPushResult
2875: oSetResult 33
2877: oPushResult
2878: oGetLocal 3
2880: oPushResult
2881: oNodeSetBoolean
2882: oPop 3
2884: oGetLocal 1
2886: oPushResult
2887: oGetLocal 2
2889: oPushResult
2890: oNodeVecAppend
2891: oPop 2
2893: oInputChoice 2901
2895: oJumpForward 2909
2897: oJumpForward 2907
2899: oJumpForward 2907
2901: Choice Lookup Table
          13   2899
          12   2895
2906: oEndChoice
2907: oJumpBack 2857
2909: oGetAddrLocal 4
2911: oPushResult
2912: oCall 3963
2914: oPop 1
2916: oGetLocal 3
2918: oChoice 2933
2920: oGetAddrLocal 5
2922: oPushResult
2923: oGetLocal 4
2925: oPushResult
2926: oCall 10375
2928: oPop 1
2930: oAssign
2931: oJumpForward 2942
2933: Choice Lookup Table
           1   2920
2936: oGetAddrLocal 5
2938: oPushResult
2939: oGetLocal 4
2941: oAssign
2942: oGetAddrLocal 6
2944: oPushResult
2945: oSetResult 0
2947: oAssign
2948: oGetLocal 6
2950: oPushResult
2951: oGetLocal 1
2953: oPushResult
2954: oNodeVecSize
2955: oPop 1
2957: oPushResult
2958: equal
2959: oPop 2
2961: oChoice 3018
2963: oGetAddrLocal 2
2965: oPushResult
2966: oGetLocal 1
2968: oPushResult
2969: oGetLocal 6
2971: oPushResult
2972: oNodeVecElement
2973: oPop 2
2975: oAssign
2976: oGetLocal 2
2978: oPushResult
2979: oSetResult 21
2981: oPushResult
2982: oGetLocal 4
2984: oPushResult
2985: oNodeSet
2986: oPop 3
2988: oGetLocal 2
2990: oPushResult
2991: oScopeDeclare
2992: oPop 1
2994: oGetLocal 2
2996: oPushResult
2997: oSetResult 22
2999: oPushResult
3000: oGetLocal 5
3002: oPushResult
3003: oScopeAllocType
3004: oPop 1
3006: oPushResult
3007: oNodeSetInt
3008: oPop 3
3010: oGetAddrLocal 6
3012: oPushResult
3013: inc
3014: oPop 1
3016: oJumpForward 3023
3018: Choice Lookup Table
           0   2963
3021: oJumpForward 3025
3023: oJumpBack 2948
3025: oGetLocal 1
3027: oPushResult
3028: oNodeVecDelete
3029: oPop 1
3031: oInputChoice 3039
3033: oJumpForward 3047
3035: oJumpForward 3045
3037: oJumpForward 3045
3039: Choice Lookup Table
           5   3037
          15   3033
3044: oEndChoice
3045: oJumpBack 2833
3047: oJumpForward 3052
3049: Choice Lookup Table
          14   2833
3052: oReturn
3053: oLocalSpace 0
3055: oInputChoice 3070
3057: oInputChoice 3063
3059: oCall 3136
3061: oJumpForward 3068
3063: Choice Lookup Table
          12   3059
3066: oCall 3078
3068: oJumpForward 3075
3070: Choice Lookup Table
           0   3057
3073: oJumpForward 3077
3075: oJumpBack 3055
3077: oReturn
3078: oLocalSpace 2
3080: oGetAddrLocal 1
3082: oPushResult
3083: oSetResult 16
3085: oPushResult
3086: LAST_ID
3087: oPushResult
3088: oCall 10347
3090: oPop 2
3092: oAssign
3093: oInput 6
3095: oCall 5019
3097: oGetAddrLocal 2
3099: oPushResult
3100: oValueTop
3101: oAssign
3102: oValuePop
3103: oGetLocal 1
3105: oPushResult
3106: oSetResult 22
3108: oPushResult
3109: oGetLocal 2
3111: oPushResult
3112: oNodeSetInt
3113: oPop 3
3115: oGetLocal 1
3117: oPushResult
3118: oSetResult 21
3120: oPushResult
3121: oGetGlobal 6
3123: oPushResult
3124: oNodeSet
3125: oPop 3
3127: oGetLocal 1
3129: oPushResult
3130: oScopeDeclare
3131: oPop 1
3133: oInput 5
3135: oReturn
3136: oLocalSpace 4
3138: oGetAddrLocal 1
3140: oPushResult
3141: oSetResult 24
3143: oPushResult
3144: LAST_ID
3145: oPushResult
3146: oCall 10347
3148: oPop 2
3150: oAssign
3151: oGetAddrLocal 2
3153: oPushResult
3154: oCall 3963
3156: oPop 1
3158: oGetLocal 1
3160: oPushResult
3161: oSetResult 21
3163: oPushResult
3164: oGetLocal 2
3166: oPushResult
3167: oNodeSet
3168: oPop 3
3170: oGetLocal 2
3172: oPushResult
3173: oNodeType
3174: oPop 1
3176: oChoice 3277
3178: oInput 6
3180: oCall 5019
3182: oGetAddrLocal 3
3184: oPushResult
3185: oValueTop
3186: oAssign
3187: oValuePop
3188: oGetLocal 1
3190: oPushResult
3191: oSetResult 22
3193: oPushResult
3194: oGetLocal 3
3196: oPushResult
3197: oNodeSetInt
3198: oPop 3
3200: oGetLocal 1
3202: oPushResult
3203: oScopeDeclare
3204: oPop 1
3206: oInput 5
3208: oJumpForward 3301
3210: oError 16
3212: oJumpForward 3301
3214: oGetGlobal 2
3216: oPushResult
3217: oScopeEnter
3218: oPop 1
3220: oGetAddrLocal 4
3222: oPushResult
3223: oGetLocal 2
3225: oPushResult
3226: oScopeAllocType
3227: oPop 1
3229: oAssign
3230: oScopeEnd
3231: oGetGlobal 2
3233: oPushResult
3234: oCall 1906
3236: oPop 1
3238: oPushResult
3239: oCodePush
3240: oPop 1
3242: oGetLocal 1
3244: oPushResult
3245: oSetResult 22
3247: oPushResult
3248: oGetLocal 4
3250: oPushResult
3251: oNodeSetInt
3252: oPop 3
3254: oInput 6
3256: oGetLocal 2
3258: oPushResult
3259: oGetLocal 4
3261: oPushResult
3262: oCall 3302
3264: oPop 2
3266: oCodePop
3267: oGetLocal 1
3269: oPushResult
3270: oScopeDeclare
3271: oPop 1
3273: oInput 5
3275: oJumpForward 3301
3277: Choice Lookup Table
          38   3214
          36   3214
          35   3210
          34   3210
          27   3210
          33   3210
          39   3178
          28   3178
          32   3178
          29   3178
          30   3178
3300: oEndChoice
3301: oReturn
3302: oLocalSpace 10
3304: oGetParam 2
3306: oPushResult
3307: oNodeType
3308: oPop 1
3310: oChoice 3583
3312: oGetAddrLocal 1
3314: oPushResult
3315: oGetParam 2
3317: oPushResult
3318: oSetResult 36
3320: oPushResult
3321: oNodeGet
3322: oPop 2
3324: oAssign
3325: oGetAddrLocal 2
3327: oPushResult
3328: oGetParam 2
3330: oPushResult
3331: oSetResult 37
3333: oPushResult
3334: oNodeGet
3335: oPop 2
3337: oAssign
3338: oGetAddrLocal 3
3340: oPushResult
3341: oGetLocal 2
3343: oPushResult
3344: oCall 10459
3346: oPop 1
3348: oAssign
3349: oGetAddrLocal 4
3351: oPushResult
3352: oGetLocal 2
3354: oPushResult
3355: oCall 10554
3357: oPop 1
3359: oAssign
3360: oGetAddrLocal 5
3362: oPushResult
3363: oGetLocal 1
3365: oPushResult
3366: oSetResult 17
3368: oPushResult
3369: oNodeGetInt
3370: oPop 2
3372: oAssign
3373: oInput 14
3375: oGetAddrLocal 6
3377: oPushResult
3378: oGetLocal 3
3380: oAssign
3381: oGetLocal 1
3383: oPushResult
3384: oGetParam 1
3386: oPushResult
3387: oCall 3302
3389: oPop 2
3391: oGetLocal 6
3393: oPushResult
3394: oGetLocal 4
3396: oPushResult
3397: equal
3398: oPop 2
3400: oChoice 3408
3402: oJumpForward 3437
3404: oJumpForward 3414
3406: oJumpForward 3414
3408: Choice Lookup Table
           0   3406
           1   3402
3413: oEndChoice
3414: oInput 13
3416: oGetAddrParam 1
3418: oPushResult
3419: oGetParam 1
3421: oPushResult
3422: oGetLocal 5
3424: oPushResult
3425: add
3426: oPop 2
3428: oAssign
3429: oGetAddrLocal 6
3431: oPushResult
3432: inc
3433: oPop 1
3435: oJumpBack 3381
3437: oInput 15
3439: oJumpForward 3607
3441: oInput 14
3443: oGetAddrLocal 7
3445: oPushResult
3446: oGetParam 2
3448: oPushResult
3449: oSetResult 40
3451: oPushResult
3452: oNodeGet
3453: oPop 2
3455: oAssign
3456: oInputChoice 3460
3458: oJumpForward 3465
3460: Choice Lookup Table
           0   3458
3463: oJumpForward 3531
3465: oGetAddrLocal 8
3467: oPushResult
3468: oGetLocal 7
3470: oPushResult
3471: oScopeFindRequireInScope
3472: oPop 1
3474: oAssign
3475: oInput 12
3477: oGetAddrLocal 9
3479: oPushResult
3480: oGetLocal 8
3482: oPushResult
3483: oSetResult 21
3485: oPushResult
3486: oNodeGet
3487: oPop 2
3489: oAssign
3490: oGetAddrLocal 10
3492: oPushResult
3493: oGetParam 1
3495: oPushResult
3496: oGetLocal 8
3498: oPushResult
3499: oSetResult 22
3501: oPushResult
3502: oNodeGetInt
3503: oPop 2
3505: oPushResult
3506: add
3507: oPop 2
3509: oAssign
3510: oGetLocal 9
3512: oPushResult
3513: oGetLocal 10
3515: oPushResult
3516: oCall 3302
3518: oPop 2
3520: oInputChoice 3524
3522: oJumpForward 3529
3524: Choice Lookup Table
           5   3522
3527: oJumpForward 3531
3529: oJumpBack 3456
3531: oInput 15
3533: oJumpForward 3607
3535: oEmit 16
3537: oGetParam 1
3539: oPushResult
3540: oEmitInt
3541: oPop 1
3543: oCall 5019
3545: oEmit 15
3547: oValueTop
3548: oPushResult
3549: oEmitInt
3550: oPop 1
3552: oValuePop
3553: oEmit 26
3555: oJumpForward 3607
3557: oEmit 16
3559: oGetParam 1
3561: oPushResult
3562: oEmitInt
3563: oPop 1
3565: oCall 5019
3567: oEmit 15
3569: oValueTop
3570: oPushResult
3571: oEmitInt
3572: oPop 1
3574: oValuePop
3575: oEmit 25
3577: oJumpForward 3607
3579: oError 16
3581: oJumpForward 3607
3583: Choice Lookup Table
          35   3579
          34   3579
          27   3579
          33   3579
          39   3557
          28   3557
          32   3535
          29   3535
          30   3535
          38   3441
          36   3312
3606: oEndChoice
3607: oReturn
3608: oLocalSpace 2
3610: oInputChoice 3656
3612: oGetAddrLocal 1
3614: oPushResult
3615: oSetResult 18
3617: oPushResult
3618: LAST_ID
3619: oPushResult
3620: oCall 10347
3622: oPop 2
3624: oAssign
3625: oInput 6
3627: oGetAddrLocal 2
3629: oPushResult
3630: oCall 3963
3632: oPop 1
3634: oGetLocal 1
3636: oPushResult
3637: oSetResult 21
3639: oPushResult
3640: oGetLocal 2
3642: oPushResult
3643: oNodeSet
3644: oPop 3
3646: oGetLocal 1
3648: oPushResult
3649: oScopeDeclare
3650: oPop 1
3652: oInput 5
3654: oJumpForward 3661
3656: Choice Lookup Table
           0   3612
3659: oJumpForward 3663
3661: oJumpBack 3610
3663: oReturn
3664: oLocalSpace 6
3666: oInputChoice 3890
3668: oGetAddrLocal 1
3670: oPushResult
3671: oNodeVecNew
3672: oAssign
3673: oGetAddrLocal 2
3675: oPushResult
3676: oGetParam 1
3678: oPushResult
3679: LAST_ID
3680: oPushResult
3681: oCall 10347
3683: oPop 2
3685: oAssign
3686: oGetLocal 1
3688: oPushResult
3689: oGetLocal 2
3691: oPushResult
3692: oNodeVecAppend
3693: oPop 2
3695: oInputChoice 3701
3697: oInput 0
3699: oJumpForward 3706
3701: Choice Lookup Table
          13   3697
3704: oJumpForward 3708
3706: oJumpBack 3673
3708: oInput 12
3710: oGetAddrLocal 3
3712: oPushResult
3713: oCall 3963
3715: oPop 1
3717: oGetAddrLocal 4
3719: oPushResult
3720: oSetResult 0
3722: oAssign
3723: oGetLocal 4
3725: oPushResult
3726: oGetLocal 1
3728: oPushResult
3729: oNodeVecSize
3730: oPop 1
3732: oPushResult
3733: equal
3734: oPop 2
3736: oChoice 3777
3738: oGetAddrLocal 2
3740: oPushResult
3741: oGetLocal 1
3743: oPushResult
3744: oGetLocal 4
3746: oPushResult
3747: oNodeVecElement
3748: oPop 2
3750: oAssign
3751: oGetLocal 2
3753: oPushResult
3754: oSetResult 21
3756: oPushResult
3757: oGetLocal 3
3759: oPushResult
3760: oNodeSet
3761: oPop 3
3763: oGetLocal 2
3765: oPushResult
3766: oScopeDeclareAlloc
3767: oPop 1
3769: oGetAddrLocal 4
3771: oPushResult
3772: inc
3773: oPop 1
3775: oJumpForward 3782
3777: Choice Lookup Table
           0   3738
3780: oJumpForward 3784
3782: oJumpBack 3723
3784: oInputChoice 3877
3786: oGetLocal 1
3788: oPushResult
3789: oNodeVecSize
3790: oPop 1
3792: oChoice 3796
3794: oJumpForward 3801
3796: Choice Lookup Table
           1   3794
3799: oError 22
3801: oGetAddrLocal 5
3803: oPushResult
3804: oScopeCurrent
3805: oPushResult
3806: oCall 1906
3808: oPop 1
3810: oAssign
3811: oGetLocal 5
3813: oPushResult
3814: oCodePush
3815: oPop 1
3817: oGetAddrLocal 6
3819: oPushResult
3820: oSetResult 0
3822: oAssign
3823: oCall 10085
3825: oPushResult
3826: equal_zero
3827: oPop 1
3829: oChoice 3845
3831: oGetGlobal 3
3833: oPushResult
3834: oScopeEnter
3835: oPop 1
3837: oGetAddrLocal 6
3839: oPushResult
3840: oSetResult 1
3842: oAssign
3843: oJumpForward 3848
3845: Choice Lookup Table
           1   3831
3848: oGetLocal 2
3850: oPushResult
3851: oSetResult 1
3853: oPushResult
3854: oCall 9285
3856: oPop 2
3858: oCall 5092
3860: oCall 7802
3862: oCall 9041
3864: oGetLocal 6
3866: oChoice 3871
3868: oScopeEnd
3869: oJumpForward 3874
3871: Choice Lookup Table
           1   3868
3874: oCodePop
3875: oJumpForward 3880
3877: Choice Lookup Table
           6   3786
3880: oGetLocal 1
3882: oPushResult
3883: oNodeVecDelete
3884: oPop 1
3886: oInput 5
3888: oJumpForward 3895
3890: Choice Lookup Table
           0   3668
3893: oJumpForward 3897
3895: oJumpBack 3666
3897: oReturn
3898: oLocalSpace 2
3900: oInputChoice 3907
3902: oJumpForward 3913
3904: oChangeIntLitToLabelIdent
3905: oJumpForward 3913
3907: Choice Lookup Table
           1   3904
           0   3902
3912: oEndChoice
3913: oGetAddrLocal 1
3915: oPushResult
3916: oSetResult 25
3918: oPushResult
3919: LAST_ID
3920: oPushResult
3921: oCall 10347
3923: oPop 2
3925: oAssign
3926: oGetAddrLocal 2
3928: oPushResult
3929: oLabelNew
3930: oAssign
3931: oGetLocal 1
3933: oPushResult
3934: oSetResult 22
3936: oPushResult
3937: oGetLocal 2
3939: oPushResult
3940: oNodeSetLabel
3941: oPop 3
3943: oGetLocal 1
3945: oPushResult
3946: oScopeDeclare
3947: oPop 1
3949: oInputChoice 3953
3951: oJumpForward 3958
3953: Choice Lookup Table
          13   3951
3956: oJumpForward 3960
3958: oJumpBack 3900
3960: oInput 5
3962: oReturn
3963: oLocalSpace 12
3965: oInputChoice 4438
3967: oGetAddrLocal 1
3969: oPushResult
3970: oScopeFindRequire
3971: oAssign
3972: oGetAddrLocal 1
3974: oPushResult
3975: oCall 466
3977: oPop 1
3979: oGetLocal 1
3981: oPushResult
3982: oNodeType
3983: oPop 1
3985: oChoice 4002
3987: oGetParam 1
3989: oPushResult
3990: oGetLocal 1
3992: oPushResult
3993: oSetResult 21
3995: oPushResult
3996: oNodeGet
3997: oPop 2
3999: oAssign
4000: oJumpForward 4013
4002: Choice Lookup Table
          18   3987
4005: oError 2
4007: oGetParam 1
4009: oPushResult
4010: oGetGlobal 6
4012: oAssign
4013: oJumpForward 4457
4015: oInput 16
4017: oGetAddrLocal 2
4019: oPushResult
4020: oNodeVecNew
4021: oAssign
4022: oGetAddrLocal 3
4024: oPushResult
4025: oSetResult 37
4027: oPushResult
4028: oNodeNew
4029: oPop 1
4031: oAssign
4032: oGetLocal 3
4034: oPushResult
4035: oSetResult 36
4037: oPushResult
4038: oGetGlobal 6
4040: oPushResult
4041: oNodeSet
4042: oPop 3
4044: oCall 5019
4046: oGetLocal 3
4048: oPushResult
4049: oSetResult 38
4051: oPushResult
4052: oValueTop
4053: oPushResult
4054: oNodeSetInt
4055: oPop 3
4057: oValuePop
4058: oInput 21
4060: oCall 5019
4062: oGetLocal 3
4064: oPushResult
4065: oSetResult 39
4067: oPushResult
4068: oValueTop
4069: oPushResult
4070: oNodeSetInt
4071: oPop 3
4073: oValuePop
4074: oGetLocal 3
4076: oPushResult
4077: oSetResult 17
4079: oPushResult
4080: oSetResult 4
4082: oPushResult
4083: oNodeSetInt
4084: oPop 3
4086: oGetLocal 3
4088: oPushResult
4089: oTypeAdd
4090: oPop 1
4092: oGetAddrLocal 4
4094: oPushResult
4095: oSetResult 36
4097: oPushResult
4098: oNodeNew
4099: oPop 1
4101: oAssign
4102: oGetLocal 4
4104: oPushResult
4105: oSetResult 37
4107: oPushResult
4108: oGetLocal 3
4110: oPushResult
4111: oNodeSet
4112: oPop 3
4114: oGetLocal 2
4116: oPushResult
4117: oGetLocal 4
4119: oPushResult
4120: oNodeVecAppend
4121: oPop 2
4123: oInputChoice 4131
4125: oJumpForward 4139
4127: oJumpForward 4137
4129: oJumpForward 4137
4131: Choice Lookup Table
          13   4129
          17   4125
4136: oEndChoice
4137: oJumpBack 4022
4139: oInput 40
4141: oGetAddrLocal 5
4143: oPushResult
4144: oCall 3963
4146: oPop 1
4148: oGetAddrLocal 6
4150: oPushResult
4151: oGetLocal 2
4153: oPushResult
4154: oNodeVecSize
4155: oPop 1
4157: oAssign
4158: oGetAddrLocal 6
4160: oPushResult
4161: dec
4162: oPop 1
4164: oGetAddrLocal 7
4166: oPushResult
4167: oGetLocal 2
4169: oPushResult
4170: oGetLocal 6
4172: oPushResult
4173: oNodeVecElement
4174: oPop 2
4176: oAssign
4177: oGetLocal 7
4179: oPushResult
4180: oSetResult 36
4182: oPushResult
4183: oGetLocal 5
4185: oPushResult
4186: oNodeSet
4187: oPop 3
4189: oGetAddrLocal 8
4191: oPushResult
4192: oGetLocal 7
4194: oPushResult
4195: oSetResult 37
4197: oPushResult
4198: oNodeGet
4199: oPop 2
4201: oAssign
4202: oGetAddrLocal 9
4204: oPushResult
4205: oGetLocal 8
4207: oPushResult
4208: oSetResult 39
4210: oPushResult
4211: oNodeGetInt
4212: oPop 2
4214: oPushResult
4215: oGetLocal 8
4217: oPushResult
4218: oSetResult 38
4220: oPushResult
4221: oNodeGetInt
4222: oPop 2
4224: oPushResult
4225: subtract
4226: oPop 2
4228: oAssign
4229: oGetAddrLocal 9
4231: oPushResult
4232: inc
4233: oPop 1
4235: oGetLocal 7
4237: oPushResult
4238: oSetResult 17
4240: oPushResult
4241: oGetLocal 9
4243: oPushResult
4244: oGetLocal 5
4246: oPushResult
4247: oSetResult 17
4249: oPushResult
4250: oNodeGetInt
4251: oPop 2
4253: oPushResult
4254: multiply
4255: oPop 2
4257: oPushResult
4258: oNodeSetInt
4259: oPop 3
4261: oGetLocal 7
4263: oPushResult
4264: oTypeAdd
4265: oPop 1
4267: oGetAddrLocal 5
4269: oPushResult
4270: oGetLocal 7
4272: oAssign
4273: oGetLocal 6
4275: oPushResult
4276: equal_zero
4277: oPop 1
4279: oChoice 4285
4281: oJumpForward 4290
4283: oJumpForward 4288
4285: Choice Lookup Table
           1   4281
4288: oJumpBack 4158
4290: oGetParam 1
4292: oPushResult
4293: oGetLocal 2
4295: oPushResult
4296: oSetResult 0
4298: oPushResult
4299: oNodeVecElement
4300: oPop 2
4302: oAssign
4303: oGetLocal 2
4305: oPushResult
4306: oNodeVecDelete
4307: oPop 1
4309: oJumpForward 4457
4311: oGetAddrLocal 10
4313: oPushResult
4314: oCall 3963
4316: oPop 1
4318: oGetParam 1
4320: oPushResult
4321: oGetLocal 10
4323: oPushResult
4324: oCall 10375
4326: oPop 1
4328: oAssign
4329: oJumpForward 4457
4331: oGetParam 1
4333: oPushResult
4334: oSetResult 38
4336: oPushResult
4337: oNodeNew
4338: oPop 1
4340: oAssign
4341: oSetResult -1
4343: oPushResult
4344: oSetResult 2
4346: oPushResult
4347: oScopeBegin
4348: oPop 2
4350: oSetResult 22
4352: oPushResult
4353: oCall 3664
4355: oPop 1
4357: oGetAddrLocal 11
4359: oPushResult
4360: oScopeCurrent
4361: oPushResult
4362: oSetResult 17
4364: oPushResult
4365: oNodeGetInt
4366: oPop 2
4368: oAssign
4369: oGetLocal 11
4371: oPushResult
4372: equal_zero
4373: oPop 1
4375: oChoice 4381
4377: oError 19
4379: oJumpForward 4384
4381: Choice Lookup Table
           1   4377
4384: oInput 36
4386: oGetFromParam 1
4388: oPushResult
4389: oSetResult 40
4391: oPushResult
4392: oScopeCurrent
4393: oPushResult
4394: oNodeSet
4395: oPop 3
4397: oGetFromParam 1
4399: oPushResult
4400: oSetResult 17
4402: oPushResult
4403: oGetLocal 11
4405: oPushResult
4406: oNodeSetInt
4407: oPop 3
4409: oScopeEnd
4410: oGetFromParam 1
4412: oPushResult
4413: oTypeAdd
4414: oPop 1
4416: oJumpForward 4457
4418: oGetParam 1
4420: oPushResult
4421: oCall 4458
4423: oPop 1
4425: oJumpForward 4457
4427: oInput 40
4429: oGetAddrLocal 12
4431: oPushResult
4432: oCall 3963
4434: oPop 1
4436: oJumpForward 4457
4438: Choice Lookup Table
          39   4427
          14   4418
          38   4331
          18   4311
          37   4015
           0   3967
4451: oCall 5019
4453: oInput 21
4455: oCall 5019
4457: oReturn
4458: oLocalSpace 11
4460: oGetParam 1
4462: oPushResult
4463: oSetResult 39
4465: oPushResult
4466: oNodeNew
4467: oPop 1
4469: oAssign
4470: oGetAddrLocal 1
4472: oPushResult
4473: oSetResult 0
4475: oAssign
4476: oGetAddrLocal 2
4478: oPushResult
4479: oSetResult 0
4481: oAssign
4482: oGetAddrLocal 3
4484: oPushResult
4485: oSetResult 1
4487: oAssign
4488: oGetAddrLocal 4
4490: oPushResult
4491: oScopeCurrent
4492: oAssign
4493: oSetResult -1
4495: oPushResult
4496: oSetResult 2
4498: oPushResult
4499: oScopeBegin
4500: oPop 2
4502: oInput 0
4504: oGetAddrLocal 5
4506: oPushResult
4507: oSetResult 17
4509: oPushResult
4510: LAST_ID
4511: oPushResult
4512: oCall 10347
4514: oPop 2
4516: oAssign
4517: oGetAddrLocal 6
4519: oPushResult
4520: oSetResult 17
4522: oPushResult
4523: LAST_ID
4524: oPushResult
4525: oCall 10347
4527: oPop 2
4529: oAssign
4530: oGetLocal 5
4532: oPushResult
4533: oSetResult 21
4535: oPushResult
4536: oGetFromParam 1
4538: oPushResult
4539: oNodeSet
4540: oPop 3
4542: oGetLocal 6
4544: oPushResult
4545: oSetResult 21
4547: oPushResult
4548: oGetFromParam 1
4550: oPushResult
4551: oNodeSet
4552: oPop 3
4554: oGetAddrLocal 7
4556: oPushResult
4557: LAST_ID
4558: oPushResult
4559: ID_STRING
4560: oPop 1
4562: oPushResult
4563: oStringAllocLit
4564: oPop 1
4566: oAssign
4567: oGetLocal 5
4569: oPushResult
4570: oSetResult 32
4572: oPushResult
4573: oGetLocal 7
4575: oPushResult
4576: oNodeSetInt
4577: oPop 3
4579: oGetLocal 6
4581: oPushResult
4582: oSetResult 32
4584: oPushResult
4585: oGetLocal 7
4587: oPushResult
4588: oNodeSetInt
4589: oPop 3
4591: oInputChoice 4660
4593: oCall 5019
4595: oGetLocal 2
4597: oPushResult
4598: equal_zero
4599: oPop 1
4601: oChoice 4622
4603: oValueTop
4604: oPushResult
4605: oGetLocal 1
4607: oPushResult
4608: greater
4609: oPop 2
4611: oChoice 4617
4613: oError 26
4615: oJumpForward 4620
4617: Choice Lookup Table
           0   4613
4620: oJumpForward 4625
4622: Choice Lookup Table
           0   4603
4625: oGetLocal 1
4627: oPushResult
4628: oValueTop
4629: oPushResult
4630: equal
4631: oPop 2
4633: oChoice 4649
4635: oGetFromParam 1
4637: oPushResult
4638: oSetResult 42
4640: oPushResult
4641: oSetResult 1
4643: oPushResult
4644: oNodeSetBoolean
4645: oPop 3
4647: oJumpForward 4652
4649: Choice Lookup Table
           0   4635
4652: oGetAddrLocal 1
4654: oPushResult
4655: oValueTop
4656: oAssign
4657: oValuePop
4658: oJumpForward 4665
4660: Choice Lookup Table
           4   4593
           6   4593
4665: oGetLocal 5
4667: oPushResult
4668: oSetResult 22
4670: oPushResult
4671: oGetLocal 1
4673: oPushResult
4674: oNodeSetInt
4675: oPop 3
4677: oGetLocal 6
4679: oPushResult
4680: oSetResult 22
4682: oPushResult
4683: oGetLocal 1
4685: oPushResult
4686: oNodeSetInt
4687: oPop 3
4689: oGetLocal 5
4691: oPushResult
4692: oScopeDeclare
4693: oPop 1
4695: oGetLocal 4
4697: oPushResult
4698: oScopeEnter
4699: oPop 1
4701: oGetLocal 6
4703: oPushResult
4704: oScopeDeclare
4705: oPop 1
4707: oScopeEnd
4708: oGetAddrLocal 1
4710: oPushResult
4711: inc
4712: oPop 1
4714: oGetAddrLocal 2
4716: oPushResult
4717: inc
4718: oPop 1
4720: oInputChoice 4724
4722: oJumpForward 4729
4724: Choice Lookup Table
          13   4722
4727: oJumpForward 4731
4729: oJumpBack 4502
4731: oInput 15
4733: oGetFromParam 1
4735: oPushResult
4736: oSetResult 40
4738: oPushResult
4739: oScopeCurrent
4740: oPushResult
4741: oNodeSet
4742: oPop 3
4744: oGetFromParam 1
4746: oPushResult
4747: oSetResult 17
4749: oPushResult
4750: oSetResult 4
4752: oPushResult
4753: oNodeSetInt
4754: oPop 3
4756: oScopeEnd
4757: oGetGlobal 2
4759: oPushResult
4760: oCall 1906
4762: oPop 1
4764: oPushResult
4765: oCodePush
4766: oPop 1
4768: oGetGlobal 2
4770: oPushResult
4771: oScopeEnter
4772: oPop 1
4774: oGetAddrLocal 8
4776: oPushResult
4777: oGetLocal 2
4779: oPushResult
4780: oSetResult 1
4782: oPushResult
4783: add
4784: oPop 2
4786: oPushResult
4787: oSetResult 16
4789: oPushResult
4790: multiply
4791: oPop 2
4793: oAssign
4794: oGetAddrLocal 9
4796: oPushResult
4797: oGetLocal 8
4799: oPushResult
4800: oSetResult 8
4802: oPushResult
4803: oScopeAlloc
4804: oPop 2
4806: oAssign
4807: oScopeEnd
4808: oGetFromParam 1
4810: oPushResult
4811: oSetResult 41
4813: oPushResult
4814: oGetLocal 9
4816: oPushResult
4817: oNodeSetInt
4818: oPop 3
4820: oGetAddrLocal 10
4822: oPushResult
4823: oGetFromParam 1
4825: oPushResult
4826: oSetResult 40
4828: oPushResult
4829: oNodeGet
4830: oPop 2
4832: oPushResult
4833: oSetResult 15
4835: oPushResult
4836: oNodeGetIter
4837: oPop 2
4839: oAssign
4840: oGetAddrLocal 11
4842: oPushResult
4843: oGetLocal 10
4845: oPushResult
4846: oNodeIterValue
4847: oPop 1
4849: oAssign
4850: oGetLocal 11
4852: oPushResult
4853: oNodeNull
4854: oPop 1
4856: oChoice 4862
4858: oJumpForward 4949
4860: oJumpForward 4865
4862: Choice Lookup Table
           1   4858
4865: oEmit 16
4867: oGetLocal 9
4869: oPushResult
4870: oEmitInt
4871: oPop 1
4873: oEmit 15
4875: oGetLocal 11
4877: oPushResult
4878: oSetResult 22
4880: oPushResult
4881: oNodeGetInt
4882: oPop 2
4884: oPushResult
4885: oEmitInt
4886: oPop 1
4888: oEmit 25
4890: oGetAddrLocal 9
4892: oPushResult
4893: oGetLocal 9
4895: oPushResult
4896: oSetResult 8
4898: oPushResult
4899: add
4900: oPop 2
4902: oAssign
4903: oEmit 16
4905: oGetLocal 9
4907: oPushResult
4908: oEmitInt
4909: oPop 1
4911: oEmit 16
4913: oGetLocal 11
4915: oPushResult
4916: oSetResult 32
4918: oPushResult
4919: oNodeGetInt
4920: oPop 2
4922: oPushResult
4923: oEmitInt
4924: oPop 1
4926: oEmit 27
4928: oGetAddrLocal 9
4930: oPushResult
4931: oGetLocal 9
4933: oPushResult
4934: oSetResult 8
4936: oPushResult
4937: add
4938: oPop 2
4940: oAssign
4941: oGetAddrLocal 10
4943: oPushResult
4944: oNodeIterNext
4945: oPop 1
4947: oJumpBack 4840
4949: oEmit 16
4951: oGetLocal 9
4953: oPushResult
4954: oEmitInt
4955: oPop 1
4957: oEmit 15
4959: oSetResult 0
4961: oPushResult
4962: oEmitInt
4963: oPop 1
4965: oEmit 25
4967: oGetAddrLocal 9
4969: oPushResult
4970: oGetLocal 9
4972: oPushResult
4973: oSetResult 8
4975: oPushResult
4976: add
4977: oPop 2
4979: oAssign
4980: oEmit 16
4982: oGetLocal 9
4984: oPushResult
4985: oEmitInt
4986: oPop 1
4988: oEmit 15
4990: oSetResult 0
4992: oPushResult
4993: oEmitInt
4994: oPop 1
4996: oEmit 27
4998: oGetAddrLocal 9
5000: oPushResult
5001: oGetLocal 9
5003: oPushResult
5004: oSetResult 8
5006: oPushResult
5007: add
5008: oPop 2
5010: oAssign
5011: oCodePop
5012: oGetFromParam 1
5014: oPushResult
5015: oTypeAdd
5016: oPop 1
5018: oReturn
5019: oLocalSpace 1
5021: oInputChoice 5083
5023: TOKEN_VALUE
5024: oPushResult
5025: oValuePush
5026: oPop 1
5028: oJumpForward 5091
5030: oGetAddrLocal 1
5032: oPushResult
5033: oScopeFindRequire
5034: oAssign
5035: oGetAddrLocal 1
5037: oPushResult
5038: oCall 466
5040: oPop 1
5042: oGetLocal 1
5044: oPushResult
5045: oNodeType
5046: oPop 1
5048: oChoice 5065
5050: oGetLocal 1
5052: oPushResult
5053: oSetResult 22
5055: oPushResult
5056: oNodeGetInt
5057: oPop 2
5059: oPushResult
5060: oValuePush
5061: oPop 1
5063: oJumpForward 5076
5065: Choice Lookup Table
          16   5050
5068: oError 1
5070: oSetResult 0
5072: oPushResult
5073: oValuePush
5074: oPop 1
5076: oJumpForward 5091
5078: oCall 5019
5080: oValueNegate
5081: oJumpForward 5091
5083: Choice Lookup Table
          25   5078
           0   5030
           1   5023
5090: oEndChoice
5091: oReturn
5092: oLocalSpace 1
5094: oGetAddrLocal 1
5096: oPushResult
5097: oSetResult 0
5099: oAssign
5100: oGetAddrLocal 1
5102: oPushResult
5103: oCall 5253
5105: oPop 1
5107: oGetAddrLocal 1
5109: oPushResult
5110: oCall 5153
5112: oPop 1
5114: oReturn
5115: oLocalSpace 0
5117: oGetParam 1
5119: oPushResult
5120: oCall 5253
5122: oPop 1
5124: oTypeSNodeType
5125: oChoice 5144
5127: oJumpForward 5151
5129: oGetParam 1
5131: oPushResult
5132: oLabelNew
5133: oAssign
5134: oEmit 67
5136: oGetFromParam 1
5138: oPushResult
5139: oEmitLabel
5140: oPop 1
5142: oJumpForward 5151
5144: Choice Lookup Table
          30   5129
          31   5127
5149: oError 8
5151: oTypeSPop
5152: oReturn
5153: oLocalSpace 1
5155: oTypeSNodeType
5156: oChoice 5218
5158: oGetAddrLocal 1
5160: oPushResult
5161: oLabelNew
5162: oAssign
5163: oEmit 15
5165: oSetResult 1
5167: oPushResult
5168: oEmitInt
5169: oPop 1
5171: oEmit 65
5173: oGetLocal 1
5175: oPushResult
5176: oEmitLabel
5177: oPop 1
5179: oEmit 68
5181: oGetFromParam 1
5183: oPushResult
5184: oEmitLabel
5185: oPop 1
5187: oEmit 15
5189: oSetResult 0
5191: oPushResult
5192: oEmitInt
5193: oPop 1
5195: oEmit 68
5197: oGetLocal 1
5199: oPushResult
5200: oEmitLabel
5201: oPop 1
5203: oTypeSPop
5204: oGetGlobal 7
5206: oPushResult
5207: oTypeSPush
5208: oPop 1
5210: oGetParam 1
5212: oPushResult
5213: oSetResult 0
5215: oAssign
5216: oJumpForward 5221
5218: Choice Lookup Table
          31   5158
5221: oReturn
5222: oLocalSpace 0
5224: oTypeSNodeType
5225: oChoice 5249
5227: oGetParam 1
5229: oPushResult
5230: oLabelNew
5231: oAssign
5232: oEmit 67
5234: oGetFromParam 1
5236: oPushResult
5237: oEmitLabel
5238: oPop 1
5240: oTypeSPop
5241: oGetGlobal 8
5243: oPushResult
5244: oTypeSPush
5245: oPop 1
5247: oJumpForward 5252
5249: Choice Lookup Table
          30   5227
5252: oReturn
5253: oLocalSpace 0
5255: oGetParam 1
5257: oPushResult
5258: oCall 5714
5260: oPop 1
5262: oInputChoice 5696
5264: oGetParam 1
5266: oPushResult
5267: oCall 5153
5269: oPop 1
5271: oCall 10266
5273: oGetParam 1
5275: oPushResult
5276: oCall 5714
5278: oPop 1
5280: oGetParam 1
5282: oPushResult
5283: oCall 5153
5285: oPop 1
5287: oCall 10266
5289: oCall 10135
5291: oTypeSNodeType
5292: oChoice 5310
5294: oEmit 40
5296: oJumpForward 5327
5298: oEmit 46
5300: oJumpForward 5327
5302: oEmit 52
5304: oJumpForward 5327
5306: oError 16
5308: oJumpForward 5327
5310: Choice Lookup Table
          33   5306
          35   5302
          34   5302
          39   5298
          28   5298
          32   5294
          30   5294
5325: oError 17
5327: oTypeSPop
5328: oGetGlobal 7
5330: oPushResult
5331: oTypeSPush
5332: oPop 1
5334: oJumpForward 5711
5336: oGetParam 1
5338: oPushResult
5339: oCall 5153
5341: oPop 1
5343: oCall 10266
5345: oGetParam 1
5347: oPushResult
5348: oCall 5714
5350: oPop 1
5352: oGetParam 1
5354: oPushResult
5355: oCall 5153
5357: oPop 1
5359: oCall 10266
5361: oCall 10135
5363: oTypeSNodeType
5364: oChoice 5382
5366: oEmit 41
5368: oJumpForward 5399
5370: oEmit 47
5372: oJumpForward 5399
5374: oEmit 53
5376: oJumpForward 5399
5378: oError 16
5380: oJumpForward 5399
5382: Choice Lookup Table
          33   5378
          35   5374
          34   5374
          39   5370
          28   5370
          32   5366
          30   5366
5397: oError 17
5399: oTypeSPop
5400: oGetGlobal 7
5402: oPushResult
5403: oTypeSPush
5404: oPop 1
5406: oJumpForward 5711
5408: oGetParam 1
5410: oPushResult
5411: oCall 5153
5413: oPop 1
5415: oCall 10266
5417: oGetParam 1
5419: oPushResult
5420: oCall 5714
5422: oPop 1
5424: oGetParam 1
5426: oPushResult
5427: oCall 5153
5429: oPop 1
5431: oCall 10266
5433: oCall 10135
5435: oTypeSNodeType
5436: oChoice 5454
5438: oEmit 43
5440: oJumpForward 5471
5442: oEmit 49
5444: oJumpForward 5471
5446: oEmit 55
5448: oJumpForward 5471
5450: oError 16
5452: oJumpForward 5471
5454: Choice Lookup Table
          33   5450
          35   5446
          34   5446
          39   5442
          28   5442
          32   5438
          30   5438
5469: oError 17
5471: oTypeSPop
5472: oGetGlobal 7
5474: oPushResult
5475: oTypeSPush
5476: oPop 1
5478: oJumpForward 5711
5480: oGetParam 1
5482: oPushResult
5483: oCall 5153
5485: oPop 1
5487: oCall 10266
5489: oGetParam 1
5491: oPushResult
5492: oCall 5714
5494: oPop 1
5496: oGetParam 1
5498: oPushResult
5499: oCall 5153
5501: oPop 1
5503: oCall 10266
5505: oCall 10135
5507: oTypeSNodeType
5508: oChoice 5526
5510: oEmit 42
5512: oJumpForward 5543
5514: oEmit 48
5516: oJumpForward 5543
5518: oEmit 54
5520: oJumpForward 5543
5522: oError 16
5524: oJumpForward 5543
5526: Choice Lookup Table
          33   5522
          35   5518
          34   5518
          39   5514
          28   5514
          32   5510
          30   5510
5541: oError 17
5543: oTypeSPop
5544: oGetGlobal 7
5546: oPushResult
5547: oTypeSPush
5548: oPop 1
5550: oJumpForward 5711
5552: oGetParam 1
5554: oPushResult
5555: oCall 5153
5557: oPop 1
5559: oCall 10266
5561: oGetParam 1
5563: oPushResult
5564: oCall 5714
5566: oPop 1
5568: oGetParam 1
5570: oPushResult
5571: oCall 5153
5573: oPop 1
5575: oCall 10266
5577: oCall 10135
5579: oTypeSNodeType
5580: oChoice 5598
5582: oEmit 45
5584: oJumpForward 5615
5586: oEmit 51
5588: oJumpForward 5615
5590: oEmit 57
5592: oJumpForward 5615
5594: oError 16
5596: oJumpForward 5615
5598: Choice Lookup Table
          33   5594
          35   5590
          34   5590
          39   5586
          28   5586
          32   5582
          30   5582
5613: oError 17
5615: oTypeSPop
5616: oGetGlobal 7
5618: oPushResult
5619: oTypeSPush
5620: oPop 1
5622: oJumpForward 5711
5624: oGetParam 1
5626: oPushResult
5627: oCall 5153
5629: oPop 1
5631: oCall 10266
5633: oGetParam 1
5635: oPushResult
5636: oCall 5714
5638: oPop 1
5640: oGetParam 1
5642: oPushResult
5643: oCall 5153
5645: oPop 1
5647: oCall 10266
5649: oCall 10135
5651: oTypeSNodeType
5652: oChoice 5670
5654: oEmit 44
5656: oJumpForward 5687
5658: oEmit 50
5660: oJumpForward 5687
5662: oEmit 56
5664: oJumpForward 5687
5666: oError 16
5668: oJumpForward 5687
5670: Choice Lookup Table
          33   5666
          35   5662
          34   5662
          39   5658
          28   5658
          32   5654
          30   5654
5685: oError 17
5687: oTypeSPop
5688: oGetGlobal 7
5690: oPushResult
5691: oTypeSPush
5692: oPop 1
5694: oJumpForward 5711
5696: Choice Lookup Table
          11   5624
          10   5552
           9   5480
           8   5408
           7   5336
           6   5264
5709: oJumpForward 5713
5711: oJumpBack 5262
5713: oReturn
5714: oLocalSpace 1
5716: oGetAddrLocal 1
5718: oPushResult
5719: oSetResult 0
5721: oAssign
5722: oGetParam 1
5724: oPushResult
5725: oCall 5894
5727: oPop 1
5729: oInputChoice 5862
5731: oTypeSNodeType
5732: oChoice 5803
5734: oGetLocal 1
5736: oPushResult
5737: oSetResult 0
5739: oPushResult
5740: equal_label
5741: oPop 2
5743: oChoice 5752
5745: oGetAddrLocal 1
5747: oPushResult
5748: oLabelNew
5749: oAssign
5750: oJumpForward 5755
5752: Choice Lookup Table
           1   5745
5755: oEmit 65
5757: oGetLocal 1
5759: oPushResult
5760: oEmitLabel
5761: oPop 1
5763: oJumpForward 5810
5765: oGetParam 1
5767: oPushResult
5768: oCall 5222
5770: oPop 1
5772: oGetLocal 1
5774: oPushResult
5775: oSetResult 0
5777: oPushResult
5778: equal_label
5779: oPop 2
5781: oChoice 5790
5783: oGetAddrLocal 1
5785: oPushResult
5786: oLabelNew
5787: oAssign
5788: oJumpForward 5793
5790: Choice Lookup Table
           1   5783
5793: oEmit 65
5795: oGetLocal 1
5797: oPushResult
5798: oEmitLabel
5799: oPop 1
5801: oJumpForward 5810
5803: Choice Lookup Table
          30   5765
          31   5734
5808: oError 8
5810: oTypeSPop
5811: oEmit 68
5813: oGetFromParam 1
5815: oPushResult
5816: oEmitLabel
5817: oPop 1
5819: oGetParam 1
5821: oPushResult
5822: oSetResult 0
5824: oAssign
5825: oGetParam 1
5827: oPushResult
5828: oCall 5894
5830: oPop 1
5832: oTypeSNodeType
5833: oChoice 5846
5835: oJumpForward 5853
5837: oGetParam 1
5839: oPushResult
5840: oCall 5222
5842: oPop 1
5844: oJumpForward 5853
5846: Choice Lookup Table
          30   5837
          31   5835
5851: oError 8
5853: oTypeSPop
5854: oGetGlobal 8
5856: oPushResult
5857: oTypeSPush
5858: oPop 1
5860: oJumpForward 5867
5862: Choice Lookup Table
          55   5731
5865: oJumpForward 5869
5867: oJumpBack 5729
5869: oGetLocal 1
5871: oPushResult
5872: oSetResult 0
5874: oPushResult
5875: equal_label
5876: oPop 2
5878: oChoice 5890
5880: oEmit 68
5882: oGetLocal 1
5884: oPushResult
5885: oEmitLabel
5886: oPop 1
5888: oJumpForward 5893
5890: Choice Lookup Table
           0   5880
5893: oReturn
5894: oLocalSpace 2
5896: oGetAddrLocal 1
5898: oPushResult
5899: oSetResult 0
5901: oAssign
5902: oGetParam 1
5904: oPushResult
5905: oCall 6032
5907: oPop 1
5909: oInputChoice 6024
5911: oTypeSNodeType
5912: oChoice 5925
5914: oJumpForward 5932
5916: oGetParam 1
5918: oPushResult
5919: oCall 5222
5921: oPop 1
5923: oJumpForward 5932
5925: Choice Lookup Table
          30   5916
          31   5914
5930: oError 8
5932: oTypeSPop
5933: oGetLocal 1
5935: oPushResult
5936: oSetResult 0
5938: oPushResult
5939: equal_label
5940: oPop 2
5942: oChoice 5971
5944: oGetAddrLocal 1
5946: oPushResult
5947: oLabelNew
5948: oAssign
5949: oEmit 69
5951: oGetFromParam 1
5953: oPushResult
5954: oEmitLabel
5955: oPop 1
5957: oGetLocal 1
5959: oPushResult
5960: oEmitLabel
5961: oPop 1
5963: oGetParam 1
5965: oPushResult
5966: oGetLocal 1
5968: oAssign
5969: oJumpForward 5974
5971: Choice Lookup Table
           1   5944
5974: oGetAddrLocal 2
5976: oPushResult
5977: oSetResult 0
5979: oAssign
5980: oGetAddrLocal 2
5982: oPushResult
5983: oCall 6032
5985: oPop 1
5987: oTypeSNodeType
5988: oChoice 6001
5990: oJumpForward 6008
5992: oGetAddrLocal 2
5994: oPushResult
5995: oCall 5222
5997: oPop 1
5999: oJumpForward 6008
6001: Choice Lookup Table
          30   5992
          31   5990
6006: oError 8
6008: oEmit 69
6010: oGetLocal 2
6012: oPushResult
6013: oEmitLabel
6014: oPop 1
6016: oGetLocal 1
6018: oPushResult
6019: oEmitLabel
6020: oPop 1
6022: oJumpForward 6029
6024: Choice Lookup Table
          54   5911
6027: oJumpForward 6031
6029: oJumpBack 5909
6031: oReturn
6032: oLocalSpace 1
6034: oInputChoice 6088
6036: oGetAddrLocal 1
6038: oPushResult
6039: oSetResult 0
6041: oAssign
6042: oGetAddrLocal 1
6044: oPushResult
6045: oCall 6032
6047: oPop 1
6049: oTypeSNodeType
6050: oChoice 6079
6052: oGetParam 1
6054: oPushResult
6055: oLabelNew
6056: oAssign
6057: oEmit 65
6059: oGetFromParam 1
6061: oPushResult
6062: oEmitLabel
6063: oPop 1
6065: oEmit 68
6067: oGetLocal 1
6069: oPushResult
6070: oEmitLabel
6071: oPop 1
6073: oJumpForward 6086
6075: oEmit 39
6077: oJumpForward 6086
6079: Choice Lookup Table
          30   6075
          31   6052
6084: oError 8
6086: oJumpForward 6098
6088: Choice Lookup Table
          56   6036
6091: oGetParam 1
6093: oPushResult
6094: oCall 6099
6096: oPop 1
6098: oReturn
6099: oLocalSpace 2
6101: oGetParam 1
6103: oPushResult
6104: oCall 6238
6106: oPop 1
6108: oInputChoice 6228
6110: oTypeSNodeType
6111: oChoice 6196
6113: oCall 10220
6115: oGetParam 1
6117: oPushResult
6118: oCall 6238
6120: oPop 1
6122: oCall 10240
6124: oEmit 36
6126: oJumpForward 6211
6128: oError 16
6130: oJumpForward 6211
6132: oGetAddrLocal 1
6134: oPushResult
6135: oTypeSTop
6136: oPushResult
6137: oSetResult 36
6139: oPushResult
6140: oNodeGet
6141: oPop 2
6143: oAssign
6144: oGetAddrLocal 2
6146: oPushResult
6147: oGetLocal 1
6149: oPushResult
6150: oSetResult 17
6152: oPushResult
6153: oNodeGetInt
6154: oPop 2
6156: oAssign
6157: oGetParam 1
6159: oPushResult
6160: oCall 6238
6162: oPop 1
6164: oCall 10220
6166: oGetLocal 2
6168: oPushResult
6169: oSetResult 1
6171: oPushResult
6172: equal
6173: oPop 2
6175: oChoice 6189
6177: oEmit 15
6179: oGetLocal 2
6181: oPushResult
6182: oEmitInt
6183: oPop 1
6185: oEmit 33
6187: oJumpForward 6192
6189: Choice Lookup Table
           0   6177
6192: oEmit 35
6194: oJumpForward 6211
6196: Choice Lookup Table
          35   6132
          34   6132
          32   6128
          33   6128
          29   6113
          28   6113
6209: oError 17
6211: oJumpForward 6235
6213: oCall 10220
6215: oGetParam 1
6217: oPushResult
6218: oCall 6238
6220: oPop 1
6222: oCall 10240
6224: oEmit 37
6226: oJumpForward 6235
6228: Choice Lookup Table
          25   6213
          24   6110
6233: oJumpForward 6237
6235: oJumpBack 6108
6237: oReturn
6238: oLocalSpace 0
6240: oGetParam 1
6242: oPushResult
6243: oCall 6289
6245: oPop 1
6247: oInputChoice 6279
6249: oCall 10220
6251: oGetParam 1
6253: oPushResult
6254: oCall 6289
6256: oPop 1
6258: oCall 10240
6260: oEmit 33
6262: oJumpForward 6286
6264: oCall 10220
6266: oGetParam 1
6268: oPushResult
6269: oCall 6289
6271: oPop 1
6273: oCall 10240
6275: oEmit 34
6277: oJumpForward 6286
6279: Choice Lookup Table
          23   6264
          22   6249
6284: oJumpForward 6288
6286: oJumpBack 6247
6288: oReturn
6289: oLocalSpace 0
6291: oInputChoice 6317
6293: oGetParam 1
6295: oPushResult
6296: oCall 6330
6298: oPop 1
6300: oCall 10240
6302: oJumpForward 6329
6304: oGetParam 1
6306: oPushResult
6307: oCall 6330
6309: oPop 1
6311: oCall 10240
6313: oEmit 38
6315: oJumpForward 6329
6317: Choice Lookup Table
          25   6304
          24   6293
6322: oGetParam 1
6324: oPushResult
6325: oCall 6330
6327: oPop 1
6329: oReturn
6330: oLocalSpace 6
6332: oInputChoice 6567
6334: oEmit 15
6336: TOKEN_VALUE
6337: oPushResult
6338: oEmitInt
6339: oPop 1
6341: oGetGlobal 6
6343: oPushResult
6344: oTypeSPush
6345: oPop 1
6347: oJumpForward 6588
6349: oEmit 15
6351: TOKEN_VALUE
6352: oPushResult
6353: oEmitInt
6354: oPop 1
6356: oGetGlobal 9
6358: oPushResult
6359: oTypeSPush
6360: oPop 1
6362: oJumpForward 6588
6364: oGetParam 1
6366: oPushResult
6367: oCall 5253
6369: oPop 1
6371: oInput 15
6373: oJumpForward 6588
6375: oGetAddrLocal 1
6377: oPushResult
6378: CURRENT_STRLIT
6379: oPushResult
6380: oStringAllocLit
6381: oPop 1
6383: oAssign
6384: oEmit 16
6386: oGetLocal 1
6388: oPushResult
6389: oEmitInt
6390: oPop 1
6392: oGetGlobal 12
6394: oPushResult
6395: oTypeSPush
6396: oPop 1
6398: oJumpForward 6588
6400: oGetAddrLocal 2
6402: oPushResult
6403: oScopeFindRequire
6404: oAssign
6405: oGetAddrLocal 2
6407: oPushResult
6408: oCall 466
6410: oPop 1
6412: oGetLocal 2
6414: oPushResult
6415: oNodeType
6416: oPop 1
6418: oChoice 6491
6420: oGetLocal 2
6422: oPushResult
6423: oCall 7976
6425: oPop 1
6427: oJumpForward 6516
6429: oGetLocal 2
6431: oPushResult
6432: oCall 8596
6434: oPop 1
6436: oJumpForward 6516
6438: oGetAddrLocal 3
6440: oPushResult
6441: oGetLocal 2
6443: oPushResult
6444: oSetResult 21
6446: oPushResult
6447: oNodeGet
6448: oPop 2
6450: oAssign
6451: oGetLocal 3
6453: oPushResult
6454: oTypeSPush
6455: oPop 1
6457: oTypeSNodeType
6458: oChoice 6471
6460: oEmit 15
6462: oGetLocal 2
6464: oPushResult
6465: oCall 10649
6467: oPop 1
6469: oJumpForward 6480
6471: Choice Lookup Table
          30   6460
          39   6460
          28   6460
6478: oError 16
6480: oJumpForward 6516
6482: oGetLocal 2
6484: oPushResult
6485: oCall 6589
6487: oPop 1
6489: oJumpForward 6516
6491: Choice Lookup Table
          24   6482
          23   6482
          21   6482
          20   6482
          17   6438
          16   6438
          14   6429
          13   6420
6508: oError 6
6510: oGetGlobal 6
6512: oPushResult
6513: oTypeSPush
6514: oPop 1
6516: oJumpForward 6588
6518: oInput 0
6520: oGetAddrLocal 4
6522: oPushResult
6523: oScopeFindRequire
6524: oAssign
6525: oGetAddrLocal 4
6527: oPushResult
6528: oCall 466
6530: oPop 1
6532: oGetLocal 4
6534: oPushResult
6535: oSetResult 0
6537: oPushResult
6538: oCall 9285
6540: oPop 2
6542: oGetAddrLocal 5
6544: oPushResult
6545: oTypeSTop
6546: oAssign
6547: oTypeSPop
6548: oGetAddrLocal 6
6550: oPushResult
6551: oGetLocal 5
6553: oPushResult
6554: oCall 10375
6556: oPop 1
6558: oAssign
6559: oGetLocal 6
6561: oPushResult
6562: oTypeSPush
6563: oPop 1
6565: oJumpForward 6588
6567: Choice Lookup Table
          19   6518
           0   6400
           2   6375
          14   6364
           3   6349
           1   6334
6580: oError 6
6582: oGetGlobal 6
6584: oPushResult
6585: oTypeSPush
6586: oPop 1
6588: oReturn
6589: oLocalSpace 2
6591: oGetAddrLocal 1
6593: oPushResult
6594: oGetParam 1
6596: oPushResult
6597: oSetResult 21
6599: oPushResult
6600: oNodeGet
6601: oPop 2
6603: oAssign
6604: oGetAddrLocal 2
6606: oPushResult
6607: oGetParam 1
6609: oPushResult
6610: oCall 10117
6612: oPop 1
6614: oAssign
6615: oGetLocal 1
6617: oPushResult
6618: oTypeSPush
6619: oPop 1
6621: oTypeSNodeType
6622: oChoice 7321
6624: oGetParam 1
6626: oPushResult
6627: oNodeType
6628: oPop 1
6630: oChoice 6776
6632: oEmit 0
6634: oGetParam 1
6636: oPushResult
6637: oCall 10649
6639: oPop 1
6641: oJumpForward 6786
6643: oGetLocal 2
6645: oPushResult
6646: equal_zero
6647: oPop 1
6649: oChoice 6662
6651: oEmit 3
6653: oGetParam 1
6655: oPushResult
6656: oCall 10649
6658: oPop 1
6660: oJumpForward 6680
6662: Choice Lookup Table
           1   6651
6665: oEmit 9
6667: oGetLocal 2
6669: oPushResult
6670: oEmitInt
6671: oPop 1
6673: oGetParam 1
6675: oPushResult
6676: oCall 10649
6678: oPop 1
6680: oJumpForward 6786
6682: oGetParam 1
6684: oPushResult
6685: oSetResult 33
6687: oPushResult
6688: oNodeGetBoolean
6689: oPop 2
6691: oChoice 6734
6693: oGetLocal 2
6695: oPushResult
6696: equal_zero
6697: oPop 1
6699: oChoice 6712
6701: oEmit 8
6703: oGetParam 1
6705: oPushResult
6706: oCall 10649
6708: oPop 1
6710: oJumpForward 6730
6712: Choice Lookup Table
           1   6701
6715: oEmit 14
6717: oGetLocal 2
6719: oPushResult
6720: oEmitInt
6721: oPop 1
6723: oGetParam 1
6725: oPushResult
6726: oCall 10649
6728: oPop 1
6730: oEmit 22
6732: oJumpForward 6774
6734: Choice Lookup Table
           1   6693
6737: oGetLocal 2
6739: oPushResult
6740: equal_zero
6741: oPop 1
6743: oChoice 6756
6745: oEmit 6
6747: oGetParam 1
6749: oPushResult
6750: oCall 10649
6752: oPop 1
6754: oJumpForward 6774
6756: Choice Lookup Table
           1   6745
6759: oEmit 12
6761: oGetLocal 2
6763: oPushResult
6764: oEmitInt
6765: oPop 1
6767: oGetParam 1
6769: oPushResult
6770: oCall 10649
6772: oPop 1
6774: oJumpForward 6786
6776: Choice Lookup Table
          23   6682
          21   6643
          24   6632
          20   6632
6785: oEndChoice
6786: oJumpForward 7345
6788: oGetParam 1
6790: oPushResult
6791: oNodeType
6792: oPop 1
6794: oChoice 6940
6796: oEmit 1
6798: oGetParam 1
6800: oPushResult
6801: oCall 10649
6803: oPop 1
6805: oJumpForward 6950
6807: oGetLocal 2
6809: oPushResult
6810: equal_zero
6811: oPop 1
6813: oChoice 6826
6815: oEmit 4
6817: oGetParam 1
6819: oPushResult
6820: oCall 10649
6822: oPop 1
6824: oJumpForward 6844
6826: Choice Lookup Table
           1   6815
6829: oEmit 10
6831: oGetLocal 2
6833: oPushResult
6834: oEmitInt
6835: oPop 1
6837: oGetParam 1
6839: oPushResult
6840: oCall 10649
6842: oPop 1
6844: oJumpForward 6950
6846: oGetParam 1
6848: oPushResult
6849: oSetResult 33
6851: oPushResult
6852: oNodeGetBoolean
6853: oPop 2
6855: oChoice 6898
6857: oGetLocal 2
6859: oPushResult
6860: equal_zero
6861: oPop 1
6863: oChoice 6876
6865: oEmit 8
6867: oGetParam 1
6869: oPushResult
6870: oCall 10649
6872: oPop 1
6874: oJumpForward 6894
6876: Choice Lookup Table
           1   6865
6879: oEmit 14
6881: oGetLocal 2
6883: oPushResult
6884: oEmitInt
6885: oPop 1
6887: oGetParam 1
6889: oPushResult
6890: oCall 10649
6892: oPop 1
6894: oEmit 23
6896: oJumpForward 6938
6898: Choice Lookup Table
           1   6857
6901: oGetLocal 2
6903: oPushResult
6904: equal_zero
6905: oPop 1
6907: oChoice 6920
6909: oEmit 7
6911: oGetParam 1
6913: oPushResult
6914: oCall 10649
6916: oPop 1
6918: oJumpForward 6938
6920: Choice Lookup Table
           1   6909
6923: oEmit 13
6925: oGetLocal 2
6927: oPushResult
6928: oEmitInt
6929: oPop 1
6931: oGetParam 1
6933: oPushResult
6934: oCall 10649
6936: oPop 1
6938: oJumpForward 6950
6940: Choice Lookup Table
          23   6846
          21   6807
          24   6796
          20   6796
6949: oEndChoice
6950: oJumpForward 7345
6952: oError 16
6954: oJumpForward 7345
6956: oGetParam 1
6958: oPushResult
6959: oNodeType
6960: oPop 1
6962: oChoice 7108
6964: oEmit 2
6966: oGetParam 1
6968: oPushResult
6969: oCall 10649
6971: oPop 1
6973: oJumpForward 7118
6975: oGetLocal 2
6977: oPushResult
6978: equal_zero
6979: oPop 1
6981: oChoice 6994
6983: oEmit 5
6985: oGetParam 1
6987: oPushResult
6988: oCall 10649
6990: oPop 1
6992: oJumpForward 7012
6994: Choice Lookup Table
           1   6983
6997: oEmit 11
6999: oGetLocal 2
7001: oPushResult
7002: oEmitInt
7003: oPop 1
7005: oGetParam 1
7007: oPushResult
7008: oCall 10649
7010: oPop 1
7012: oJumpForward 7118
7014: oGetParam 1
7016: oPushResult
7017: oSetResult 33
7019: oPushResult
7020: oNodeGetBoolean
7021: oPop 2
7023: oChoice 7066
7025: oGetLocal 2
7027: oPushResult
7028: equal_zero
7029: oPop 1
7031: oChoice 7044
7033: oEmit 8
7035: oGetParam 1
7037: oPushResult
7038: oCall 10649
7040: oPop 1
7042: oJumpForward 7062
7044: Choice Lookup Table
           1   7033
7047: oEmit 14
7049: oGetLocal 2
7051: oPushResult
7052: oEmitInt
7053: oPop 1
7055: oGetParam 1
7057: oPushResult
7058: oCall 10649
7060: oPop 1
7062: oEmit 24
7064: oJumpForward 7106
7066: Choice Lookup Table
           1   7025
7069: oGetLocal 2
7071: oPushResult
7072: equal_zero
7073: oPop 1
7075: oChoice 7088
7077: oEmit 8
7079: oGetParam 1
7081: oPushResult
7082: oCall 10649
7084: oPop 1
7086: oJumpForward 7106
7088: Choice Lookup Table
           1   7077
7091: oEmit 14
7093: oGetLocal 2
7095: oPushResult
7096: oEmitInt
7097: oPop 1
7099: oGetParam 1
7101: oPushResult
7102: oCall 10649
7104: oPop 1
7106: oJumpForward 7118
7108: Choice Lookup Table
          23   7014
          21   6975
          24   6964
          20   6964
7117: oEndChoice
7118: oInputChoice 7148
7120: oTypeSPop
7121: oGetLocal 1
7123: oPushResult
7124: oSetResult 36
7126: oPushResult
7127: oNodeGet
7128: oPop 2
7130: oPushResult
7131: oTypeSPush
7132: oPop 1
7134: oCall 7398
7136: oCall 7346
7138: oJumpForward 7153
7140: oCall 7585
7142: oCall 7398
7144: oCall 7346
7146: oJumpForward 7153
7148: Choice Lookup Table
          16   7140
          18   7120
7153: oJumpForward 7345
7155: oGetParam 1
7157: oPushResult
7158: oNodeType
7159: oPop 1
7161: oChoice 7305
7163: oEmit 16
7165: oGetParam 1
7167: oPushResult
7168: oCall 10649
7170: oPop 1
7172: oJumpForward 7315
7174: oGetLocal 2
7176: oPushResult
7177: equal_zero
7178: oPop 1
7180: oChoice 7193
7182: oEmit 17
7184: oGetParam 1
7186: oPushResult
7187: oCall 10649
7189: oPop 1
7191: oJumpForward 7211
7193: Choice Lookup Table
           1   7182
7196: oEmit 20
7198: oGetLocal 2
7200: oPushResult
7201: oEmitInt
7202: oPop 1
7204: oGetParam 1
7206: oPushResult
7207: oCall 10649
7209: oPop 1
7211: oJumpForward 7315
7213: oGetParam 1
7215: oPushResult
7216: oSetResult 33
7218: oPushResult
7219: oNodeGetBoolean
7220: oPop 2
7222: oChoice 7263
7224: oGetLocal 2
7226: oPushResult
7227: equal_zero
7228: oPop 1
7230: oChoice 7243
7232: oEmit 8
7234: oGetParam 1
7236: oPushResult
7237: oCall 10649
7239: oPop 1
7241: oJumpForward 7261
7243: Choice Lookup Table
           1   7232
7246: oEmit 14
7248: oGetLocal 2
7250: oPushResult
7251: oEmitInt
7252: oPop 1
7254: oGetParam 1
7256: oPushResult
7257: oCall 10649
7259: oPop 1
7261: oJumpForward 7303
7263: Choice Lookup Table
           1   7224
7266: oGetLocal 2
7268: oPushResult
7269: equal_zero
7270: oPop 1
7272: oChoice 7285
7274: oEmit 18
7276: oGetParam 1
7278: oPushResult
7279: oCall 10649
7281: oPop 1
7283: oJumpForward 7303
7285: Choice Lookup Table
           1   7274
7288: oEmit 21
7290: oGetLocal 2
7292: oPushResult
7293: oEmitInt
7294: oPop 1
7296: oGetParam 1
7298: oPushResult
7299: oCall 10649
7301: oPop 1
7303: oJumpForward 7315
7305: Choice Lookup Table
          23   7213
          21   7174
          24   7163
          20   7163
7314: oEndChoice
7315: oCall 7398
7317: oCall 7346
7319: oJumpForward 7345
7321: Choice Lookup Table
          38   7155
          36   7155
          35   6956
          34   6956
          27   6952
          33   6952
          32   6788
          29   6788
          30   6788
          39   6624
          28   6624
7344: oEndChoice
7345: oReturn
7346: oLocalSpace 0
7348: oTypeSNodeType
7349: oChoice 7373
7351: oEmit 22
7353: oJumpForward 7397
7355: oEmit 23
7357: oJumpForward 7397
7359: oError 16
7361: oJumpForward 7397
7363: oEmit 24
7365: oJumpForward 7397
7367: oError 29
7369: oJumpForward 7397
7371: oJumpForward 7397
7373: Choice Lookup Table
          38   7371
          36   7371
          35   7367
          34   7363
          27   7359
          33   7359
          32   7355
          29   7355
          30   7355
          39   7351
          28   7351
7396: oEndChoice
7397: oReturn
7398: oLocalSpace 0
7400: oInputChoice 7430
7402: oTypeSNodeType
7403: oChoice 7413
7405: oCall 7442
7407: oJumpForward 7420
7409: oCall 7585
7411: oJumpForward 7420
7413: Choice Lookup Table
          34   7409
          36   7405
7418: oError 10
7420: oJumpForward 7439
7422: oCall 7664
7424: oJumpForward 7439
7426: oCall 7762
7428: oJumpForward 7439
7430: Choice Lookup Table
          18   7426
          20   7422
          16   7402
7437: oJumpForward 7441
7439: oJumpBack 7400
7441: oReturn
7442: oLocalSpace 3
7444: oTypeSNodeType
7445: oChoice 7449
7447: oJumpForward 7454
7449: Choice Lookup Table
          36   7447
7452: oError 10
7454: oTypeSNodeType
7455: oChoice 7459
7457: oJumpForward 7464
7459: Choice Lookup Table
          36   7457
7462: oError 13
7464: oGetAddrLocal 1
7466: oPushResult
7467: oTypeSTop
7468: oPushResult
7469: oSetResult 37
7471: oPushResult
7472: oNodeGet
7473: oPop 2
7475: oPushResult
7476: oCall 10459
7478: oPop 1
7480: oAssign
7481: oGetAddrLocal 2
7483: oPushResult
7484: oTypeSTop
7485: oPushResult
7486: oSetResult 36
7488: oPushResult
7489: oNodeGet
7490: oPop 2
7492: oAssign
7493: oTypeSPop
7494: oGetLocal 2
7496: oPushResult
7497: oTypeSPush
7498: oPop 1
7500: oCall 5092
7502: oCall 10193
7504: oGetLocal 1
7506: oPushResult
7507: equal_zero
7508: oPop 1
7510: oChoice 7524
7512: oEmit 15
7514: oGetLocal 1
7516: oPushResult
7517: oEmitInt
7518: oPop 1
7520: oEmit 37
7522: oJumpForward 7527
7524: Choice Lookup Table
           0   7512
7527: oGetAddrLocal 3
7529: oPushResult
7530: oGetLocal 2
7532: oPushResult
7533: oSetResult 17
7535: oPushResult
7536: oNodeGetInt
7537: oPop 2
7539: oAssign
7540: oGetLocal 3
7542: oPushResult
7543: oSetResult 1
7545: oPushResult
7546: equal
7547: oPop 2
7549: oChoice 7563
7551: oEmit 15
7553: oGetLocal 3
7555: oPushResult
7556: oEmitInt
7557: oPop 1
7559: oEmit 33
7561: oJumpForward 7566
7563: Choice Lookup Table
           0   7551
7566: oEmit 35
7568: oInputChoice 7576
7570: oJumpForward 7584
7572: oJumpForward 7582
7574: oJumpForward 7582
7576: Choice Lookup Table
          13   7574
          17   7570
7581: oEndChoice
7582: oJumpBack 7454
7584: oReturn
7585: oLocalSpace 2
7587: oTypeSNodeType
7588: oChoice 7592
7590: oJumpForward 7597
7592: Choice Lookup Table
          34   7590
7595: oError 29
7597: oGetAddrLocal 1
7599: oPushResult
7600: oTypeSTop
7601: oPushResult
7602: oSetResult 36
7604: oPushResult
7605: oNodeGet
7606: oPop 2
7608: oAssign
7609: oTypeSPop
7610: oGetLocal 1
7612: oPushResult
7613: oTypeSPush
7614: oPop 1
7616: oCall 5092
7618: oCall 10193
7620: oGetAddrLocal 2
7622: oPushResult
7623: oGetLocal 1
7625: oPushResult
7626: oSetResult 17
7628: oPushResult
7629: oNodeGetInt
7630: oPop 2
7632: oAssign
7633: oGetLocal 2
7635: oPushResult
7636: oSetResult 1
7638: oPushResult
7639: equal
7640: oPop 2
7642: oChoice 7656
7644: oEmit 15
7646: oGetLocal 2
7648: oPushResult
7649: oEmitInt
7650: oPop 1
7652: oEmit 33
7654: oJumpForward 7659
7656: Choice Lookup Table
           0   7644
7659: oEmit 35
7661: oInput 17
7663: oReturn
7664: oLocalSpace 2
7666: oTypeSNodeType
7667: oChoice 7671
7669: oJumpForward 7676
7671: Choice Lookup Table
          38   7669
7674: oError 11
7676: oTypeSTop
7677: oPushResult
7678: oSetResult 40
7680: oPushResult
7681: oNodeGet
7682: oPop 2
7684: oPushResult
7685: oScopeEnter
7686: oPop 1
7688: oInput 0
7690: oGetAddrLocal 1
7692: oPushResult
7693: oScopeFindRequire
7694: oAssign
7695: oGetLocal 1
7697: oPushResult
7698: oNodeType
7699: oPop 1
7701: oChoice 7705
7703: oJumpForward 7710
7705: Choice Lookup Table
          22   7703
7708: oError 12
7710: oScopeEnd
7711: oGetAddrLocal 2
7713: oPushResult
7714: oGetLocal 1
7716: oPushResult
7717: oSetResult 22
7719: oPushResult
7720: oNodeGetInt
7721: oPop 2
7723: oAssign
7724: oGetLocal 2
7726: oPushResult
7727: equal_zero
7728: oPop 1
7730: oChoice 7744
7732: oEmit 15
7734: oGetLocal 2
7736: oPushResult
7737: oEmitInt
7738: oPop 1
7740: oEmit 35
7742: oJumpForward 7747
7744: Choice Lookup Table
           0   7732
7747: oTypeSPop
7748: oGetLocal 1
7750: oPushResult
7751: oSetResult 21
7753: oPushResult
7754: oNodeGet
7755: oPop 2
7757: oPushResult
7758: oTypeSPush
7759: oPop 1
7761: oReturn
7762: oLocalSpace 1
7764: oTypeSNodeType
7765: oChoice 7773
7767: oJumpForward 7780
7769: oError 29
7771: oJumpForward 7780
7773: Choice Lookup Table
          35   7769
          34   7767
7778: oError 9
7780: oEmit 24
7782: oGetAddrLocal 1
7784: oPushResult
7785: oTypeSTop
7786: oAssign
7787: oTypeSPop
7788: oGetLocal 1
7790: oPushResult
7791: oSetResult 36
7793: oPushResult
7794: oNodeGet
7795: oPop 2
7797: oPushResult
7798: oTypeSPush
7799: oPop 1
7801: oReturn
7802: oLocalSpace 1
7804: oGetAddrLocal 1
7806: oPushResult
7807: oTypeSNodeType
7808: oAssign
7809: oTypeSPop
7810: oGetLocal 1
7812: oPushResult
7813: oTypeSNodeType
7814: oPushResult
7815: equal_node_type
7816: oPop 2
7818: oChoice 7889
7820: oTypeSNodeType
7821: oChoice 7876
7823: oGetLocal 1
7825: oChoice 7832
7827: oEmit 29
7829: oReturn
7830: oJumpForward 7835
7832: Choice Lookup Table
          29   7827
7835: oJumpForward 7885
7837: oGetLocal 1
7839: oChoice 7846
7841: oEmit 30
7843: oReturn
7844: oJumpForward 7849
7846: Choice Lookup Table
          28   7841
7849: oJumpForward 7885
7851: oGetLocal 1
7853: oChoice 7858
7855: oReturn
7856: oJumpForward 7861
7858: Choice Lookup Table
          35   7855
7861: oJumpForward 7885
7863: oGetLocal 1
7865: oChoice 7870
7867: oReturn
7868: oJumpForward 7874
7870: Choice Lookup Table
          34   7867
7873: oEndChoice
7874: oJumpForward 7885
7876: Choice Lookup Table
          35   7863
          34   7851
          29   7837
          28   7823
7885: oError 14
7887: oJumpForward 7892
7889: Choice Lookup Table
           0   7820
7892: oReturn
7893: oLocalSpace 2
7895: oGetAddrLocal 2
7897: oPushResult
7898: oGetParam 1
7900: oPushResult
7901: oSetResult 26
7903: oPushResult
7904: oNodeGetString
7905: oPop 2
7907: oAssign
7908: oGetLocal 2
7910: oPushResult
7911: oSetResult 0
7913: oPushResult
7914: equal_string
7915: oPop 2
7917: oChoice 7954
7919: oGetAddrLocal 1
7921: oPushResult
7922: oGetParam 1
7924: oPushResult
7925: oSetResult 4
7927: oPushResult
7928: oNodeGetInt
7929: oPop 2
7931: oPushResult
7932: ID_STRING
7933: oPop 1
7935: oPushResult
7936: oStringAllocLit
7937: oPop 1
7939: oAssign
7940: oJumpForward 7960
7942: oGetAddrLocal 1
7944: oPushResult
7945: oGetLocal 2
7947: oPushResult
7948: oStringAllocLit
7949: oPop 1
7951: oAssign
7952: oJumpForward 7960
7954: Choice Lookup Table
           0   7942
           1   7919
7959: oEndChoice
7960: oEmit 70
7962: oGetParam 1
7964: oPushResult
7965: oCall 10649
7967: oPop 1
7969: oGetLocal 1
7971: oPushResult
7972: oEmitInt
7973: oPop 1
7975: oReturn
7976: oLocalSpace 10
7978: oGetParam 1
7980: oPushResult
7981: oSetResult 25
7983: oPushResult
7984: oNodeGetBoolean
7985: oPop 2
7987: oChoice 8014
7989: oGetParam 1
7991: oPushResult
7992: oSetResult 28
7994: oPushResult
7995: oNodeGetBoolean
7996: oPop 2
7998: oChoice 8009
8000: oGetParam 1
8002: oPushResult
8003: oCall 7893
8005: oPop 1
8007: oJumpForward 8012
8009: Choice Lookup Table
           0   8000
8012: oJumpForward 8017
8014: Choice Lookup Table
           1   7989
8017: oGetParam 1
8019: oPushResult
8020: oSetResult 28
8022: oPushResult
8023: oSetResult 1
8025: oPushResult
8026: oNodeSetBoolean
8027: oPop 3
8029: oGetAddrLocal 1
8031: oPushResult
8032: oGetParam 1
8034: oPushResult
8035: oSetResult 27
8037: oPushResult
8038: oNodeGetBoolean
8039: oPop 2
8041: oAssign
8042: oGetAddrLocal 4
8044: oPushResult
8045: oGetParam 1
8047: oPushResult
8048: oNodeType
8049: oPop 1
8051: oPushResult
8052: oSetResult 13
8054: oPushResult
8055: equal_node_type
8056: oPop 2
8058: oAssign
8059: oGetLocal 4
8061: oChoice 8088
8063: oGetAddrLocal 2
8065: oPushResult
8066: oGetParam 1
8068: oPushResult
8069: oSetResult 21
8071: oPushResult
8072: oNodeGet
8073: oPop 2
8075: oAssign
8076: oGetAddrLocal 3
8078: oPushResult
8079: oGetLocal 2
8081: oPushResult
8082: oScopeAllocType
8083: oPop 1
8085: oAssign
8086: oJumpForward 8091
8088: Choice Lookup Table
           1   8063
8091: oGetAddrLocal 5
8093: oPushResult
8094: oGetParam 1
8096: oPushResult
8097: oSetResult 23
8099: oPushResult
8100: oNodeGet
8101: oPop 2
8103: oAssign
8104: oGetAddrLocal 6
8106: oPushResult
8107: oGetLocal 5
8109: oPushResult
8110: oSetResult 17
8112: oPushResult
8113: oNodeGetInt
8114: oPop 2
8116: oAssign
8117: oGetLocal 1
8119: oChoice 8141
8121: oEmit 59
8123: oGetLocal 6
8125: oPushResult
8126: oEmitInt
8127: oPop 1
8129: oJumpForward 8147
8131: oEmit 58
8133: oGetLocal 6
8135: oPushResult
8136: oEmitInt
8137: oPop 1
8139: oJumpForward 8147
8141: Choice Lookup Table
           0   8131
           1   8121
8146: oEndChoice
8147: oGetParam 1
8149: oPushResult
8150: oCall 10097
8152: oPop 1
8154: oPushResult
8155: oSetResult 0
8157: oPushResult
8158: greater
8159: oPop 2
8161: oChoice 8194
8163: oEmit 19
8165: oSetResult 0
8167: oPushResult
8168: oEmitInt
8169: oPop 1
8171: oEmit 20
8173: oGetParam 1
8175: oPushResult
8176: oCall 10117
8178: oPop 1
8180: oPushResult
8181: oEmitInt
8182: oPop 1
8184: oSetResult 0
8186: oPushResult
8187: oEmitInt
8188: oPop 1
8190: oEmit 27
8192: oJumpForward 8197
8194: Choice Lookup Table
           1   8163
8197: oGetAddrLocal 7
8199: oPushResult
8200: oGetLocal 5
8202: oPushResult
8203: oSetResult 15
8205: oPushResult
8206: oNodeGetIter
8207: oPop 2
8209: oAssign
8210: oGetAddrLocal 8
8212: oPushResult
8213: oGetLocal 7
8215: oPushResult
8216: oNodeIterValue
8217: oPop 1
8219: oAssign
8220: oInputChoice 8417
8222: oGetLocal 8
8224: oPushResult
8225: oNodeNull
8226: oPop 1
8228: oChoice 8234
8230: oJumpForward 8413
8232: oJumpForward 8237
8234: Choice Lookup Table
           1   8230
8237: oGetAddrLocal 9
8239: oPushResult
8240: oGetLocal 8
8242: oPushResult
8243: oSetResult 22
8245: oPushResult
8246: oNodeGetInt
8247: oPop 2
8249: oAssign
8250: oEmit 19
8252: oGetLocal 9
8254: oPushResult
8255: oEmitInt
8256: oPop 1
8258: oGetLocal 8
8260: oPushResult
8261: oSetResult 21
8263: oPushResult
8264: oNodeGet
8265: oPop 2
8267: oPushResult
8268: oTypeSPush
8269: oPop 1
8271: oGetLocal 8
8273: oPushResult
8274: oSetResult 33
8276: oPushResult
8277: oNodeGetBoolean
8278: oPop 2
8280: oChoice 8366
8282: oSetResult 1
8284: oPushResult
8285: oCall 9237
8287: oPop 1
8289: oCall 10135
8291: oEmit 27
8293: oJumpForward 8372
8295: oCall 5092
8297: oCall 7802
8299: oTypeSNodeType
8300: oChoice 8340
8302: oEmit 25
8304: oJumpForward 8364
8306: oEmit 26
8308: oJumpForward 8364
8310: oError 16
8312: oJumpForward 8364
8314: oEmit 27
8316: oJumpForward 8364
8318: oGetAddrLocal 10
8320: oPushResult
8321: oTypeSTop
8322: oPushResult
8323: oSetResult 17
8325: oPushResult
8326: oNodeGetInt
8327: oPop 2
8329: oAssign
8330: oEmit 28
8332: oGetLocal 10
8334: oPushResult
8335: oEmitInt
8336: oPop 1
8338: oJumpForward 8364
8340: Choice Lookup Table
          38   8318
          36   8318
          35   8314
          34   8314
          27   8310
          33   8310
          32   8306
          29   8306
          30   8306
          39   8302
          28   8302
8363: oEndChoice
8364: oJumpForward 8372
8366: Choice Lookup Table
           0   8295
           1   8282
8371: oEndChoice
8372: oTypeSPop
8373: oGetAddrLocal 7
8375: oPushResult
8376: oNodeIterNext
8377: oPop 1
8379: oGetAddrLocal 8
8381: oPushResult
8382: oGetLocal 7
8384: oPushResult
8385: oNodeIterValue
8386: oPop 1
8388: oAssign
8389: oGetLocal 8
8391: oPushResult
8392: oNodeNull
8393: oPop 1
8395: oChoice 8403
8397: oJumpForward 8413
8399: oJumpForward 8409
8401: oJumpForward 8409
8403: Choice Lookup Table
           0   8401
           1   8397
8408: oEndChoice
8409: oInput 13
8411: oJumpBack 8222
8413: oInput 15
8415: oJumpForward 8420
8417: Choice Lookup Table
          14   8222
8420: oGetLocal 8
8422: oPushResult
8423: oNodeNull
8424: oPop 1
8426: oChoice 8432
8428: oError 15
8430: oJumpForward 8435
8432: Choice Lookup Table
           0   8428
8435: oGetLocal 4
8437: oChoice 8466
8439: oEmit 19
8441: oGetParam 1
8443: oPushResult
8444: oSetResult 31
8446: oPushResult
8447: oNodeGetInt
8448: oPop 2
8450: oPushResult
8451: oEmitInt
8452: oPop 1
8454: oEmit 17
8456: oGetLocal 3
8458: oPushResult
8459: oEmitInt
8460: oPop 1
8462: oEmit 27
8464: oJumpForward 8469
8466: Choice Lookup Table
           1   8439
8469: oGetLocal 1
8471: oChoice 8495
8473: oEmit 62
8475: oGetParam 1
8477: oPushResult
8478: oCall 10649
8480: oPop 1
8482: oJumpForward 8501
8484: oEmit 61
8486: oGetParam 1
8488: oPushResult
8489: oCall 10649
8491: oPop 1
8493: oJumpForward 8501
8495: Choice Lookup Table
           0   8484
           1   8473
8500: oEndChoice
8501: oGetLocal 4
8503: oChoice 8584
8505: oGetLocal 2
8507: oPushResult
8508: oTypeSPush
8509: oPop 1
8511: oTypeSNodeType
8512: oChoice 8558
8514: oEmit 3
8516: oGetLocal 3
8518: oPushResult
8519: oEmitInt
8520: oPop 1
8522: oJumpForward 8582
8524: oEmit 4
8526: oGetLocal 3
8528: oPushResult
8529: oEmitInt
8530: oPop 1
8532: oJumpForward 8582
8534: oError 16
8536: oJumpForward 8582
8538: oEmit 5
8540: oGetLocal 3
8542: oPushResult
8543: oEmitInt
8544: oPop 1
8546: oJumpForward 8582
8548: oEmit 17
8550: oGetLocal 3
8552: oPushResult
8553: oEmitInt
8554: oPop 1
8556: oJumpForward 8582
8558: Choice Lookup Table
          38   8548
          36   8548
          35   8538
          34   8538
          27   8534
          33   8534
          32   8524
          29   8524
          30   8524
          39   8514
          28   8514
8581: oEndChoice
8582: oJumpForward 8587
8584: Choice Lookup Table
           1   8505
8587: oEmit 60
8589: oGetLocal 6
8591: oPushResult
8592: oEmitInt
8593: oPop 1
8595: oReturn
8596: oLocalSpace 0
8598: oGetParam 1
8600: oPushResult
8601: oGetGlobal 13
8603: oPushResult
8604: oNodeEqual
8605: oPop 2
8607: oChoice 8647
8609: oInput 14
8611: oCall 5092
8613: oTypeSNodeType
8614: oChoice 8622
8616: oJumpForward 8635
8618: oEmit 29
8620: oJumpForward 8635
8622: Choice Lookup Table
          32   8618
          29   8618
          30   8618
          39   8616
          28   8616
8633: oError 14
8635: oTypeSPop
8636: oGetGlobal 6
8638: oPushResult
8639: oTypeSPush
8640: oPop 1
8642: oInput 15
8644: oReturn
8645: oJumpForward 8650
8647: Choice Lookup Table
           1   8609
8650: oGetParam 1
8652: oPushResult
8653: oGetGlobal 14
8655: oPushResult
8656: oNodeEqual
8657: oPop 2
8659: oChoice 8693
8661: oInput 14
8663: oCall 5092
8665: oTypeSNodeType
8666: oChoice 8674
8668: oEmit 30
8670: oJumpForward 8681
8672: oJumpForward 8681
8674: Choice Lookup Table
          29   8672
          28   8668
8679: oError 14
8681: oTypeSPop
8682: oGetGlobal 9
8684: oPushResult
8685: oTypeSPush
8686: oPop 1
8688: oInput 15
8690: oReturn
8691: oJumpForward 8696
8693: Choice Lookup Table
           1   8661
8696: oGetParam 1
8698: oPushResult
8699: oGetGlobal 15
8701: oPushResult
8702: oNodeEqual
8703: oPop 2
8705: oChoice 8745
8707: oInput 14
8709: oCall 5092
8711: oTypeSNodeType
8712: oChoice 8733
8714: oTypeSTop
8715: oPushResult
8716: oSetResult 42
8718: oPushResult
8719: oNodeGetBoolean
8720: oPop 2
8722: oChoice 8728
8724: oError 28
8726: oJumpForward 8731
8728: Choice Lookup Table
           1   8724
8731: oJumpForward 8738
8733: Choice Lookup Table
          39   8714
8736: oError 14
8738: oEmit 32
8740: oInput 15
8742: oReturn
8743: oJumpForward 8748
8745: Choice Lookup Table
           1   8707
8748: oGetParam 1
8750: oPushResult
8751: oGetGlobal 16
8753: oPushResult
8754: oNodeEqual
8755: oPop 2
8757: oChoice 8797
8759: oInput 14
8761: oCall 5092
8763: oTypeSNodeType
8764: oChoice 8785
8766: oTypeSTop
8767: oPushResult
8768: oSetResult 42
8770: oPushResult
8771: oNodeGetBoolean
8772: oPop 2
8774: oChoice 8780
8776: oError 28
8778: oJumpForward 8783
8780: Choice Lookup Table
           1   8776
8783: oJumpForward 8790
8785: Choice Lookup Table
          39   8766
8788: oError 14
8790: oEmit 31
8792: oInput 15
8794: oReturn
8795: oJumpForward 8800
8797: Choice Lookup Table
           1   8759
8800: oError 16
8802: oReturn
8803: oLocalSpace 0
8805: oInputChoice 8864
8807: oCall 9971
8809: oJumpForward 8893
8811: oCall 9978
8813: oJumpForward 8893
8815: oCall 10079
8817: oJumpForward 8893
8819: oCall 10082
8821: oJumpForward 8893
8823: oCall 9456
8825: oJumpForward 8893
8827: oCall 9779
8829: oJumpForward 8893
8831: oCall 9522
8833: oJumpForward 8893
8835: oCall 9699
8837: oJumpForward 8893
8839: oCall 9864
8841: oJumpForward 8893
8843: oCall 9832
8845: oJumpForward 8893
8847: oCall 9948
8849: oJumpForward 8893
8851: oCall 8894
8853: oJumpForward 8893
8855: oCall 9896
8857: oJumpForward 8893
8859: oChangeIntLitToLabelIdent
8860: oCall 8894
8862: oJumpForward 8893
8864: Choice Lookup Table
           1   8859
          53   8855
           0   8851
          35   8847
          51   8843
          52   8839
          49   8835
          44   8831
          48   8827
          41   8823
          66   8819
          65   8815
          64   8811
          63   8807
8893: oReturn
8894: oLocalSpace 1
8896: oGetAddrLocal 1
8898: oPushResult
8899: oScopeFindRequire
8900: oAssign
8901: oGetAddrLocal 1
8903: oPushResult
8904: oCall 466
8906: oPop 1
8908: oGetLocal 1
8910: oPushResult
8911: oNodeType
8912: oPop 1
8914: oChoice 8954
8916: oGetLocal 1
8918: oPushResult
8919: oCall 8970
8921: oPop 1
8923: oCall 8803
8925: oJumpForward 8969
8927: oGetLocal 1
8929: oPushResult
8930: oCall 7976
8932: oPop 1
8934: oJumpForward 8969
8936: oGetLocal 1
8938: oPushResult
8939: oCall 9020
8941: oPop 1
8943: oJumpForward 8969
8945: oGetLocal 1
8947: oPushResult
8948: oCall 9110
8950: oPop 1
8952: oJumpForward 8969
8954: Choice Lookup Table
          13   8945
          23   8936
          21   8936
          20   8936
          12   8927
          25   8916
8967: oError 0
8969: oReturn
8970: oLocalSpace 0
8972: oGetParam 1
8974: oPushResult
8975: oSetResult 34
8977: oPushResult
8978: oNodeGetBoolean
8979: oPop 2
8981: oChoice 8987
8983: oError 21
8985: oJumpForward 8990
8987: Choice Lookup Table
           1   8983
8990: oEmit 68
8992: oGetParam 1
8994: oPushResult
8995: oSetResult 22
8997: oPushResult
8998: oNodeGetLabel
8999: oPop 2
9001: oPushResult
9002: oEmitLabel
9003: oPop 1
9005: oGetParam 1
9007: oPushResult
9008: oSetResult 34
9010: oPushResult
9011: oSetResult 1
9013: oPushResult
9014: oNodeSetBoolean
9015: oPop 3
9017: oInput 12
9019: oReturn
9020: oLocalSpace 0
9022: oGetParam 1
9024: oPushResult
9025: oSetResult 1
9027: oPushResult
9028: oCall 9285
9030: oPop 2
9032: oInput 4
9034: oCall 5092
9036: oCall 7802
9038: oCall 9041
9040: oReturn
9041: oLocalSpace 1
9043: oTypeSNodeType
9044: oChoice 9084
9046: oEmit 25
9048: oJumpForward 9108
9050: oEmit 26
9052: oJumpForward 9108
9054: oError 16
9056: oJumpForward 9108
9058: oEmit 27
9060: oJumpForward 9108
9062: oGetAddrLocal 1
9064: oPushResult
9065: oTypeSTop
9066: oPushResult
9067: oSetResult 17
9069: oPushResult
9070: oNodeGetInt
9071: oPop 2
9073: oAssign
9074: oEmit 28
9076: oGetLocal 1
9078: oPushResult
9079: oEmitInt
9080: oPop 1
9082: oJumpForward 9108
9084: Choice Lookup Table
          38   9062
          36   9062
          35   9058
          34   9058
          27   9054
          33   9054
          32   9050
          29   9050
          30   9050
          39   9046
          28   9046
9107: oEndChoice
9108: oTypeSPop
9109: oReturn
9110: oLocalSpace 1
9112: oGetParam 1
9114: oPushResult
9115: oSetResult 6
9117: oPushResult
9118: oNodeGet
9119: oPop 2
9121: oPushResult
9122: oScopeCurrent
9123: oPushResult
9124: oNodeEqual
9125: oPop 2
9127: oChoice 9133
9129: oError 20
9131: oJumpForward 9136
9133: Choice Lookup Table
           0   9129
9136: oEmit 8
9138: oGetParam 1
9140: oPushResult
9141: oSetResult 31
9143: oPushResult
9144: oNodeGetInt
9145: oPop 2
9147: oPushResult
9148: oEmitInt
9149: oPop 1
9151: oGetParam 1
9153: oPushResult
9154: oSetResult 21
9156: oPushResult
9157: oNodeGet
9158: oPop 2
9160: oPushResult
9161: oTypeSPush
9162: oPop 1
9164: oInput 4
9166: oCall 5092
9168: oCall 7802
9170: oTypeSNodeType
9171: oChoice 9211
9173: oEmit 25
9175: oJumpForward 9235
9177: oEmit 26
9179: oJumpForward 9235
9181: oError 16
9183: oJumpForward 9235
9185: oEmit 27
9187: oJumpForward 9235
9189: oGetAddrLocal 1
9191: oPushResult
9192: oTypeSTop
9193: oPushResult
9194: oSetResult 17
9196: oPushResult
9197: oNodeGetInt
9198: oPop 2
9200: oAssign
9201: oEmit 28
9203: oGetLocal 1
9205: oPushResult
9206: oEmitInt
9207: oPop 1
9209: oJumpForward 9235
9211: Choice Lookup Table
          38   9189
          36   9189
          35   9185
          34   9185
          27   9181
          33   9181
          32   9177
          29   9177
          30   9177
          39   9173
          28   9173
9234: oEndChoice
9235: oTypeSPop
9236: oReturn
9237: oLocalSpace 1
9239: oInput 0
9241: oGetAddrLocal 1
9243: oPushResult
9244: oScopeFindRequire
9245: oAssign
9246: oGetAddrLocal 1
9248: oPushResult
9249: oCall 466
9251: oPop 1
9253: oGetLocal 1
9255: oPushResult
9256: oNodeType
9257: oPop 1
9259: oChoice 9263
9261: oJumpForward 9274
9263: Choice Lookup Table
          24   9261
          23   9261
          21   9261
          20   9261
9272: oError 4
9274: oGetLocal 1
9276: oPushResult
9277: oGetParam 1
9279: oPushResult
9280: oCall 9285
9282: oPop 2
9284: oReturn
9285: oLocalSpace 0
9287: oGetParam 2
9289: oPushResult
9290: oNodeType
9291: oPop 1
9293: oChoice 9375
9295: oEmit 16
9297: oGetParam 2
9299: oPushResult
9300: oCall 10649
9302: oPop 1
9304: oJumpForward 9386
9306: oEmit 17
9308: oGetParam 2
9310: oPushResult
9311: oCall 10649
9313: oPop 1
9315: oJumpForward 9386
9317: oGetParam 2
9319: oPushResult
9320: oSetResult 33
9322: oPushResult
9323: oNodeGetBoolean
9324: oPop 2
9326: oChoice 9339
9328: oEmit 8
9330: oGetParam 2
9332: oPushResult
9333: oCall 10649
9335: oPop 1
9337: oJumpForward 9351
9339: Choice Lookup Table
           1   9328
9342: oEmit 18
9344: oGetParam 2
9346: oPushResult
9347: oCall 10649
9349: oPop 1
9351: oJumpForward 9386
9353: oGetParam 1
9355: oChoice 9368
9357: oEmit 16
9359: oGetParam 2
9361: oPushResult
9362: oCall 10649
9364: oPop 1
9366: oJumpForward 9373
9368: Choice Lookup Table
           0   9357
9371: oError 4
9373: oJumpForward 9386
9375: Choice Lookup Table
          24   9353
          23   9317
          21   9306
          20   9295
9384: oError 4
9386: oGetParam 2
9388: oPushResult
9389: oSetResult 21
9391: oPushResult
9392: oNodeGet
9393: oPop 2
9395: oPushResult
9396: oTypeSPush
9397: oPop 1
9399: oCall 7398
9401: oReturn
9402: oLocalSpace 0
9404: oGetParam 1
9406: oPushResult
9407: oSetResult 1
9409: oPushResult
9410: oCall 9285
9412: oPop 2
9414: oCall 10193
9416: oGetParam 1
9418: oPushResult
9419: oCall 6589
9421: oPop 1
9423: oTypeSPop
9424: oEmit 31
9426: oEmit 25
9428: oReturn
9429: oLocalSpace 0
9431: oGetParam 1
9433: oPushResult
9434: oSetResult 1
9436: oPushResult
9437: oCall 9285
9439: oPop 2
9441: oCall 10193
9443: oGetParam 1
9445: oPushResult
9446: oCall 6589
9448: oPop 1
9450: oTypeSPop
9451: oEmit 32
9453: oEmit 25
9455: oReturn
9456: oLocalSpace 2
9458: oGetAddrLocal 1
9460: oPushResult
9461: oSetResult 0
9463: oAssign
9464: oGetAddrLocal 1
9466: oPushResult
9467: oCall 5115
9469: oPop 1
9471: oInput 42
9473: oCall 8803
9475: oInputChoice 9510
9477: oGetAddrLocal 2
9479: oPushResult
9480: oLabelNew
9481: oAssign
9482: oEmit 65
9484: oGetLocal 2
9486: oPushResult
9487: oEmitLabel
9488: oPop 1
9490: oEmit 68
9492: oGetLocal 1
9494: oPushResult
9495: oEmitLabel
9496: oPop 1
9498: oCall 8803
9500: oEmit 68
9502: oGetLocal 2
9504: oPushResult
9505: oEmitLabel
9506: oPop 1
9508: oJumpForward 9521
9510: Choice Lookup Table
          43   9477
9513: oEmit 68
9515: oGetLocal 1
9517: oPushResult
9518: oEmitLabel
9519: oPop 1
9521: oReturn
9522: oLocalSpace 4
9524: oInput 0
9526: oGetAddrLocal 1
9528: oPushResult
9529: oScopeFindRequire
9530: oAssign
9531: oGetLocal 1
9533: oPushResult
9534: oSetResult 1
9536: oPushResult
9537: oCall 9285
9539: oPop 2
9541: oCall 10193
9543: oInput 4
9545: oCall 5092
9547: oCall 10193
9549: oEmit 25
9551: oGetAddrLocal 2
9553: oPushResult
9554: oLabelNew
9555: oAssign
9556: oGetAddrLocal 3
9558: oPushResult
9559: oLabelNew
9560: oAssign
9561: oEmit 65
9563: oGetLocal 3
9565: oPushResult
9566: oEmitLabel
9567: oPop 1
9569: oGetAddrLocal 4
9571: oPushResult
9572: oLabelNew
9573: oAssign
9574: oEmit 68
9576: oGetLocal 4
9578: oPushResult
9579: oEmitLabel
9580: oPop 1
9582: oInputChoice 9662
9584: oGetLocal 1
9586: oPushResult
9587: oCall 9402
9589: oPop 1
9591: oEmit 68
9593: oGetLocal 3
9595: oPushResult
9596: oEmitLabel
9597: oPop 1
9599: oGetLocal 1
9601: oPushResult
9602: oCall 6589
9604: oPop 1
9606: oTypeSPop
9607: oCall 5092
9609: oCall 10193
9611: oEmit 48
9613: oEmit 66
9615: oGetLocal 2
9617: oPushResult
9618: oEmitLabel
9619: oPop 1
9621: oJumpForward 9668
9623: oGetLocal 1
9625: oPushResult
9626: oCall 9429
9628: oPop 1
9630: oEmit 68
9632: oGetLocal 3
9634: oPushResult
9635: oEmitLabel
9636: oPop 1
9638: oGetLocal 1
9640: oPushResult
9641: oCall 6589
9643: oPop 1
9645: oTypeSPop
9646: oCall 5092
9648: oCall 10193
9650: oEmit 49
9652: oEmit 66
9654: oGetLocal 2
9656: oPushResult
9657: oEmitLabel
9658: oPop 1
9660: oJumpForward 9668
9662: Choice Lookup Table
          46   9623
          45   9584
9667: oEndChoice
9668: oGetLocal 4
9670: oPushResult
9671: oGetLocal 2
9673: oPushResult
9674: oLoopPush
9675: oPop 2
9677: oInput 47
9679: oCall 8803
9681: oEmit 65
9683: oGetLocal 4
9685: oPushResult
9686: oEmitLabel
9687: oPop 1
9689: oEmit 68
9691: oGetLocal 2
9693: oPushResult
9694: oEmitLabel
9695: oPop 1
9697: oLoopPop
9698: oReturn
9699: oLocalSpace 3
9701: oGetAddrLocal 1
9703: oPushResult
9704: oLabelNew
9705: oAssign
9706: oEmit 68
9708: oGetLocal 1
9710: oPushResult
9711: oEmitLabel
9712: oPop 1
9714: oGetAddrLocal 2
9716: oPushResult
9717: oLabelNew
9718: oAssign
9719: oGetLocal 1
9721: oPushResult
9722: oGetLocal 2
9724: oPushResult
9725: oLoopPush
9726: oPop 2
9728: oCall 8803
9730: oInputChoice 9761
9732: oCall 8803
9734: oJumpForward 9767
9736: oGetAddrLocal 3
9738: oPushResult
9739: oCall 5115
9741: oPop 1
9743: oEmit 69
9745: oGetLocal 3
9747: oPushResult
9748: oEmitLabel
9749: oPop 1
9751: oGetLocal 1
9753: oPushResult
9754: oEmitLabel
9755: oPop 1
9757: oJumpForward 9769
9759: oJumpForward 9767
9761: Choice Lookup Table
          50   9736
           5   9732
9766: oEndChoice
9767: oJumpBack 9730
9769: oEmit 68
9771: oGetLocal 2
9773: oPushResult
9774: oEmitLabel
9775: oPop 1
9777: oLoopPop
9778: oReturn
9779: oLocalSpace 2
9781: oGetAddrLocal 1
9783: oPushResult
9784: oLabelNew
9785: oAssign
9786: oEmit 68
9788: oGetLocal 1
9790: oPushResult
9791: oEmitLabel
9792: oPop 1
9794: oGetAddrLocal 2
9796: oPushResult
9797: oCall 5115
9799: oPop 1
9801: oGetLocal 1
9803: oPushResult
9804: oGetLocal 2
9806: oPushResult
9807: oLoopPush
9808: oPop 2
9810: oInput 47
9812: oCall 8803
9814: oEmit 65
9816: oGetLocal 1
9818: oPushResult
9819: oEmitLabel
9820: oPop 1
9822: oEmit 68
9824: oGetLocal 2
9826: oPushResult
9827: oEmitLabel
9828: oPop 1
9830: oLoopPop
9831: oReturn
9832: oLocalSpace 0
9834: oLoopContinueLabel
9835: oPushResult
9836: oSetResult 0
9838: oPushResult
9839: equal_label
9840: oPop 2
9842: oChoice 9857
9844: oError 18
9846: oJumpForward 9863
9848: oEmit 65
9850: oLoopContinueLabel
9851: oPushResult
9852: oEmitLabel
9853: oPop 1
9855: oJumpForward 9863
9857: Choice Lookup Table
           0   9848
           1   9844
9862: oEndChoice
9863: oReturn
9864: oLocalSpace 0
9866: oLoopBreakLabel
9867: oPushResult
9868: oSetResult 0
9870: oPushResult
9871: equal_label
9872: oPop 2
9874: oChoice 9889
9876: oError 18
9878: oJumpForward 9895
9880: oEmit 65
9882: oLoopBreakLabel
9883: oPushResult
9884: oEmitLabel
9885: oPop 1
9887: oJumpForward 9895
9889: Choice Lookup Table
           0   9880
           1   9876
9894: oEndChoice
9895: oReturn
9896: oLocalSpace 1
9898: oInputChoice 9905
9900: oJumpForward 9911
9902: oChangeIntLitToLabelIdent
9903: oJumpForward 9911
9905: Choice Lookup Table
           1   9902
           0   9900
9910: oEndChoice
9911: oGetAddrLocal 1
9913: oPushResult
9914: oScopeCurrent
9915: oPushResult
9916: oScopeFindRequireInScope
9917: oPop 1
9919: oAssign
9920: oGetLocal 1
9922: oPushResult
9923: oSetResult 28
9925: oPushResult
9926: oSetResult 1
9928: oPushResult
9929: oNodeSetBoolean
9930: oPop 3
9932: oEmit 65
9934: oGetLocal 1
9936: oPushResult
9937: oSetResult 22
9939: oPushResult
9940: oNodeGetLabel
9941: oPop 2
9943: oPushResult
9944: oEmitLabel
9945: oPop 1
9947: oReturn
9948: oLocalSpace 0
9950: oCall 8803
9952: oInputChoice 9962
9954: oCall 8803
9956: oJumpForward 9968
9958: oJumpForward 9970
9960: oJumpForward 9968
9962: Choice Lookup Table
          36   9958
           5   9954
9967: oEndChoice
9968: oJumpBack 9952
9970: oReturn
9971: oLocalSpace 0
9973: oCall 9978
9975: oEmit 77
9977: oReturn
9978: oLocalSpace 0
9980: oInputChoice 10075
9982: oCall 5092
9984: oTypeSNodeType
9985: oChoice 10035
9987: oEmit 71
9989: oJumpForward 10056
9991: oEmit 72
9993: oJumpForward 10056
9995: oEmit 29
9997: oEmit 71
9999: oJumpForward 10056
10001: oEmit 73
10003: oJumpForward 10056
10005: oEmit 74
10007: oJumpForward 10056
10009: oError 16
10011: oJumpForward 10056
10013: oEmit 16
10015: oTypeSTop
10016: oPushResult
10017: oSetResult 41
10019: oPushResult
10020: oNodeGetInt
10021: oPop 2
10023: oPushResult
10024: oEmitInt
10025: oPop 1
10027: oEmit 76
10029: oJumpForward 10056
10031: oEmit 75
10033: oJumpForward 10056
10035: Choice Lookup Table
          35   10031
          34   10031
          39   10013
          27   10009
          33   10005
          32   10001
          29   9995
          30   9991
          28   9987
10054: oError 17
10056: oTypeSPop
10057: oInputChoice 10065
10059: oJumpForward 10073
10061: oJumpForward 10071
10063: oJumpForward 10071
10065: Choice Lookup Table
          13   10063
          15   10059
10070: oEndChoice
10071: oJumpBack 9982
10073: oJumpForward 10078
10075: Choice Lookup Table
          14   9982
10078: oReturn
10079: oLocalSpace 0
10081: oReturn
10082: oLocalSpace 0
10084: oReturn
10085: oLocalSpace 0
10087: oScopeCurrent
10088: oPushResult
10089: oSetResult 14
10091: oPushResult
10092: oNodeGetInt
10093: oPop 2
10095: oReturn
10096: oReturn
10097: oLocalSpace 0
10099: oGetParam 1
10101: oPushResult
10102: oSetResult 20
10104: oPushResult
10105: oNodeGet
10106: oPop 2
10108: oPushResult
10109: oSetResult 14
10111: oPushResult
10112: oNodeGetInt
10113: oPop 2
10115: oReturn
10116: oReturn
10117: oLocalSpace 0
10119: oCall 10085
10121: oPushResult
10122: oGetParam 1
10124: oPushResult
10125: oCall 10097
10127: oPop 1
10129: oPushResult
10130: subtract
10131: oPop 2
10133: oReturn
10134: oReturn
10135: oLocalSpace 1
10137: oGetAddrLocal 1
10139: oPushResult
10140: oTypeSNodeType
10141: oAssign
10142: oTypeSPop
10143: oGetLocal 1
10145: oPushResult
10146: oTypeSNodeType
10147: oPushResult
10148: equal_node_type
10149: oPop 2
10151: oChoice 10189
10153: oTypeSNodeType
10154: oChoice 10180
10156: oGetLocal 1
10158: oChoice 10163
10160: oReturn
10161: oJumpForward 10166
10163: Choice Lookup Table
          35   10160
10166: oJumpForward 10185
10168: oGetLocal 1
10170: oChoice 10175
10172: oReturn
10173: oJumpForward 10178
10175: Choice Lookup Table
          34   10172
10178: oJumpForward 10185
10180: Choice Lookup Table
          35   10168
          34   10156
10185: oError 14
10187: oJumpForward 10192
10189: Choice Lookup Table
           0   10153
10192: oReturn
10193: oLocalSpace 0
10195: oTypeSNodeType
10196: oChoice 10200
10198: oJumpForward 10205
10200: Choice Lookup Table
          28   10198
10203: oError 7
10205: oTypeSPop
10206: oReturn
10207: oLocalSpace 0
10209: oTypeSNodeType
10210: oChoice 10214
10212: oJumpForward 10219
10214: Choice Lookup Table
          28   10212
10217: oError 7
10219: oReturn
10220: oLocalSpace 0
10222: oTypeSNodeType
10223: oChoice 10231
10225: oJumpForward 10238
10227: oEmit 29
10229: oJumpForward 10238
10231: Choice Lookup Table
          29   10227
          28   10225
10236: oError 7
10238: oTypeSPop
10239: oReturn
10240: oLocalSpace 0
10242: oTypeSNodeType
10243: oChoice 10258
10245: oJumpForward 10265
10247: oEmit 29
10249: oTypeSPop
10250: oGetGlobal 6
10252: oPushResult
10253: oTypeSPush
10254: oPop 1
10256: oJumpForward 10265
10258: Choice Lookup Table
          29   10247
          28   10245
10263: oError 7
10265: oReturn
10266: oLocalSpace 0
10268: oTypeSNodeType
10269: oChoice 10282
10271: oEmit 29
10273: oTypeSPop
10274: oGetGlobal 6
10276: oPushResult
10277: oTypeSPush
10278: oPop 1
10280: oJumpForward 10285
10282: Choice Lookup Table
          29   10271
10285: oReturn
10286: oLocalSpace 0
10288: oTypeSNodeType
10289: oChoice 10293
10291: oJumpForward 10298
10293: Choice Lookup Table
          30   10291
10296: oError 8
10298: oTypeSPop
10299: oReturn
10300: oLocalSpace 0
10302: oTypeSNodeType
10303: oChoice 10307
10305: oJumpForward 10312
10307: Choice Lookup Table
          30   10305
10310: oError 8
10312: oReturn
10313: oLocalSpace 1
10315: oGetAddrLocal 1
10317: oPushResult
10318: oGetParam 2
10320: oPushResult
10321: oNodeNew
10322: oPop 1
10324: oAssign
10325: oGetLocal 1
10327: oPushResult
10328: oSetResult 17
10330: oPushResult
10331: oGetParam 1
10333: oPushResult
10334: oNodeSetInt
10335: oPop 3
10337: oGetLocal 1
10339: oPushResult
10340: oTypeAdd
10341: oPop 1
10343: oGetLocal 1
10345: oReturn
10346: oReturn
10347: oLocalSpace 1
10349: oGetAddrLocal 1
10351: oPushResult
10352: oGetParam 2
10354: oPushResult
10355: oNodeNew
10356: oPop 1
10358: oAssign
10359: oGetLocal 1
10361: oPushResult
10362: oSetResult 4
10364: oPushResult
10365: oGetParam 1
10367: oPushResult
10368: oNodeSetInt
10369: oPop 3
10371: oGetLocal 1
10373: oReturn
10374: oReturn
10375: oLocalSpace 1
10377: oGetAddrLocal 1
10379: oPushResult
10380: oGetParam 1
10382: oPushResult
10383: oSetResult 35
10385: oPushResult
10386: oNodeGet
10387: oPop 2
10389: oAssign
10390: oGetLocal 1
10392: oPushResult
10393: oNodeNull
10394: oPop 1
10396: oChoice 10452
10398: oGetAddrLocal 1
10400: oPushResult
10401: oSetResult 34
10403: oPushResult
10404: oNodeNew
10405: oPop 1
10407: oAssign
10408: oGetLocal 1
10410: oPushResult
10411: oSetResult 36
10413: oPushResult
10414: oGetParam 1
10416: oPushResult
10417: oNodeSet
10418: oPop 3
10420: oGetLocal 1
10422: oPushResult
10423: oSetResult 17
10425: oPushResult
10426: oSetResult 8
10428: oPushResult
10429: oNodeSetInt
10430: oPop 3
10432: oGetLocal 1
10434: oPushResult
10435: oTypeAdd
10436: oPop 1
10438: oGetParam 1
10440: oPushResult
10441: oSetResult 35
10443: oPushResult
10444: oGetLocal 1
10446: oPushResult
10447: oNodeSet
10448: oPop 3
10450: oJumpForward 10455
10452: Choice Lookup Table
           1   10398
10455: oGetLocal 1
10457: oReturn
10458: oReturn
10459: oLocalSpace 2
10461: oGetParam 1
10463: oPushResult
10464: oNodeType
10465: oPop 1
10467: oChoice 10537
10469: oMININT
10470: oReturn
10471: oJumpForward 10553
10473: oSetResult 0
10475: oReturn
10476: oJumpForward 10553
10478: oSetResult 0
10480: oReturn
10481: oJumpForward 10553
10483: oGetAddrLocal 1
10485: oPushResult
10486: oGetParam 1
10488: oPushResult
10489: oSetResult 40
10491: oPushResult
10492: oNodeGet
10493: oPop 2
10495: oAssign
10496: oGetAddrLocal 2
10498: oPushResult
10499: oGetLocal 1
10501: oPushResult
10502: oSetResult 15
10504: oPushResult
10505: oNodeGetIter
10506: oPop 2
10508: oPushResult
10509: oNodeIterValue
10510: oPop 1
10512: oAssign
10513: oGetLocal 2
10515: oPushResult
10516: oSetResult 22
10518: oPushResult
10519: oNodeGetInt
10520: oPop 2
10522: oReturn
10523: oJumpForward 10553
10525: oGetParam 1
10527: oPushResult
10528: oSetResult 38
10530: oPushResult
10531: oNodeGetInt
10532: oPop 2
10534: oReturn
10535: oJumpForward 10553
10537: Choice Lookup Table
          37   10525
          39   10483
          32   10478
          30   10473
          28   10469
10548: oError 3
10550: oSetResult 0
10552: oReturn
10553: oReturn
10554: oLocalSpace 2
10556: oGetParam 1
10558: oPushResult
10559: oNodeType
10560: oPop 1
10562: oChoice 10632
10564: oMAXINT
10565: oReturn
10566: oJumpForward 10648
10568: oSetResult 1
10570: oReturn
10571: oJumpForward 10648
10573: oSetResult 255
10575: oReturn
10576: oJumpForward 10648
10578: oGetAddrLocal 1
10580: oPushResult
10581: oGetParam 1
10583: oPushResult
10584: oSetResult 40
10586: oPushResult
10587: oNodeGet
10588: oPop 2
10590: oAssign
10591: oGetAddrLocal 2
10593: oPushResult
10594: oGetLocal 1
10596: oPushResult
10597: oSetResult 15
10599: oPushResult
10600: oNodeGetIterLast
10601: oPop 2
10603: oPushResult
10604: oNodeIterValue
10605: oPop 1
10607: oAssign
10608: oGetLocal 2
10610: oPushResult
10611: oSetResult 22
10613: oPushResult
10614: oNodeGetInt
10615: oPop 2
10617: oReturn
10618: oJumpForward 10648
10620: oGetParam 1
10622: oPushResult
10623: oSetResult 39
10625: oPushResult
10626: oNodeGetInt
10627: oPop 2
10629: oReturn
10630: oJumpForward 10648
10632: Choice Lookup Table
          37   10620
          39   10578
          32   10573
          30   10568
          28   10564
10643: oError 3
10645: oSetResult 0
10647: oReturn
10648: oReturn
10649: oLocalSpace 0
10651: oGetParam 1
10653: oPushResult
10654: oSetResult 22
10656: oPushResult
10657: oNodeGetInt
10658: oPop 2
10660: oPushResult
10661: oEmitInt
10662: oPop 1
10664: oReturn
10665: oLocalSpace 1
10667: oGetAddrLocal 1
10669: oPushResult
10670: oSetResult 14
10672: oPushResult
10673: oGetParam 1
10675: oPushResult
10676: oCall 10347
10678: oPop 2
10680: oAssign
10681: oGetLocal 1
10683: oPushResult
10684: oScopeDeclare
10685: oPop 1
10687: oGetLocal 1
10689: oReturn
10690: oReturn
10691: oLocalSpace 1
10693: oGetAddrGlobal 4
10695: oPushResult
10696: oIdAdd_mysystem
10697: oAssign
10698: oGetAddrGlobal 5
10700: oPushResult
10701: oSetResult 27
10703: oPushResult
10704: oSetResult 4
10706: oPushResult
10707: oCall 10313
10709: oPop 2
10711: oAssign
10712: oGetAddrGlobal 6
10714: oPushResult
10715: oSetResult 28
10717: oPushResult
10718: oSetResult 4
10720: oPushResult
10721: oCall 10313
10723: oPop 2
10725: oAssign
10726: oGetAddrGlobal 7
10728: oPushResult
10729: oSetResult 30
10731: oPushResult
10732: oSetResult 1
10734: oPushResult
10735: oCall 10313
10737: oPop 2
10739: oAssign
10740: oGetAddrGlobal 8
10742: oPushResult
10743: oSetResult 31
10745: oPushResult
10746: oSetResult 1
10748: oPushResult
10749: oCall 10313
10751: oPop 2
10753: oAssign
10754: oGetAddrGlobal 9
10756: oPushResult
10757: oSetResult 32
10759: oPushResult
10760: oSetResult 1
10762: oPushResult
10763: oCall 10313
10765: oPop 2
10767: oAssign
10768: oGetAddrGlobal 10
10770: oPushResult
10771: oSetResult 29
10773: oPushResult
10774: oSetResult 1
10776: oPushResult
10777: oCall 10313
10779: oPop 2
10781: oAssign
10782: oGetAddrGlobal 11
10784: oPushResult
10785: oSetResult 35
10787: oPushResult
10788: oSetResult 8
10790: oPushResult
10791: oCall 10313
10793: oPop 2
10795: oAssign
10796: oGetGlobal 11
10798: oPushResult
10799: oSetResult 36
10801: oPushResult
10802: oGetGlobal 10
10804: oPushResult
10805: oNodeSet
10806: oPop 3
10808: oGetAddrGlobal 12
10810: oPushResult
10811: oSetResult 33
10813: oPushResult
10814: oSetResult 256
10816: oPushResult
10817: oCall 10313
10819: oPop 2
10821: oAssign
10822: oGetAddrLocal 1
10824: oPushResult
10825: oSetResult 18
10827: oPushResult
10828: oIdAdd_File
10829: oPushResult
10830: oCall 10347
10832: oPop 2
10834: oAssign
10835: oGetLocal 1
10837: oPushResult
10838: oSetResult 21
10840: oPushResult
10841: oGetGlobal 5
10843: oPushResult
10844: oNodeSet
10845: oPop 3
10847: oGetLocal 1
10849: oPushResult
10850: oScopeDeclare
10851: oPop 1
10853: oGetAddrLocal 1
10855: oPushResult
10856: oSetResult 18
10858: oPushResult
10859: oIdAdd_Integer
10860: oPushResult
10861: oCall 10347
10863: oPop 2
10865: oAssign
10866: oGetLocal 1
10868: oPushResult
10869: oSetResult 21
10871: oPushResult
10872: oGetGlobal 6
10874: oPushResult
10875: oNodeSet
10876: oPop 3
10878: oGetLocal 1
10880: oPushResult
10881: oScopeDeclare
10882: oPop 1
10884: oGetAddrLocal 1
10886: oPushResult
10887: oSetResult 18
10889: oPushResult
10890: oIdAdd_Boolean
10891: oPushResult
10892: oCall 10347
10894: oPop 2
10896: oAssign
10897: oGetLocal 1
10899: oPushResult
10900: oSetResult 21
10902: oPushResult
10903: oGetGlobal 7
10905: oPushResult
10906: oNodeSet
10907: oPop 3
10909: oGetLocal 1
10911: oPushResult
10912: oScopeDeclare
10913: oPop 1
10915: oGetAddrLocal 1
10917: oPushResult
10918: oSetResult 18
10920: oPushResult
10921: oIdAdd_Char
10922: oPushResult
10923: oCall 10347
10925: oPop 2
10927: oAssign
10928: oGetLocal 1
10930: oPushResult
10931: oSetResult 21
10933: oPushResult
10934: oGetGlobal 9
10936: oPushResult
10937: oNodeSet
10938: oPop 3
10940: oGetLocal 1
10942: oPushResult
10943: oScopeDeclare
10944: oPop 1
10946: oGetAddrLocal 1
10948: oPushResult
10949: oSetResult 18
10951: oPushResult
10952: oIdAdd_Byte
10953: oPushResult
10954: oCall 10347
10956: oPop 2
10958: oAssign
10959: oGetLocal 1
10961: oPushResult
10962: oSetResult 21
10964: oPushResult
10965: oGetGlobal 10
10967: oPushResult
10968: oNodeSet
10969: oPop 3
10971: oGetLocal 1
10973: oPushResult
10974: oScopeDeclare
10975: oPop 1
10977: oGetAddrLocal 1
10979: oPushResult
10980: oSetResult 18
10982: oPushResult
10983: oIdAdd_Pointer
10984: oPushResult
10985: oCall 10347
10987: oPop 2
10989: oAssign
10990: oGetLocal 1
10992: oPushResult
10993: oSetResult 21
10995: oPushResult
10996: oGetGlobal 11
10998: oPushResult
10999: oNodeSet
11000: oPop 3
11002: oGetLocal 1
11004: oPushResult
11005: oScopeDeclare
11006: oPop 1
11008: oGetAddrLocal 1
11010: oPushResult
11011: oSetResult 18
11013: oPushResult
11014: oIdAdd_String
11015: oPushResult
11016: oCall 10347
11018: oPop 2
11020: oAssign
11021: oGetLocal 1
11023: oPushResult
11024: oSetResult 21
11026: oPushResult
11027: oGetGlobal 12
11029: oPushResult
11030: oNodeSet
11031: oPop 3
11033: oGetLocal 1
11035: oPushResult
11036: oScopeDeclare
11037: oPop 1
11039: oGetAddrLocal 1
11041: oPushResult
11042: oSetResult 16
11044: oPushResult
11045: oIdAdd_True
11046: oPushResult
11047: oCall 10347
11049: oPop 2
11051: oAssign
11052: oGetLocal 1
11054: oPushResult
11055: oSetResult 21
11057: oPushResult
11058: oGetGlobal 7
11060: oPushResult
11061: oNodeSet
11062: oPop 3
11064: oGetLocal 1
11066: oPushResult
11067: oSetResult 22
11069: oPushResult
11070: oSetResult 1
11072: oPushResult
11073: oNodeSetInt
11074: oPop 3
11076: oGetLocal 1
11078: oPushResult
11079: oScopeDeclare
11080: oPop 1
11082: oGetAddrLocal 1
11084: oPushResult
11085: oSetResult 16
11087: oPushResult
11088: oIdAdd_False
11089: oPushResult
11090: oCall 10347
11092: oPop 2
11094: oAssign
11095: oGetLocal 1
11097: oPushResult
11098: oSetResult 21
11100: oPushResult
11101: oGetGlobal 7
11103: oPushResult
11104: oNodeSet
11105: oPop 3
11107: oGetLocal 1
11109: oPushResult
11110: oSetResult 22
11112: oPushResult
11113: oSetResult 0
11115: oPushResult
11116: oNodeSetInt
11117: oPop 3
11119: oGetLocal 1
11121: oPushResult
11122: oScopeDeclare
11123: oPop 1
11125: oGetAddrGlobal 13
11127: oPushResult
11128: oIdAdd_Ord
11129: oPushResult
11130: oCall 10665
11132: oPop 1
11134: oAssign
11135: oGetAddrGlobal 14
11137: oPushResult
11138: oIdAdd_Chr
11139: oPushResult
11140: oCall 10665
11142: oPop 1
11144: oAssign
11145: oGetAddrGlobal 15
11147: oPushResult
11148: oIdAdd_Pred
11149: oPushResult
11150: oCall 10665
11152: oPop 1
11154: oAssign
11155: oGetAddrGlobal 16
11157: oPushResult
11158: oIdAdd_Succ
11159: oPushResult
11160: oCall 10665
11162: oPop 1
11164: oAssign
11165: oReturn
