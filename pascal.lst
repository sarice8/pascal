   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pStrLit
   2:    pCharLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushAddrGlobal   % <offset> - push ptr to global var (same as tPushConstP)
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tCastBtoI         % zero-extend uint8_t to int32_t
   2:    tCastItoB         % truncate int32_t to uint8_t
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tNot              % negate top boolean
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteChar        %  "     "    : write char, pop
   2:    tWriteStr         %  "     "    : write string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteCR          %  "     "    : write cr
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nBuiltInFunc
   2: 	nBuiltInProc
   2: 	nConst
   2: 	nEnumValue
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nIntegerType
   2: 	nByteType
   2: 	nBooleanType
   2: 	nBooleanCFType
   2: 	nCharType
   2: 	nStringType
   2: 	nPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qNameTable
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
      % intrinsic types & type constructs
      
   2: type typ:
   2:    tyNone     = 0    % in ptrTyp field of TT, means no ptr to type defined
   2:    tyInteger
   2:    tyBoolean
   2:    tyChar
   2:    tyString
   2:    tyFile            % tyInteger..tyFile are scalars (types on their own)
   2:    tyPointer         % following are type constructor classes...
   2:    tyArray           %   (they are not type#'s)
   2:    tyRecord
   2:    tyParams          % like record; a collection of proc/func params
   2:    tySet;
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % adds a predefined id to the scanner's id table, and returns the id code
   2:     oIdAdd_File >> int
   2:     oIdAdd_Integer >> int
   2:     oIdAdd_Boolean >> int
   2:     oIdAdd_Char >> int
   2:     oIdAdd_Byte >> int
   2:     oIdAdd_String >> int
   2:     oIdAdd_True >> int
   2:     oIdAdd_False >> int
   2:     oIdAdd_Ord >> int
   2:     oIdAdd_Chr >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValueNegate                % negate top value
   2:    oValueTop >> int            % get top value on value stack
   2:    oValuePop;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanCFType
   2: Node    CharType
   2: Node    ByteType
   2: Node    StringType
      
      % nBuiltInFunc
   2: Node    BuiltIn_Ord
   2: Node    BuiltIn_Chr
      
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowCF( out Label falseLabel );
   2: BoolExprAllowCF( out Label falseLabel );
   2: BoolTermAllowCF( out Label falseLabel );
   2: BoolFactorAllowCF( out Label falseLabel );
   2: ArithExprAllowCF( out Label falseLabel );
   2: TermAllowCF( out Label falseLabel );
   2: FactorAllowCF( out Label falseLabel );
   2: PrimaryAllowCF( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueVar( Node decl );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: CFToVal( inout Label falseLabel );
   2: ValToCF( out Label falseLabel );
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Declarations ----------------------------
      
   2: Program:
   4:    Node t
      
   4:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
   9:    oScopeBegin( 0, allocGlobal )
  18:    Node rootScope = oScopeCurrent
      
  23:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
  25:    .tEnter  oEmitInt( 0 )
  33:    Label mainLabel = oLabelNew
      
  38:    .tAllocActuals  oEmitInt( 0 )
  46:    .tCall  oEmitLabel( mainLabel )
  54:    .tFreeActuals  oEmitInt( 0 )
  62:    .tReturn
      
  64:    pProgram
  66:    pIdent
      
  68:    Node program = oNodeNew( nProgram )
  78:    oNodeSetInt( program, qIdent, LAST_ID )
  89:    oNodeSet( workspace, qProgram, program )
      
      
 101:    [
 101:       | '(' :
 103:          pIdent      % input, output files
      
 105:          t = @newIdent( nVar, LAST_ID )
 118:          oNodeSet( t, qType, FileType )
 130:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
 136:          ','
 138:          pIdent
      
 140:          t = @newIdent( nVar, LAST_ID )
 153:          oNodeSet( t, qType, FileType )
 165:          oScopeDeclareAlloc( t )
      
 171:          ')'
 173:       | * :
 178:    ]
 178:    ';'
      
         % The uses clause may only appear once, immediately after the program declaration.
 180:    [
 180:       | pUses :  @UsesClause( program )
 189:       | * :
 194:    ]
 194:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
 201:    oScopeBegin( 0, allocGlobal )
 210:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
 215:    oScopeBegin( 0, allocDown )
 224:    oNodeSet( oScopeCurrent, qExtends, globalScope )
 235:    initScope = oScopeCurrent
 240:    oNodeSet( program, qMainRoutineScope, initScope )
 252:    oScopeEnd
      
 253:    @BlockDecls( nGlobalVar )
      
      
 260:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
 266:    boolean isMain = true
 272:    @BlockStmt( mainLabel, globalScope, isMain )
      
 285:    oScopeEnd   % main routine scope
      
 286:    '.'
 288:    @CheckForUndefinedLabels
 290:    oScopeEnd   % global scope
 291:    @EndUsedUnits( program )   % used units scopes
 299:    ;
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
 299: UsesClause( Node user ):
 301:    {
 301:       pIdent
 303:       Node unit = @FindOrCompileUnit( LAST_ID )
 313:       [ equal_node( unit, Null )
 323:          | false :
 324:             oNodeAddLast( user, qUsedUnits, unit )
      
                  % Put a declaration in the current scope, naming the unit and pointing to it.
                  % This is to allow references to  <unit>.<identifier_in_unit>
 336:             Node unitRef = oNodeNew( nUnitRef )
 346:             oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 365:             oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 384:             oScopeDeclare( unitRef )
 390:          | * :
 395:       ]
 395:       [
 395:          | ',' :
 397:          | * :  >
 404:       ]
 404:    }   
 406:    ';'
 409:    ;
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 409: ResolveUnitRef( inout Node decl ):
 411:    [ oNodeType( decl )
 418:       | nUnitRef :
 419:          Node scope = oNodeGet( decl, qPublicScope )
 432:          '.'
 434:          pIdent
 436:          decl = oScopeFindRequireInScope( scope )
 446:       | * :
 451:    ];
      
      
 452: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 454:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 467:    {
 467:       Node unit = oNodeIterValue( unitIt )
 477:       [ oNodeNull( unit )
 484:          | false :
 485:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 498:          | * :
 503:             >
 505:       ]
 505:       oNodeIterNext( unitIt )
 511:    }
 514:    ;
      
 514: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 516:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 529:    {
 529:       Node unit = oNodeIterValue( unitIt )
 539:       [ oNodeNull( unit )
 546:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 547:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 563:                | true :
 564:                | false :  #eInternalScopeMismatch
 568:             ]
 576:             oScopeEnd
 577:          | * :
 582:             >
 584:       ]
 584:       oNodeIterPrev( unitIt )
 590:    }
 593:    ;
      
      
 593: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 595:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 614:    [ equal_node( unit, Null )
 624:       | false :  >> unit
 628:       | * :
 633:    ]
      
         % If not, search for the source file on disk
 633:    boolean ok = oIncludeUnitFile( id )
 643:    [ ok
 646:       | false :  #eCantFindUnitFile  >> Null
 652:       | * :
 657:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 657:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 663:    oIncludeEnd
 664:    >> unit;
      
      
      
 668: Unit >> Node:
 670:    pUnit
 672:    pIdent
 674:    Node unit = oNodeNew( nUnit )
 684:    oNodeSetInt( unit, qIdent, LAST_ID )
 695:    Node unitImpl = oNodeNew( nUnitImpl )
 705:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 716:    oNodeSet( unit, qImpl, unitImpl )
 728:    ';'
      
         % mandatory sections
      
 730:    pInterface
 732:    [
 732:       | pUses :   @UsesClause( unit )
 741:       | * :
 746:    ]
 746:    @EnterUsedUnits( unit )
      
 753:    oScopeBegin( 0, allocGlobal )
 762:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 773:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 778:    oScopeBegin( 0, allocDown )
 787:    initScope = oScopeCurrent
 792:    oNodeSet( unit, qInitRoutineScope, initScope )
 804:    oScopeEnd
      
 805:    @UnitInterface( unit )
 812:    oScopeEnd  % interface scope
      
 813:    pImplementation
 815:    [
 815:       | pUses :   @UsesClause( unitImpl )
 824:       | * :
 829:    ]
 829:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 836:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 849:    oScopeBegin( 0, allocGlobal )
 858:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
 869:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
 887:    globalScope = oScopeCurrent
 892:    @UnitImplementation( unit )
      
 899:    [
 899:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
 911:       | * :                @UnitInitialization( unit, false )  % implicit init routine
 926:    ]
 926:    [
 926:       | pFinalization :  @UnitFinalization( unit, true )
 938:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
 953:    ]
 953:    pEnd  '.'
      
 957:    oScopeEnd  % impl scope
 958:    oScopeEnd  % interface scope
 959:    @EndUsedUnits( unitImpl )  % used units scopes
 966:    @EndUsedUnits( unit )
 973:    oNodeAddLast( workspace, qUnits, unit )
 985:    >> unit;
      
      
 989: UnitInterface( Node unit ):
 991:    {[
 991:       | pConst :     @ConstDecl
 995:       | pType :      @TypeDecl
 999:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
1008:       | pProcedure :
1010:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
1016:          [
1016:             | pExternal :
1018:                @ExternalDecl( decl )
1025:                ';'
1027:             | * :
1032:          ]
      
1032:       | pFunction :
1034:          Node decl = @FuncHeaderDecl
1040:          [
1040:             | pExternal :
1042:                @ExternalDecl( decl )
1049:                ';'
1051:             | * :
1056:          ]
      
1056:       | * :          >
1071:    ]}
1074:    ;
      
1074: UnitImplementation( Node unit ):
1076:    @BlockDecls( nGlobalVar )
1084:    ;
      
      
1084: UnitInitialization( Node unit, boolean hasStmts ):
1086:    Label label = oLabelNew
1091:    .tLabel  oEmitLabel( label )
1099:    oNodeSetLabel( unit, qInitLabel, label )
      
1111:    int patchLS
1111:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
1120:    Node scope
1120:    Code initCode
      
1120:    scope = oNodeGet( unit, qPublicScope )
1133:    initCode = oNodeGetCode( scope, qInitCode )
1146:    oEmitCode( initCode )
1152:    oNodeSetCode( scope, qInitCode, codeNull )
      
1164:    scope = oNodeGet( unit, qPrivateScope )
1177:    initCode = oNodeGetCode( scope, qInitCode )
1190:    oEmitCode( initCode )
1196:    oNodeSetCode( scope, qInitCode, codeNull )
      
1208:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1221:    [ hasStmts
1224:       | true :     
1225:          @Statement
1227:          {[
1227:             | ';' :  @Statement
1231:             | * :    >
1238:          ]}
1240:       | * :
1245:    ]
      
1245:    .tReturn
      
1247:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1259:    oPatch( patchLS, localSpace )
1268:    oScopeEnd   % init routine scope, for temporaries
1270:    ;
      
      
1270: UnitFinalization( Node unit, boolean hasStmts ):
1272:    Label label = oLabelNew
1277:    .tLabel  oEmitLabel( label )
1285:    oNodeSetLabel( unit, qFinalLabel, label )
      
1297:    int patchLS
1297:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1306:    oScopeBegin( 0, allocDown )
      
1315:    [ hasStmts
1318:       | true :     
1319:          @Statement
1321:          {[
1321:             | ';' :  @Statement
1325:             | * :    >
1332:          ]}
1334:       | * :
1339:    ]
      
1339:    .tReturn
      
1341:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1353:    oPatch( patchLS, localSpace )
1362:    oScopeEnd   % final routine scope, for temporaries
1364:    ;
      
      
1364: Block( node_type varNodeType, Label labelForBody ):
1366:    @BlockDecls( varNodeType )
1373:    @BlockStmt( labelForBody, oScopeCurrent, false )
1385:    @CheckForUndefinedLabels
1388:    ;
      
      
1388: BlockDecls( node_type varNodeType ):
1390:    {[
1390:       | pConst :     @ConstDecl
1394:       | pType :      @TypeDecl
1398:       | pVar :       @VarDecl( varNodeType )
1407:       | pLabel :     @LabelDecl
1411:       | pProcedure : @ProcDecl
1415:       | pFunction :  @FuncDecl
1419:       | * :          >
1436:    ]}
1438:    @CheckForUndefinedMethods
1441:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
1441: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
1444:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
1444: CheckForUndefinedLabels:
1446:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
1458:    {
1458:       Node decl = oNodeIterValue( it )
1468:       [ oNodeNull( decl )
1475:          | false :
1476:          | * :  >
1483:       ]
1483:       [ oNodeType( decl )
1490:          | nLabel :
1491:             [ oNodeGetBoolean( decl, qDefined )
1501:                | false :
1502:                   [ oNodeGetBoolean( decl, qUsed )
1512:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
1515:                      | * :
1520:                   ]
1520:                | * :
1525:             ]
1525:          | * :
1530:       ]
1530:       oNodeIterNext( it )
1536:    }
1539:    ;
      
      
1539: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1541:    NodeIter it = oNodeGetIter( workspace, qUnits )
1554:    {
1554:       Node unit = oNodeIterValue( it )
1564:       [ oNodeNull( unit )
1571:          | true :  >
1574:          | false :
1576:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1584:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1599:             .tFreeActuals  oEmitInt( 0 )
1607:             oNodeIterNext( it )
1613:       ]
1621:    };
      
      
1624: FinalizeUnits:
1626:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1639:    {
1639:       Node unit = oNodeIterValue( it )
1649:       [ oNodeNull( unit )
1656:          | true :  >
1659:          | false :
1661:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1669:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1684:             .tFreeActuals  oEmitInt( 0 )
1692:             oNodeIterPrev( it )
1698:       ]
1706:    };
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
1709: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
1711:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
1719:    int patchLS
1719:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
1728:    [ isMain
1731:       | true :  @InitializeUnits
1734:       | * :
1739:    ]
      
         % insert any code for initialization of this scope's variables
1739:    Code initCode = oNodeGetCode( varScope, qInitCode )
1752:    oEmitCode( initCode )
1758:    oNodeSetCode( varScope, qInitCode, codeNull )
      
1770:    @Statement
      
1772:    [ isMain
1775:       | true :  @FinalizeUnits
1778:       | * :
1783:    ]
      
1783:    .tReturn
      
1785:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1797:    oPatch( patchLS, localSpace )
1807:    ;
      
      
      % modifers that may appear on a proc/function declaration.
      %
1807: MethodModifiers( Node decl ):
1809:    {[
1809:       | pCdecl :
1811:          oNodeSetBoolean( decl, qCdecl, true )
1823:          ';'
      
1825:       | * : >
1832:    ]}
1835:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
1835: GetOrCreateInitCode( Node scope ) >> Code:
1837:    Code initCode = oNodeGetCode( scope, qInitCode )
1850:    [ equal_code( initCode, codeNull )
1860:       | true :
1861:          initCode = oCodeNew
1866:          oNodeSetCode( scope, qInitCode, initCode )
1878:       | * :
1883:    ]
1883:    >> initCode;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note, I'll hold off on issuing the .tLabelExtern until we see that
      % the external method is actually called.  Otherwise we'd fill each output file
      % with all the external method names in my included libraries, which seems dumb.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
1887: ExternalDecl( Node decl ):
1889:    [ equal_zero( @DeclLevel( decl ) )
1901:       | false :  #eExternalMethodCannotBeNested
1904:       | * :
1909:    ]
1909:    oNodeSetBoolean( decl, qExternal, true )
1921:    [
1921:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
1923:          [
1923:             | pName :
1925:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
1927:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
1938:             | * :
1943:          ]
1943:       | * :
1948:    ]
1949:    ;
      
      
1949: ProcHeaderDecl >> Node:
1951:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1953:    boolean redeclaring = false
1959:    Node decl = oScopeFindInCurrentScope
      
1964:    [ oNodeNull( decl )
1971:       | true :
               % first declaration
1972:          decl = @newIdent( nProc, LAST_ID )
1985:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1996:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1998:          redeclaring = true
2004:          [ oNodeGetBoolean( decl, qBodyDefined )
2014:             | true : #eAlreadyDefined
2017:             | * :
2022:          ]
2022:          [ oNodeGetBoolean( decl, qExternal )
2032:             | true : #eAlreadyDefined
2035:             | * :
2040:          ]
2040:          [ oNodeType( decl )
2047:             | nProc :
2048:             | * : #eAlreadyDefined   % wrong kind
2055:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2055:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2074:          oNodeSet( decl, qParams, Null )
2086:    ]
      
2094:    int level = @ScopeLevel
2100:    boolean nested = greater( level, 0 )
2113:    inc( level )
2119:    oScopeBegin( level, allocUp )
2128:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2133:    [ nested
2136:       | true :
2137:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2152:       | * :
2157:    ]
      
2157:    @FormalArgDecl
2159:    oNodeSet( decl, qParams, paramScope )
2171:    oScopeEnd
2172:    ';'
      
2174:    [ redeclaring
2177:       | false : oScopeDeclare( decl )
2184:       | true :  % TO DO: check that qParams is consistent with qOldParams
2186:    ]
      
2194:    @MethodModifiers( decl )
2201:    >> decl;
      
      
2205: ProcDecl:
2207:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
2213:    [
2213:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2215:       | pExternal : @ExternalDecl( decl )
      
2224:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2231:          Node paramScope = oNodeGet( decl, qParams )
2244:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
2250:          int level = oNodeGetInt( paramScope, qLevel )
2263:          oScopeBegin( level, allocDown )
2272:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2283:          Label label = oNodeGetLabel( decl, qValue )
2296:          @Block( nLocalVar, label )
2306:          oNodeSetBoolean( decl, qBodyDefined, true )
2318:          oScopeEnd
      
2319:          oScopeEnd  % paramScope
2320:    ]
2320:    ';';
      
      
      
2323: FuncHeaderDecl >> Node:
2325:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2327:    boolean redeclaring = false
2333:    Node decl = oScopeFindInCurrentScope
      
2338:    [ oNodeNull( decl )
2345:       | true :
               % first declaration
2346:          decl = @newIdent( nFunc, LAST_ID )
2359:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2370:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2372:          redeclaring = true
2378:          [ oNodeGetBoolean( decl, qBodyDefined )
2388:             | true : #eAlreadyDefined
2391:             | * :
2396:          ]
2396:          [ oNodeType( decl )
2403:             | nFunc :
2404:             | * : #eAlreadyDefined   % wrong kind
2411:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2411:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2430:          oNodeSet( decl, qParams, Null )
2442:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
2461:          oNodeSet( decl, qType, Null )
2473:    ]
      
2481:    int level = @ScopeLevel
2487:    boolean nested = greater( level, 0 )
2500:    inc( level )
2506:    oScopeBegin( level, allocUp )
2515:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2520:    [ nested
2523:       | true :
2524:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2539:       | * :
2544:    ]
      
2544:    @FormalArgDecl
2546:    oNodeSet( decl, qParams, paramScope )
      
2558:    ':'
      
2560:    Node theType
2560:    @TypeRef( theType )
2567:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2579:    Node ptrType = @PointerTypeTo( theType )
2590:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2606:    oScopeEnd
2607:    ';'
      
2609:    [ redeclaring
2612:       | false : oScopeDeclare( decl )
2619:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2621:    ]
      
2629:    @MethodModifiers( decl )
      
2636:    >> decl;
      
      
2640: FuncDecl:
2642:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2648:    [
2648:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2650:       | pExternal : @ExternalDecl( decl )
      
2659:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2666:          Node paramScope = oNodeGet( decl, qParams )
2679:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2685:          int level = oNodeGetInt( paramScope, qLevel )
2698:          oScopeBegin( level, allocDown )
2707:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2718:          Label label = oNodeGetLabel( decl, qValue )
2731:          @Block( nLocalVar, label )
2741:          oNodeSetBoolean( decl, qBodyDefined, true )
2753:          oScopeEnd
      
2754:          oScopeEnd  % paramScope
2755:    ]
2755:    ';';
      
      
2758: FormalArgDecl:
2760:    [
2760:       | '(' :
2762:          {
2762:             NodeVec decls = oNodeVecNew
2767:             Node decl
2767:             boolean isInOut = false
      
2773:             [
2773:                | pVar : isInOut = true
2781:                | * :
2786:             ]
      
2786:             {  pIdent
      
2788:                decl = @newIdent( nParam, LAST_ID )
2801:                oNodeSetBoolean( decl, qInOut, isInOut )
2813:                oNodeVecAppend( decls, decl )
      
2822:                [
2822:                   | ':' : >
2826:                   | ',' :
2828:                ]
2836:             }
      
2838:             Node theType
2838:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
2845:             Node allocType
2845:             [ isInOut
2848:                | true :   allocType = @PointerTypeTo( theType )
2860:                | * :      allocType = theType
2871:             ]
      
2871:             int i = 0
2877:             {[ equal( i, oNodeVecSize( decls ) )
2891:                | false :
2892:                   decl = oNodeVecElement( decls, i )
      
2905:                   oNodeSet( decl, qType, theType )
2917:                   oScopeDeclare( decl )
2923:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
2939:                   inc( i )
2945:                | * :
2950:                   >
2952:             ]}
      
2954:             oNodeVecDelete( decls )
      
2960:             [
2960:                | ')' : >
2964:                | ';' :
2966:             ]
2974:          }
2976:       | * :
2981:    ];
      
2982: ConstDecl:
2984:    {[
2984:       | pIdent :
2986:          Node decl = @newIdent( nConst, LAST_ID )
2999:          '='
      
3001:          @ConstExpr
               % TO DO: currently ConstExpr leaves int result on oValue stack
3003:          int val = oValueTop
3008:          oValuePop
3009:          oNodeSetInt( decl, qValue, val )
      
               % TO DO: different types.  Currently assumes int!
3021:          oNodeSet( decl, qType, IntegerType )
      
3033:          oScopeDeclare( decl )
3039:          ';'
3041:       | * :
3046:          >
3048:    ]};
      
3051: TypeDecl:
3053:    {[
3053:       | pIdent :
3055:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3068:          '='
3070:          Node theType
3070:          @TypeRef( theType )
3077:          oNodeSet( decl, qType, theType )
3089:          oScopeDeclare( decl )
3095:          ';'
3097:       | * :
3102:          >
3104:    ]};
      
3107: VarDecl( node_type varNodeType ):
3109:    {[
3109:       | pIdent :
3111:          NodeVec decls = oNodeVecNew
3116:          Node decl
3116:          {
3116:             decl = @newIdent( varNodeType, LAST_ID )
3129:             oNodeVecAppend( decls, decl )
3138:             [
3138:                | ',' :
3140:                   pIdent
3142:                | * :
3147:                   >
3149:             ]
3149:          }
3151:          ':'
3153:          Node theType
3153:          @TypeRef( theType )
      
3160:          int i = 0
3166:          {[ equal( i, oNodeVecSize( decls ) )
3180:             | false :
3181:                decl = oNodeVecElement( decls, i )
3194:                oNodeSet( decl, qType, theType )
3206:                oScopeDeclareAlloc( decl )
3212:                inc( i )
3218:             | * :
3223:               >
3225:          ]}
      
               % optional initialization
3227:          [
3227:             | '=' :
3229:                [ oNodeVecSize( decls )
3236:                   | 1 :
3237:                   | * :  #eOnlyOneVarCanBeInitialized
3244:                ]
      
                     % we need an initCode stream for this scope
3244:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3254:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3260:                boolean changedScope = false
3266:                [ equal_zero( @ScopeLevel )
3273:                   | true : oScopeEnter( initScope )
3280:                            changedScope = true
3286:                   | * :
3291:                ]
                     % generate assignment in initCode stream
3291:                @LValueVar( decl )
3298:                @Expr
3300:                @MatchTypes
3302:                @Assign
3304:                [ changedScope
3307:                   | true : oScopeEnd
3309:                   | * :
3314:                ]
3314:                oCodePop
                   
3315:             | * :
3320:          ]
      
3320:          oNodeVecDelete( decls )
3326:          ';'
3328:       | * :
3333:          >
3335:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3338: LabelDecl:
3340:    {
3340:       Node decl
3340:       [
3340:          | pIdent :
3342:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3344:             oChangeIntLitToLabelIdent
3345:       ]
3353:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
3366:       Label label = oLabelNew
3371:       oNodeSetLabel( decl, qValue, label )
3383:       oScopeDeclare( decl )
3389:       [
3389:          | ',' :
3391:          | * :
3396:             >
3398:       ]
3398:    }
3400:    ';'
3403:    ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
3403: TypeRef( out Node resultType ):
3405:    [
3405:       | pIdent :           % previously named type (including intrinsics)
3407:          Node decl = oScopeFindRequire
3412:          @ResolveUnitRef( decl )
3419:          [ oNodeType( decl )
3426:             | nTypeDecl :
3427:                resultType = oNodeGet( decl, qType )
3440:             | * :
3445:                #eNotType
3447:                resultType = IntegerType
3453:          ]
         
3453:       | pArray :
3455:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
3457:          NodeVec dimensions = oNodeVecNew
      
3462:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
3462:             Node subrange = oNodeNew( nSubrangeType )
                  % TO DO: currently assuming subrange of integer
3472:             oNodeSet( subrange, qBaseType, IntegerType )
      
                  % TO DO: currently ConstExpr leaves int result on oValue stack
3484:             @ConstExpr
3486:             oNodeSetInt( subrange, qLow, oValueTop )
3497:             oValuePop
3498:             '..'
3500:             @ConstExpr
3502:             oNodeSetInt( subrange, qHigh, oValueTop )
3513:             oValuePop
3514:             oNodeSetInt( subrange, qSize, 4 )   % maybe don't need
      
3526:             oTypeAdd( subrange )
      
3532:             Node a = oNodeNew( nArrayType )
3542:             oNodeSet( a, qIndexType, subrange )
      
3554:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
3563:             [
3563:                | ']' : >
3567:                | ',' :
3569:             ]
3577:          }
      
3579:          pOf
3581:          Node baseType
3581:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
3588:          int dim = oNodeVecSize( dimensions )
      
3598:          {
3598:              dec(dim)
      
3604:              Node a = oNodeVecElement( dimensions, dim )
      
3617:              oNodeSet( a, qBaseType, baseType )
3629:              Node subrange = oNodeGet( a, qIndexType )
3642:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
3669:              inc( width )
3675:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
3701:              oTypeAdd( a )
3707:              baseType = a
      
3713:              [ equal_zero(dim)
3720:                  | true:  >
3723:                  | *:
3728:              ]
3728:          }
      
3730:          resultType = oNodeVecElement( dimensions, 0 )
3743:          oNodeVecDelete( dimensions )
      
3749:       | '^' :
3751:          Node theType
3751:          @TypeRef( theType )
3758:          resultType = @PointerTypeTo( theType )
      
3769:       | pRecord :
3771:          resultType = oNodeNew( nRecordType )
3781:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
3790:          @VarDecl( nRecordField )
      
3797:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
3809:          [ equal_zero( size )
3816:             | true : #eRecordEmpty
3819:             | * :
3824:          ]
      
3824:          pEnd
      
3826:          oNodeSet( resultType, qScope, oScopeCurrent )
3837:          oNodeSetInt( resultType, qSize, size )
3849:          oScopeEnd
3850:          oTypeAdd( resultType )
      
      
3856:       | '(' :
               % An enum type declaration.
3858:          resultType = oNodeNew( nEnumType )
3868:          int value = 0
3874:          int numValues = 0
3880:          boolean first = true
      
               % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
               % That will let programs use either <val> or <enumType>.<val>
3886:          Node outerScope = oScopeCurrent
3891:          oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
3900:          {
                  % TO DO: assert that name not already seen in this scope, i.e. this enum.
                  %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
                  %  It might be in some other higher/used scope.
3900:             pIdent
3902:             Node decl = @newIdent( nEnumValue, LAST_ID )
3915:             Node decl2 = @newIdent( nEnumValue, LAST_ID )
3928:             oNodeSet( decl, qType, resultType )
3940:             oNodeSet( decl2, qType, resultType )
      
                  % build up name table, for i/o
3952:             int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
3965:             oNodeSetInt( decl, qNameOffset, nameOffset )
3977:             oNodeSetInt( decl2, qNameOffset, nameOffset )
3989:             [
3989:                | '=', ':=' :
3991:                   @ConstExpr
                        % value must be ascending
                        % this obviously doesn't apply to the first value
3993:                   [ equal_zero( numValues )
4000:                      | false :
4001:                         [ greater( oValueTop, value )
4010:                            | false :   #eEnumValueNotAscending
4013:                            | * :
4018:                         ]
4018:                      | * :
4023:                   ]
4023:                   value = oValueTop
4028:                   oValuePop
4029:                | * :
4036:             ]
4036:             oNodeSetInt( decl, qValue, value )
4048:             oNodeSetInt( decl2, qValue, value )
4060:             oScopeDeclare( decl )
      
4066:             oScopeEnter( outerScope )
4072:             oScopeDeclare( decl2 )
4078:             oScopeEnd
      
4079:             inc( value )
4085:             inc( numValues )
4091:             [
4091:                | ',' :
4093:                | * :    >
4100:             ]
4100:          }
4102:          ')'
      
4104:          oNodeSet( resultType, qScope, oScopeCurrent )
4115:          oNodeSetInt( resultType, qSize, 4 )   % always integer sized
4127:          oScopeEnd
      
               % Finish creation of the name table
               %    struct {
               %      int    value;
               %      int    padding;
               %      char*  name;
               %    } table[ numValues + 1 ];
               %  final entry will have name == nullptr
               %
               % I'll need to generate init code, to store pointers in global data,
               % since I don't have a relocation mechanism for static data at the moment.
4128:          oCodePush( @GetOrCreateInitCode( globalScope ) )
4139:          oScopeEnter( globalScope )
4145:          int size = multiply( add( numValues, 1 ), 16 )
4165:          int addr = oScopeAlloc( size, 8 )
4178:          oScopeEnd
4179:          oNodeSetInt( resultType, qNameTable, addr )
               % loop over enum values
4191:          NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
4211:          {
4211:             Node enumValue = oNodeIterValue( it )
4221:             [ oNodeNull( enumValue )
4228:                | true :  >
4231:                | * :
4236:             ]
4236:             .tPushAddrGlobal  oEmitInt( addr )
4244:             .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
4259:             .tAssignI
4261:             addr = add( addr, 8 )
4274:             .tPushAddrGlobal  oEmitInt( addr )
4282:             .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
4297:             .tAssignP
4299:             addr = add( addr, 8 )
4312:             oNodeIterNext( it )
4318:          }
               % final table entry
4320:          .tPushAddrGlobal  oEmitInt( addr )
4328:          .tPushConstI  oEmitInt( 0 )
4336:          .tAssignI
4338:          addr = add( addr, 8 )
4351:          .tPushAddrGlobal  oEmitInt( addr )
4359:          .tPushConstI  oEmitInt( 0 )
4367:          .tAssignP
4369:          addr = add( addr, 8 )
4382:          oCodePop
      
4383:          oTypeAdd( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
4389:       | pSet :
4391:          pOf
4393:          Node theType
4393:          @TypeRef( theType )
4400:       | * :       % this works for cases except where expr starts with an id
4415:          @ConstExpr '..' @ConstExpr
4421:    ];
      
      
      % --------------------------- Const Expressions --------------------------
      
      % Constant expressions: currently, only literal integers or previously
      % named constant integers are supported, possibly with a negation.
      % Constant expressions are evaluated at compile time.
      
4422: ConstExpr:
4424:    [
4424:       | pIntLit :
4426:          oValuePush( TOKEN_VALUE )
4431:       | pIdent :
4433:          Node decl = oScopeFindRequire
4438:          @ResolveUnitRef( decl )
4445:          [ oNodeType( decl )
4452:             | nConst :
4453:                oValuePush( oNodeGetInt( decl, qValue ) )
4466:             | * :
4471:                #eNotConst
4473:                oValuePush( 0 )
4479:          ]
4479:       | pMinus :
4481:          @ConstExpr
4483:          oValueNegate
4484:    ];
      
      
      
      % ------------------------------ Expressions -----------------------------
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanCFType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
4495: Expr:
4497:    Label falseLabel = labelNull
      
4503:    @ExprAllowCF( falseLabel )
4510:    @CFToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
4518: BooleanExprControlFlow( out Label falseLabel ):
4520:    @ExprAllowCF( falseLabel )
4527:    [ oTypeSNodeType
4529:       | nBooleanCFType :
4530:       | nBooleanType :
               % convert value to control flow
4532:          falseLabel = oLabelNew
4537:          .tJumpFalse  oEmitLabel( falseLabel )
4545:       | * :
4552:          #eNotBoolean
4554:    ]
4554:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
4556: CFToVal( inout Label falseLabel ):
4558:    [ oTypeSNodeType
4560:       | nBooleanCFType :
4561:          Label doneLabel = oLabelNew
4566:          .tPushConstI  oEmitInt( 1 )
4574:          .tJump  oEmitLabel( doneLabel )
4582:          .tLabel  oEmitLabel( falseLabel )
4590:          .tPushConstI  oEmitInt( 0 )
4598:          .tLabel  oEmitLabel( doneLabel )
4606:          oTypeSPop
4607:          oTypeSPush( BooleanType )
4613:          falseLabel = labelNull
4619:       | * :
4624:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
4625: ValToCF( out Label falseLabel ):
4627:    [ oTypeSNodeType
4629:       | nBooleanType :
4630:          falseLabel = oLabelNew
4635:          .tJumpFalse  oEmitLabel( falseLabel )
4643:          oTypeSPop
4644:          oTypeSPush( BooleanCFType )
4650:       | * :
4655:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanCFType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanCFType.
      % In this case, falseLabel is ignored.
      %
4656: ExprAllowCF( out Label falseLabel ):
4658:    @BoolExprAllowCF( falseLabel )
4665:    {[
4665:       | '=' :
4667:          @CFToVal( falseLabel )
4674:          @PromoteToIntOptional
4676:          @BoolExprAllowCF( falseLabel )
4683:          @CFToVal( falseLabel )
4690:          @PromoteToIntOptional
4692:          @MatchTypes
4694:          [ oTypeSNodeType
4696:             | nIntegerType, nEnumType, nBooleanType :  .tEqualI
4699:             | nPointerType :                .tEqualP
4703:             | nCharType, nStringType :      #eNotImplemented
4707:             | * :                           #eNotAllowed
4724:          ]
4724:          oTypeSPop
4725:          oTypeSPush( BooleanType )
      
4731:       | '<>' :
4733:          @CFToVal( falseLabel )
4740:          @PromoteToIntOptional
4742:          @BoolExprAllowCF( falseLabel )
4749:          @CFToVal( falseLabel )
4756:          @PromoteToIntOptional
4758:          @MatchTypes
4760:          [ oTypeSNodeType
4762:             | nIntegerType, nEnumType, nBooleanType :  .tNotEqualI
4765:             | nPointerType :                .tNotEqualP
4769:             | nCharType, nStringType :      #eNotImplemented
4773:             | * :                           #eNotAllowed
4790:          ]
4790:          oTypeSPop
4791:          oTypeSPush( BooleanType )
      
4797:       | '<' :
4799:          @CFToVal( falseLabel )
4806:          @PromoteToIntOptional
4808:          @BoolExprAllowCF( falseLabel )
4815:          @CFToVal( falseLabel )
4822:          @PromoteToIntOptional
4824:          @MatchTypes
4826:          [ oTypeSNodeType
4828:             | nIntegerType, nEnumType, nBooleanType :  .tLessI
4831:             | nCharType, nStringType :      #eNotImplemented
4835:             | * :                           #eNotAllowed
4850:          ]
4850:          oTypeSPop
4851:          oTypeSPush( BooleanType )
      
4857:       | '>' :
4859:          @CFToVal( falseLabel )
4866:          @PromoteToIntOptional
4868:          @BoolExprAllowCF( falseLabel )
4875:          @CFToVal( falseLabel )
4882:          @PromoteToIntOptional
4884:          @MatchTypes
4886:          [ oTypeSNodeType
4888:             | nIntegerType, nEnumType, nBooleanType :  .tGreaterI
4891:             | nCharType, nStringType :      #eNotImplemented
4895:             | * :                           #eNotAllowed
4910:          ]
4910:          oTypeSPop
4911:          oTypeSPush( BooleanType )
      
4917:       | '<=' :
4919:          @CFToVal( falseLabel )
4926:          @PromoteToIntOptional
4928:          @BoolExprAllowCF( falseLabel )
4935:          @CFToVal( falseLabel )
4942:          @PromoteToIntOptional
4944:          @MatchTypes
4946:          [ oTypeSNodeType
4948:             | nIntegerType, nEnumType, nBooleanType :  .tLessEqualI
4951:             | nCharType, nStringType :      #eNotImplemented
4955:             | * :                           #eNotAllowed
4970:          ]
4970:          oTypeSPop
4971:          oTypeSPush( BooleanType )
      
4977:       | '>=' :
4979:          @CFToVal( falseLabel )
4986:          @PromoteToIntOptional
4988:          @BoolExprAllowCF( falseLabel )
4995:          @CFToVal( falseLabel )
5002:          @PromoteToIntOptional
5004:          @MatchTypes
5006:          [ oTypeSNodeType
5008:             | nIntegerType, nEnumType, nBooleanType :  .tGreaterEqualI
5011:             | nCharType, nStringType :      #eNotImplemented
5015:             | * :                           #eNotAllowed
5030:          ]
5030:          oTypeSPop
5031:          oTypeSPush( BooleanType )
      
5037:       | * :
5052:          >
5054:    ]};
      
      
5057: BoolExprAllowCF( out Label falseLabel ):
5059:    Label trueLabel = labelNull
      
5065:    @BoolTermAllowCF( falseLabel )
5072:    {[
5072:       | pOr :
5074:          [ oTypeSNodeType
5076:             | nBooleanCFType :
                     % We are true here. Jump ahead to done
5077:                [ equal_label( trueLabel, labelNull )
5087:                   | true :  trueLabel = oLabelNew
5093:                   | * :
5098:                ]
5098:                .tJump  oEmitLabel( trueLabel )
5106:             | nBooleanType :
5108:                @ValToCF( falseLabel )
                     % We are true here. Jump ahead to done
5115:                [ equal_label( trueLabel, labelNull )
5125:                   | true :  trueLabel = oLabelNew
5131:                   | * :
5136:                ]
5136:                .tJump  oEmitLabel( trueLabel )
5144:             | * : #eNotBoolean
5153:          ]
5153:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5154:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5162:          falseLabel = labelNull
5168:          @BoolTermAllowCF( falseLabel )
      
5175:          [ oTypeSNodeType
5177:             | nBooleanCFType :
5178:             | nBooleanType :
5180:                @ValToCF( falseLabel )
5187:             | * : #eNotBoolean
5196:          ]
      
5196:          oTypeSPop
5197:          oTypeSPush( BooleanCFType )
      
5203:       | * :
5208:          >
5210:    ]}
      
         % any short-circuit trues jump here to the end
5212:    [ equal_label( trueLabel, labelNull )
5222:       | false :
5223:          .tLabel  oEmitLabel( trueLabel )
5231:       | * :
5236:    ]
5237:    ;
      
      
5237: BoolTermAllowCF( out Label falseLabel ):
5239:    Label overallFalseLabel = labelNull
      
5245:    @BoolFactorAllowCF( falseLabel )
5252:    {[
5252:       | pAnd :
5254:          [ oTypeSNodeType
5256:             | nBooleanCFType :
5257:             | nBooleanType :
5259:                @ValToCF( falseLabel )
5266:             | * :
5273:                #eNotBoolean
5275:          ]
5275:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
5276:          [ equal_label( overallFalseLabel, labelNull )
5286:             | true :
5287:                overallFalseLabel = oLabelNew
5292:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
5306:                falseLabel = overallFalseLabel
5312:             | * :
5317:          ]
      
5317:          Label factorFalseLabel = labelNull
5323:          @BoolFactorAllowCF( factorFalseLabel )
      
5330:          [ oTypeSNodeType
5332:             | nBooleanCFType :
5333:             | nBooleanType :
5335:                @ValToCF( factorFalseLabel )
5342:             | * : #eNotBoolean
5351:          ]
5351:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
5365:       | * :
5370:          >
5372:    ]};
      
5375: BoolFactorAllowCF( out Label falseLabel ):
5377:    [
5377:       | pNot :
5379:          Label factorFalseLabel = labelNull
      
5385:          @BoolFactorAllowCF( factorFalseLabel )
5392:          [ oTypeSNodeType
5394:             | nBooleanCFType :
                     % We have control flow, and are sitting at the point that has value false.
5395:                falseLabel = oLabelNew
5400:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
5408:                .tLabel  oEmitLabel( factorFalseLabel )
      
5416:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
5418:                .tNot
      
5420:             | * : #eNotBoolean
5429:          ]
      
5429:       | * :
5434:          @ArithExprAllowCF( falseLabel )
5441:    ];
      
5442: ArithExprAllowCF( out Label falseLabel ):
5444:    @TermAllowCF( falseLabel )
5451:    {[
5451:       | pPlus :
5453:          @PromoteToIntPop
5455:          @TermAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
5462:          @PromoteToInt
5464:          .tAddI
5466:       | pMinus :
5468:          @PromoteToIntPop
5470:          @TermAllowCF( falseLabel )
5477:          @PromoteToInt
5479:          .tSubI
5481:       | * :
5488:          >
5490:    ]};
      
5493: TermAllowCF( out Label falseLabel ):
5495:    @FactorAllowCF( falseLabel )
5502:    {[
5502:       | pTimes :
5504:          @PromoteToIntPop
5506:          @FactorAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
5513:          @PromoteToInt
5515:          .tMultI
5517:       | pDivide :
5519:          @PromoteToIntPop
5521:          @FactorAllowCF( falseLabel )
5528:          @PromoteToInt
5530:          .tDivI
5532:       | * :
5539:          >
5541:    ]};
      
5544: FactorAllowCF( out Label falseLabel ):
5546:    [
5546:       | pPlus :
5548:          @PrimaryAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
               % TO DO: unary +/- is supposed to leave expression type as-is.
5555:          @PromoteToInt
5557:       | pMinus :
5559:          @PrimaryAllowCF( falseLabel )
               % TO DO: unary +/- is supposed to leave expression type as-is.
5566:          @PromoteToInt
5568:          .tNegI
5570:       | * :
5577:          @PrimaryAllowCF( falseLabel )
5584:    ];
      
5585: PrimaryAllowCF( out Label falseLabel ):
5587:    [
5587:       | pIntLit :
5589:          .tPushConstI  oEmitInt( TOKEN_VALUE )
5596:          oTypeSPush( IntegerType )
      
5602:       | pCharLit :
5604:          .tPushConstI  oEmitInt( TOKEN_VALUE )
5611:          oTypeSPush( CharType )
      
5617:       | '(' :
5619:          @ExprAllowCF( falseLabel )
5626:          ')'
      
5628:       | pStrLit :
5630:          int addr = oStringAllocLit( CURRENT_STRLIT )     % store in global data
5639:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: do we need to create a type with the literal's length?
5647:          oTypeSPush( StringType )
      
5653:       | pIdent :
5655:          Node decl = oScopeFindRequire
5660:          @ResolveUnitRef( decl )
5667:          Node theType
      
5667:          [ oNodeType( decl )
5674:             | nFunc :
5675:                @Call( decl )
      
5682:             | nBuiltInFunc :
5684:                @CallBuiltInFunc( decl )
      
5691:             | nConst, nEnumValue :
5693:                theType = oNodeGet( decl, qType )
5706:                oTypeSPush( theType )
5712:                [ oTypeSNodeType
5714:                   | nIntegerType, nEnumType, nBooleanType :
5715:                      .tPushConstI @EmitValue( decl )
5724:                   | * :
5733:                      #eNotImplemented
5735:                ]
      
5735:             | nGlobalVar, nLocalVar, nParam :
5737:                @VarExpr( decl )
      
5744:             | * :
5761:                #eNotValue
5763:                oTypeSPush( IntegerType )
5769:          ]
      
5769:       | '@' :        % @var -- pointer to var
5771:          pIdent
      
5773:          Node decl = oScopeFindRequire
5778:          @ResolveUnitRef( decl )
5785:          Node theType
      
5785:          @LValueVar( decl )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
5792:          theType = oTypeSTop
5797:          oTypeSPop
5798:          Node ptrType = @PointerTypeTo( theType )
5809:          oTypeSPush( ptrType )
      
5815:       | * :
5830:          #eNotValue
5832:          oTypeSPush( IntegerType )
5838:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
5839: VarExpr( Node decl ):
5841:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
5854:    int uplevels = @DeclUpLevels( decl )
      
5865:    oTypeSPush( theType )
5871:    [ oTypeSNodeType
5873:       | nIntegerType, nEnumType :
5874:          [ oNodeType( decl )
5881:             | nGlobalVar :   .tPushGlobalI  @EmitValue( decl )
5891:             | nLocalVar :
5893:                [ equal_zero( uplevels )
5900:                   | true :  .tPushLocalI  @EmitValue( decl )
5910:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
5930:                ]
5930:             | nParam :
5932:                [ oNodeGetBoolean( decl, qInOut )
5942:                   | true :    % VAR param points to the var.  Auto dereference.
5943:                      [ equal_zero( uplevels )
5950:                         | true :  .tPushParamP  @EmitValue( decl )
5960:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
5980:                      ]
5980:                      .tFetchI
5982:                   | * :
5987:                      [ equal_zero( uplevels )
5994:                         | true :  .tPushParamI  @EmitValue( decl )
6004:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
6024:                      ]
6024:                ]
6024:          ]
      
6034:       | nBooleanType, nByteType, nCharType :
6036:          [ oNodeType( decl )
6043:             | nGlobalVar :   .tPushGlobalB  @EmitValue( decl )
6053:             | nLocalVar :
6055:                [ equal_zero( uplevels )
6062:                   | true :  .tPushLocalB  @EmitValue( decl )
6072:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
6092:                ]
6092:             | nParam :
6094:                [ oNodeGetBoolean( decl, qInOut )
6104:                   | true :    % VAR param points to the var.  Auto dereference.
6105:                      [ equal_zero( uplevels )
6112:                         | true :  .tPushParamP  @EmitValue( decl )
6122:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6142:                      ]
6142:                      .tFetchB
6144:                   | * :
6149:                      [ equal_zero( uplevels )
6156:                         | true :  .tPushParamB  @EmitValue( decl )
6166:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
6186:                      ]
6186:                ]
6186:          ]
      
6196:       | nStringType, nFileType :
6198:          #eNotImplemented
      
6200:       | nPointerType :
6202:          [ oNodeType( decl )
6209:             | nGlobalVar :   .tPushGlobalP @EmitValue( decl )
6219:             | nLocalVar :
6221:                [ equal_zero( uplevels )
6228:                   | true :  .tPushLocalP  @EmitValue( decl )
6238:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
6258:                ]
6258:             | nParam :
6260:                [ oNodeGetBoolean( decl, qInOut )
6270:                   | true :    % VAR param points to the var.  Auto dereference.
6271:                      [ equal_zero( uplevels )
6278:                         | true :  .tPushParamP  @EmitValue( decl )
6288:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6308:                      ]
6308:                      .tFetchP
6310:                   | * :
6315:                      [ equal_zero( uplevels )
6322:                         | true :  .tPushParamP  @EmitValue( decl )
6332:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6352:                      ]
6352:                ]
6352:          ]
6362:          [
6362:             | '^' :             % dereferenced
6364:                oTypeSPop
6365:                oTypeSPush( oNodeGet( theType, qBaseType ) )
6378:                @LValueIndexes
6380:                @FetchVar
6382:             | * :               % just ptr value alone
6387:          ]
      
6387:       | nArrayType, nRecordType :
               % compound type
               % first, push addr of start of var
6389:          [ oNodeType( decl )
6396:             | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
6406:             | nLocalVar :
6408:                [ equal_zero( uplevels )
6415:                   | true :  .tPushAddrLocal  @EmitValue( decl )
6425:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
6445:                ]
6445:             | nParam :
6447:                [ oNodeGetBoolean( decl, qInOut )
6457:                   | true :    % VAR param points to the var.  Auto dereference.
6458:                      [ equal_zero( uplevels )
6465:                         | true :  .tPushParamP  @EmitValue( decl )
6475:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6495:                      ]
6495:                   | * :
6500:                      [ equal_zero( uplevels )
6507:                         | true :  .tPushAddrParam  @EmitValue( decl )
6517:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
6537:                      ]
6537:                ]
6537:          ]
               % modify addr for subscripts, field references, etc
6547:          @LValueIndexes
               % get final value
6549:          @FetchVar
6551:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
6576: FetchVar:
6578:    [ oTypeSNodeType
6580:       | nIntegerType, nEnumType :  .tFetchI
6583:       | nBooleanType, nByteType, nCharType :  .tFetchB
6587:       | nStringType, nFileType :   #eNotImplemented
6591:       | nPointerType :             .tFetchP
6595:       | nArrayType, nRecordType :  % compound type; leave as addr
6597:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
6622: LValueIndexes:
6624:    {[
6624:       | '[' :       @ArraySubscripts
6628:       | '.' :       @RecordFieldRef
6632:       | '^' :       @PointerDeref
6636:       | * :         >
6647:    ]};
      
6650: ArraySubscripts:
6652:    [ oTypeSNodeType
6654:       | nArrayType :
6655:       | * :       #eNotArray
6662:    ]
6662:    {
6662:       [ oTypeSNodeType
6664:          | nArrayType :
6665:          | * :    #eTooManySubscripts
6672:       ]
      
            % low subscript of this dimension
6672:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
6689:       Node baseType
6689:       baseType = oNodeGet( oTypeSTop, qBaseType )
6701:       oTypeSPop
6702:       oTypeSPush( baseType )
      
6708:       @Expr
6710:       @RequireIntPop
            % adjust for low subscript
6712:       [ equal_zero( low )
6719:          | false :
6720:             .tPushConstI oEmitInt( low ) .tSubI
6730:          | * :
6735:       ]
      
            % multiply by element size
6735:       int size = oNodeGetInt( baseType, qSize )
6748:       [ equal( size, 1 )
6758:          | false :
6759:             .tPushConstI oEmitInt( size ) .tMultI
6769:          | * :
6774:       ]
      
            % update start address
6774:       .tAddPI
6776:       [
6776:          | ']' :  >
6780:          | ',' :
6782:       ]
6790:    };
      
      
6793: RecordFieldRef:
6795:    [ oTypeSNodeType
6797:       | nRecordType :
6798:       | * :    #eNotRecord
6805:    ]
6805:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
6817:    pIdent
6819:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
6824:    [ oNodeType( field )
6831:       | nRecordField :
6832:       | * :   #eNotRecordField
6839:    ]
6839:    oScopeEnd
6840:    int offset = oNodeGetInt( field, qValue )
6853:    [ equal_zero( offset )
6860:       | false :
6861:          .tPushConstI oEmitInt( offset ) .tAddPI
6871:       | * :
6876:    ]
      
         % replace the type on the type stack, with the field type
6876:    oTypeSPop
6877:    oTypeSPush( oNodeGet( field, qType ) )
6891:    ;
      
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
6891: PointerDeref:
6893:    [ oTypeSNodeType
6895:       | nPointerType :
6896:       | * :       #eNotPointer
6903:    ]
6903:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
6905:    Node theType = oTypeSTop
6910:    oTypeSPop
6911:    oTypeSPush( oNodeGet( theType, qBaseType ) )
6925:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
6925: CoerceType:
6927:    node_type nt = oTypeSNodeType
6932:    oTypeSPop
6933:    [ equal_node_type( nt, oTypeSNodeType )
6942:       | false :
               % Can we implicitly convert the value to the desired type?
6943:          [ oTypeSNodeType
6945:             | nIntegerType :
6946:                [ nt
6949:                   | nByteType :   .tCastBtoI  >>
6953:                   | * :
6958:                ]
6958:             | nByteType :
6960:                [ nt
6963:                   | nIntegerType :   .tCastItoB  >>
6967:                   | * :
6972:                ]
6972:             | * :
6979:          ]
6979:          #eTypeMismatch
6981:       | * :
6986:    ];
      
      
      % Called on first use of an extern method
      %
6987: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
6989:    int strAddr
6989:    String externalName = oNodeGetString( method, qExternalName )
7002:    [ equal_string( externalName, stringNull )
7012:       | true :
7013:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
7034:       | false :
7036:          strAddr = oStringAllocLit( externalName )
7046:    ]
7054:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
7070:    ;
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
7070: Call( Node method ):
      
         % Prior to first call, issue extern label for a called method.
         % I don't want to issue .tLabelExtern for unused methods, that seems inefficient.
7072:    [ oNodeGetBoolean( method, qExternal )
7082:       | true :
7083:          [ oNodeGetBoolean( method, qUsed )
7093:             | false :
                     % define the extern label on first use
7094:                @DefineExternLabel( method )
7101:             | * :
7106:          ]
7106:      | * :
7111:    ]
7111:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
7123:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
7136:    Node resultType
7136:    int tempOffset
      
7136:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
7153:    [ isFunc
7156:       | true :
7157:          resultType = oNodeGet( method, qType )
7170:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
7180:       | * :
7185:    ]
         
      
7185:    Node paramScope = oNodeGet( method, qParams )
7198:    int actualsSize = oNodeGetInt( paramScope, qSize )
7211:    [ cdecl
7214:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
7223:       | false :  .tAllocActuals  oEmitInt( actualsSize )
7233:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
7241:    [ greater( @DeclLevel( method ), 0 )
7256:       | true :
7257:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
7265:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
7284:          .tAssignP
7286:       | * :
7291:    ]
      
      
7291:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
7304:    Node param = oNodeIterValue( paramIter )
7314:    [
7314:       | '(' :
            
7316:          {
7316:             [ oNodeNull( param )
7323:                | true : >
7326:                | * :
7331:             ]
      
7331:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
7344:             .tPushAddrActual oEmitInt( offset )
7352:             oTypeSPush( oNodeGet( param, qType ) )
      
7365:             [ oNodeGetBoolean( param, qInOut )
7375:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
7376:                           @LValueExpr
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
7378:                           @MatchTypes
      
7380:                           .tAssignP
      
7382:                | false :  @Expr
7386:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
7388:                           [ oTypeSNodeType
7390:                              | nIntegerType, nEnumType : .tAssignI
7393:                              | nBooleanType, nByteType, nCharType :  .tAssignB
7397:                              | nStringType, nFileType :   #eNotImplemented
7401:                              | nPointerType :            .tAssignP
7405:                              | nArrayType, nRecordType :
                                       % compound types: copy value into actuals space
7407:                                  int size = oNodeGetInt( oTypeSTop, qSize )
7419:                                  .tCopy  oEmitInt( size )    % multi-word copy
7427:                           ]
7451:             ]
7459:             oTypeSPop
      
7460:             oNodeIterNext( paramIter )
7466:             param = oNodeIterValue( paramIter )
7476:             [ oNodeNull( param )
7483:                | true :  >
7486:                | false :
7488:             ]
      
7496:             ','
7498:          }
      
7500:          ')'
      
7502:       | * :
7507:    ]
      
7507:    [ oNodeNull( param )
7514:       | false :    #eMissingParameter
7517:       | * :
7522:    ]
      
7522:    [ isFunc
7525:       | true :
               % Pass result temp as an additional VAR parameter.
7526:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
7541:          .tPushAddrLocal  oEmitInt( tempOffset )
7549:          .tAssignP
7551:       | * :
7556:    ]
      
7556:    [ cdecl
7559:       | true :
7560:          .tCallCdecl  @EmitValue( method )
7569:       | false :
7571:          .tCall   @EmitValue( method )
7580:    ]
      
7588:    [ isFunc
7591:       | true :
               % push return value from temp
7592:          oTypeSPush( resultType )
      
7598:          [ oTypeSNodeType
7600:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
7609:             | nBooleanType, nByteType, nCharType :   .tPushLocalB  oEmitInt( tempOffset )
7619:             | nStringType, nFileType :  #eNotImplemented
7623:             | nPointerType :   .tPushLocalP  oEmitInt( tempOffset )
7633:             | nArrayType, nRecordType :   % compound type: push address
7635:                                .tPushAddrLocal  oEmitInt( tempOffset )
7643:          ]
7667:       | * :
7672:    ]
         
7672:    .tFreeActuals  oEmitInt( actualsSize )
7681:    ;
      
      
      % Parse a call to a built-in function, identified by the just-accepted identifier.
      % This will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
7681: CallBuiltInFunc( Node method ):
      
         % Ord(x)
7683:    [ oNodeEqual( method, BuiltIn_Ord )
7693:       | true :
               % parameter is any scalar type (including boolean, enum, char)
               % result is integer
7694:          '('
7696:          @Expr
7698:          [ oTypeSNodeType
7700:             | nIntegerType, nEnumType :
7701:             | nBooleanType, nByteType, nCharType :  .tCastBtoI
7705:             | * :  #eTypeMismatch
7720:          ]
7720:          oTypeSPop
7721:          oTypeSPush( IntegerType )
7727:          ')'
7729:          >>
7730:       | * :
7735:    ]
      
         % Chr(x)
7735:    [ oNodeEqual( method, BuiltIn_Chr )
7745:       | true :
               % parameter is integer
               % result is char
7746:          '('
7748:          @Expr
7750:          [ oTypeSNodeType
7752:             | nIntegerType :    .tCastItoB
7755:             | nByteType :
7757:             | * :  #eTypeMismatch
7766:          ]
7766:          oTypeSPop
7767:          oTypeSPush( CharType )
7773:          ')'
7775:          >>
7776:       | * :
7781:    ]
      
7781:    #eNotImplemented
7784:    ;
      
      
      % ------------------------------ Statements -----------------------------
      
7784: Statement:
7786:    [
7786:       | pWriteln :     @WritelnStmt
7790:       | pWrite :       @WriteStmt
7794:       | pReadln :      @ReadlnStmt
7798:       | pRead :        @ReadStmt
7802:       | pIf :          @IfStmt
7806:       | pWhile :       @WhileStmt
7810:       | pFor :         @ForStmt
7814:       | pRepeat :      @RepeatStmt
7818:       | pBreak :       @BreakStmt
7822:       | pContinue :    @ContinueStmt
7826:       | pBegin :       @BeginStmt
7830:       | pIdent :       @LabelOrAssignOrCallStmt
7834:       | pGoto :        @GotoStmt
7838:       | pIntLit :      % should be an integer label
7840:                        oChangeIntLitToLabelIdent
7841:                        @LabelOrAssignOrCallStmt
7843:       | * :            % null statement : don't accept any tokens
7874:    ];
      
      
7875: LabelOrAssignOrCallStmt:
7877:    Node decl = oScopeFindRequire
7882:    @ResolveUnitRef( decl )
7889:    [ oNodeType( decl )
7896:       | nLabel :                          @LabelDefinition( decl )
7904:                                           @Statement
7906:       | nProc :                           @Call( decl )
7915:       | nGlobalVar, nLocalVar, nParam :   @AssignStmt( decl )
7924:       | nFunc :                           @AssignResultStmt( decl )
7933:       | * :                               #eBadStatement
7950:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
7951: LabelDefinition( Node decl ):
7953:    [ oNodeGetBoolean( decl, qDefined )
7963:       | true :  #eAlreadyDefined
7966:       | * :
7971:    ]
7971:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
7986:    oNodeSetBoolean( decl, qDefined, true )
7998:    ':'
8001:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
8001: AssignStmt( Node decl ):
      
8003:    @LValueVar( decl )
8010:    ':=' 
8012:    @Expr
8014:    @CoerceType
8016:    @Assign
8019:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack,
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
8019: Assign:
8021:    [ oTypeSNodeType
8023:       | nIntegerType, nEnumType :  .tAssignI
8026:       | nBooleanType, nByteType, nCharType :  .tAssignB
8030:       | nStringType, nFileType :   #eNotImplemented
8034:       | nPointerType :             .tAssignP
            % compound var assigns; addrs of src, dest on stack
8038:       | nArrayType, nRecordType :
8040:           int size = oNodeGetInt( oTypeSTop, qSize )
8052:           .tCopy  oEmitInt( size )    % multi-word copy
8060:    ]
8084:    oTypeSPop
8086:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
8086: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
8088:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
8104:       | false :   #eNotCurrentFunction
8107:       | * :
8112:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
8112:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
8127:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
8140:    ':='
8142:    @Expr
8144:    @CoerceType
8146:    [ oTypeSNodeType
8148:       | nIntegerType, nEnumType : .tAssignI
8151:       | nBooleanType, nByteType, nCharType :  .tAssignB
8155:       | nStringType, nFileType :   #eNotImplemented
8159:       | nPointerType :            .tAssignP
            % compound var assigns; addrs of src, dest on stack
8163:       | nArrayType, nRecordType :
8165:           int size = oNodeGetInt( oTypeSTop, qSize )
8177:           .tCopy  oEmitInt( size )    % multi-word copy
8185:    ]
8209:    oTypeSPop
8211:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      %
8211: LValueExpr:
         % At the moment, all lvalue expressions start with a variable name.
         % I think there can also be typecasts, not supported yet.  Check standard syntax.
8213:    pIdent
8215:    Node decl = oScopeFindRequire
8220:    @ResolveUnitRef( decl )
8227:    [ oNodeType( decl )
8234:       | nGlobalVar, nLocalVar, nParam :
8235:       | * :  #eNotVar
8246:    ]
8246:    @LValueVar( decl )
8254:    ;
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
8254: LValueVar( Node decl ):
8256:    [ oNodeType( decl )
8263:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
8273:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
8284:       | nParam :
8286:          [ oNodeGetBoolean( decl, qInOut )
8296:             | true :   % VAR param points to variable.  No dereference.
8297:                        .tPushParamP @EmitValue( decl )
8306:             | * :      .tPushAddrParam @EmitValue( decl )
8320:          ]
8320:       | * :            #eNotVar
8331:    ]
      
8331:    oTypeSPush( oNodeGet( decl, qType ) )
8344:    @LValueIndexes        % handle subscripts, if any
8347:    ;
      
      
8347: IncVar( Node decl ):
8349:    @LValueVar( decl )
8356:    @RequireIntPop
8358:    @VarExpr( decl )
8365:    oTypeSPop
8366:    .tIncI
8368:    .tAssignI;
      
8371: DecVar( Node decl ):
8373:    @LValueVar( decl )
8380:    @RequireIntPop
8382:    @VarExpr( decl )
8389:    oTypeSPop
8390:    .tDecI
8392:    .tAssignI;
      
      
8395: IfStmt:
8397:    Label falseLabel = labelNull
      
8403:    @BooleanExprControlFlow( falseLabel )
8410:    pThen
8412:    @Statement
8414:    [
8414:       | pElse :
8416:          Label doneLabel = oLabelNew
      
8421:          .tJump  oEmitLabel( doneLabel )
8429:          .tLabel oEmitLabel( falseLabel )
8437:          @Statement
8439:          .tLabel oEmitLabel( doneLabel )
      
8447:       | * :
8452:          .tLabel oEmitLabel( falseLabel )
8460:    ];
      
      
8461: ForStmt:
8463:    pIdent
      
8465:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
8470:    @LValueVar( decl )
8477:    @RequireIntPop
      
8479:    ':='
      
8481:    @Expr
8483:    @RequireIntPop
8485:    .tAssignI
      
8487:    Label breakLabel = oLabelNew
      
8492:    Label checkLabel = oLabelNew
8497:    .tJump  oEmitLabel( checkLabel )
      
8505:    Label continueLabel = oLabelNew
8510:    .tLabel  oEmitLabel( continueLabel )
8518:    [
8518:       | pTo :
8520:          @IncVar( decl )
8527:          .tLabel  oEmitLabel( checkLabel )
8535:          @VarExpr( decl )  oTypeSPop
8543:          @Expr
8545:          @RequireIntPop
8547:          .tGreaterI
8549:          .tJumpTrue  oEmitLabel( breakLabel )
8557:       | pDownto :
8559:          @DecVar( decl )
8566:          .tLabel  oEmitLabel( checkLabel )
8574:          @VarExpr( decl )  oTypeSPop
8582:          @Expr
8584:          @RequireIntPop
8586:          .tLessI
8588:          .tJumpTrue  oEmitLabel( breakLabel )
8596:    ]
8604:    oLoopPush( continueLabel, breakLabel )
8613:    pDo
8615:    @Statement
8617:    .tJump  oEmitLabel( continueLabel )
8625:    .tLabel  oEmitLabel( breakLabel )
8633:    oLoopPop;
      
      
8635: RepeatStmt:
8637:    Label continueLabel = oLabelNew
8642:    .tLabel  oEmitLabel( continueLabel )
      
8650:    Label breakLabel = oLabelNew
      
8655:    oLoopPush( continueLabel, breakLabel )
8664:    @Statement
8666:    {[
8666:       | ';' :
8668:          @Statement
8670:       | pUntil :
8672:          Label falseLabel
8672:          @BooleanExprControlFlow( falseLabel )
8679:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
8693:          >
8695:    ]}
8705:    .tLabel  oEmitLabel( breakLabel )
8713:    oLoopPop;
      
      
8715: WhileStmt:
8717:    Label continueLabel = oLabelNew
8722:    .tLabel  oEmitLabel( continueLabel )
      
8730:    Label breakLabel
8730:    @BooleanExprControlFlow( breakLabel )
      
8737:    oLoopPush( continueLabel, breakLabel )
8746:    pDo
8748:    @Statement
8750:    .tJump  oEmitLabel( continueLabel )
8758:    .tLabel  oEmitLabel( breakLabel )
8766:    oLoopPop;
      
      
8768: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
8770:    [ equal_label( oLoopContinueLabel, labelNull )
8779:       | true :
8780:          #eNotInALoop
8782:       | false :
8784:          .tJump  oEmitLabel( oLoopContinueLabel )
8791:    ];
      
      
8800: BreakStmt:
8802:    [ equal_label( oLoopBreakLabel, labelNull )
8811:       | true :
8812:          #eNotInALoop
8814:       | false :
8816:          .tJump  oEmitLabel( oLoopBreakLabel )
8823:    ];
      
      
8832: GotoStmt:
8834:    [
8834:       | pIdent :
8836:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
8838:          oChangeIntLitToLabelIdent
8839:    ]
      
         % Some pascals have rules about where you can jump (to a sibling statement or
         % higher level statement in the block, but not into a lower lower level statement.)
         % fpc just says "jumping into a nested statement can have strange effects."
         % I'm going to follow that and not prohibit any goto, as long as it's in the same block.
      
         % Label must be declared in the same block (same scope) it is used.
         % Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
8847:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
8856:    oNodeSetBoolean( decl, qUsed, true )
8868:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
8884:    ;
      
      
8884: BeginStmt:
8886:    @Statement
8888:    {[
8888:       | ';' :   @Statement
8892:       | pEnd :  >
8896:    ]};
      
      
8907: WritelnStmt:
8909:    @WriteStmt
8911:    .tWriteCR;
      
      
8914: WriteStmt:
8916:    [
8916:       | '(' :
8918:          {
8918:             @Expr
8920:             [ oTypeSNodeType
8922:                | nIntegerType :             .tWriteI
8925:                | nBooleanType :             .tWriteBool
8929:                | nByteType :                .tCastBtoI  .tWriteI
8935:                | nCharType :                .tWriteChar
8939:                | nStringType :              .tWriteStr
8943:                | nFileType :                #eNotImplemented
8947:                | nEnumType :
                        % write name via table lookup
8949:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
8963:                   .tWriteEnum
8965:                | nPointerType :             .tWriteP
8969:                | * :                        #eNotAllowed
8990:             ]
8990:             oTypeSPop
8991:             [
8991:                | ')' : >
8995:                | ',' :
8997:             ]
9005:          }
9007:       | * :
9012:    ];
      
      
9013: ReadlnStmt:      % ***
         % TO DO
9016:    ;
      
9016: ReadStmt:
         % TO DO
9019:    ;
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
9019: ScopeLevel >> int:
9021:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
9031: DeclLevel( Node decl ) >> int:
9033:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
9051: DeclUpLevels( Node decl ) >> int:
9053:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
9069: MatchTypes:
9071:    node_type nt = oTypeSNodeType
9076:    oTypeSPop
9077:    [ equal_node_type( nt, oTypeSNodeType )
9086:       | false :
9087:          #eTypeMismatch
9089:       | * :
9094:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
9095: RequireIntPop:
9097:    [ oTypeSNodeType
9099:       | nIntegerType :
9100:       | * :          #eNotInteger
9107:    ]
9107:    oTypeSPop;
      
9109: RequireInt:
9111:    [ oTypeSNodeType
9113:       | nIntegerType :
9114:       | * :          #eNotInteger
9121:    ];
      
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Pop the type stack.
      %
9122: PromoteToIntPop:
9124:    [ oTypeSNodeType
9126:       | nIntegerType :
9127:       | nByteType :        .tCastBtoI
9131:       | * :                #eNotInteger
9140:    ]
9140:    oTypeSPop;
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Leave integer on the type stack.
      %
9142: PromoteToInt:
9144:    [ oTypeSNodeType
9146:       | nIntegerType :
9147:       | nByteType :        .tCastBtoI
9151:                            oTypeSPop
9152:                            oTypeSPush( IntegerType )
9158:       | * :                #eNotInteger
9167:    ];
      
      
      % If the top value is implicitly convertable to integer, do so.
      % Otherwise leave it as-is.
      %
9168: PromoteToIntOptional:
9170:    [ oTypeSNodeType
9172:       | nByteType :        .tCastBtoI
9175:                            oTypeSPop
9176:                            oTypeSPush( IntegerType )
9182:       | * :
9187:    ];
      
      
      
      
9188: RequireBoolPop:
9190:    [ oTypeSNodeType
9192:       | nBooleanType :
9193:       | * :          #eNotBoolean
9200:    ]
9200:    oTypeSPop;
      
9202: RequireBool:
9204:    [ oTypeSNodeType
9206:       | nBooleanType :
9207:       | * :          #eNotBoolean
9214:    ];
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
9215: newType( node_type nt, int size ) >> Node:
9217:   Node node = oNodeNew( nt )
9227:   oNodeSetInt( node, qSize, size )
9239:   oTypeAdd( node )
9245:   >> node
9249:   ;
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
9249: newIdent( node_type nt, int id ) >> Node:
9251:   Node t = oNodeNew( nt )
9261:   oNodeSetInt( t, qIdent, id )
9273:   >> t
9277:   ;
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
9277: PointerTypeTo( Node theType ) >> Node:
9279:    Node ptrType = oNodeGet( theType, qPointerType )
9292:    [ oNodeNull( ptrType )
9299:       | true :
9300:          ptrType = oNodeNew( nPointerType )
9310:          oNodeSet( ptrType, qBaseType, theType )
9322:          oNodeSetInt( ptrType, qSize, 8 )
9334:          oTypeAdd( ptrType )
9340:          oNodeSet( theType, qPointerType, ptrType )
9352:       | * :
9357:    ]
9357:    >> ptrType;
      
      
      % Return the low value of an ordinal type
      %
9361: OrdinalLow( Node theType ) >> int:
9363:    [ oNodeType( theType )
9370:       | nIntegerType :  >> oMININT
9373:       | nBooleanType :  >> 0
9378:       | nCharType :     >> 0
9383:       | nEnumType :
9385:          Node enumScope = oNodeGet( theType, qScope )
9398:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
9415:          >> oNodeGetInt( first, qValue )
9425:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
9437:       | * :             #eNotOrdinalType
9452:                         >> 0
9455:    ];
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
9456: EmitValue( Node decl ):
9458:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
9472: installBuiltIns:
      
         % install built-in types
9474:    FileType = @newType( nFileType, 4 )
9488:    IntegerType = @newType( nIntegerType, 4 )
9502:    BooleanType = @newType( nBooleanType, 1 )
9516:    BooleanCFType = @newType( nBooleanCFType, 1 )
9530:    CharType = @newType( nCharType, 1 )
9544:    ByteType = @newType( nByteType, 1 )
9558:    StringType = @newType( nStringType, 256 )    % string with default length 256
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oIdAdd_File
      
9572:    Node t
      
9572:    t = @newIdent( nTypeDecl, oIdAdd_File )
9585:    oNodeSet( t, qType, FileType )
9597:    oScopeDeclare( t )
      
9603:    t = @newIdent( nTypeDecl, oIdAdd_Integer )
9616:    oNodeSet( t, qType, IntegerType )
9628:    oScopeDeclare( t )
      
9634:    t = @newIdent( nTypeDecl, oIdAdd_Boolean )
9647:    oNodeSet( t, qType, BooleanType )
9659:    oScopeDeclare( t )
      
9665:    t = @newIdent( nTypeDecl, oIdAdd_Char )
9678:    oNodeSet( t, qType, CharType )
9690:    oScopeDeclare( t )
      
9696:    t = @newIdent( nTypeDecl, oIdAdd_Byte )
9709:    oNodeSet( t, qType, ByteType )
9721:    oScopeDeclare( t )
      
9727:    t = @newIdent( nTypeDecl, oIdAdd_String )
9740:    oNodeSet( t, qType, StringType )
9752:    oScopeDeclare( t )
      
         % Built-in constants
      
9758:    t = @newIdent( nConst, oIdAdd_True )
9771:    oNodeSet( t, qType, BooleanType )
9783:    oNodeSetInt( t, qValue, 1 )
9795:    oScopeDeclare( t )
      
9801:    t = @newIdent( nConst, oIdAdd_False )
9814:    oNodeSet( t, qType, BooleanType )
9826:    oNodeSetInt( t, qValue, 0 )
9838:    oScopeDeclare( t )
      
         % Built-in methods
         % These aren't declared like normal methods, because they may have
         % special rules for parameter types (e.g. any scalar type).
         % Calls to these methods will be handled specially by the compiler.
      
9844:    BuiltIn_Ord = @newIdent( nBuiltInFunc, oIdAdd_Ord )
9857:    oScopeDeclare( BuiltIn_Ord )
9863:    BuiltIn_Chr = @newIdent( nBuiltInFunc, oIdAdd_Chr )
9876:    oScopeDeclare( BuiltIn_Chr )
9883:    ;
      
9883: end
      
9883: 

Generated code:

   0: oGlobalSpace 13
   2: oLocalSpace 5
   4: oGetAddrGlobal 1
   6: oPushResult
   7: oWorkspaceNew
   8: oAssign
   9: oSetResult 0
  11: oPushResult
  12: oSetResult 0
  14: oPushResult
  15: oScopeBegin
  16: oPop 2
  18: oGetAddrLocal 2
  20: oPushResult
  21: oScopeCurrent
  22: oAssign
  23: oCall 9472
  25: oEmit 54
  27: oSetResult 0
  29: oPushResult
  30: oEmitInt
  31: oPop 1
  33: oGetAddrLocal 3
  35: oPushResult
  36: oLabelNew
  37: oAssign
  38: oEmit 48
  40: oSetResult 0
  42: oPushResult
  43: oEmitInt
  44: oPop 1
  46: oEmit 51
  48: oGetLocal 3
  50: oPushResult
  51: oEmitLabel
  52: oPop 1
  54: oEmit 50
  56: oSetResult 0
  58: oPushResult
  59: oEmitInt
  60: oPop 1
  62: oEmit 53
  64: oInput 28
  66: oInput 0
  68: oGetAddrLocal 4
  70: oPushResult
  71: oSetResult 4
  73: oPushResult
  74: oNodeNew
  75: oPop 1
  77: oAssign
  78: oGetLocal 4
  80: oPushResult
  81: oSetResult 4
  83: oPushResult
  84: LAST_ID
  85: oPushResult
  86: oNodeSetInt
  87: oPop 3
  89: oGetGlobal 1
  91: oPushResult
  92: oSetResult 2
  94: oPushResult
  95: oGetLocal 4
  97: oPushResult
  98: oNodeSet
  99: oPop 3
 101: oInputChoice 175
 103: oInput 0
 105: oGetAddrLocal 1
 107: oPushResult
 108: oSetResult 19
 110: oPushResult
 111: LAST_ID
 112: oPushResult
 113: oCall 9249
 115: oPop 2
 117: oAssign
 118: oGetLocal 1
 120: oPushResult
 121: oSetResult 21
 123: oPushResult
 124: oGetGlobal 4
 126: oPushResult
 127: oNodeSet
 128: oPop 3
 130: oGetLocal 1
 132: oPushResult
 133: oScopeDeclareAlloc
 134: oPop 1
 136: oInput 13
 138: oInput 0
 140: oGetAddrLocal 1
 142: oPushResult
 143: oSetResult 19
 145: oPushResult
 146: LAST_ID
 147: oPushResult
 148: oCall 9249
 150: oPop 2
 152: oAssign
 153: oGetLocal 1
 155: oPushResult
 156: oSetResult 21
 158: oPushResult
 159: oGetGlobal 4
 161: oPushResult
 162: oNodeSet
 163: oPop 3
 165: oGetLocal 1
 167: oPushResult
 168: oScopeDeclareAlloc
 169: oPop 1
 171: oInput 15
 173: oJumpForward 178
 175: Choice Lookup Table
          14    103
 178: oInput 5
 180: oInputChoice 191
 182: oGetLocal 4
 184: oPushResult
 185: oCall 299
 187: oPop 1
 189: oJumpForward 194
 191: Choice Lookup Table
          57    182
 194: oGetLocal 4
 196: oPushResult
 197: oCall 452
 199: oPop 1
 201: oSetResult 0
 203: oPushResult
 204: oSetResult 0
 206: oPushResult
 207: oScopeBegin
 208: oPop 2
 210: oGetAddrGlobal 2
 212: oPushResult
 213: oScopeCurrent
 214: oAssign
 215: oSetResult 0
 217: oPushResult
 218: oSetResult 1
 220: oPushResult
 221: oScopeBegin
 222: oPop 2
 224: oScopeCurrent
 225: oPushResult
 226: oSetResult 16
 228: oPushResult
 229: oGetGlobal 2
 231: oPushResult
 232: oNodeSet
 233: oPop 3
 235: oGetAddrGlobal 3
 237: oPushResult
 238: oScopeCurrent
 239: oAssign
 240: oGetLocal 4
 242: oPushResult
 243: oSetResult 7
 245: oPushResult
 246: oGetGlobal 3
 248: oPushResult
 249: oNodeSet
 250: oPop 3
 252: oScopeEnd
 253: oSetResult 20
 255: oPushResult
 256: oCall 1388
 258: oPop 1
 260: oGetGlobal 3
 262: oPushResult
 263: oScopeEnter
 264: oPop 1
 266: oGetAddrLocal 5
 268: oPushResult
 269: oSetResult 1
 271: oAssign
 272: oGetLocal 3
 274: oPushResult
 275: oGetGlobal 2
 277: oPushResult
 278: oGetLocal 5
 280: oPushResult
 281: oCall 1709
 283: oPop 3
 285: oScopeEnd
 286: oInput 20
 288: oCall 1444
 290: oScopeEnd
 291: oGetLocal 4
 293: oPushResult
 294: oCall 514
 296: oPop 1
 298: oReturn
 299: oLocalSpace 2
 301: oInput 0
 303: oGetAddrLocal 1
 305: oPushResult
 306: LAST_ID
 307: oPushResult
 308: oCall 593
 310: oPop 1
 312: oAssign
 313: oGetLocal 1
 315: oPushResult
 316: oSetResult 0
 318: oPushResult
 319: equal_node
 320: oPop 2
 322: oChoice 392
 324: oGetParam 1
 326: oPushResult
 327: oSetResult 5
 329: oPushResult
 330: oGetLocal 1
 332: oPushResult
 333: oNodeAddLast
 334: oPop 3
 336: oGetAddrLocal 2
 338: oPushResult
 339: oSetResult 10
 341: oPushResult
 342: oNodeNew
 343: oPop 1
 345: oAssign
 346: oGetLocal 2
 348: oPushResult
 349: oSetResult 4
 351: oPushResult
 352: oGetLocal 1
 354: oPushResult
 355: oSetResult 4
 357: oPushResult
 358: oNodeGetInt
 359: oPop 2
 361: oPushResult
 362: oNodeSetInt
 363: oPop 3
 365: oGetLocal 2
 367: oPushResult
 368: oSetResult 9
 370: oPushResult
 371: oGetLocal 1
 373: oPushResult
 374: oSetResult 9
 376: oPushResult
 377: oNodeGet
 378: oPop 2
 380: oPushResult
 381: oNodeSet
 382: oPop 3
 384: oGetLocal 2
 386: oPushResult
 387: oScopeDeclare
 388: oPop 1
 390: oJumpForward 395
 392: Choice Lookup Table
           0    324
 395: oInputChoice 399
 397: oJumpForward 404
 399: Choice Lookup Table
          13    397
 402: oJumpForward 406
 404: oJumpBack 301
 406: oInput 5
 408: oReturn
 409: oLocalSpace 1
 411: oGetFromParam 1
 413: oPushResult
 414: oNodeType
 415: oPop 1
 417: oChoice 448
 419: oGetAddrLocal 1
 421: oPushResult
 422: oGetFromParam 1
 424: oPushResult
 425: oSetResult 9
 427: oPushResult
 428: oNodeGet
 429: oPop 2
 431: oAssign
 432: oInput 20
 434: oInput 0
 436: oGetParam 1
 438: oPushResult
 439: oGetLocal 1
 441: oPushResult
 442: oScopeFindRequireInScope
 443: oPop 1
 445: oAssign
 446: oJumpForward 451
 448: Choice Lookup Table
          10    419
 451: oReturn
 452: oLocalSpace 2
 454: oGetAddrLocal 1
 456: oPushResult
 457: oGetParam 1
 459: oPushResult
 460: oSetResult 5
 462: oPushResult
 463: oNodeGetIter
 464: oPop 2
 466: oAssign
 467: oGetAddrLocal 2
 469: oPushResult
 470: oGetLocal 1
 472: oPushResult
 473: oNodeIterValue
 474: oPop 1
 476: oAssign
 477: oGetLocal 2
 479: oPushResult
 480: oNodeNull
 481: oPop 1
 483: oChoice 500
 485: oGetLocal 2
 487: oPushResult
 488: oSetResult 9
 490: oPushResult
 491: oNodeGet
 492: oPop 2
 494: oPushResult
 495: oScopeEnter
 496: oPop 1
 498: oJumpForward 505
 500: Choice Lookup Table
           0    485
 503: oJumpForward 513
 505: oGetAddrLocal 1
 507: oPushResult
 508: oNodeIterNext
 509: oPop 1
 511: oJumpBack 467
 513: oReturn
 514: oLocalSpace 2
 516: oGetAddrLocal 1
 518: oPushResult
 519: oGetParam 1
 521: oPushResult
 522: oSetResult 5
 524: oPushResult
 525: oNodeGetIterLast
 526: oPop 2
 528: oAssign
 529: oGetAddrLocal 2
 531: oPushResult
 532: oGetLocal 1
 534: oPushResult
 535: oNodeIterValue
 536: oPop 1
 538: oAssign
 539: oGetLocal 2
 541: oPushResult
 542: oNodeNull
 543: oPop 1
 545: oChoice 579
 547: oScopeCurrent
 548: oPushResult
 549: oGetLocal 2
 551: oPushResult
 552: oSetResult 9
 554: oPushResult
 555: oNodeGet
 556: oPop 2
 558: oPushResult
 559: oNodeEqual
 560: oPop 2
 562: oChoice 570
 564: oJumpForward 576
 566: oError 25
 568: oJumpForward 576
 570: Choice Lookup Table
           0    566
           1    564
 575: oEndChoice
 576: oScopeEnd
 577: oJumpForward 584
 579: Choice Lookup Table
           0    547
 582: oJumpForward 592
 584: oGetAddrLocal 1
 586: oPushResult
 587: oNodeIterPrev
 588: oPop 1
 590: oJumpBack 529
 592: oReturn
 593: oLocalSpace 2
 595: oGetAddrLocal 1
 597: oPushResult
 598: oGetGlobal 1
 600: oPushResult
 601: oSetResult 1
 603: oPushResult
 604: oSetResult 4
 606: oPushResult
 607: oGetParam 1
 609: oPushResult
 610: oNodeFind
 611: oPop 4
 613: oAssign
 614: oGetLocal 1
 616: oPushResult
 617: oSetResult 0
 619: oPushResult
 620: equal_node
 621: oPop 2
 623: oChoice 630
 625: oGetLocal 1
 627: oReturn
 628: oJumpForward 633
 630: Choice Lookup Table
           0    625
 633: oGetAddrLocal 2
 635: oPushResult
 636: oGetParam 1
 638: oPushResult
 639: oIncludeUnitFile
 640: oPop 1
 642: oAssign
 643: oGetLocal 2
 645: oChoice 654
 647: oError 24
 649: oSetResult 0
 651: oReturn
 652: oJumpForward 657
 654: Choice Lookup Table
           0    647
 657: oGetAddrLocal 1
 659: oPushResult
 660: oCall 668
 662: oAssign
 663: oIncludeEnd
 664: oGetLocal 1
 666: oReturn
 667: oReturn
 668: oLocalSpace 2
 670: oInput 58
 672: oInput 0
 674: oGetAddrLocal 1
 676: oPushResult
 677: oSetResult 5
 679: oPushResult
 680: oNodeNew
 681: oPop 1
 683: oAssign
 684: oGetLocal 1
 686: oPushResult
 687: oSetResult 4
 689: oPushResult
 690: LAST_ID
 691: oPushResult
 692: oNodeSetInt
 693: oPop 3
 695: oGetAddrLocal 2
 697: oPushResult
 698: oSetResult 6
 700: oPushResult
 701: oNodeNew
 702: oPop 1
 704: oAssign
 705: oGetLocal 2
 707: oPushResult
 708: oSetResult 4
 710: oPushResult
 711: LAST_ID
 712: oPushResult
 713: oNodeSetInt
 714: oPop 3
 716: oGetLocal 1
 718: oPushResult
 719: oSetResult 8
 721: oPushResult
 722: oGetLocal 2
 724: oPushResult
 725: oNodeSet
 726: oPop 3
 728: oInput 5
 730: oInput 59
 732: oInputChoice 743
 734: oGetLocal 1
 736: oPushResult
 737: oCall 299
 739: oPop 1
 741: oJumpForward 746
 743: Choice Lookup Table
          57    734
 746: oGetLocal 1
 748: oPushResult
 749: oCall 452
 751: oPop 1
 753: oSetResult 0
 755: oPushResult
 756: oSetResult 0
 758: oPushResult
 759: oScopeBegin
 760: oPop 2
 762: oGetLocal 1
 764: oPushResult
 765: oSetResult 9
 767: oPushResult
 768: oScopeCurrent
 769: oPushResult
 770: oNodeSet
 771: oPop 3
 773: oGetAddrGlobal 2
 775: oPushResult
 776: oScopeCurrent
 777: oAssign
 778: oSetResult 0
 780: oPushResult
 781: oSetResult 1
 783: oPushResult
 784: oScopeBegin
 785: oPop 2
 787: oGetAddrGlobal 3
 789: oPushResult
 790: oScopeCurrent
 791: oAssign
 792: oGetLocal 1
 794: oPushResult
 795: oSetResult 13
 797: oPushResult
 798: oGetGlobal 3
 800: oPushResult
 801: oNodeSet
 802: oPop 3
 804: oScopeEnd
 805: oGetLocal 1
 807: oPushResult
 808: oCall 989
 810: oPop 1
 812: oScopeEnd
 813: oInput 60
 815: oInputChoice 826
 817: oGetLocal 2
 819: oPushResult
 820: oCall 299
 822: oPop 1
 824: oJumpForward 829
 826: Choice Lookup Table
          57    817
 829: oGetLocal 2
 831: oPushResult
 832: oCall 452
 834: oPop 1
 836: oGetLocal 1
 838: oPushResult
 839: oSetResult 9
 841: oPushResult
 842: oNodeGet
 843: oPop 2
 845: oPushResult
 846: oScopeEnter
 847: oPop 1
 849: oSetResult 0
 851: oPushResult
 852: oSetResult 0
 854: oPushResult
 855: oScopeBegin
 856: oPop 2
 858: oGetLocal 1
 860: oPushResult
 861: oSetResult 10
 863: oPushResult
 864: oScopeCurrent
 865: oPushResult
 866: oNodeSet
 867: oPop 3
 869: oScopeCurrent
 870: oPushResult
 871: oSetResult 16
 873: oPushResult
 874: oGetLocal 1
 876: oPushResult
 877: oSetResult 9
 879: oPushResult
 880: oNodeGet
 881: oPop 2
 883: oPushResult
 884: oNodeSet
 885: oPop 3
 887: oGetAddrGlobal 2
 889: oPushResult
 890: oScopeCurrent
 891: oAssign
 892: oGetLocal 1
 894: oPushResult
 895: oCall 1074
 897: oPop 1
 899: oInputChoice 913
 901: oGetLocal 1
 903: oPushResult
 904: oSetResult 1
 906: oPushResult
 907: oCall 1084
 909: oPop 2
 911: oJumpForward 926
 913: Choice Lookup Table
          61    901
 916: oGetLocal 1
 918: oPushResult
 919: oSetResult 0
 921: oPushResult
 922: oCall 1084
 924: oPop 2
 926: oInputChoice 940
 928: oGetLocal 1
 930: oPushResult
 931: oSetResult 1
 933: oPushResult
 934: oCall 1270
 936: oPop 2
 938: oJumpForward 953
 940: Choice Lookup Table
          62    928
 943: oGetLocal 1
 945: oPushResult
 946: oSetResult 0
 948: oPushResult
 949: oCall 1270
 951: oPop 2
 953: oInput 36
 955: oInput 20
 957: oScopeEnd
 958: oScopeEnd
 959: oGetLocal 2
 961: oPushResult
 962: oCall 514
 964: oPop 1
 966: oGetLocal 1
 968: oPushResult
 969: oCall 514
 971: oPop 1
 973: oGetGlobal 1
 975: oPushResult
 976: oSetResult 1
 978: oPushResult
 979: oGetLocal 1
 981: oPushResult
 982: oNodeAddLast
 983: oPop 3
 985: oGetLocal 1
 987: oReturn
 988: oReturn
 989: oLocalSpace 2
 991: oInputChoice 1058
 993: oCall 2982
 995: oJumpForward 1071
 997: oCall 3051
 999: oJumpForward 1071
1001: oSetResult 20
1003: oPushResult
1004: oCall 3107
1006: oPop 1
1008: oJumpForward 1071
1010: oGetAddrLocal 1
1012: oPushResult
1013: oCall 1949
1015: oAssign
1016: oInputChoice 1029
1018: oGetLocal 1
1020: oPushResult
1021: oCall 1887
1023: oPop 1
1025: oInput 5
1027: oJumpForward 1032
1029: Choice Lookup Table
          68   1018
1032: oJumpForward 1071
1034: oGetAddrLocal 2
1036: oPushResult
1037: oCall 2323
1039: oAssign
1040: oInputChoice 1053
1042: oGetLocal 2
1044: oPushResult
1045: oCall 1887
1047: oPop 1
1049: oInput 5
1051: oJumpForward 1056
1053: Choice Lookup Table
          68   1042
1056: oJumpForward 1071
1058: Choice Lookup Table
          30   1034
          29   1010
          33   1001
          32    997
          31    993
1069: oJumpForward 1073
1071: oJumpBack 991
1073: oReturn
1074: oLocalSpace 0
1076: oSetResult 20
1078: oPushResult
1079: oCall 1388
1081: oPop 1
1083: oReturn
1084: oLocalSpace 5
1086: oGetAddrLocal 1
1088: oPushResult
1089: oLabelNew
1090: oAssign
1091: oEmit 58
1093: oGetLocal 1
1095: oPushResult
1096: oEmitLabel
1097: oPop 1
1099: oGetParam 2
1101: oPushResult
1102: oSetResult 11
1104: oPushResult
1105: oGetLocal 1
1107: oPushResult
1108: oNodeSetLabel
1109: oPop 3
1111: oEmit 54
1113: oGetAddrLocal 2
1115: oPushResult
1116: Here
1117: oAssign
1118: oEmit 68
1120: oGetAddrLocal 3
1122: oPushResult
1123: oGetParam 2
1125: oPushResult
1126: oSetResult 9
1128: oPushResult
1129: oNodeGet
1130: oPop 2
1132: oAssign
1133: oGetAddrLocal 4
1135: oPushResult
1136: oGetLocal 3
1138: oPushResult
1139: oSetResult 19
1141: oPushResult
1142: oNodeGetCode
1143: oPop 2
1145: oAssign
1146: oGetLocal 4
1148: oPushResult
1149: oEmitCode
1150: oPop 1
1152: oGetLocal 3
1154: oPushResult
1155: oSetResult 19
1157: oPushResult
1158: oSetResult 0
1160: oPushResult
1161: oNodeSetCode
1162: oPop 3
1164: oGetAddrLocal 3
1166: oPushResult
1167: oGetParam 2
1169: oPushResult
1170: oSetResult 10
1172: oPushResult
1173: oNodeGet
1174: oPop 2
1176: oAssign
1177: oGetAddrLocal 4
1179: oPushResult
1180: oGetLocal 3
1182: oPushResult
1183: oSetResult 19
1185: oPushResult
1186: oNodeGetCode
1187: oPop 2
1189: oAssign
1190: oGetLocal 4
1192: oPushResult
1193: oEmitCode
1194: oPop 1
1196: oGetLocal 3
1198: oPushResult
1199: oSetResult 19
1201: oPushResult
1202: oSetResult 0
1204: oPushResult
1205: oNodeSetCode
1206: oPop 3
1208: oGetParam 2
1210: oPushResult
1211: oSetResult 13
1213: oPushResult
1214: oNodeGet
1215: oPop 2
1217: oPushResult
1218: oScopeEnter
1219: oPop 1
1221: oGetParam 1
1223: oChoice 1242
1225: oCall 7784
1227: oInputChoice 1233
1229: oCall 7784
1231: oJumpForward 1238
1233: Choice Lookup Table
           5   1229
1236: oJumpForward 1240
1238: oJumpBack 1227
1240: oJumpForward 1245
1242: Choice Lookup Table
           1   1225
1245: oEmit 53
1247: oGetAddrLocal 5
1249: oPushResult
1250: oScopeCurrent
1251: oPushResult
1252: oSetResult 17
1254: oPushResult
1255: oNodeGetInt
1256: oPop 2
1258: oAssign
1259: oGetLocal 2
1261: oPushResult
1262: oGetLocal 5
1264: oPushResult
1265: oPatch
1266: oPop 2
1268: oScopeEnd
1269: oReturn
1270: oLocalSpace 3
1272: oGetAddrLocal 1
1274: oPushResult
1275: oLabelNew
1276: oAssign
1277: oEmit 58
1279: oGetLocal 1
1281: oPushResult
1282: oEmitLabel
1283: oPop 1
1285: oGetParam 2
1287: oPushResult
1288: oSetResult 12
1290: oPushResult
1291: oGetLocal 1
1293: oPushResult
1294: oNodeSetLabel
1295: oPop 3
1297: oEmit 54
1299: oGetAddrLocal 2
1301: oPushResult
1302: Here
1303: oAssign
1304: oEmit 68
1306: oSetResult 0
1308: oPushResult
1309: oSetResult 1
1311: oPushResult
1312: oScopeBegin
1313: oPop 2
1315: oGetParam 1
1317: oChoice 1336
1319: oCall 7784
1321: oInputChoice 1327
1323: oCall 7784
1325: oJumpForward 1332
1327: Choice Lookup Table
           5   1323
1330: oJumpForward 1334
1332: oJumpBack 1321
1334: oJumpForward 1339
1336: Choice Lookup Table
           1   1319
1339: oEmit 53
1341: oGetAddrLocal 3
1343: oPushResult
1344: oScopeCurrent
1345: oPushResult
1346: oSetResult 17
1348: oPushResult
1349: oNodeGetInt
1350: oPop 2
1352: oAssign
1353: oGetLocal 2
1355: oPushResult
1356: oGetLocal 3
1358: oPushResult
1359: oPatch
1360: oPop 2
1362: oScopeEnd
1363: oReturn
1364: oLocalSpace 0
1366: oGetParam 2
1368: oPushResult
1369: oCall 1388
1371: oPop 1
1373: oGetParam 1
1375: oPushResult
1376: oScopeCurrent
1377: oPushResult
1378: oSetResult 0
1380: oPushResult
1381: oCall 1709
1383: oPop 3
1385: oCall 1444
1387: oReturn
1388: oLocalSpace 0
1390: oInputChoice 1421
1392: oCall 2982
1394: oJumpForward 1436
1396: oCall 3051
1398: oJumpForward 1436
1400: oGetParam 1
1402: oPushResult
1403: oCall 3107
1405: oPop 1
1407: oJumpForward 1436
1409: oCall 3338
1411: oJumpForward 1436
1413: oCall 2205
1415: oJumpForward 1436
1417: oCall 2640
1419: oJumpForward 1436
1421: Choice Lookup Table
          30   1417
          29   1413
          34   1409
          33   1400
          32   1396
          31   1392
1434: oJumpForward 1438
1436: oJumpBack 1390
1438: oCall 1441
1440: oReturn
1441: oLocalSpace 0
1443: oReturn
1444: oLocalSpace 2
1446: oGetAddrLocal 1
1448: oPushResult
1449: oScopeCurrent
1450: oPushResult
1451: oSetResult 15
1453: oPushResult
1454: oNodeGetIter
1455: oPop 2
1457: oAssign
1458: oGetAddrLocal 2
1460: oPushResult
1461: oGetLocal 1
1463: oPushResult
1464: oNodeIterValue
1465: oPop 1
1467: oAssign
1468: oGetLocal 2
1470: oPushResult
1471: oNodeNull
1472: oPop 1
1474: oChoice 1478
1476: oJumpForward 1483
1478: Choice Lookup Table
           0   1476
1481: oJumpForward 1538
1483: oGetLocal 2
1485: oPushResult
1486: oNodeType
1487: oPop 1
1489: oChoice 1527
1491: oGetLocal 2
1493: oPushResult
1494: oSetResult 34
1496: oPushResult
1497: oNodeGetBoolean
1498: oPop 2
1500: oChoice 1522
1502: oGetLocal 2
1504: oPushResult
1505: oSetResult 28
1507: oPushResult
1508: oNodeGetBoolean
1509: oPop 2
1511: oChoice 1517
1513: oError 27
1515: oJumpForward 1520
1517: Choice Lookup Table
           1   1513
1520: oJumpForward 1525
1522: Choice Lookup Table
           0   1502
1525: oJumpForward 1530
1527: Choice Lookup Table
          24   1491
1530: oGetAddrLocal 1
1532: oPushResult
1533: oNodeIterNext
1534: oPop 1
1536: oJumpBack 1458
1538: oReturn
1539: oLocalSpace 2
1541: oGetAddrLocal 1
1543: oPushResult
1544: oGetGlobal 1
1546: oPushResult
1547: oSetResult 1
1549: oPushResult
1550: oNodeGetIter
1551: oPop 2
1553: oAssign
1554: oGetAddrLocal 2
1556: oPushResult
1557: oGetLocal 1
1559: oPushResult
1560: oNodeIterValue
1561: oPop 1
1563: oAssign
1564: oGetLocal 2
1566: oPushResult
1567: oNodeNull
1568: oPop 1
1570: oChoice 1615
1572: oJumpForward 1623
1574: oJumpForward 1621
1576: oEmit 48
1578: oSetResult 0
1580: oPushResult
1581: oEmitInt
1582: oPop 1
1584: oEmit 51
1586: oGetLocal 2
1588: oPushResult
1589: oSetResult 11
1591: oPushResult
1592: oNodeGetLabel
1593: oPop 2
1595: oPushResult
1596: oEmitLabel
1597: oPop 1
1599: oEmit 50
1601: oSetResult 0
1603: oPushResult
1604: oEmitInt
1605: oPop 1
1607: oGetAddrLocal 1
1609: oPushResult
1610: oNodeIterNext
1611: oPop 1
1613: oJumpForward 1621
1615: Choice Lookup Table
           0   1576
           1   1572
1620: oEndChoice
1621: oJumpBack 1554
1623: oReturn
1624: oLocalSpace 2
1626: oGetAddrLocal 1
1628: oPushResult
1629: oGetGlobal 1
1631: oPushResult
1632: oSetResult 1
1634: oPushResult
1635: oNodeGetIterLast
1636: oPop 2
1638: oAssign
1639: oGetAddrLocal 2
1641: oPushResult
1642: oGetLocal 1
1644: oPushResult
1645: oNodeIterValue
1646: oPop 1
1648: oAssign
1649: oGetLocal 2
1651: oPushResult
1652: oNodeNull
1653: oPop 1
1655: oChoice 1700
1657: oJumpForward 1708
1659: oJumpForward 1706
1661: oEmit 48
1663: oSetResult 0
1665: oPushResult
1666: oEmitInt
1667: oPop 1
1669: oEmit 51
1671: oGetLocal 2
1673: oPushResult
1674: oSetResult 12
1676: oPushResult
1677: oNodeGetLabel
1678: oPop 2
1680: oPushResult
1681: oEmitLabel
1682: oPop 1
1684: oEmit 50
1686: oSetResult 0
1688: oPushResult
1689: oEmitInt
1690: oPop 1
1692: oGetAddrLocal 1
1694: oPushResult
1695: oNodeIterPrev
1696: oPop 1
1698: oJumpForward 1706
1700: Choice Lookup Table
           0   1661
           1   1657
1705: oEndChoice
1706: oJumpBack 1639
1708: oReturn
1709: oLocalSpace 3
1711: oEmit 58
1713: oGetParam 3
1715: oPushResult
1716: oEmitLabel
1717: oPop 1
1719: oEmit 54
1721: oGetAddrLocal 1
1723: oPushResult
1724: Here
1725: oAssign
1726: oEmit 68
1728: oGetParam 1
1730: oChoice 1736
1732: oCall 1539
1734: oJumpForward 1739
1736: Choice Lookup Table
           1   1732
1739: oGetAddrLocal 2
1741: oPushResult
1742: oGetParam 2
1744: oPushResult
1745: oSetResult 19
1747: oPushResult
1748: oNodeGetCode
1749: oPop 2
1751: oAssign
1752: oGetLocal 2
1754: oPushResult
1755: oEmitCode
1756: oPop 1
1758: oGetParam 2
1760: oPushResult
1761: oSetResult 19
1763: oPushResult
1764: oSetResult 0
1766: oPushResult
1767: oNodeSetCode
1768: oPop 3
1770: oCall 7784
1772: oGetParam 1
1774: oChoice 1780
1776: oCall 1624
1778: oJumpForward 1783
1780: Choice Lookup Table
           1   1776
1783: oEmit 53
1785: oGetAddrLocal 3
1787: oPushResult
1788: oScopeCurrent
1789: oPushResult
1790: oSetResult 17
1792: oPushResult
1793: oNodeGetInt
1794: oPop 2
1796: oAssign
1797: oGetLocal 1
1799: oPushResult
1800: oGetLocal 3
1802: oPushResult
1803: oPatch
1804: oPop 2
1806: oReturn
1807: oLocalSpace 0
1809: oInputChoice 1827
1811: oGetParam 1
1813: oPushResult
1814: oSetResult 27
1816: oPushResult
1817: oSetResult 1
1819: oPushResult
1820: oNodeSetBoolean
1821: oPop 3
1823: oInput 5
1825: oJumpForward 1832
1827: Choice Lookup Table
          70   1811
1830: oJumpForward 1834
1832: oJumpBack 1809
1834: oReturn
1835: oLocalSpace 1
1837: oGetAddrLocal 1
1839: oPushResult
1840: oGetParam 1
1842: oPushResult
1843: oSetResult 19
1845: oPushResult
1846: oNodeGetCode
1847: oPop 2
1849: oAssign
1850: oGetLocal 1
1852: oPushResult
1853: oSetResult 0
1855: oPushResult
1856: equal_code
1857: oPop 2
1859: oChoice 1880
1861: oGetAddrLocal 1
1863: oPushResult
1864: oCodeNew
1865: oAssign
1866: oGetParam 1
1868: oPushResult
1869: oSetResult 19
1871: oPushResult
1872: oGetLocal 1
1874: oPushResult
1875: oNodeSetCode
1876: oPop 3
1878: oJumpForward 1883
1880: Choice Lookup Table
           1   1861
1883: oGetLocal 1
1885: oReturn
1886: oReturn
1887: oLocalSpace 0
1889: oGetParam 1
1891: oPushResult
1892: oCall 9031
1894: oPop 1
1896: oPushResult
1897: equal_zero
1898: oPop 1
1900: oChoice 1906
1902: oError 23
1904: oJumpForward 1909
1906: Choice Lookup Table
           0   1902
1909: oGetParam 1
1911: oPushResult
1912: oSetResult 25
1914: oPushResult
1915: oSetResult 1
1917: oPushResult
1918: oNodeSetBoolean
1919: oPop 3
1921: oInputChoice 1945
1923: oInputChoice 1940
1925: oInput 2
1927: oGetParam 1
1929: oPushResult
1930: oSetResult 26
1932: oPushResult
1933: CURRENT_STRLIT
1934: oPushResult
1935: oNodeSetString
1936: oPop 3
1938: oJumpForward 1943
1940: Choice Lookup Table
          69   1925
1943: oJumpForward 1948
1945: Choice Lookup Table
           2   1923
1948: oReturn
1949: oLocalSpace 6
1951: oInput 0
1953: oGetAddrLocal 1
1955: oPushResult
1956: oSetResult 0
1958: oAssign
1959: oGetAddrLocal 2
1961: oPushResult
1962: oScopeFindInCurrentScope
1963: oAssign
1964: oGetLocal 2
1966: oPushResult
1967: oNodeNull
1968: oPop 1
1970: oChoice 2088
1972: oGetAddrLocal 2
1974: oPushResult
1975: oSetResult 12
1977: oPushResult
1978: LAST_ID
1979: oPushResult
1980: oCall 9249
1982: oPop 2
1984: oAssign
1985: oGetLocal 2
1987: oPushResult
1988: oSetResult 22
1990: oPushResult
1991: oLabelNew
1992: oPushResult
1993: oNodeSetLabel
1994: oPop 3
1996: oJumpForward 2094
1998: oGetAddrLocal 1
2000: oPushResult
2001: oSetResult 1
2003: oAssign
2004: oGetLocal 2
2006: oPushResult
2007: oSetResult 24
2009: oPushResult
2010: oNodeGetBoolean
2011: oPop 2
2013: oChoice 2019
2015: oError 21
2017: oJumpForward 2022
2019: Choice Lookup Table
           1   2015
2022: oGetLocal 2
2024: oPushResult
2025: oSetResult 25
2027: oPushResult
2028: oNodeGetBoolean
2029: oPop 2
2031: oChoice 2037
2033: oError 21
2035: oJumpForward 2040
2037: Choice Lookup Table
           1   2033
2040: oGetLocal 2
2042: oPushResult
2043: oNodeType
2044: oPop 1
2046: oChoice 2050
2048: oJumpForward 2055
2050: Choice Lookup Table
          12   2048
2053: oError 21
2055: oGetLocal 2
2057: oPushResult
2058: oSetResult 29
2060: oPushResult
2061: oGetLocal 2
2063: oPushResult
2064: oSetResult 23
2066: oPushResult
2067: oNodeGet
2068: oPop 2
2070: oPushResult
2071: oNodeSet
2072: oPop 3
2074: oGetLocal 2
2076: oPushResult
2077: oSetResult 23
2079: oPushResult
2080: oSetResult 0
2082: oPushResult
2083: oNodeSet
2084: oPop 3
2086: oJumpForward 2094
2088: Choice Lookup Table
           0   1998
           1   1972
2093: oEndChoice
2094: oGetAddrLocal 3
2096: oPushResult
2097: oCall 9019
2099: oAssign
2100: oGetAddrLocal 4
2102: oPushResult
2103: oGetLocal 3
2105: oPushResult
2106: oSetResult 0
2108: oPushResult
2109: greater
2110: oPop 2
2112: oAssign
2113: oGetAddrLocal 3
2115: oPushResult
2116: inc
2117: oPop 1
2119: oGetLocal 3
2121: oPushResult
2122: oSetResult 2
2124: oPushResult
2125: oScopeBegin
2126: oPop 2
2128: oGetAddrLocal 5
2130: oPushResult
2131: oScopeCurrent
2132: oAssign
2133: oGetLocal 4
2135: oChoice 2154
2137: oGetAddrLocal 6
2139: oPushResult
2140: oGetGlobal 5
2142: oPushResult
2143: oCall 9277
2145: oPop 1
2147: oPushResult
2148: oScopeAllocType
2149: oPop 1
2151: oAssign
2152: oJumpForward 2157
2154: Choice Lookup Table
           1   2137
2157: oCall 2758
2159: oGetLocal 2
2161: oPushResult
2162: oSetResult 23
2164: oPushResult
2165: oGetLocal 5
2167: oPushResult
2168: oNodeSet
2169: oPop 3
2171: oScopeEnd
2172: oInput 5
2174: oGetLocal 1
2176: oChoice 2188
2178: oGetLocal 2
2180: oPushResult
2181: oScopeDeclare
2182: oPop 1
2184: oJumpForward 2194
2186: oJumpForward 2194
2188: Choice Lookup Table
           1   2186
           0   2178
2193: oEndChoice
2194: oGetLocal 2
2196: oPushResult
2197: oCall 1807
2199: oPop 1
2201: oGetLocal 2
2203: oReturn
2204: oReturn
2205: oLocalSpace 4
2207: oGetAddrLocal 1
2209: oPushResult
2210: oCall 1949
2212: oAssign
2213: oInputChoice 2226
2215: oJumpForward 2320
2217: oGetLocal 1
2219: oPushResult
2220: oCall 1887
2222: oPop 1
2224: oJumpForward 2320
2226: Choice Lookup Table
          68   2217
          67   2215
2231: oGetAddrLocal 2
2233: oPushResult
2234: oGetLocal 1
2236: oPushResult
2237: oSetResult 23
2239: oPushResult
2240: oNodeGet
2241: oPop 2
2243: oAssign
2244: oGetLocal 2
2246: oPushResult
2247: oScopeEnter
2248: oPop 1
2250: oGetAddrLocal 3
2252: oPushResult
2253: oGetLocal 2
2255: oPushResult
2256: oSetResult 14
2258: oPushResult
2259: oNodeGetInt
2260: oPop 2
2262: oAssign
2263: oGetLocal 3
2265: oPushResult
2266: oSetResult 1
2268: oPushResult
2269: oScopeBegin
2270: oPop 2
2272: oGetLocal 1
2274: oPushResult
2275: oSetResult 6
2277: oPushResult
2278: oScopeCurrent
2279: oPushResult
2280: oNodeSet
2281: oPop 3
2283: oGetAddrLocal 4
2285: oPushResult
2286: oGetLocal 1
2288: oPushResult
2289: oSetResult 22
2291: oPushResult
2292: oNodeGetLabel
2293: oPop 2
2295: oAssign
2296: oSetResult 21
2298: oPushResult
2299: oGetLocal 4
2301: oPushResult
2302: oCall 1364
2304: oPop 2
2306: oGetLocal 1
2308: oPushResult
2309: oSetResult 24
2311: oPushResult
2312: oSetResult 1
2314: oPushResult
2315: oNodeSetBoolean
2316: oPop 3
2318: oScopeEnd
2319: oScopeEnd
2320: oInput 5
2322: oReturn
2323: oLocalSpace 8
2325: oInput 0
2327: oGetAddrLocal 1
2329: oPushResult
2330: oSetResult 0
2332: oAssign
2333: oGetAddrLocal 2
2335: oPushResult
2336: oScopeFindInCurrentScope
2337: oAssign
2338: oGetLocal 2
2340: oPushResult
2341: oNodeNull
2342: oPop 1
2344: oChoice 2475
2346: oGetAddrLocal 2
2348: oPushResult
2349: oSetResult 13
2351: oPushResult
2352: LAST_ID
2353: oPushResult
2354: oCall 9249
2356: oPop 2
2358: oAssign
2359: oGetLocal 2
2361: oPushResult
2362: oSetResult 22
2364: oPushResult
2365: oLabelNew
2366: oPushResult
2367: oNodeSetLabel
2368: oPop 3
2370: oJumpForward 2481
2372: oGetAddrLocal 1
2374: oPushResult
2375: oSetResult 1
2377: oAssign
2378: oGetLocal 2
2380: oPushResult
2381: oSetResult 24
2383: oPushResult
2384: oNodeGetBoolean
2385: oPop 2
2387: oChoice 2393
2389: oError 21
2391: oJumpForward 2396
2393: Choice Lookup Table
           1   2389
2396: oGetLocal 2
2398: oPushResult
2399: oNodeType
2400: oPop 1
2402: oChoice 2406
2404: oJumpForward 2411
2406: Choice Lookup Table
          13   2404
2409: oError 21
2411: oGetLocal 2
2413: oPushResult
2414: oSetResult 29
2416: oPushResult
2417: oGetLocal 2
2419: oPushResult
2420: oSetResult 23
2422: oPushResult
2423: oNodeGet
2424: oPop 2
2426: oPushResult
2427: oNodeSet
2428: oPop 3
2430: oGetLocal 2
2432: oPushResult
2433: oSetResult 23
2435: oPushResult
2436: oSetResult 0
2438: oPushResult
2439: oNodeSet
2440: oPop 3
2442: oGetLocal 2
2444: oPushResult
2445: oSetResult 30
2447: oPushResult
2448: oGetLocal 2
2450: oPushResult
2451: oSetResult 21
2453: oPushResult
2454: oNodeGet
2455: oPop 2
2457: oPushResult
2458: oNodeSet
2459: oPop 3
2461: oGetLocal 2
2463: oPushResult
2464: oSetResult 21
2466: oPushResult
2467: oSetResult 0
2469: oPushResult
2470: oNodeSet
2471: oPop 3
2473: oJumpForward 2481
2475: Choice Lookup Table
           0   2372
           1   2346
2480: oEndChoice
2481: oGetAddrLocal 3
2483: oPushResult
2484: oCall 9019
2486: oAssign
2487: oGetAddrLocal 4
2489: oPushResult
2490: oGetLocal 3
2492: oPushResult
2493: oSetResult 0
2495: oPushResult
2496: greater
2497: oPop 2
2499: oAssign
2500: oGetAddrLocal 3
2502: oPushResult
2503: inc
2504: oPop 1
2506: oGetLocal 3
2508: oPushResult
2509: oSetResult 2
2511: oPushResult
2512: oScopeBegin
2513: oPop 2
2515: oGetAddrLocal 5
2517: oPushResult
2518: oScopeCurrent
2519: oAssign
2520: oGetLocal 4
2522: oChoice 2541
2524: oGetAddrLocal 6
2526: oPushResult
2527: oGetGlobal 5
2529: oPushResult
2530: oCall 9277
2532: oPop 1
2534: oPushResult
2535: oScopeAllocType
2536: oPop 1
2538: oAssign
2539: oJumpForward 2544
2541: Choice Lookup Table
           1   2524
2544: oCall 2758
2546: oGetLocal 2
2548: oPushResult
2549: oSetResult 23
2551: oPushResult
2552: oGetLocal 5
2554: oPushResult
2555: oNodeSet
2556: oPop 3
2558: oInput 12
2560: oGetAddrLocal 7
2562: oPushResult
2563: oCall 3403
2565: oPop 1
2567: oGetLocal 2
2569: oPushResult
2570: oSetResult 21
2572: oPushResult
2573: oGetLocal 7
2575: oPushResult
2576: oNodeSet
2577: oPop 3
2579: oGetAddrLocal 8
2581: oPushResult
2582: oGetLocal 7
2584: oPushResult
2585: oCall 9277
2587: oPop 1
2589: oAssign
2590: oGetLocal 2
2592: oPushResult
2593: oSetResult 31
2595: oPushResult
2596: oGetLocal 8
2598: oPushResult
2599: oScopeAllocType
2600: oPop 1
2602: oPushResult
2603: oNodeSetInt
2604: oPop 3
2606: oScopeEnd
2607: oInput 5
2609: oGetLocal 1
2611: oChoice 2623
2613: oGetLocal 2
2615: oPushResult
2616: oScopeDeclare
2617: oPop 1
2619: oJumpForward 2629
2621: oJumpForward 2629
2623: Choice Lookup Table
           1   2621
           0   2613
2628: oEndChoice
2629: oGetLocal 2
2631: oPushResult
2632: oCall 1807
2634: oPop 1
2636: oGetLocal 2
2638: oReturn
2639: oReturn
2640: oLocalSpace 4
2642: oGetAddrLocal 1
2644: oPushResult
2645: oCall 2323
2647: oAssign
2648: oInputChoice 2661
2650: oJumpForward 2755
2652: oGetLocal 1
2654: oPushResult
2655: oCall 1887
2657: oPop 1
2659: oJumpForward 2755
2661: Choice Lookup Table
          68   2652
          67   2650
2666: oGetAddrLocal 2
2668: oPushResult
2669: oGetLocal 1
2671: oPushResult
2672: oSetResult 23
2674: oPushResult
2675: oNodeGet
2676: oPop 2
2678: oAssign
2679: oGetLocal 2
2681: oPushResult
2682: oScopeEnter
2683: oPop 1
2685: oGetAddrLocal 3
2687: oPushResult
2688: oGetLocal 2
2690: oPushResult
2691: oSetResult 14
2693: oPushResult
2694: oNodeGetInt
2695: oPop 2
2697: oAssign
2698: oGetLocal 3
2700: oPushResult
2701: oSetResult 1
2703: oPushResult
2704: oScopeBegin
2705: oPop 2
2707: oGetLocal 1
2709: oPushResult
2710: oSetResult 6
2712: oPushResult
2713: oScopeCurrent
2714: oPushResult
2715: oNodeSet
2716: oPop 3
2718: oGetAddrLocal 4
2720: oPushResult
2721: oGetLocal 1
2723: oPushResult
2724: oSetResult 22
2726: oPushResult
2727: oNodeGetLabel
2728: oPop 2
2730: oAssign
2731: oSetResult 21
2733: oPushResult
2734: oGetLocal 4
2736: oPushResult
2737: oCall 1364
2739: oPop 2
2741: oGetLocal 1
2743: oPushResult
2744: oSetResult 24
2746: oPushResult
2747: oSetResult 1
2749: oPushResult
2750: oNodeSetBoolean
2751: oPop 3
2753: oScopeEnd
2754: oScopeEnd
2755: oInput 5
2757: oReturn
2758: oLocalSpace 6
2760: oInputChoice 2978
2762: oGetAddrLocal 1
2764: oPushResult
2765: oNodeVecNew
2766: oAssign
2767: oGetAddrLocal 3
2769: oPushResult
2770: oSetResult 0
2772: oAssign
2773: oInputChoice 2783
2775: oGetAddrLocal 3
2777: oPushResult
2778: oSetResult 1
2780: oAssign
2781: oJumpForward 2786
2783: Choice Lookup Table
          33   2775
2786: oInput 0
2788: oGetAddrLocal 2
2790: oPushResult
2791: oSetResult 23
2793: oPushResult
2794: LAST_ID
2795: oPushResult
2796: oCall 9249
2798: oPop 2
2800: oAssign
2801: oGetLocal 2
2803: oPushResult
2804: oSetResult 33
2806: oPushResult
2807: oGetLocal 3
2809: oPushResult
2810: oNodeSetBoolean
2811: oPop 3
2813: oGetLocal 1
2815: oPushResult
2816: oGetLocal 2
2818: oPushResult
2819: oNodeVecAppend
2820: oPop 2
2822: oInputChoice 2830
2824: oJumpForward 2838
2826: oJumpForward 2836
2828: oJumpForward 2836
2830: Choice Lookup Table
          13   2828
          12   2824
2835: oEndChoice
2836: oJumpBack 2786
2838: oGetAddrLocal 4
2840: oPushResult
2841: oCall 3403
2843: oPop 1
2845: oGetLocal 3
2847: oChoice 2862
2849: oGetAddrLocal 5
2851: oPushResult
2852: oGetLocal 4
2854: oPushResult
2855: oCall 9277
2857: oPop 1
2859: oAssign
2860: oJumpForward 2871
2862: Choice Lookup Table
           1   2849
2865: oGetAddrLocal 5
2867: oPushResult
2868: oGetLocal 4
2870: oAssign
2871: oGetAddrLocal 6
2873: oPushResult
2874: oSetResult 0
2876: oAssign
2877: oGetLocal 6
2879: oPushResult
2880: oGetLocal 1
2882: oPushResult
2883: oNodeVecSize
2884: oPop 1
2886: oPushResult
2887: equal
2888: oPop 2
2890: oChoice 2947
2892: oGetAddrLocal 2
2894: oPushResult
2895: oGetLocal 1
2897: oPushResult
2898: oGetLocal 6
2900: oPushResult
2901: oNodeVecElement
2902: oPop 2
2904: oAssign
2905: oGetLocal 2
2907: oPushResult
2908: oSetResult 21
2910: oPushResult
2911: oGetLocal 4
2913: oPushResult
2914: oNodeSet
2915: oPop 3
2917: oGetLocal 2
2919: oPushResult
2920: oScopeDeclare
2921: oPop 1
2923: oGetLocal 2
2925: oPushResult
2926: oSetResult 22
2928: oPushResult
2929: oGetLocal 5
2931: oPushResult
2932: oScopeAllocType
2933: oPop 1
2935: oPushResult
2936: oNodeSetInt
2937: oPop 3
2939: oGetAddrLocal 6
2941: oPushResult
2942: inc
2943: oPop 1
2945: oJumpForward 2952
2947: Choice Lookup Table
           0   2892
2950: oJumpForward 2954
2952: oJumpBack 2877
2954: oGetLocal 1
2956: oPushResult
2957: oNodeVecDelete
2958: oPop 1
2960: oInputChoice 2968
2962: oJumpForward 2976
2964: oJumpForward 2974
2966: oJumpForward 2974
2968: Choice Lookup Table
           5   2966
          15   2962
2973: oEndChoice
2974: oJumpBack 2762
2976: oJumpForward 2981
2978: Choice Lookup Table
          14   2762
2981: oReturn
2982: oLocalSpace 2
2984: oInputChoice 3043
2986: oGetAddrLocal 1
2988: oPushResult
2989: oSetResult 16
2991: oPushResult
2992: LAST_ID
2993: oPushResult
2994: oCall 9249
2996: oPop 2
2998: oAssign
2999: oInput 6
3001: oCall 4422
3003: oGetAddrLocal 2
3005: oPushResult
3006: oValueTop
3007: oAssign
3008: oValuePop
3009: oGetLocal 1
3011: oPushResult
3012: oSetResult 22
3014: oPushResult
3015: oGetLocal 2
3017: oPushResult
3018: oNodeSetInt
3019: oPop 3
3021: oGetLocal 1
3023: oPushResult
3024: oSetResult 21
3026: oPushResult
3027: oGetGlobal 5
3029: oPushResult
3030: oNodeSet
3031: oPop 3
3033: oGetLocal 1
3035: oPushResult
3036: oScopeDeclare
3037: oPop 1
3039: oInput 5
3041: oJumpForward 3048
3043: Choice Lookup Table
           0   2986
3046: oJumpForward 3050
3048: oJumpBack 2984
3050: oReturn
3051: oLocalSpace 2
3053: oInputChoice 3099
3055: oGetAddrLocal 1
3057: oPushResult
3058: oSetResult 18
3060: oPushResult
3061: LAST_ID
3062: oPushResult
3063: oCall 9249
3065: oPop 2
3067: oAssign
3068: oInput 6
3070: oGetAddrLocal 2
3072: oPushResult
3073: oCall 3403
3075: oPop 1
3077: oGetLocal 1
3079: oPushResult
3080: oSetResult 21
3082: oPushResult
3083: oGetLocal 2
3085: oPushResult
3086: oNodeSet
3087: oPop 3
3089: oGetLocal 1
3091: oPushResult
3092: oScopeDeclare
3093: oPop 1
3095: oInput 5
3097: oJumpForward 3104
3099: Choice Lookup Table
           0   3055
3102: oJumpForward 3106
3104: oJumpBack 3053
3106: oReturn
3107: oLocalSpace 6
3109: oInputChoice 3330
3111: oGetAddrLocal 1
3113: oPushResult
3114: oNodeVecNew
3115: oAssign
3116: oGetAddrLocal 2
3118: oPushResult
3119: oGetParam 1
3121: oPushResult
3122: LAST_ID
3123: oPushResult
3124: oCall 9249
3126: oPop 2
3128: oAssign
3129: oGetLocal 1
3131: oPushResult
3132: oGetLocal 2
3134: oPushResult
3135: oNodeVecAppend
3136: oPop 2
3138: oInputChoice 3144
3140: oInput 0
3142: oJumpForward 3149
3144: Choice Lookup Table
          13   3140
3147: oJumpForward 3151
3149: oJumpBack 3116
3151: oInput 12
3153: oGetAddrLocal 3
3155: oPushResult
3156: oCall 3403
3158: oPop 1
3160: oGetAddrLocal 4
3162: oPushResult
3163: oSetResult 0
3165: oAssign
3166: oGetLocal 4
3168: oPushResult
3169: oGetLocal 1
3171: oPushResult
3172: oNodeVecSize
3173: oPop 1
3175: oPushResult
3176: equal
3177: oPop 2
3179: oChoice 3220
3181: oGetAddrLocal 2
3183: oPushResult
3184: oGetLocal 1
3186: oPushResult
3187: oGetLocal 4
3189: oPushResult
3190: oNodeVecElement
3191: oPop 2
3193: oAssign
3194: oGetLocal 2
3196: oPushResult
3197: oSetResult 21
3199: oPushResult
3200: oGetLocal 3
3202: oPushResult
3203: oNodeSet
3204: oPop 3
3206: oGetLocal 2
3208: oPushResult
3209: oScopeDeclareAlloc
3210: oPop 1
3212: oGetAddrLocal 4
3214: oPushResult
3215: inc
3216: oPop 1
3218: oJumpForward 3225
3220: Choice Lookup Table
           0   3181
3223: oJumpForward 3227
3225: oJumpBack 3166
3227: oInputChoice 3317
3229: oGetLocal 1
3231: oPushResult
3232: oNodeVecSize
3233: oPop 1
3235: oChoice 3239
3237: oJumpForward 3244
3239: Choice Lookup Table
           1   3237
3242: oError 22
3244: oGetAddrLocal 5
3246: oPushResult
3247: oScopeCurrent
3248: oPushResult
3249: oCall 1835
3251: oPop 1
3253: oAssign
3254: oGetLocal 5
3256: oPushResult
3257: oCodePush
3258: oPop 1
3260: oGetAddrLocal 6
3262: oPushResult
3263: oSetResult 0
3265: oAssign
3266: oCall 9019
3268: oPushResult
3269: equal_zero
3270: oPop 1
3272: oChoice 3288
3274: oGetGlobal 3
3276: oPushResult
3277: oScopeEnter
3278: oPop 1
3280: oGetAddrLocal 6
3282: oPushResult
3283: oSetResult 1
3285: oAssign
3286: oJumpForward 3291
3288: Choice Lookup Table
           1   3274
3291: oGetLocal 2
3293: oPushResult
3294: oCall 8254
3296: oPop 1
3298: oCall 4495
3300: oCall 9069
3302: oCall 8019
3304: oGetLocal 6
3306: oChoice 3311
3308: oScopeEnd
3309: oJumpForward 3314
3311: Choice Lookup Table
           1   3308
3314: oCodePop
3315: oJumpForward 3320
3317: Choice Lookup Table
           6   3229
3320: oGetLocal 1
3322: oPushResult
3323: oNodeVecDelete
3324: oPop 1
3326: oInput 5
3328: oJumpForward 3335
3330: Choice Lookup Table
           0   3111
3333: oJumpForward 3337
3335: oJumpBack 3109
3337: oReturn
3338: oLocalSpace 2
3340: oInputChoice 3347
3342: oJumpForward 3353
3344: oChangeIntLitToLabelIdent
3345: oJumpForward 3353
3347: Choice Lookup Table
           1   3344
           0   3342
3352: oEndChoice
3353: oGetAddrLocal 1
3355: oPushResult
3356: oSetResult 24
3358: oPushResult
3359: LAST_ID
3360: oPushResult
3361: oCall 9249
3363: oPop 2
3365: oAssign
3366: oGetAddrLocal 2
3368: oPushResult
3369: oLabelNew
3370: oAssign
3371: oGetLocal 1
3373: oPushResult
3374: oSetResult 22
3376: oPushResult
3377: oGetLocal 2
3379: oPushResult
3380: oNodeSetLabel
3381: oPop 3
3383: oGetLocal 1
3385: oPushResult
3386: oScopeDeclare
3387: oPop 1
3389: oInputChoice 3393
3391: oJumpForward 3398
3393: Choice Lookup Table
          13   3391
3396: oJumpForward 3400
3398: oJumpBack 3340
3400: oInput 5
3402: oReturn
3403: oLocalSpace 23
3405: oInputChoice 4402
3407: oGetAddrLocal 1
3409: oPushResult
3410: oScopeFindRequire
3411: oAssign
3412: oGetAddrLocal 1
3414: oPushResult
3415: oCall 409
3417: oPop 1
3419: oGetLocal 1
3421: oPushResult
3422: oNodeType
3423: oPop 1
3425: oChoice 3442
3427: oGetParam 1
3429: oPushResult
3430: oGetLocal 1
3432: oPushResult
3433: oSetResult 21
3435: oPushResult
3436: oNodeGet
3437: oPop 2
3439: oAssign
3440: oJumpForward 3453
3442: Choice Lookup Table
          18   3427
3445: oError 2
3447: oGetParam 1
3449: oPushResult
3450: oGetGlobal 5
3452: oAssign
3453: oJumpForward 4421
3455: oInput 16
3457: oGetAddrLocal 2
3459: oPushResult
3460: oNodeVecNew
3461: oAssign
3462: oGetAddrLocal 3
3464: oPushResult
3465: oSetResult 35
3467: oPushResult
3468: oNodeNew
3469: oPop 1
3471: oAssign
3472: oGetLocal 3
3474: oPushResult
3475: oSetResult 36
3477: oPushResult
3478: oGetGlobal 5
3480: oPushResult
3481: oNodeSet
3482: oPop 3
3484: oCall 4422
3486: oGetLocal 3
3488: oPushResult
3489: oSetResult 38
3491: oPushResult
3492: oValueTop
3493: oPushResult
3494: oNodeSetInt
3495: oPop 3
3497: oValuePop
3498: oInput 21
3500: oCall 4422
3502: oGetLocal 3
3504: oPushResult
3505: oSetResult 39
3507: oPushResult
3508: oValueTop
3509: oPushResult
3510: oNodeSetInt
3511: oPop 3
3513: oValuePop
3514: oGetLocal 3
3516: oPushResult
3517: oSetResult 17
3519: oPushResult
3520: oSetResult 4
3522: oPushResult
3523: oNodeSetInt
3524: oPop 3
3526: oGetLocal 3
3528: oPushResult
3529: oTypeAdd
3530: oPop 1
3532: oGetAddrLocal 4
3534: oPushResult
3535: oSetResult 34
3537: oPushResult
3538: oNodeNew
3539: oPop 1
3541: oAssign
3542: oGetLocal 4
3544: oPushResult
3545: oSetResult 37
3547: oPushResult
3548: oGetLocal 3
3550: oPushResult
3551: oNodeSet
3552: oPop 3
3554: oGetLocal 2
3556: oPushResult
3557: oGetLocal 4
3559: oPushResult
3560: oNodeVecAppend
3561: oPop 2
3563: oInputChoice 3571
3565: oJumpForward 3579
3567: oJumpForward 3577
3569: oJumpForward 3577
3571: Choice Lookup Table
          13   3569
          17   3565
3576: oEndChoice
3577: oJumpBack 3462
3579: oInput 40
3581: oGetAddrLocal 5
3583: oPushResult
3584: oCall 3403
3586: oPop 1
3588: oGetAddrLocal 6
3590: oPushResult
3591: oGetLocal 2
3593: oPushResult
3594: oNodeVecSize
3595: oPop 1
3597: oAssign
3598: oGetAddrLocal 6
3600: oPushResult
3601: dec
3602: oPop 1
3604: oGetAddrLocal 7
3606: oPushResult
3607: oGetLocal 2
3609: oPushResult
3610: oGetLocal 6
3612: oPushResult
3613: oNodeVecElement
3614: oPop 2
3616: oAssign
3617: oGetLocal 7
3619: oPushResult
3620: oSetResult 36
3622: oPushResult
3623: oGetLocal 5
3625: oPushResult
3626: oNodeSet
3627: oPop 3
3629: oGetAddrLocal 8
3631: oPushResult
3632: oGetLocal 7
3634: oPushResult
3635: oSetResult 37
3637: oPushResult
3638: oNodeGet
3639: oPop 2
3641: oAssign
3642: oGetAddrLocal 9
3644: oPushResult
3645: oGetLocal 8
3647: oPushResult
3648: oSetResult 39
3650: oPushResult
3651: oNodeGetInt
3652: oPop 2
3654: oPushResult
3655: oGetLocal 8
3657: oPushResult
3658: oSetResult 38
3660: oPushResult
3661: oNodeGetInt
3662: oPop 2
3664: oPushResult
3665: subtract
3666: oPop 2
3668: oAssign
3669: oGetAddrLocal 9
3671: oPushResult
3672: inc
3673: oPop 1
3675: oGetLocal 7
3677: oPushResult
3678: oSetResult 17
3680: oPushResult
3681: oGetLocal 9
3683: oPushResult
3684: oGetLocal 5
3686: oPushResult
3687: oSetResult 17
3689: oPushResult
3690: oNodeGetInt
3691: oPop 2
3693: oPushResult
3694: multiply
3695: oPop 2
3697: oPushResult
3698: oNodeSetInt
3699: oPop 3
3701: oGetLocal 7
3703: oPushResult
3704: oTypeAdd
3705: oPop 1
3707: oGetAddrLocal 5
3709: oPushResult
3710: oGetLocal 7
3712: oAssign
3713: oGetLocal 6
3715: oPushResult
3716: equal_zero
3717: oPop 1
3719: oChoice 3725
3721: oJumpForward 3730
3723: oJumpForward 3728
3725: Choice Lookup Table
           1   3721
3728: oJumpBack 3598
3730: oGetParam 1
3732: oPushResult
3733: oGetLocal 2
3735: oPushResult
3736: oSetResult 0
3738: oPushResult
3739: oNodeVecElement
3740: oPop 2
3742: oAssign
3743: oGetLocal 2
3745: oPushResult
3746: oNodeVecDelete
3747: oPop 1
3749: oJumpForward 4421
3751: oGetAddrLocal 10
3753: oPushResult
3754: oCall 3403
3756: oPop 1
3758: oGetParam 1
3760: oPushResult
3761: oGetLocal 10
3763: oPushResult
3764: oCall 9277
3766: oPop 1
3768: oAssign
3769: oJumpForward 4421
3771: oGetParam 1
3773: oPushResult
3774: oSetResult 36
3776: oPushResult
3777: oNodeNew
3778: oPop 1
3780: oAssign
3781: oSetResult -1
3783: oPushResult
3784: oSetResult 2
3786: oPushResult
3787: oScopeBegin
3788: oPop 2
3790: oSetResult 22
3792: oPushResult
3793: oCall 3107
3795: oPop 1
3797: oGetAddrLocal 11
3799: oPushResult
3800: oScopeCurrent
3801: oPushResult
3802: oSetResult 17
3804: oPushResult
3805: oNodeGetInt
3806: oPop 2
3808: oAssign
3809: oGetLocal 11
3811: oPushResult
3812: equal_zero
3813: oPop 1
3815: oChoice 3821
3817: oError 19
3819: oJumpForward 3824
3821: Choice Lookup Table
           1   3817
3824: oInput 36
3826: oGetFromParam 1
3828: oPushResult
3829: oSetResult 40
3831: oPushResult
3832: oScopeCurrent
3833: oPushResult
3834: oNodeSet
3835: oPop 3
3837: oGetFromParam 1
3839: oPushResult
3840: oSetResult 17
3842: oPushResult
3843: oGetLocal 11
3845: oPushResult
3846: oNodeSetInt
3847: oPop 3
3849: oScopeEnd
3850: oGetFromParam 1
3852: oPushResult
3853: oTypeAdd
3854: oPop 1
3856: oJumpForward 4421
3858: oGetParam 1
3860: oPushResult
3861: oSetResult 37
3863: oPushResult
3864: oNodeNew
3865: oPop 1
3867: oAssign
3868: oGetAddrLocal 12
3870: oPushResult
3871: oSetResult 0
3873: oAssign
3874: oGetAddrLocal 13
3876: oPushResult
3877: oSetResult 0
3879: oAssign
3880: oGetAddrLocal 14
3882: oPushResult
3883: oSetResult 1
3885: oAssign
3886: oGetAddrLocal 15
3888: oPushResult
3889: oScopeCurrent
3890: oAssign
3891: oSetResult -1
3893: oPushResult
3894: oSetResult 2
3896: oPushResult
3897: oScopeBegin
3898: oPop 2
3900: oInput 0
3902: oGetAddrLocal 16
3904: oPushResult
3905: oSetResult 17
3907: oPushResult
3908: LAST_ID
3909: oPushResult
3910: oCall 9249
3912: oPop 2
3914: oAssign
3915: oGetAddrLocal 17
3917: oPushResult
3918: oSetResult 17
3920: oPushResult
3921: LAST_ID
3922: oPushResult
3923: oCall 9249
3925: oPop 2
3927: oAssign
3928: oGetLocal 16
3930: oPushResult
3931: oSetResult 21
3933: oPushResult
3934: oGetFromParam 1
3936: oPushResult
3937: oNodeSet
3938: oPop 3
3940: oGetLocal 17
3942: oPushResult
3943: oSetResult 21
3945: oPushResult
3946: oGetFromParam 1
3948: oPushResult
3949: oNodeSet
3950: oPop 3
3952: oGetAddrLocal 18
3954: oPushResult
3955: LAST_ID
3956: oPushResult
3957: ID_STRING
3958: oPop 1
3960: oPushResult
3961: oStringAllocLit
3962: oPop 1
3964: oAssign
3965: oGetLocal 16
3967: oPushResult
3968: oSetResult 32
3970: oPushResult
3971: oGetLocal 18
3973: oPushResult
3974: oNodeSetInt
3975: oPop 3
3977: oGetLocal 17
3979: oPushResult
3980: oSetResult 32
3982: oPushResult
3983: oGetLocal 18
3985: oPushResult
3986: oNodeSetInt
3987: oPop 3
3989: oInputChoice 4031
3991: oCall 4422
3993: oGetLocal 13
3995: oPushResult
3996: equal_zero
3997: oPop 1
3999: oChoice 4020
4001: oValueTop
4002: oPushResult
4003: oGetLocal 12
4005: oPushResult
4006: greater
4007: oPop 2
4009: oChoice 4015
4011: oError 26
4013: oJumpForward 4018
4015: Choice Lookup Table
           0   4011
4018: oJumpForward 4023
4020: Choice Lookup Table
           0   4001
4023: oGetAddrLocal 12
4025: oPushResult
4026: oValueTop
4027: oAssign
4028: oValuePop
4029: oJumpForward 4036
4031: Choice Lookup Table
           4   3991
           6   3991
4036: oGetLocal 16
4038: oPushResult
4039: oSetResult 22
4041: oPushResult
4042: oGetLocal 12
4044: oPushResult
4045: oNodeSetInt
4046: oPop 3
4048: oGetLocal 17
4050: oPushResult
4051: oSetResult 22
4053: oPushResult
4054: oGetLocal 12
4056: oPushResult
4057: oNodeSetInt
4058: oPop 3
4060: oGetLocal 16
4062: oPushResult
4063: oScopeDeclare
4064: oPop 1
4066: oGetLocal 15
4068: oPushResult
4069: oScopeEnter
4070: oPop 1
4072: oGetLocal 17
4074: oPushResult
4075: oScopeDeclare
4076: oPop 1
4078: oScopeEnd
4079: oGetAddrLocal 12
4081: oPushResult
4082: inc
4083: oPop 1
4085: oGetAddrLocal 13
4087: oPushResult
4088: inc
4089: oPop 1
4091: oInputChoice 4095
4093: oJumpForward 4100
4095: Choice Lookup Table
          13   4093
4098: oJumpForward 4102
4100: oJumpBack 3900
4102: oInput 15
4104: oGetFromParam 1
4106: oPushResult
4107: oSetResult 40
4109: oPushResult
4110: oScopeCurrent
4111: oPushResult
4112: oNodeSet
4113: oPop 3
4115: oGetFromParam 1
4117: oPushResult
4118: oSetResult 17
4120: oPushResult
4121: oSetResult 4
4123: oPushResult
4124: oNodeSetInt
4125: oPop 3
4127: oScopeEnd
4128: oGetGlobal 2
4130: oPushResult
4131: oCall 1835
4133: oPop 1
4135: oPushResult
4136: oCodePush
4137: oPop 1
4139: oGetGlobal 2
4141: oPushResult
4142: oScopeEnter
4143: oPop 1
4145: oGetAddrLocal 19
4147: oPushResult
4148: oGetLocal 13
4150: oPushResult
4151: oSetResult 1
4153: oPushResult
4154: add
4155: oPop 2
4157: oPushResult
4158: oSetResult 16
4160: oPushResult
4161: multiply
4162: oPop 2
4164: oAssign
4165: oGetAddrLocal 20
4167: oPushResult
4168: oGetLocal 19
4170: oPushResult
4171: oSetResult 8
4173: oPushResult
4174: oScopeAlloc
4175: oPop 2
4177: oAssign
4178: oScopeEnd
4179: oGetFromParam 1
4181: oPushResult
4182: oSetResult 41
4184: oPushResult
4185: oGetLocal 20
4187: oPushResult
4188: oNodeSetInt
4189: oPop 3
4191: oGetAddrLocal 21
4193: oPushResult
4194: oGetFromParam 1
4196: oPushResult
4197: oSetResult 40
4199: oPushResult
4200: oNodeGet
4201: oPop 2
4203: oPushResult
4204: oSetResult 15
4206: oPushResult
4207: oNodeGetIter
4208: oPop 2
4210: oAssign
4211: oGetAddrLocal 22
4213: oPushResult
4214: oGetLocal 21
4216: oPushResult
4217: oNodeIterValue
4218: oPop 1
4220: oAssign
4221: oGetLocal 22
4223: oPushResult
4224: oNodeNull
4225: oPop 1
4227: oChoice 4233
4229: oJumpForward 4320
4231: oJumpForward 4236
4233: Choice Lookup Table
           1   4229
4236: oEmit 16
4238: oGetLocal 20
4240: oPushResult
4241: oEmitInt
4242: oPop 1
4244: oEmit 15
4246: oGetLocal 22
4248: oPushResult
4249: oSetResult 22
4251: oPushResult
4252: oNodeGetInt
4253: oPop 2
4255: oPushResult
4256: oEmitInt
4257: oPop 1
4259: oEmit 25
4261: oGetAddrLocal 20
4263: oPushResult
4264: oGetLocal 20
4266: oPushResult
4267: oSetResult 8
4269: oPushResult
4270: add
4271: oPop 2
4273: oAssign
4274: oEmit 16
4276: oGetLocal 20
4278: oPushResult
4279: oEmitInt
4280: oPop 1
4282: oEmit 16
4284: oGetLocal 22
4286: oPushResult
4287: oSetResult 32
4289: oPushResult
4290: oNodeGetInt
4291: oPop 2
4293: oPushResult
4294: oEmitInt
4295: oPop 1
4297: oEmit 27
4299: oGetAddrLocal 20
4301: oPushResult
4302: oGetLocal 20
4304: oPushResult
4305: oSetResult 8
4307: oPushResult
4308: add
4309: oPop 2
4311: oAssign
4312: oGetAddrLocal 21
4314: oPushResult
4315: oNodeIterNext
4316: oPop 1
4318: oJumpBack 4211
4320: oEmit 16
4322: oGetLocal 20
4324: oPushResult
4325: oEmitInt
4326: oPop 1
4328: oEmit 15
4330: oSetResult 0
4332: oPushResult
4333: oEmitInt
4334: oPop 1
4336: oEmit 25
4338: oGetAddrLocal 20
4340: oPushResult
4341: oGetLocal 20
4343: oPushResult
4344: oSetResult 8
4346: oPushResult
4347: add
4348: oPop 2
4350: oAssign
4351: oEmit 16
4353: oGetLocal 20
4355: oPushResult
4356: oEmitInt
4357: oPop 1
4359: oEmit 15
4361: oSetResult 0
4363: oPushResult
4364: oEmitInt
4365: oPop 1
4367: oEmit 27
4369: oGetAddrLocal 20
4371: oPushResult
4372: oGetLocal 20
4374: oPushResult
4375: oSetResult 8
4377: oPushResult
4378: add
4379: oPop 2
4381: oAssign
4382: oCodePop
4383: oGetFromParam 1
4385: oPushResult
4386: oTypeAdd
4387: oPop 1
4389: oJumpForward 4421
4391: oInput 40
4393: oGetAddrLocal 23
4395: oPushResult
4396: oCall 3403
4398: oPop 1
4400: oJumpForward 4421
4402: Choice Lookup Table
          39   4391
          14   3858
          38   3771
          18   3751
          37   3455
           0   3407
4415: oCall 4422
4417: oInput 21
4419: oCall 4422
4421: oReturn
4422: oLocalSpace 1
4424: oInputChoice 4486
4426: TOKEN_VALUE
4427: oPushResult
4428: oValuePush
4429: oPop 1
4431: oJumpForward 4494
4433: oGetAddrLocal 1
4435: oPushResult
4436: oScopeFindRequire
4437: oAssign
4438: oGetAddrLocal 1
4440: oPushResult
4441: oCall 409
4443: oPop 1
4445: oGetLocal 1
4447: oPushResult
4448: oNodeType
4449: oPop 1
4451: oChoice 4468
4453: oGetLocal 1
4455: oPushResult
4456: oSetResult 22
4458: oPushResult
4459: oNodeGetInt
4460: oPop 2
4462: oPushResult
4463: oValuePush
4464: oPop 1
4466: oJumpForward 4479
4468: Choice Lookup Table
          16   4453
4471: oError 1
4473: oSetResult 0
4475: oPushResult
4476: oValuePush
4477: oPop 1
4479: oJumpForward 4494
4481: oCall 4422
4483: oValueNegate
4484: oJumpForward 4494
4486: Choice Lookup Table
          25   4481
           0   4433
           1   4426
4493: oEndChoice
4494: oReturn
4495: oLocalSpace 1
4497: oGetAddrLocal 1
4499: oPushResult
4500: oSetResult 0
4502: oAssign
4503: oGetAddrLocal 1
4505: oPushResult
4506: oCall 4656
4508: oPop 1
4510: oGetAddrLocal 1
4512: oPushResult
4513: oCall 4556
4515: oPop 1
4517: oReturn
4518: oLocalSpace 0
4520: oGetParam 1
4522: oPushResult
4523: oCall 4656
4525: oPop 1
4527: oTypeSNodeType
4528: oChoice 4547
4530: oJumpForward 4554
4532: oGetParam 1
4534: oPushResult
4535: oLabelNew
4536: oAssign
4537: oEmit 57
4539: oGetFromParam 1
4541: oPushResult
4542: oEmitLabel
4543: oPop 1
4545: oJumpForward 4554
4547: Choice Lookup Table
          29   4532
          30   4530
4552: oError 8
4554: oTypeSPop
4555: oReturn
4556: oLocalSpace 1
4558: oTypeSNodeType
4559: oChoice 4621
4561: oGetAddrLocal 1
4563: oPushResult
4564: oLabelNew
4565: oAssign
4566: oEmit 15
4568: oSetResult 1
4570: oPushResult
4571: oEmitInt
4572: oPop 1
4574: oEmit 55
4576: oGetLocal 1
4578: oPushResult
4579: oEmitLabel
4580: oPop 1
4582: oEmit 58
4584: oGetFromParam 1
4586: oPushResult
4587: oEmitLabel
4588: oPop 1
4590: oEmit 15
4592: oSetResult 0
4594: oPushResult
4595: oEmitInt
4596: oPop 1
4598: oEmit 58
4600: oGetLocal 1
4602: oPushResult
4603: oEmitLabel
4604: oPop 1
4606: oTypeSPop
4607: oGetGlobal 6
4609: oPushResult
4610: oTypeSPush
4611: oPop 1
4613: oGetParam 1
4615: oPushResult
4616: oSetResult 0
4618: oAssign
4619: oJumpForward 4624
4621: Choice Lookup Table
          30   4561
4624: oReturn
4625: oLocalSpace 0
4627: oTypeSNodeType
4628: oChoice 4652
4630: oGetParam 1
4632: oPushResult
4633: oLabelNew
4634: oAssign
4635: oEmit 57
4637: oGetFromParam 1
4639: oPushResult
4640: oEmitLabel
4641: oPop 1
4643: oTypeSPop
4644: oGetGlobal 7
4646: oPushResult
4647: oTypeSPush
4648: oPop 1
4650: oJumpForward 4655
4652: Choice Lookup Table
          29   4630
4655: oReturn
4656: oLocalSpace 0
4658: oGetParam 1
4660: oPushResult
4661: oCall 5057
4663: oPop 1
4665: oInputChoice 5039
4667: oGetParam 1
4669: oPushResult
4670: oCall 4556
4672: oPop 1
4674: oCall 9168
4676: oGetParam 1
4678: oPushResult
4679: oCall 5057
4681: oPop 1
4683: oGetParam 1
4685: oPushResult
4686: oCall 4556
4688: oPop 1
4690: oCall 9168
4692: oCall 9069
4694: oTypeSNodeType
4695: oChoice 4709
4697: oEmit 40
4699: oJumpForward 4724
4701: oEmit 46
4703: oJumpForward 4724
4705: oError 16
4707: oJumpForward 4724
4709: Choice Lookup Table
          32   4705
          31   4705
          33   4701
          29   4697
          37   4697
          27   4697
4722: oError 17
4724: oTypeSPop
4725: oGetGlobal 6
4727: oPushResult
4728: oTypeSPush
4729: oPop 1
4731: oJumpForward 5054
4733: oGetParam 1
4735: oPushResult
4736: oCall 4556
4738: oPop 1
4740: oCall 9168
4742: oGetParam 1
4744: oPushResult
4745: oCall 5057
4747: oPop 1
4749: oGetParam 1
4751: oPushResult
4752: oCall 4556
4754: oPop 1
4756: oCall 9168
4758: oCall 9069
4760: oTypeSNodeType
4761: oChoice 4775
4763: oEmit 41
4765: oJumpForward 4790
4767: oEmit 47
4769: oJumpForward 4790
4771: oError 16
4773: oJumpForward 4790
4775: Choice Lookup Table
          32   4771
          31   4771
          33   4767
          29   4763
          37   4763
          27   4763
4788: oError 17
4790: oTypeSPop
4791: oGetGlobal 6
4793: oPushResult
4794: oTypeSPush
4795: oPop 1
4797: oJumpForward 5054
4799: oGetParam 1
4801: oPushResult
4802: oCall 4556
4804: oPop 1
4806: oCall 9168
4808: oGetParam 1
4810: oPushResult
4811: oCall 5057
4813: oPop 1
4815: oGetParam 1
4817: oPushResult
4818: oCall 4556
4820: oPop 1
4822: oCall 9168
4824: oCall 9069
4826: oTypeSNodeType
4827: oChoice 4837
4829: oEmit 43
4831: oJumpForward 4850
4833: oError 16
4835: oJumpForward 4850
4837: Choice Lookup Table
          32   4833
          31   4833
          29   4829
          37   4829
          27   4829
4848: oError 17
4850: oTypeSPop
4851: oGetGlobal 6
4853: oPushResult
4854: oTypeSPush
4855: oPop 1
4857: oJumpForward 5054
4859: oGetParam 1
4861: oPushResult
4862: oCall 4556
4864: oPop 1
4866: oCall 9168
4868: oGetParam 1
4870: oPushResult
4871: oCall 5057
4873: oPop 1
4875: oGetParam 1
4877: oPushResult
4878: oCall 4556
4880: oPop 1
4882: oCall 9168
4884: oCall 9069
4886: oTypeSNodeType
4887: oChoice 4897
4889: oEmit 42
4891: oJumpForward 4910
4893: oError 16
4895: oJumpForward 4910
4897: Choice Lookup Table
          32   4893
          31   4893
          29   4889
          37   4889
          27   4889
4908: oError 17
4910: oTypeSPop
4911: oGetGlobal 6
4913: oPushResult
4914: oTypeSPush
4915: oPop 1
4917: oJumpForward 5054
4919: oGetParam 1
4921: oPushResult
4922: oCall 4556
4924: oPop 1
4926: oCall 9168
4928: oGetParam 1
4930: oPushResult
4931: oCall 5057
4933: oPop 1
4935: oGetParam 1
4937: oPushResult
4938: oCall 4556
4940: oPop 1
4942: oCall 9168
4944: oCall 9069
4946: oTypeSNodeType
4947: oChoice 4957
4949: oEmit 45
4951: oJumpForward 4970
4953: oError 16
4955: oJumpForward 4970
4957: Choice Lookup Table
          32   4953
          31   4953
          29   4949
          37   4949
          27   4949
4968: oError 17
4970: oTypeSPop
4971: oGetGlobal 6
4973: oPushResult
4974: oTypeSPush
4975: oPop 1
4977: oJumpForward 5054
4979: oGetParam 1
4981: oPushResult
4982: oCall 4556
4984: oPop 1
4986: oCall 9168
4988: oGetParam 1
4990: oPushResult
4991: oCall 5057
4993: oPop 1
4995: oGetParam 1
4997: oPushResult
4998: oCall 4556
5000: oPop 1
5002: oCall 9168
5004: oCall 9069
5006: oTypeSNodeType
5007: oChoice 5017
5009: oEmit 44
5011: oJumpForward 5030
5013: oError 16
5015: oJumpForward 5030
5017: Choice Lookup Table
          32   5013
          31   5013
          29   5009
          37   5009
          27   5009
5028: oError 17
5030: oTypeSPop
5031: oGetGlobal 6
5033: oPushResult
5034: oTypeSPush
5035: oPop 1
5037: oJumpForward 5054
5039: Choice Lookup Table
          11   4979
          10   4919
           9   4859
           8   4799
           7   4733
           6   4667
5052: oJumpForward 5056
5054: oJumpBack 4665
5056: oReturn
5057: oLocalSpace 1
5059: oGetAddrLocal 1
5061: oPushResult
5062: oSetResult 0
5064: oAssign
5065: oGetParam 1
5067: oPushResult
5068: oCall 5237
5070: oPop 1
5072: oInputChoice 5205
5074: oTypeSNodeType
5075: oChoice 5146
5077: oGetLocal 1
5079: oPushResult
5080: oSetResult 0
5082: oPushResult
5083: equal_label
5084: oPop 2
5086: oChoice 5095
5088: oGetAddrLocal 1
5090: oPushResult
5091: oLabelNew
5092: oAssign
5093: oJumpForward 5098
5095: Choice Lookup Table
           1   5088
5098: oEmit 55
5100: oGetLocal 1
5102: oPushResult
5103: oEmitLabel
5104: oPop 1
5106: oJumpForward 5153
5108: oGetParam 1
5110: oPushResult
5111: oCall 4625
5113: oPop 1
5115: oGetLocal 1
5117: oPushResult
5118: oSetResult 0
5120: oPushResult
5121: equal_label
5122: oPop 2
5124: oChoice 5133
5126: oGetAddrLocal 1
5128: oPushResult
5129: oLabelNew
5130: oAssign
5131: oJumpForward 5136
5133: Choice Lookup Table
           1   5126
5136: oEmit 55
5138: oGetLocal 1
5140: oPushResult
5141: oEmitLabel
5142: oPop 1
5144: oJumpForward 5153
5146: Choice Lookup Table
          29   5108
          30   5077
5151: oError 8
5153: oTypeSPop
5154: oEmit 58
5156: oGetFromParam 1
5158: oPushResult
5159: oEmitLabel
5160: oPop 1
5162: oGetParam 1
5164: oPushResult
5165: oSetResult 0
5167: oAssign
5168: oGetParam 1
5170: oPushResult
5171: oCall 5237
5173: oPop 1
5175: oTypeSNodeType
5176: oChoice 5189
5178: oJumpForward 5196
5180: oGetParam 1
5182: oPushResult
5183: oCall 4625
5185: oPop 1
5187: oJumpForward 5196
5189: Choice Lookup Table
          29   5180
          30   5178
5194: oError 8
5196: oTypeSPop
5197: oGetGlobal 7
5199: oPushResult
5200: oTypeSPush
5201: oPop 1
5203: oJumpForward 5210
5205: Choice Lookup Table
          55   5074
5208: oJumpForward 5212
5210: oJumpBack 5072
5212: oGetLocal 1
5214: oPushResult
5215: oSetResult 0
5217: oPushResult
5218: equal_label
5219: oPop 2
5221: oChoice 5233
5223: oEmit 58
5225: oGetLocal 1
5227: oPushResult
5228: oEmitLabel
5229: oPop 1
5231: oJumpForward 5236
5233: Choice Lookup Table
           0   5223
5236: oReturn
5237: oLocalSpace 2
5239: oGetAddrLocal 1
5241: oPushResult
5242: oSetResult 0
5244: oAssign
5245: oGetParam 1
5247: oPushResult
5248: oCall 5375
5250: oPop 1
5252: oInputChoice 5367
5254: oTypeSNodeType
5255: oChoice 5268
5257: oJumpForward 5275
5259: oGetParam 1
5261: oPushResult
5262: oCall 4625
5264: oPop 1
5266: oJumpForward 5275
5268: Choice Lookup Table
          29   5259
          30   5257
5273: oError 8
5275: oTypeSPop
5276: oGetLocal 1
5278: oPushResult
5279: oSetResult 0
5281: oPushResult
5282: equal_label
5283: oPop 2
5285: oChoice 5314
5287: oGetAddrLocal 1
5289: oPushResult
5290: oLabelNew
5291: oAssign
5292: oEmit 59
5294: oGetFromParam 1
5296: oPushResult
5297: oEmitLabel
5298: oPop 1
5300: oGetLocal 1
5302: oPushResult
5303: oEmitLabel
5304: oPop 1
5306: oGetParam 1
5308: oPushResult
5309: oGetLocal 1
5311: oAssign
5312: oJumpForward 5317
5314: Choice Lookup Table
           1   5287
5317: oGetAddrLocal 2
5319: oPushResult
5320: oSetResult 0
5322: oAssign
5323: oGetAddrLocal 2
5325: oPushResult
5326: oCall 5375
5328: oPop 1
5330: oTypeSNodeType
5331: oChoice 5344
5333: oJumpForward 5351
5335: oGetAddrLocal 2
5337: oPushResult
5338: oCall 4625
5340: oPop 1
5342: oJumpForward 5351
5344: Choice Lookup Table
          29   5335
          30   5333
5349: oError 8
5351: oEmit 59
5353: oGetLocal 2
5355: oPushResult
5356: oEmitLabel
5357: oPop 1
5359: oGetLocal 1
5361: oPushResult
5362: oEmitLabel
5363: oPop 1
5365: oJumpForward 5372
5367: Choice Lookup Table
          54   5254
5370: oJumpForward 5374
5372: oJumpBack 5252
5374: oReturn
5375: oLocalSpace 1
5377: oInputChoice 5431
5379: oGetAddrLocal 1
5381: oPushResult
5382: oSetResult 0
5384: oAssign
5385: oGetAddrLocal 1
5387: oPushResult
5388: oCall 5375
5390: oPop 1
5392: oTypeSNodeType
5393: oChoice 5422
5395: oGetParam 1
5397: oPushResult
5398: oLabelNew
5399: oAssign
5400: oEmit 55
5402: oGetFromParam 1
5404: oPushResult
5405: oEmitLabel
5406: oPop 1
5408: oEmit 58
5410: oGetLocal 1
5412: oPushResult
5413: oEmitLabel
5414: oPop 1
5416: oJumpForward 5429
5418: oEmit 39
5420: oJumpForward 5429
5422: Choice Lookup Table
          29   5418
          30   5395
5427: oError 8
5429: oJumpForward 5441
5431: Choice Lookup Table
          56   5379
5434: oGetParam 1
5436: oPushResult
5437: oCall 5442
5439: oPop 1
5441: oReturn
5442: oLocalSpace 0
5444: oGetParam 1
5446: oPushResult
5447: oCall 5493
5449: oPop 1
5451: oInputChoice 5483
5453: oCall 9122
5455: oGetParam 1
5457: oPushResult
5458: oCall 5493
5460: oPop 1
5462: oCall 9142
5464: oEmit 36
5466: oJumpForward 5490
5468: oCall 9122
5470: oGetParam 1
5472: oPushResult
5473: oCall 5493
5475: oPop 1
5477: oCall 9142
5479: oEmit 37
5481: oJumpForward 5490
5483: Choice Lookup Table
          25   5468
          24   5453
5488: oJumpForward 5492
5490: oJumpBack 5451
5492: oReturn
5493: oLocalSpace 0
5495: oGetParam 1
5497: oPushResult
5498: oCall 5544
5500: oPop 1
5502: oInputChoice 5534
5504: oCall 9122
5506: oGetParam 1
5508: oPushResult
5509: oCall 5544
5511: oPop 1
5513: oCall 9142
5515: oEmit 33
5517: oJumpForward 5541
5519: oCall 9122
5521: oGetParam 1
5523: oPushResult
5524: oCall 5544
5526: oPop 1
5528: oCall 9142
5530: oEmit 34
5532: oJumpForward 5541
5534: Choice Lookup Table
          23   5519
          22   5504
5539: oJumpForward 5543
5541: oJumpBack 5502
5543: oReturn
5544: oLocalSpace 0
5546: oInputChoice 5572
5548: oGetParam 1
5550: oPushResult
5551: oCall 5585
5553: oPop 1
5555: oCall 9142
5557: oJumpForward 5584
5559: oGetParam 1
5561: oPushResult
5562: oCall 5585
5564: oPop 1
5566: oCall 9142
5568: oEmit 38
5570: oJumpForward 5584
5572: Choice Lookup Table
          25   5559
          24   5548
5577: oGetParam 1
5579: oPushResult
5580: oCall 5585
5582: oPop 1
5584: oReturn
5585: oLocalSpace 6
5587: oInputChoice 5817
5589: oEmit 15
5591: TOKEN_VALUE
5592: oPushResult
5593: oEmitInt
5594: oPop 1
5596: oGetGlobal 5
5598: oPushResult
5599: oTypeSPush
5600: oPop 1
5602: oJumpForward 5838
5604: oEmit 15
5606: TOKEN_VALUE
5607: oPushResult
5608: oEmitInt
5609: oPop 1
5611: oGetGlobal 8
5613: oPushResult
5614: oTypeSPush
5615: oPop 1
5617: oJumpForward 5838
5619: oGetParam 1
5621: oPushResult
5622: oCall 4656
5624: oPop 1
5626: oInput 15
5628: oJumpForward 5838
5630: oGetAddrLocal 1
5632: oPushResult
5633: CURRENT_STRLIT
5634: oPushResult
5635: oStringAllocLit
5636: oPop 1
5638: oAssign
5639: oEmit 16
5641: oGetLocal 1
5643: oPushResult
5644: oEmitInt
5645: oPop 1
5647: oGetGlobal 10
5649: oPushResult
5650: oTypeSPush
5651: oPop 1
5653: oJumpForward 5838
5655: oGetAddrLocal 2
5657: oPushResult
5658: oScopeFindRequire
5659: oAssign
5660: oGetAddrLocal 2
5662: oPushResult
5663: oCall 409
5665: oPop 1
5667: oGetLocal 2
5669: oPushResult
5670: oNodeType
5671: oPop 1
5673: oChoice 5746
5675: oGetLocal 2
5677: oPushResult
5678: oCall 7070
5680: oPop 1
5682: oJumpForward 5769
5684: oGetLocal 2
5686: oPushResult
5687: oCall 7681
5689: oPop 1
5691: oJumpForward 5769
5693: oGetAddrLocal 3
5695: oPushResult
5696: oGetLocal 2
5698: oPushResult
5699: oSetResult 21
5701: oPushResult
5702: oNodeGet
5703: oPop 2
5705: oAssign
5706: oGetLocal 3
5708: oPushResult
5709: oTypeSPush
5710: oPop 1
5712: oTypeSNodeType
5713: oChoice 5726
5715: oEmit 15
5717: oGetLocal 2
5719: oPushResult
5720: oCall 9456
5722: oPop 1
5724: oJumpForward 5735
5726: Choice Lookup Table
          29   5715
          37   5715
          27   5715
5733: oError 16
5735: oJumpForward 5769
5737: oGetLocal 2
5739: oPushResult
5740: oCall 5839
5742: oPop 1
5744: oJumpForward 5769
5746: Choice Lookup Table
          23   5737
          21   5737
          20   5737
          17   5693
          16   5693
          14   5684
          13   5675
5761: oError 6
5763: oGetGlobal 5
5765: oPushResult
5766: oTypeSPush
5767: oPop 1
5769: oJumpForward 5838
5771: oInput 0
5773: oGetAddrLocal 4
5775: oPushResult
5776: oScopeFindRequire
5777: oAssign
5778: oGetAddrLocal 4
5780: oPushResult
5781: oCall 409
5783: oPop 1
5785: oGetLocal 4
5787: oPushResult
5788: oCall 8254
5790: oPop 1
5792: oGetAddrLocal 5
5794: oPushResult
5795: oTypeSTop
5796: oAssign
5797: oTypeSPop
5798: oGetAddrLocal 6
5800: oPushResult
5801: oGetLocal 5
5803: oPushResult
5804: oCall 9277
5806: oPop 1
5808: oAssign
5809: oGetLocal 6
5811: oPushResult
5812: oTypeSPush
5813: oPop 1
5815: oJumpForward 5838
5817: Choice Lookup Table
          19   5771
           0   5655
           2   5630
          14   5619
           3   5604
           1   5589
5830: oError 6
5832: oGetGlobal 5
5834: oPushResult
5835: oTypeSPush
5836: oPop 1
5838: oReturn
5839: oLocalSpace 2
5841: oGetAddrLocal 1
5843: oPushResult
5844: oGetParam 1
5846: oPushResult
5847: oSetResult 21
5849: oPushResult
5850: oNodeGet
5851: oPop 2
5853: oAssign
5854: oGetAddrLocal 2
5856: oPushResult
5857: oGetParam 1
5859: oPushResult
5860: oCall 9051
5862: oPop 1
5864: oAssign
5865: oGetLocal 1
5867: oPushResult
5868: oTypeSPush
5869: oPop 1
5871: oTypeSNodeType
5872: oChoice 6553
5874: oGetParam 1
5876: oPushResult
5877: oNodeType
5878: oPop 1
5880: oChoice 6026
5882: oEmit 0
5884: oGetParam 1
5886: oPushResult
5887: oCall 9456
5889: oPop 1
5891: oJumpForward 6034
5893: oGetLocal 2
5895: oPushResult
5896: equal_zero
5897: oPop 1
5899: oChoice 5912
5901: oEmit 3
5903: oGetParam 1
5905: oPushResult
5906: oCall 9456
5908: oPop 1
5910: oJumpForward 5930
5912: Choice Lookup Table
           1   5901
5915: oEmit 9
5917: oGetLocal 2
5919: oPushResult
5920: oEmitInt
5921: oPop 1
5923: oGetParam 1
5925: oPushResult
5926: oCall 9456
5928: oPop 1
5930: oJumpForward 6034
5932: oGetParam 1
5934: oPushResult
5935: oSetResult 33
5937: oPushResult
5938: oNodeGetBoolean
5939: oPop 2
5941: oChoice 5984
5943: oGetLocal 2
5945: oPushResult
5946: equal_zero
5947: oPop 1
5949: oChoice 5962
5951: oEmit 8
5953: oGetParam 1
5955: oPushResult
5956: oCall 9456
5958: oPop 1
5960: oJumpForward 5980
5962: Choice Lookup Table
           1   5951
5965: oEmit 14
5967: oGetLocal 2
5969: oPushResult
5970: oEmitInt
5971: oPop 1
5973: oGetParam 1
5975: oPushResult
5976: oCall 9456
5978: oPop 1
5980: oEmit 22
5982: oJumpForward 6024
5984: Choice Lookup Table
           1   5943
5987: oGetLocal 2
5989: oPushResult
5990: equal_zero
5991: oPop 1
5993: oChoice 6006
5995: oEmit 6
5997: oGetParam 1
5999: oPushResult
6000: oCall 9456
6002: oPop 1
6004: oJumpForward 6024
6006: Choice Lookup Table
           1   5995
6009: oEmit 12
6011: oGetLocal 2
6013: oPushResult
6014: oEmitInt
6015: oPop 1
6017: oGetParam 1
6019: oPushResult
6020: oCall 9456
6022: oPop 1
6024: oJumpForward 6034
6026: Choice Lookup Table
          23   5932
          21   5893
          20   5882
6033: oEndChoice
6034: oJumpForward 6575
6036: oGetParam 1
6038: oPushResult
6039: oNodeType
6040: oPop 1
6042: oChoice 6188
6044: oEmit 1
6046: oGetParam 1
6048: oPushResult
6049: oCall 9456
6051: oPop 1
6053: oJumpForward 6196
6055: oGetLocal 2
6057: oPushResult
6058: equal_zero
6059: oPop 1
6061: oChoice 6074
6063: oEmit 4
6065: oGetParam 1
6067: oPushResult
6068: oCall 9456
6070: oPop 1
6072: oJumpForward 6092
6074: Choice Lookup Table
           1   6063
6077: oEmit 10
6079: oGetLocal 2
6081: oPushResult
6082: oEmitInt
6083: oPop 1
6085: oGetParam 1
6087: oPushResult
6088: oCall 9456
6090: oPop 1
6092: oJumpForward 6196
6094: oGetParam 1
6096: oPushResult
6097: oSetResult 33
6099: oPushResult
6100: oNodeGetBoolean
6101: oPop 2
6103: oChoice 6146
6105: oGetLocal 2
6107: oPushResult
6108: equal_zero
6109: oPop 1
6111: oChoice 6124
6113: oEmit 8
6115: oGetParam 1
6117: oPushResult
6118: oCall 9456
6120: oPop 1
6122: oJumpForward 6142
6124: Choice Lookup Table
           1   6113
6127: oEmit 14
6129: oGetLocal 2
6131: oPushResult
6132: oEmitInt
6133: oPop 1
6135: oGetParam 1
6137: oPushResult
6138: oCall 9456
6140: oPop 1
6142: oEmit 23
6144: oJumpForward 6186
6146: Choice Lookup Table
           1   6105
6149: oGetLocal 2
6151: oPushResult
6152: equal_zero
6153: oPop 1
6155: oChoice 6168
6157: oEmit 7
6159: oGetParam 1
6161: oPushResult
6162: oCall 9456
6164: oPop 1
6166: oJumpForward 6186
6168: Choice Lookup Table
           1   6157
6171: oEmit 13
6173: oGetLocal 2
6175: oPushResult
6176: oEmitInt
6177: oPop 1
6179: oGetParam 1
6181: oPushResult
6182: oCall 9456
6184: oPop 1
6186: oJumpForward 6196
6188: Choice Lookup Table
          23   6094
          21   6055
          20   6044
6195: oEndChoice
6196: oJumpForward 6575
6198: oError 16
6200: oJumpForward 6575
6202: oGetParam 1
6204: oPushResult
6205: oNodeType
6206: oPop 1
6208: oChoice 6354
6210: oEmit 2
6212: oGetParam 1
6214: oPushResult
6215: oCall 9456
6217: oPop 1
6219: oJumpForward 6362
6221: oGetLocal 2
6223: oPushResult
6224: equal_zero
6225: oPop 1
6227: oChoice 6240
6229: oEmit 5
6231: oGetParam 1
6233: oPushResult
6234: oCall 9456
6236: oPop 1
6238: oJumpForward 6258
6240: Choice Lookup Table
           1   6229
6243: oEmit 11
6245: oGetLocal 2
6247: oPushResult
6248: oEmitInt
6249: oPop 1
6251: oGetParam 1
6253: oPushResult
6254: oCall 9456
6256: oPop 1
6258: oJumpForward 6362
6260: oGetParam 1
6262: oPushResult
6263: oSetResult 33
6265: oPushResult
6266: oNodeGetBoolean
6267: oPop 2
6269: oChoice 6312
6271: oGetLocal 2
6273: oPushResult
6274: equal_zero
6275: oPop 1
6277: oChoice 6290
6279: oEmit 8
6281: oGetParam 1
6283: oPushResult
6284: oCall 9456
6286: oPop 1
6288: oJumpForward 6308
6290: Choice Lookup Table
           1   6279
6293: oEmit 14
6295: oGetLocal 2
6297: oPushResult
6298: oEmitInt
6299: oPop 1
6301: oGetParam 1
6303: oPushResult
6304: oCall 9456
6306: oPop 1
6308: oEmit 24
6310: oJumpForward 6352
6312: Choice Lookup Table
           1   6271
6315: oGetLocal 2
6317: oPushResult
6318: equal_zero
6319: oPop 1
6321: oChoice 6334
6323: oEmit 8
6325: oGetParam 1
6327: oPushResult
6328: oCall 9456
6330: oPop 1
6332: oJumpForward 6352
6334: Choice Lookup Table
           1   6323
6337: oEmit 14
6339: oGetLocal 2
6341: oPushResult
6342: oEmitInt
6343: oPop 1
6345: oGetParam 1
6347: oPushResult
6348: oCall 9456
6350: oPop 1
6352: oJumpForward 6362
6354: Choice Lookup Table
          23   6260
          21   6221
          20   6210
6361: oEndChoice
6362: oInputChoice 6384
6364: oTypeSPop
6365: oGetLocal 1
6367: oPushResult
6368: oSetResult 36
6370: oPushResult
6371: oNodeGet
6372: oPop 2
6374: oPushResult
6375: oTypeSPush
6376: oPop 1
6378: oCall 6622
6380: oCall 6576
6382: oJumpForward 6387
6384: Choice Lookup Table
          18   6364
6387: oJumpForward 6575
6389: oGetParam 1
6391: oPushResult
6392: oNodeType
6393: oPop 1
6395: oChoice 6539
6397: oEmit 16
6399: oGetParam 1
6401: oPushResult
6402: oCall 9456
6404: oPop 1
6406: oJumpForward 6547
6408: oGetLocal 2
6410: oPushResult
6411: equal_zero
6412: oPop 1
6414: oChoice 6427
6416: oEmit 17
6418: oGetParam 1
6420: oPushResult
6421: oCall 9456
6423: oPop 1
6425: oJumpForward 6445
6427: Choice Lookup Table
           1   6416
6430: oEmit 20
6432: oGetLocal 2
6434: oPushResult
6435: oEmitInt
6436: oPop 1
6438: oGetParam 1
6440: oPushResult
6441: oCall 9456
6443: oPop 1
6445: oJumpForward 6547
6447: oGetParam 1
6449: oPushResult
6450: oSetResult 33
6452: oPushResult
6453: oNodeGetBoolean
6454: oPop 2
6456: oChoice 6497
6458: oGetLocal 2
6460: oPushResult
6461: equal_zero
6462: oPop 1
6464: oChoice 6477
6466: oEmit 8
6468: oGetParam 1
6470: oPushResult
6471: oCall 9456
6473: oPop 1
6475: oJumpForward 6495
6477: Choice Lookup Table
           1   6466
6480: oEmit 14
6482: oGetLocal 2
6484: oPushResult
6485: oEmitInt
6486: oPop 1
6488: oGetParam 1
6490: oPushResult
6491: oCall 9456
6493: oPop 1
6495: oJumpForward 6537
6497: Choice Lookup Table
           1   6458
6500: oGetLocal 2
6502: oPushResult
6503: equal_zero
6504: oPop 1
6506: oChoice 6519
6508: oEmit 18
6510: oGetParam 1
6512: oPushResult
6513: oCall 9456
6515: oPop 1
6517: oJumpForward 6537
6519: Choice Lookup Table
           1   6508
6522: oEmit 21
6524: oGetLocal 2
6526: oPushResult
6527: oEmitInt
6528: oPop 1
6530: oGetParam 1
6532: oPushResult
6533: oCall 9456
6535: oPop 1
6537: oJumpForward 6547
6539: Choice Lookup Table
          23   6447
          21   6408
          20   6397
6546: oEndChoice
6547: oCall 6622
6549: oCall 6576
6551: oJumpForward 6575
6553: Choice Lookup Table
          36   6389
          34   6389
          33   6202
          26   6198
          32   6198
          31   6036
          28   6036
          29   6036
          37   5874
          27   5874
6574: oEndChoice
6575: oReturn
6576: oLocalSpace 0
6578: oTypeSNodeType
6579: oChoice 6599
6581: oEmit 22
6583: oJumpForward 6621
6585: oEmit 23
6587: oJumpForward 6621
6589: oError 16
6591: oJumpForward 6621
6593: oEmit 24
6595: oJumpForward 6621
6597: oJumpForward 6621
6599: Choice Lookup Table
          36   6597
          34   6597
          33   6593
          26   6589
          32   6589
          31   6585
          28   6585
          29   6585
          37   6581
          27   6581
6620: oEndChoice
6621: oReturn
6622: oLocalSpace 0
6624: oInputChoice 6638
6626: oCall 6650
6628: oJumpForward 6647
6630: oCall 6793
6632: oJumpForward 6647
6634: oCall 6891
6636: oJumpForward 6647
6638: Choice Lookup Table
          18   6634
          20   6630
          16   6626
6645: oJumpForward 6649
6647: oJumpBack 6624
6649: oReturn
6650: oLocalSpace 3
6652: oTypeSNodeType
6653: oChoice 6657
6655: oJumpForward 6662
6657: Choice Lookup Table
          34   6655
6660: oError 10
6662: oTypeSNodeType
6663: oChoice 6667
6665: oJumpForward 6672
6667: Choice Lookup Table
          34   6665
6670: oError 13
6672: oGetAddrLocal 1
6674: oPushResult
6675: oTypeSTop
6676: oPushResult
6677: oSetResult 37
6679: oPushResult
6680: oNodeGet
6681: oPop 2
6683: oPushResult
6684: oCall 9361
6686: oPop 1
6688: oAssign
6689: oGetAddrLocal 2
6691: oPushResult
6692: oTypeSTop
6693: oPushResult
6694: oSetResult 36
6696: oPushResult
6697: oNodeGet
6698: oPop 2
6700: oAssign
6701: oTypeSPop
6702: oGetLocal 2
6704: oPushResult
6705: oTypeSPush
6706: oPop 1
6708: oCall 4495
6710: oCall 9095
6712: oGetLocal 1
6714: oPushResult
6715: equal_zero
6716: oPop 1
6718: oChoice 6732
6720: oEmit 15
6722: oGetLocal 1
6724: oPushResult
6725: oEmitInt
6726: oPop 1
6728: oEmit 37
6730: oJumpForward 6735
6732: Choice Lookup Table
           0   6720
6735: oGetAddrLocal 3
6737: oPushResult
6738: oGetLocal 2
6740: oPushResult
6741: oSetResult 17
6743: oPushResult
6744: oNodeGetInt
6745: oPop 2
6747: oAssign
6748: oGetLocal 3
6750: oPushResult
6751: oSetResult 1
6753: oPushResult
6754: equal
6755: oPop 2
6757: oChoice 6771
6759: oEmit 15
6761: oGetLocal 3
6763: oPushResult
6764: oEmitInt
6765: oPop 1
6767: oEmit 33
6769: oJumpForward 6774
6771: Choice Lookup Table
           0   6759
6774: oEmit 35
6776: oInputChoice 6784
6778: oJumpForward 6792
6780: oJumpForward 6790
6782: oJumpForward 6790
6784: Choice Lookup Table
          13   6782
          17   6778
6789: oEndChoice
6790: oJumpBack 6662
6792: oReturn
6793: oLocalSpace 2
6795: oTypeSNodeType
6796: oChoice 6800
6798: oJumpForward 6805
6800: Choice Lookup Table
          36   6798
6803: oError 11
6805: oTypeSTop
6806: oPushResult
6807: oSetResult 40
6809: oPushResult
6810: oNodeGet
6811: oPop 2
6813: oPushResult
6814: oScopeEnter
6815: oPop 1
6817: oInput 0
6819: oGetAddrLocal 1
6821: oPushResult
6822: oScopeFindRequire
6823: oAssign
6824: oGetLocal 1
6826: oPushResult
6827: oNodeType
6828: oPop 1
6830: oChoice 6834
6832: oJumpForward 6839
6834: Choice Lookup Table
          22   6832
6837: oError 12
6839: oScopeEnd
6840: oGetAddrLocal 2
6842: oPushResult
6843: oGetLocal 1
6845: oPushResult
6846: oSetResult 22
6848: oPushResult
6849: oNodeGetInt
6850: oPop 2
6852: oAssign
6853: oGetLocal 2
6855: oPushResult
6856: equal_zero
6857: oPop 1
6859: oChoice 6873
6861: oEmit 15
6863: oGetLocal 2
6865: oPushResult
6866: oEmitInt
6867: oPop 1
6869: oEmit 35
6871: oJumpForward 6876
6873: Choice Lookup Table
           0   6861
6876: oTypeSPop
6877: oGetLocal 1
6879: oPushResult
6880: oSetResult 21
6882: oPushResult
6883: oNodeGet
6884: oPop 2
6886: oPushResult
6887: oTypeSPush
6888: oPop 1
6890: oReturn
6891: oLocalSpace 1
6893: oTypeSNodeType
6894: oChoice 6898
6896: oJumpForward 6903
6898: Choice Lookup Table
          33   6896
6901: oError 9
6903: oEmit 24
6905: oGetAddrLocal 1
6907: oPushResult
6908: oTypeSTop
6909: oAssign
6910: oTypeSPop
6911: oGetLocal 1
6913: oPushResult
6914: oSetResult 36
6916: oPushResult
6917: oNodeGet
6918: oPop 2
6920: oPushResult
6921: oTypeSPush
6922: oPop 1
6924: oReturn
6925: oLocalSpace 1
6927: oGetAddrLocal 1
6929: oPushResult
6930: oTypeSNodeType
6931: oAssign
6932: oTypeSPop
6933: oGetLocal 1
6935: oPushResult
6936: oTypeSNodeType
6937: oPushResult
6938: equal_node_type
6939: oPop 2
6941: oChoice 6983
6943: oTypeSNodeType
6944: oChoice 6974
6946: oGetLocal 1
6948: oChoice 6955
6950: oEmit 29
6952: oReturn
6953: oJumpForward 6958
6955: Choice Lookup Table
          28   6950
6958: oJumpForward 6979
6960: oGetLocal 1
6962: oChoice 6969
6964: oEmit 30
6966: oReturn
6967: oJumpForward 6972
6969: Choice Lookup Table
          27   6964
6972: oJumpForward 6979
6974: Choice Lookup Table
          28   6960
          27   6946
6979: oError 14
6981: oJumpForward 6986
6983: Choice Lookup Table
           0   6943
6986: oReturn
6987: oLocalSpace 2
6989: oGetAddrLocal 2
6991: oPushResult
6992: oGetParam 1
6994: oPushResult
6995: oSetResult 26
6997: oPushResult
6998: oNodeGetString
6999: oPop 2
7001: oAssign
7002: oGetLocal 2
7004: oPushResult
7005: oSetResult 0
7007: oPushResult
7008: equal_string
7009: oPop 2
7011: oChoice 7048
7013: oGetAddrLocal 1
7015: oPushResult
7016: oGetParam 1
7018: oPushResult
7019: oSetResult 4
7021: oPushResult
7022: oNodeGetInt
7023: oPop 2
7025: oPushResult
7026: ID_STRING
7027: oPop 1
7029: oPushResult
7030: oStringAllocLit
7031: oPop 1
7033: oAssign
7034: oJumpForward 7054
7036: oGetAddrLocal 1
7038: oPushResult
7039: oGetLocal 2
7041: oPushResult
7042: oStringAllocLit
7043: oPop 1
7045: oAssign
7046: oJumpForward 7054
7048: Choice Lookup Table
           0   7036
           1   7013
7053: oEndChoice
7054: oEmit 60
7056: oGetParam 1
7058: oPushResult
7059: oCall 9456
7061: oPop 1
7063: oGetLocal 1
7065: oPushResult
7066: oEmitInt
7067: oPop 1
7069: oReturn
7070: oLocalSpace 10
7072: oGetParam 1
7074: oPushResult
7075: oSetResult 25
7077: oPushResult
7078: oNodeGetBoolean
7079: oPop 2
7081: oChoice 7108
7083: oGetParam 1
7085: oPushResult
7086: oSetResult 28
7088: oPushResult
7089: oNodeGetBoolean
7090: oPop 2
7092: oChoice 7103
7094: oGetParam 1
7096: oPushResult
7097: oCall 6987
7099: oPop 1
7101: oJumpForward 7106
7103: Choice Lookup Table
           0   7094
7106: oJumpForward 7111
7108: Choice Lookup Table
           1   7083
7111: oGetParam 1
7113: oPushResult
7114: oSetResult 28
7116: oPushResult
7117: oSetResult 1
7119: oPushResult
7120: oNodeSetBoolean
7121: oPop 3
7123: oGetAddrLocal 1
7125: oPushResult
7126: oGetParam 1
7128: oPushResult
7129: oSetResult 27
7131: oPushResult
7132: oNodeGetBoolean
7133: oPop 2
7135: oAssign
7136: oGetAddrLocal 4
7138: oPushResult
7139: oGetParam 1
7141: oPushResult
7142: oNodeType
7143: oPop 1
7145: oPushResult
7146: oSetResult 13
7148: oPushResult
7149: equal_node_type
7150: oPop 2
7152: oAssign
7153: oGetLocal 4
7155: oChoice 7182
7157: oGetAddrLocal 2
7159: oPushResult
7160: oGetParam 1
7162: oPushResult
7163: oSetResult 21
7165: oPushResult
7166: oNodeGet
7167: oPop 2
7169: oAssign
7170: oGetAddrLocal 3
7172: oPushResult
7173: oGetLocal 2
7175: oPushResult
7176: oScopeAllocType
7177: oPop 1
7179: oAssign
7180: oJumpForward 7185
7182: Choice Lookup Table
           1   7157
7185: oGetAddrLocal 5
7187: oPushResult
7188: oGetParam 1
7190: oPushResult
7191: oSetResult 23
7193: oPushResult
7194: oNodeGet
7195: oPop 2
7197: oAssign
7198: oGetAddrLocal 6
7200: oPushResult
7201: oGetLocal 5
7203: oPushResult
7204: oSetResult 17
7206: oPushResult
7207: oNodeGetInt
7208: oPop 2
7210: oAssign
7211: oGetLocal 1
7213: oChoice 7235
7215: oEmit 49
7217: oGetLocal 6
7219: oPushResult
7220: oEmitInt
7221: oPop 1
7223: oJumpForward 7241
7225: oEmit 48
7227: oGetLocal 6
7229: oPushResult
7230: oEmitInt
7231: oPop 1
7233: oJumpForward 7241
7235: Choice Lookup Table
           0   7225
           1   7215
7240: oEndChoice
7241: oGetParam 1
7243: oPushResult
7244: oCall 9031
7246: oPop 1
7248: oPushResult
7249: oSetResult 0
7251: oPushResult
7252: greater
7253: oPop 2
7255: oChoice 7288
7257: oEmit 19
7259: oSetResult 0
7261: oPushResult
7262: oEmitInt
7263: oPop 1
7265: oEmit 20
7267: oGetParam 1
7269: oPushResult
7270: oCall 9051
7272: oPop 1
7274: oPushResult
7275: oEmitInt
7276: oPop 1
7278: oSetResult 0
7280: oPushResult
7281: oEmitInt
7282: oPop 1
7284: oEmit 27
7286: oJumpForward 7291
7288: Choice Lookup Table
           1   7257
7291: oGetAddrLocal 7
7293: oPushResult
7294: oGetLocal 5
7296: oPushResult
7297: oSetResult 15
7299: oPushResult
7300: oNodeGetIter
7301: oPop 2
7303: oAssign
7304: oGetAddrLocal 8
7306: oPushResult
7307: oGetLocal 7
7309: oPushResult
7310: oNodeIterValue
7311: oPop 1
7313: oAssign
7314: oInputChoice 7504
7316: oGetLocal 8
7318: oPushResult
7319: oNodeNull
7320: oPop 1
7322: oChoice 7328
7324: oJumpForward 7500
7326: oJumpForward 7331
7328: Choice Lookup Table
           1   7324
7331: oGetAddrLocal 9
7333: oPushResult
7334: oGetLocal 8
7336: oPushResult
7337: oSetResult 22
7339: oPushResult
7340: oNodeGetInt
7341: oPop 2
7343: oAssign
7344: oEmit 19
7346: oGetLocal 9
7348: oPushResult
7349: oEmitInt
7350: oPop 1
7352: oGetLocal 8
7354: oPushResult
7355: oSetResult 21
7357: oPushResult
7358: oNodeGet
7359: oPop 2
7361: oPushResult
7362: oTypeSPush
7363: oPop 1
7365: oGetLocal 8
7367: oPushResult
7368: oSetResult 33
7370: oPushResult
7371: oNodeGetBoolean
7372: oPop 2
7374: oChoice 7453
7376: oCall 8211
7378: oCall 9069
7380: oEmit 27
7382: oJumpForward 7459
7384: oCall 4495
7386: oCall 6925
7388: oTypeSNodeType
7389: oChoice 7429
7391: oEmit 25
7393: oJumpForward 7451
7395: oEmit 26
7397: oJumpForward 7451
7399: oError 16
7401: oJumpForward 7451
7403: oEmit 27
7405: oJumpForward 7451
7407: oGetAddrLocal 10
7409: oPushResult
7410: oTypeSTop
7411: oPushResult
7412: oSetResult 17
7414: oPushResult
7415: oNodeGetInt
7416: oPop 2
7418: oAssign
7419: oEmit 28
7421: oGetLocal 10
7423: oPushResult
7424: oEmitInt
7425: oPop 1
7427: oJumpForward 7451
7429: Choice Lookup Table
          36   7407
          34   7407
          33   7403
          26   7399
          32   7399
          31   7395
          28   7395
          29   7395
          37   7391
          27   7391
7450: oEndChoice
7451: oJumpForward 7459
7453: Choice Lookup Table
           0   7384
           1   7376
7458: oEndChoice
7459: oTypeSPop
7460: oGetAddrLocal 7
7462: oPushResult
7463: oNodeIterNext
7464: oPop 1
7466: oGetAddrLocal 8
7468: oPushResult
7469: oGetLocal 7
7471: oPushResult
7472: oNodeIterValue
7473: oPop 1
7475: oAssign
7476: oGetLocal 8
7478: oPushResult
7479: oNodeNull
7480: oPop 1
7482: oChoice 7490
7484: oJumpForward 7500
7486: oJumpForward 7496
7488: oJumpForward 7496
7490: Choice Lookup Table
           0   7488
           1   7484
7495: oEndChoice
7496: oInput 13
7498: oJumpBack 7316
7500: oInput 15
7502: oJumpForward 7507
7504: Choice Lookup Table
          14   7316
7507: oGetLocal 8
7509: oPushResult
7510: oNodeNull
7511: oPop 1
7513: oChoice 7519
7515: oError 15
7517: oJumpForward 7522
7519: Choice Lookup Table
           0   7515
7522: oGetLocal 4
7524: oChoice 7553
7526: oEmit 19
7528: oGetParam 1
7530: oPushResult
7531: oSetResult 31
7533: oPushResult
7534: oNodeGetInt
7535: oPop 2
7537: oPushResult
7538: oEmitInt
7539: oPop 1
7541: oEmit 17
7543: oGetLocal 3
7545: oPushResult
7546: oEmitInt
7547: oPop 1
7549: oEmit 27
7551: oJumpForward 7556
7553: Choice Lookup Table
           1   7526
7556: oGetLocal 1
7558: oChoice 7582
7560: oEmit 52
7562: oGetParam 1
7564: oPushResult
7565: oCall 9456
7567: oPop 1
7569: oJumpForward 7588
7571: oEmit 51
7573: oGetParam 1
7575: oPushResult
7576: oCall 9456
7578: oPop 1
7580: oJumpForward 7588
7582: Choice Lookup Table
           0   7571
           1   7560
7587: oEndChoice
7588: oGetLocal 4
7590: oChoice 7669
7592: oGetLocal 2
7594: oPushResult
7595: oTypeSPush
7596: oPop 1
7598: oTypeSNodeType
7599: oChoice 7645
7601: oEmit 3
7603: oGetLocal 3
7605: oPushResult
7606: oEmitInt
7607: oPop 1
7609: oJumpForward 7667
7611: oEmit 4
7613: oGetLocal 3
7615: oPushResult
7616: oEmitInt
7617: oPop 1
7619: oJumpForward 7667
7621: oError 16
7623: oJumpForward 7667
7625: oEmit 5
7627: oGetLocal 3
7629: oPushResult
7630: oEmitInt
7631: oPop 1
7633: oJumpForward 7667
7635: oEmit 17
7637: oGetLocal 3
7639: oPushResult
7640: oEmitInt
7641: oPop 1
7643: oJumpForward 7667
7645: Choice Lookup Table
          36   7635
          34   7635
          33   7625
          26   7621
          32   7621
          31   7611
          28   7611
          29   7611
          37   7601
          27   7601
7666: oEndChoice
7667: oJumpForward 7672
7669: Choice Lookup Table
           1   7592
7672: oEmit 50
7674: oGetLocal 6
7676: oPushResult
7677: oEmitInt
7678: oPop 1
7680: oReturn
7681: oLocalSpace 0
7683: oGetParam 1
7685: oPushResult
7686: oGetGlobal 11
7688: oPushResult
7689: oNodeEqual
7690: oPop 2
7692: oChoice 7732
7694: oInput 14
7696: oCall 4495
7698: oTypeSNodeType
7699: oChoice 7707
7701: oJumpForward 7720
7703: oEmit 29
7705: oJumpForward 7720
7707: Choice Lookup Table
          31   7703
          28   7703
          29   7703
          37   7701
          27   7701
7718: oError 14
7720: oTypeSPop
7721: oGetGlobal 5
7723: oPushResult
7724: oTypeSPush
7725: oPop 1
7727: oInput 15
7729: oReturn
7730: oJumpForward 7735
7732: Choice Lookup Table
           1   7694
7735: oGetParam 1
7737: oPushResult
7738: oGetGlobal 12
7740: oPushResult
7741: oNodeEqual
7742: oPop 2
7744: oChoice 7778
7746: oInput 14
7748: oCall 4495
7750: oTypeSNodeType
7751: oChoice 7759
7753: oEmit 30
7755: oJumpForward 7766
7757: oJumpForward 7766
7759: Choice Lookup Table
          28   7757
          27   7753
7764: oError 14
7766: oTypeSPop
7767: oGetGlobal 8
7769: oPushResult
7770: oTypeSPush
7771: oPop 1
7773: oInput 15
7775: oReturn
7776: oJumpForward 7781
7778: Choice Lookup Table
           1   7746
7781: oError 16
7783: oReturn
7784: oLocalSpace 0
7786: oInputChoice 7845
7788: oCall 8907
7790: oJumpForward 7874
7792: oCall 8914
7794: oJumpForward 7874
7796: oCall 9013
7798: oJumpForward 7874
7800: oCall 9016
7802: oJumpForward 7874
7804: oCall 8395
7806: oJumpForward 7874
7808: oCall 8715
7810: oJumpForward 7874
7812: oCall 8461
7814: oJumpForward 7874
7816: oCall 8635
7818: oJumpForward 7874
7820: oCall 8800
7822: oJumpForward 7874
7824: oCall 8768
7826: oJumpForward 7874
7828: oCall 8884
7830: oJumpForward 7874
7832: oCall 7875
7834: oJumpForward 7874
7836: oCall 8832
7838: oJumpForward 7874
7840: oChangeIntLitToLabelIdent
7841: oCall 7875
7843: oJumpForward 7874
7845: Choice Lookup Table
           1   7840
          53   7836
           0   7832
          35   7828
          51   7824
          52   7820
          49   7816
          44   7812
          48   7808
          41   7804
          66   7800
          65   7796
          64   7792
          63   7788
7874: oReturn
7875: oLocalSpace 1
7877: oGetAddrLocal 1
7879: oPushResult
7880: oScopeFindRequire
7881: oAssign
7882: oGetAddrLocal 1
7884: oPushResult
7885: oCall 409
7887: oPop 1
7889: oGetLocal 1
7891: oPushResult
7892: oNodeType
7893: oPop 1
7895: oChoice 7935
7897: oGetLocal 1
7899: oPushResult
7900: oCall 7951
7902: oPop 1
7904: oCall 7784
7906: oJumpForward 7950
7908: oGetLocal 1
7910: oPushResult
7911: oCall 7070
7913: oPop 1
7915: oJumpForward 7950
7917: oGetLocal 1
7919: oPushResult
7920: oCall 8001
7922: oPop 1
7924: oJumpForward 7950
7926: oGetLocal 1
7928: oPushResult
7929: oCall 8086
7931: oPop 1
7933: oJumpForward 7950
7935: Choice Lookup Table
          13   7926
          23   7917
          21   7917
          20   7917
          12   7908
          24   7897
7948: oError 0
7950: oReturn
7951: oLocalSpace 0
7953: oGetParam 1
7955: oPushResult
7956: oSetResult 34
7958: oPushResult
7959: oNodeGetBoolean
7960: oPop 2
7962: oChoice 7968
7964: oError 21
7966: oJumpForward 7971
7968: Choice Lookup Table
           1   7964
7971: oEmit 58
7973: oGetParam 1
7975: oPushResult
7976: oSetResult 22
7978: oPushResult
7979: oNodeGetLabel
7980: oPop 2
7982: oPushResult
7983: oEmitLabel
7984: oPop 1
7986: oGetParam 1
7988: oPushResult
7989: oSetResult 34
7991: oPushResult
7992: oSetResult 1
7994: oPushResult
7995: oNodeSetBoolean
7996: oPop 3
7998: oInput 12
8000: oReturn
8001: oLocalSpace 0
8003: oGetParam 1
8005: oPushResult
8006: oCall 8254
8008: oPop 1
8010: oInput 4
8012: oCall 4495
8014: oCall 6925
8016: oCall 8019
8018: oReturn
8019: oLocalSpace 1
8021: oTypeSNodeType
8022: oChoice 8062
8024: oEmit 25
8026: oJumpForward 8084
8028: oEmit 26
8030: oJumpForward 8084
8032: oError 16
8034: oJumpForward 8084
8036: oEmit 27
8038: oJumpForward 8084
8040: oGetAddrLocal 1
8042: oPushResult
8043: oTypeSTop
8044: oPushResult
8045: oSetResult 17
8047: oPushResult
8048: oNodeGetInt
8049: oPop 2
8051: oAssign
8052: oEmit 28
8054: oGetLocal 1
8056: oPushResult
8057: oEmitInt
8058: oPop 1
8060: oJumpForward 8084
8062: Choice Lookup Table
          36   8040
          34   8040
          33   8036
          26   8032
          32   8032
          31   8028
          28   8028
          29   8028
          37   8024
          27   8024
8083: oEndChoice
8084: oTypeSPop
8085: oReturn
8086: oLocalSpace 1
8088: oGetParam 1
8090: oPushResult
8091: oSetResult 6
8093: oPushResult
8094: oNodeGet
8095: oPop 2
8097: oPushResult
8098: oScopeCurrent
8099: oPushResult
8100: oNodeEqual
8101: oPop 2
8103: oChoice 8109
8105: oError 20
8107: oJumpForward 8112
8109: Choice Lookup Table
           0   8105
8112: oEmit 8
8114: oGetParam 1
8116: oPushResult
8117: oSetResult 31
8119: oPushResult
8120: oNodeGetInt
8121: oPop 2
8123: oPushResult
8124: oEmitInt
8125: oPop 1
8127: oGetParam 1
8129: oPushResult
8130: oSetResult 21
8132: oPushResult
8133: oNodeGet
8134: oPop 2
8136: oPushResult
8137: oTypeSPush
8138: oPop 1
8140: oInput 4
8142: oCall 4495
8144: oCall 6925
8146: oTypeSNodeType
8147: oChoice 8187
8149: oEmit 25
8151: oJumpForward 8209
8153: oEmit 26
8155: oJumpForward 8209
8157: oError 16
8159: oJumpForward 8209
8161: oEmit 27
8163: oJumpForward 8209
8165: oGetAddrLocal 1
8167: oPushResult
8168: oTypeSTop
8169: oPushResult
8170: oSetResult 17
8172: oPushResult
8173: oNodeGetInt
8174: oPop 2
8176: oAssign
8177: oEmit 28
8179: oGetLocal 1
8181: oPushResult
8182: oEmitInt
8183: oPop 1
8185: oJumpForward 8209
8187: Choice Lookup Table
          36   8165
          34   8165
          33   8161
          26   8157
          32   8157
          31   8153
          28   8153
          29   8153
          37   8149
          27   8149
8208: oEndChoice
8209: oTypeSPop
8210: oReturn
8211: oLocalSpace 1
8213: oInput 0
8215: oGetAddrLocal 1
8217: oPushResult
8218: oScopeFindRequire
8219: oAssign
8220: oGetAddrLocal 1
8222: oPushResult
8223: oCall 409
8225: oPop 1
8227: oGetLocal 1
8229: oPushResult
8230: oNodeType
8231: oPop 1
8233: oChoice 8237
8235: oJumpForward 8246
8237: Choice Lookup Table
          23   8235
          21   8235
          20   8235
8244: oError 4
8246: oGetLocal 1
8248: oPushResult
8249: oCall 8254
8251: oPop 1
8253: oReturn
8254: oLocalSpace 0
8256: oGetParam 1
8258: oPushResult
8259: oNodeType
8260: oPop 1
8262: oChoice 8322
8264: oEmit 16
8266: oGetParam 1
8268: oPushResult
8269: oCall 9456
8271: oPop 1
8273: oJumpForward 8331
8275: oEmit 17
8277: oGetParam 1
8279: oPushResult
8280: oCall 9456
8282: oPop 1
8284: oJumpForward 8331
8286: oGetParam 1
8288: oPushResult
8289: oSetResult 33
8291: oPushResult
8292: oNodeGetBoolean
8293: oPop 2
8295: oChoice 8308
8297: oEmit 8
8299: oGetParam 1
8301: oPushResult
8302: oCall 9456
8304: oPop 1
8306: oJumpForward 8320
8308: Choice Lookup Table
           1   8297
8311: oEmit 18
8313: oGetParam 1
8315: oPushResult
8316: oCall 9456
8318: oPop 1
8320: oJumpForward 8331
8322: Choice Lookup Table
          23   8286
          21   8275
          20   8264
8329: oError 4
8331: oGetParam 1
8333: oPushResult
8334: oSetResult 21
8336: oPushResult
8337: oNodeGet
8338: oPop 2
8340: oPushResult
8341: oTypeSPush
8342: oPop 1
8344: oCall 6622
8346: oReturn
8347: oLocalSpace 0
8349: oGetParam 1
8351: oPushResult
8352: oCall 8254
8354: oPop 1
8356: oCall 9095
8358: oGetParam 1
8360: oPushResult
8361: oCall 5839
8363: oPop 1
8365: oTypeSPop
8366: oEmit 31
8368: oEmit 25
8370: oReturn
8371: oLocalSpace 0
8373: oGetParam 1
8375: oPushResult
8376: oCall 8254
8378: oPop 1
8380: oCall 9095
8382: oGetParam 1
8384: oPushResult
8385: oCall 5839
8387: oPop 1
8389: oTypeSPop
8390: oEmit 32
8392: oEmit 25
8394: oReturn
8395: oLocalSpace 2
8397: oGetAddrLocal 1
8399: oPushResult
8400: oSetResult 0
8402: oAssign
8403: oGetAddrLocal 1
8405: oPushResult
8406: oCall 4518
8408: oPop 1
8410: oInput 42
8412: oCall 7784
8414: oInputChoice 8449
8416: oGetAddrLocal 2
8418: oPushResult
8419: oLabelNew
8420: oAssign
8421: oEmit 55
8423: oGetLocal 2
8425: oPushResult
8426: oEmitLabel
8427: oPop 1
8429: oEmit 58
8431: oGetLocal 1
8433: oPushResult
8434: oEmitLabel
8435: oPop 1
8437: oCall 7784
8439: oEmit 58
8441: oGetLocal 2
8443: oPushResult
8444: oEmitLabel
8445: oPop 1
8447: oJumpForward 8460
8449: Choice Lookup Table
          43   8416
8452: oEmit 58
8454: oGetLocal 1
8456: oPushResult
8457: oEmitLabel
8458: oPop 1
8460: oReturn
8461: oLocalSpace 4
8463: oInput 0
8465: oGetAddrLocal 1
8467: oPushResult
8468: oScopeFindRequire
8469: oAssign
8470: oGetLocal 1
8472: oPushResult
8473: oCall 8254
8475: oPop 1
8477: oCall 9095
8479: oInput 4
8481: oCall 4495
8483: oCall 9095
8485: oEmit 25
8487: oGetAddrLocal 2
8489: oPushResult
8490: oLabelNew
8491: oAssign
8492: oGetAddrLocal 3
8494: oPushResult
8495: oLabelNew
8496: oAssign
8497: oEmit 55
8499: oGetLocal 3
8501: oPushResult
8502: oEmitLabel
8503: oPop 1
8505: oGetAddrLocal 4
8507: oPushResult
8508: oLabelNew
8509: oAssign
8510: oEmit 58
8512: oGetLocal 4
8514: oPushResult
8515: oEmitLabel
8516: oPop 1
8518: oInputChoice 8598
8520: oGetLocal 1
8522: oPushResult
8523: oCall 8347
8525: oPop 1
8527: oEmit 58
8529: oGetLocal 3
8531: oPushResult
8532: oEmitLabel
8533: oPop 1
8535: oGetLocal 1
8537: oPushResult
8538: oCall 5839
8540: oPop 1
8542: oTypeSPop
8543: oCall 4495
8545: oCall 9095
8547: oEmit 42
8549: oEmit 56
8551: oGetLocal 2
8553: oPushResult
8554: oEmitLabel
8555: oPop 1
8557: oJumpForward 8604
8559: oGetLocal 1
8561: oPushResult
8562: oCall 8371
8564: oPop 1
8566: oEmit 58
8568: oGetLocal 3
8570: oPushResult
8571: oEmitLabel
8572: oPop 1
8574: oGetLocal 1
8576: oPushResult
8577: oCall 5839
8579: oPop 1
8581: oTypeSPop
8582: oCall 4495
8584: oCall 9095
8586: oEmit 43
8588: oEmit 56
8590: oGetLocal 2
8592: oPushResult
8593: oEmitLabel
8594: oPop 1
8596: oJumpForward 8604
8598: Choice Lookup Table
          46   8559
          45   8520
8603: oEndChoice
8604: oGetLocal 4
8606: oPushResult
8607: oGetLocal 2
8609: oPushResult
8610: oLoopPush
8611: oPop 2
8613: oInput 47
8615: oCall 7784
8617: oEmit 55
8619: oGetLocal 4
8621: oPushResult
8622: oEmitLabel
8623: oPop 1
8625: oEmit 58
8627: oGetLocal 2
8629: oPushResult
8630: oEmitLabel
8631: oPop 1
8633: oLoopPop
8634: oReturn
8635: oLocalSpace 3
8637: oGetAddrLocal 1
8639: oPushResult
8640: oLabelNew
8641: oAssign
8642: oEmit 58
8644: oGetLocal 1
8646: oPushResult
8647: oEmitLabel
8648: oPop 1
8650: oGetAddrLocal 2
8652: oPushResult
8653: oLabelNew
8654: oAssign
8655: oGetLocal 1
8657: oPushResult
8658: oGetLocal 2
8660: oPushResult
8661: oLoopPush
8662: oPop 2
8664: oCall 7784
8666: oInputChoice 8697
8668: oCall 7784
8670: oJumpForward 8703
8672: oGetAddrLocal 3
8674: oPushResult
8675: oCall 4518
8677: oPop 1
8679: oEmit 59
8681: oGetLocal 3
8683: oPushResult
8684: oEmitLabel
8685: oPop 1
8687: oGetLocal 1
8689: oPushResult
8690: oEmitLabel
8691: oPop 1
8693: oJumpForward 8705
8695: oJumpForward 8703
8697: Choice Lookup Table
          50   8672
           5   8668
8702: oEndChoice
8703: oJumpBack 8666
8705: oEmit 58
8707: oGetLocal 2
8709: oPushResult
8710: oEmitLabel
8711: oPop 1
8713: oLoopPop
8714: oReturn
8715: oLocalSpace 2
8717: oGetAddrLocal 1
8719: oPushResult
8720: oLabelNew
8721: oAssign
8722: oEmit 58
8724: oGetLocal 1
8726: oPushResult
8727: oEmitLabel
8728: oPop 1
8730: oGetAddrLocal 2
8732: oPushResult
8733: oCall 4518
8735: oPop 1
8737: oGetLocal 1
8739: oPushResult
8740: oGetLocal 2
8742: oPushResult
8743: oLoopPush
8744: oPop 2
8746: oInput 47
8748: oCall 7784
8750: oEmit 55
8752: oGetLocal 1
8754: oPushResult
8755: oEmitLabel
8756: oPop 1
8758: oEmit 58
8760: oGetLocal 2
8762: oPushResult
8763: oEmitLabel
8764: oPop 1
8766: oLoopPop
8767: oReturn
8768: oLocalSpace 0
8770: oLoopContinueLabel
8771: oPushResult
8772: oSetResult 0
8774: oPushResult
8775: equal_label
8776: oPop 2
8778: oChoice 8793
8780: oError 18
8782: oJumpForward 8799
8784: oEmit 55
8786: oLoopContinueLabel
8787: oPushResult
8788: oEmitLabel
8789: oPop 1
8791: oJumpForward 8799
8793: Choice Lookup Table
           0   8784
           1   8780
8798: oEndChoice
8799: oReturn
8800: oLocalSpace 0
8802: oLoopBreakLabel
8803: oPushResult
8804: oSetResult 0
8806: oPushResult
8807: equal_label
8808: oPop 2
8810: oChoice 8825
8812: oError 18
8814: oJumpForward 8831
8816: oEmit 55
8818: oLoopBreakLabel
8819: oPushResult
8820: oEmitLabel
8821: oPop 1
8823: oJumpForward 8831
8825: Choice Lookup Table
           0   8816
           1   8812
8830: oEndChoice
8831: oReturn
8832: oLocalSpace 1
8834: oInputChoice 8841
8836: oJumpForward 8847
8838: oChangeIntLitToLabelIdent
8839: oJumpForward 8847
8841: Choice Lookup Table
           1   8838
           0   8836
8846: oEndChoice
8847: oGetAddrLocal 1
8849: oPushResult
8850: oScopeCurrent
8851: oPushResult
8852: oScopeFindRequireInScope
8853: oPop 1
8855: oAssign
8856: oGetLocal 1
8858: oPushResult
8859: oSetResult 28
8861: oPushResult
8862: oSetResult 1
8864: oPushResult
8865: oNodeSetBoolean
8866: oPop 3
8868: oEmit 55
8870: oGetLocal 1
8872: oPushResult
8873: oSetResult 22
8875: oPushResult
8876: oNodeGetLabel
8877: oPop 2
8879: oPushResult
8880: oEmitLabel
8881: oPop 1
8883: oReturn
8884: oLocalSpace 0
8886: oCall 7784
8888: oInputChoice 8898
8890: oCall 7784
8892: oJumpForward 8904
8894: oJumpForward 8906
8896: oJumpForward 8904
8898: Choice Lookup Table
          36   8894
           5   8890
8903: oEndChoice
8904: oJumpBack 8888
8906: oReturn
8907: oLocalSpace 0
8909: oCall 8914
8911: oEmit 67
8913: oReturn
8914: oLocalSpace 0
8916: oInputChoice 9009
8918: oCall 4495
8920: oTypeSNodeType
8921: oChoice 8971
8923: oEmit 61
8925: oJumpForward 8990
8927: oEmit 62
8929: oJumpForward 8990
8931: oEmit 29
8933: oEmit 61
8935: oJumpForward 8990
8937: oEmit 63
8939: oJumpForward 8990
8941: oEmit 64
8943: oJumpForward 8990
8945: oError 16
8947: oJumpForward 8990
8949: oEmit 16
8951: oTypeSTop
8952: oPushResult
8953: oSetResult 41
8955: oPushResult
8956: oNodeGetInt
8957: oPop 2
8959: oPushResult
8960: oEmitInt
8961: oPop 1
8963: oEmit 66
8965: oJumpForward 8990
8967: oEmit 65
8969: oJumpForward 8990
8971: Choice Lookup Table
          33   8967
          37   8949
          26   8945
          32   8941
          31   8937
          28   8931
          29   8927
          27   8923
8988: oError 17
8990: oTypeSPop
8991: oInputChoice 8999
8993: oJumpForward 9007
8995: oJumpForward 9005
8997: oJumpForward 9005
8999: Choice Lookup Table
          13   8997
          15   8993
9004: oEndChoice
9005: oJumpBack 8918
9007: oJumpForward 9012
9009: Choice Lookup Table
          14   8918
9012: oReturn
9013: oLocalSpace 0
9015: oReturn
9016: oLocalSpace 0
9018: oReturn
9019: oLocalSpace 0
9021: oScopeCurrent
9022: oPushResult
9023: oSetResult 14
9025: oPushResult
9026: oNodeGetInt
9027: oPop 2
9029: oReturn
9030: oReturn
9031: oLocalSpace 0
9033: oGetParam 1
9035: oPushResult
9036: oSetResult 20
9038: oPushResult
9039: oNodeGet
9040: oPop 2
9042: oPushResult
9043: oSetResult 14
9045: oPushResult
9046: oNodeGetInt
9047: oPop 2
9049: oReturn
9050: oReturn
9051: oLocalSpace 0
9053: oCall 9019
9055: oPushResult
9056: oGetParam 1
9058: oPushResult
9059: oCall 9031
9061: oPop 1
9063: oPushResult
9064: subtract
9065: oPop 2
9067: oReturn
9068: oReturn
9069: oLocalSpace 1
9071: oGetAddrLocal 1
9073: oPushResult
9074: oTypeSNodeType
9075: oAssign
9076: oTypeSPop
9077: oGetLocal 1
9079: oPushResult
9080: oTypeSNodeType
9081: oPushResult
9082: equal_node_type
9083: oPop 2
9085: oChoice 9091
9087: oError 14
9089: oJumpForward 9094
9091: Choice Lookup Table
           0   9087
9094: oReturn
9095: oLocalSpace 0
9097: oTypeSNodeType
9098: oChoice 9102
9100: oJumpForward 9107
9102: Choice Lookup Table
          27   9100
9105: oError 7
9107: oTypeSPop
9108: oReturn
9109: oLocalSpace 0
9111: oTypeSNodeType
9112: oChoice 9116
9114: oJumpForward 9121
9116: Choice Lookup Table
          27   9114
9119: oError 7
9121: oReturn
9122: oLocalSpace 0
9124: oTypeSNodeType
9125: oChoice 9133
9127: oJumpForward 9140
9129: oEmit 29
9131: oJumpForward 9140
9133: Choice Lookup Table
          28   9129
          27   9127
9138: oError 7
9140: oTypeSPop
9141: oReturn
9142: oLocalSpace 0
9144: oTypeSNodeType
9145: oChoice 9160
9147: oJumpForward 9167
9149: oEmit 29
9151: oTypeSPop
9152: oGetGlobal 5
9154: oPushResult
9155: oTypeSPush
9156: oPop 1
9158: oJumpForward 9167
9160: Choice Lookup Table
          28   9149
          27   9147
9165: oError 7
9167: oReturn
9168: oLocalSpace 0
9170: oTypeSNodeType
9171: oChoice 9184
9173: oEmit 29
9175: oTypeSPop
9176: oGetGlobal 5
9178: oPushResult
9179: oTypeSPush
9180: oPop 1
9182: oJumpForward 9187
9184: Choice Lookup Table
          28   9173
9187: oReturn
9188: oLocalSpace 0
9190: oTypeSNodeType
9191: oChoice 9195
9193: oJumpForward 9200
9195: Choice Lookup Table
          29   9193
9198: oError 8
9200: oTypeSPop
9201: oReturn
9202: oLocalSpace 0
9204: oTypeSNodeType
9205: oChoice 9209
9207: oJumpForward 9214
9209: Choice Lookup Table
          29   9207
9212: oError 8
9214: oReturn
9215: oLocalSpace 1
9217: oGetAddrLocal 1
9219: oPushResult
9220: oGetParam 2
9222: oPushResult
9223: oNodeNew
9224: oPop 1
9226: oAssign
9227: oGetLocal 1
9229: oPushResult
9230: oSetResult 17
9232: oPushResult
9233: oGetParam 1
9235: oPushResult
9236: oNodeSetInt
9237: oPop 3
9239: oGetLocal 1
9241: oPushResult
9242: oTypeAdd
9243: oPop 1
9245: oGetLocal 1
9247: oReturn
9248: oReturn
9249: oLocalSpace 1
9251: oGetAddrLocal 1
9253: oPushResult
9254: oGetParam 2
9256: oPushResult
9257: oNodeNew
9258: oPop 1
9260: oAssign
9261: oGetLocal 1
9263: oPushResult
9264: oSetResult 4
9266: oPushResult
9267: oGetParam 1
9269: oPushResult
9270: oNodeSetInt
9271: oPop 3
9273: oGetLocal 1
9275: oReturn
9276: oReturn
9277: oLocalSpace 1
9279: oGetAddrLocal 1
9281: oPushResult
9282: oGetParam 1
9284: oPushResult
9285: oSetResult 35
9287: oPushResult
9288: oNodeGet
9289: oPop 2
9291: oAssign
9292: oGetLocal 1
9294: oPushResult
9295: oNodeNull
9296: oPop 1
9298: oChoice 9354
9300: oGetAddrLocal 1
9302: oPushResult
9303: oSetResult 33
9305: oPushResult
9306: oNodeNew
9307: oPop 1
9309: oAssign
9310: oGetLocal 1
9312: oPushResult
9313: oSetResult 36
9315: oPushResult
9316: oGetParam 1
9318: oPushResult
9319: oNodeSet
9320: oPop 3
9322: oGetLocal 1
9324: oPushResult
9325: oSetResult 17
9327: oPushResult
9328: oSetResult 8
9330: oPushResult
9331: oNodeSetInt
9332: oPop 3
9334: oGetLocal 1
9336: oPushResult
9337: oTypeAdd
9338: oPop 1
9340: oGetParam 1
9342: oPushResult
9343: oSetResult 35
9345: oPushResult
9346: oGetLocal 1
9348: oPushResult
9349: oNodeSet
9350: oPop 3
9352: oJumpForward 9357
9354: Choice Lookup Table
           1   9300
9357: oGetLocal 1
9359: oReturn
9360: oReturn
9361: oLocalSpace 2
9363: oGetParam 1
9365: oPushResult
9366: oNodeType
9367: oPop 1
9369: oChoice 9439
9371: oMININT
9372: oReturn
9373: oJumpForward 9455
9375: oSetResult 0
9377: oReturn
9378: oJumpForward 9455
9380: oSetResult 0
9382: oReturn
9383: oJumpForward 9455
9385: oGetAddrLocal 1
9387: oPushResult
9388: oGetParam 1
9390: oPushResult
9391: oSetResult 40
9393: oPushResult
9394: oNodeGet
9395: oPop 2
9397: oAssign
9398: oGetAddrLocal 2
9400: oPushResult
9401: oGetLocal 1
9403: oPushResult
9404: oSetResult 15
9406: oPushResult
9407: oNodeGetIter
9408: oPop 2
9410: oPushResult
9411: oNodeIterValue
9412: oPop 1
9414: oAssign
9415: oGetLocal 2
9417: oPushResult
9418: oSetResult 22
9420: oPushResult
9421: oNodeGetInt
9422: oPop 2
9424: oReturn
9425: oJumpForward 9455
9427: oGetParam 1
9429: oPushResult
9430: oSetResult 38
9432: oPushResult
9433: oNodeGetInt
9434: oPop 2
9436: oReturn
9437: oJumpForward 9455
9439: Choice Lookup Table
          35   9427
          37   9385
          31   9380
          29   9375
          27   9371
9450: oError 3
9452: oSetResult 0
9454: oReturn
9455: oReturn
9456: oLocalSpace 0
9458: oGetParam 1
9460: oPushResult
9461: oSetResult 22
9463: oPushResult
9464: oNodeGetInt
9465: oPop 2
9467: oPushResult
9468: oEmitInt
9469: oPop 1
9471: oReturn
9472: oLocalSpace 1
9474: oGetAddrGlobal 4
9476: oPushResult
9477: oSetResult 26
9479: oPushResult
9480: oSetResult 4
9482: oPushResult
9483: oCall 9215
9485: oPop 2
9487: oAssign
9488: oGetAddrGlobal 5
9490: oPushResult
9491: oSetResult 27
9493: oPushResult
9494: oSetResult 4
9496: oPushResult
9497: oCall 9215
9499: oPop 2
9501: oAssign
9502: oGetAddrGlobal 6
9504: oPushResult
9505: oSetResult 29
9507: oPushResult
9508: oSetResult 1
9510: oPushResult
9511: oCall 9215
9513: oPop 2
9515: oAssign
9516: oGetAddrGlobal 7
9518: oPushResult
9519: oSetResult 30
9521: oPushResult
9522: oSetResult 1
9524: oPushResult
9525: oCall 9215
9527: oPop 2
9529: oAssign
9530: oGetAddrGlobal 8
9532: oPushResult
9533: oSetResult 31
9535: oPushResult
9536: oSetResult 1
9538: oPushResult
9539: oCall 9215
9541: oPop 2
9543: oAssign
9544: oGetAddrGlobal 9
9546: oPushResult
9547: oSetResult 28
9549: oPushResult
9550: oSetResult 1
9552: oPushResult
9553: oCall 9215
9555: oPop 2
9557: oAssign
9558: oGetAddrGlobal 10
9560: oPushResult
9561: oSetResult 32
9563: oPushResult
9564: oSetResult 256
9566: oPushResult
9567: oCall 9215
9569: oPop 2
9571: oAssign
9572: oGetAddrLocal 1
9574: oPushResult
9575: oSetResult 18
9577: oPushResult
9578: oIdAdd_File
9579: oPushResult
9580: oCall 9249
9582: oPop 2
9584: oAssign
9585: oGetLocal 1
9587: oPushResult
9588: oSetResult 21
9590: oPushResult
9591: oGetGlobal 4
9593: oPushResult
9594: oNodeSet
9595: oPop 3
9597: oGetLocal 1
9599: oPushResult
9600: oScopeDeclare
9601: oPop 1
9603: oGetAddrLocal 1
9605: oPushResult
9606: oSetResult 18
9608: oPushResult
9609: oIdAdd_Integer
9610: oPushResult
9611: oCall 9249
9613: oPop 2
9615: oAssign
9616: oGetLocal 1
9618: oPushResult
9619: oSetResult 21
9621: oPushResult
9622: oGetGlobal 5
9624: oPushResult
9625: oNodeSet
9626: oPop 3
9628: oGetLocal 1
9630: oPushResult
9631: oScopeDeclare
9632: oPop 1
9634: oGetAddrLocal 1
9636: oPushResult
9637: oSetResult 18
9639: oPushResult
9640: oIdAdd_Boolean
9641: oPushResult
9642: oCall 9249
9644: oPop 2
9646: oAssign
9647: oGetLocal 1
9649: oPushResult
9650: oSetResult 21
9652: oPushResult
9653: oGetGlobal 6
9655: oPushResult
9656: oNodeSet
9657: oPop 3
9659: oGetLocal 1
9661: oPushResult
9662: oScopeDeclare
9663: oPop 1
9665: oGetAddrLocal 1
9667: oPushResult
9668: oSetResult 18
9670: oPushResult
9671: oIdAdd_Char
9672: oPushResult
9673: oCall 9249
9675: oPop 2
9677: oAssign
9678: oGetLocal 1
9680: oPushResult
9681: oSetResult 21
9683: oPushResult
9684: oGetGlobal 8
9686: oPushResult
9687: oNodeSet
9688: oPop 3
9690: oGetLocal 1
9692: oPushResult
9693: oScopeDeclare
9694: oPop 1
9696: oGetAddrLocal 1
9698: oPushResult
9699: oSetResult 18
9701: oPushResult
9702: oIdAdd_Byte
9703: oPushResult
9704: oCall 9249
9706: oPop 2
9708: oAssign
9709: oGetLocal 1
9711: oPushResult
9712: oSetResult 21
9714: oPushResult
9715: oGetGlobal 9
9717: oPushResult
9718: oNodeSet
9719: oPop 3
9721: oGetLocal 1
9723: oPushResult
9724: oScopeDeclare
9725: oPop 1
9727: oGetAddrLocal 1
9729: oPushResult
9730: oSetResult 18
9732: oPushResult
9733: oIdAdd_String
9734: oPushResult
9735: oCall 9249
9737: oPop 2
9739: oAssign
9740: oGetLocal 1
9742: oPushResult
9743: oSetResult 21
9745: oPushResult
9746: oGetGlobal 10
9748: oPushResult
9749: oNodeSet
9750: oPop 3
9752: oGetLocal 1
9754: oPushResult
9755: oScopeDeclare
9756: oPop 1
9758: oGetAddrLocal 1
9760: oPushResult
9761: oSetResult 16
9763: oPushResult
9764: oIdAdd_True
9765: oPushResult
9766: oCall 9249
9768: oPop 2
9770: oAssign
9771: oGetLocal 1
9773: oPushResult
9774: oSetResult 21
9776: oPushResult
9777: oGetGlobal 6
9779: oPushResult
9780: oNodeSet
9781: oPop 3
9783: oGetLocal 1
9785: oPushResult
9786: oSetResult 22
9788: oPushResult
9789: oSetResult 1
9791: oPushResult
9792: oNodeSetInt
9793: oPop 3
9795: oGetLocal 1
9797: oPushResult
9798: oScopeDeclare
9799: oPop 1
9801: oGetAddrLocal 1
9803: oPushResult
9804: oSetResult 16
9806: oPushResult
9807: oIdAdd_False
9808: oPushResult
9809: oCall 9249
9811: oPop 2
9813: oAssign
9814: oGetLocal 1
9816: oPushResult
9817: oSetResult 21
9819: oPushResult
9820: oGetGlobal 6
9822: oPushResult
9823: oNodeSet
9824: oPop 3
9826: oGetLocal 1
9828: oPushResult
9829: oSetResult 22
9831: oPushResult
9832: oSetResult 0
9834: oPushResult
9835: oNodeSetInt
9836: oPop 3
9838: oGetLocal 1
9840: oPushResult
9841: oScopeDeclare
9842: oPop 1
9844: oGetAddrGlobal 11
9846: oPushResult
9847: oSetResult 14
9849: oPushResult
9850: oIdAdd_Ord
9851: oPushResult
9852: oCall 9249
9854: oPop 2
9856: oAssign
9857: oGetGlobal 11
9859: oPushResult
9860: oScopeDeclare
9861: oPop 1
9863: oGetAddrGlobal 12
9865: oPushResult
9866: oSetResult 14
9868: oPushResult
9869: oIdAdd_Chr
9870: oPushResult
9871: oCall 9249
9873: oPop 2
9875: oAssign
9876: oGetGlobal 12
9878: oPushResult
9879: oScopeDeclare
9880: oPop 1
9882: oReturn
