   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pStrLit
   2:    pCharLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pCase
   2:    pOtherwise
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushAddrGlobal   % <offset> - push ptr to global var (same as tPushConstP)
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tSwap             % swap the top two entries on the stack
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tCastBtoI         % zero-extend uint8_t to int32_t
   2:    tCastItoB         % truncate int32_t to uint8_t
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubP
   2:    tSubPI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tNot              % negate top boolean
   2:    tEqualB
   2:    tNotEqualB
   2:    tGreaterB         % B is uint8_t, so these are unsigned comparisons
   2:    tLessB
   2:    tGreaterEqualB
   2:    tLessEqualB
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too, but I'm moving to tEqualB etc for those
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tGreaterP
   2:    tLessP
   2:    tGreaterEqualP
   2:    tLessEqualP
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tJumpCaseB        % <label#>  pops uint8_t, jumps to case indicated by table at label (consisting of tCase, tCaseRange, tCaseEnd)
   2:    tJumpCaseI        % <label#>  pops integer, jumps to case indicated by table at label
   2:    tJumpCaseS        % <label#>  pops pointer to ShortString, jumps to case indicated by table at label
   2:    tCase             % <int> <label#>  - case table entry: if match int, goto label.  For tJumpCaseS, int is offset into global data.
   2:    tCaseRange        % <lowint> <highint> <label#>  - case table entry: if lowint <= value <= highint, goto label.  For tJumpCaseS, offsets into global.
   2:    tCaseEnd          % <label#> - end of case table.  Label points to no-match code (otherwise clause or end of statement).
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteChar        %  "     "    : write char, pop
   2:    tWriteShortStr    %  "     "    : write ShortString whose addr is on tos, pop
   2:    tWritePChar       %  "     "    : write a null-terminated string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteCR          %  "     "    : write cr
   2:    tFile             % <file#> - pascal source file id, for debugging.  I haven't decided yet how I will communicate the corresponding filename.
   2:    tLine             % <line#> - pascal source line number, for debugging
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    eCantUsePredSuccOnEnumWithValueGaps
   2:    eCantDereference
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nBuiltInFunc
   2: 	nBuiltInProc
   2: 	nConst
   2: 	nEnumValue
   2: 	nConstStr
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nTypedConst
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nIntegerType
   2: 	nByteType
   2: 	nBooleanType
   2: 	nBooleanFlowType
   2: 	nCharType
   2: 	nPointerType
   2: 	nUniversalPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nStrLitType
   2: 	nShortStringType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qValueStr
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qCapacity
   2: 	qNameTable
   2: 	qHasGap
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
      % intrinsic types & type constructs
      
   2: type typ:
   2:    tyNone     = 0    % in ptrTyp field of TT, means no ptr to type defined
   2:    tyInteger
   2:    tyBoolean
   2:    tyChar
   2:    tyString
   2:    tyFile            % tyInteger..tyFile are scalars (types on their own)
   2:    tyPointer         % following are type constructor classes...
   2:    tyArray           %   (they are not type#'s)
   2:    tyRecord
   2:    tyParams          % like record; a collection of proc/func params
   2:    tySet;
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     oMAXINT >> int    % the maximum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % gets/adds a predefined id to the scanner's id table, and returns the id code
   2:     oId_mysystem >> int
   2:     oId_ShortStringAppendShortString >> int
   2:     oId_ShortStringAppendChar >> int
   2:     oId_ShortStringCmp >> int
   2:     oId_File >> int
   2:     oId_Integer >> int
   2:     oId_Boolean >> int
   2:     oId_Char >> int
   2:     oId_Byte >> int
   2:     oId_Pointer >> int
   2:     oId_ShortString >> int
   2:     oId_True >> int
   2:     oId_False >> int
   2:     oId_Nil >> int
   2:     oId_Ord >> int
   2:     oId_Chr >> int
   2:     oId_Pred >> int
   2:     oId_Succ >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValuePushString(String)    % push string onto value stack
   2:    oValueTop >> int            % get top value on value stack
   2:    oValueTopString >> String
   2:    oValueSwap                  % swap top two
   2:    oValuePop
   2:    oValueCharToString          % convert top value from char to string
   2:    oValueNegate                % negate top numeric value
   2:    oValueEqual
   2:    oValueNotEqual
   2:    oValueLess
   2:    oValueGreater
   2:    oValueLessEqual
   2:    oValueGreaterEqual
   2:    oValueOr                    % boolean or
   2:    oValueAnd
   2:    oValueNot                   % boolean not
   2:    oValueAdd
   2:    oValueSub
   2:    oValueMult
   2:    oValueDiv
   2:    oValueStringCmp             % compare top two strings. replace with negative, 0, or positive
   2:    oValueStringConcat
   2:    ;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    oStringAllocShortStringLit( String ) >> int  % alloc global space for ShortString, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      
   2: int     mysystemId               % id of identifier "mysystem"
      
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanFlowType
   2: Node    CharType
   2: Node    PCharType
   2: Node    ByteType
   2: Node    UniversalPointerType
   2: Node    StrLitType
   2: Node    ShortStringType
      
      % nBuiltInFunc
   2: Node    BuiltIn_Ord
   2: Node    BuiltIn_Chr
   2: Node    BuiltIn_Pred
   2: Node    BuiltIn_Succ
      
      % Declarations in unit mysystem that the compiler may refer to directly.
      
   2: Node    System_ShortStringAppendShortString
   2: Node    System_ShortStringAppendChar
   2: Node    System_ShortStringCmp
      
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: EnumTypeRef( out Node resultType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: OrdinalHigh( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowFlow( out Label falseLabel );
   2: BoolExprAllowFlow( out Label falseLabel );
   2: BoolTermAllowFlow( out Label falseLabel );
   2: BoolFactorAllowFlow( out Label falseLabel );
   2: ArithExprAllowFlow( out Label falseLabel );
   2: TermAllowFlow( out Label falseLabel );
   2: FactorAllowFlow( out Label falseLabel );
   2: PrimaryAllowFlow( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueVar( Node decl, boolean writeable );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: FlowToVal( inout Label falseLabel );
   2: ValToFlow( out Label falseLabel );
   2: MoveIntoTempShortString >> int;
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Start ----------------------------
      
   2: MainRule:
   4:    @Program
   7:    ;
      
   7: include 'pascal_unit.ssl'
      
      %
      %  Pascal Compiler
      %
      
      % ------------------------------ Units -----------------------------
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
   7: UsesClause( Node user ):
   9:    {
   9:       pIdent
  11:       @Uses( LAST_ID, user )
  20:       [
  20:          | ',' :
  22:          | * :  >
  29:       ]
  29:    }   
  31:    ';'
  34:    ;
      
      
      % Process an implicit "uses mysystem" in every module, except in the mysystem unit itself.
      % (I'm calling the unit mysystem rather than system, so fpc doesn't use it to replace its own system unit.)
      %
  34: UsesMySystem( Node user ):
  36:    [ equal( oNodeGetInt( user, qIdent ), mysystemId )
  53:       | true :  >>
  55:       | * :
  60:    ]
  60:    @Uses( mysystemId, user )
  71:    ;
      
      
      % After processing the mysystem unit interface, grab certain declarations from it
      % that the compiler may want to refer to later.
      %
  71: FindSelectSystemDecls( Node unit ):
  73:    [ equal( oNodeGetInt( unit, qIdent ), mysystemId )
  90:       | true :
  91:          System_ShortStringAppendShortString = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendShortString )
 108:          System_ShortStringAppendChar = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendChar )
 125:          System_ShortStringCmp = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringCmp )
 142:       | * :
 147:    ]
 148:    ;
      
      
      % The given user module uses a unit with the given id,
      % which may or may not have been loaded already.
      %
 148: Uses( int id, Node user ):
 150:    Node unit = @FindOrCompileUnit( id )
 161:    [ equal_node( unit, Null )
 171:       | false :
 172:          oNodeAddLast( user, qUsedUnits, unit )
      
               % Put a declaration in the current scope, naming the unit and pointing to it.
               % This is to allow references to  <unit>.<identifier_in_unit>
 184:          Node unitRef = oNodeNew( nUnitRef )
 194:          oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 213:          oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 232:          oScopeDeclare( unitRef )
 238:       | * :
 243:    ];
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 244: ResolveUnitRef( inout Node decl ):
 246:    [ oNodeType( decl )
 253:       | nUnitRef :
 254:          Node scope = oNodeGet( decl, qPublicScope )
 267:          '.'
 269:          pIdent
 271:          decl = oScopeFindRequireInScope( scope )
 281:       | * :
 286:    ];
      
      
 287: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 289:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 302:    {
 302:       Node unit = oNodeIterValue( unitIt )
 312:       [ oNodeNull( unit )
 319:          | false :
 320:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 333:          | * :
 338:             >
 340:       ]
 340:       oNodeIterNext( unitIt )
 346:    }
 349:    ;
      
 349: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 351:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 364:    {
 364:       Node unit = oNodeIterValue( unitIt )
 374:       [ oNodeNull( unit )
 381:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 382:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 398:                | true :
 399:                | false :  #eInternalScopeMismatch
 403:             ]
 411:             oScopeEnd
 412:          | * :
 417:             >
 419:       ]
 419:       oNodeIterPrev( unitIt )
 425:    }
 428:    ;
      
      
 428: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 430:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 449:    [ equal_node( unit, Null )
 459:       | false :  >> unit
 463:       | * :
 468:    ]
      
         % If not, search for the source file on disk
 468:    boolean ok = oIncludeUnitFile( id )
 478:    [ ok
 481:       | false :  #eCantFindUnitFile  >> Null
 487:       | * :
 492:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 492:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 498:    oIncludeEnd
 499:    >> unit;
      
      
      
 503: Unit >> Node:
 505:    pUnit
 507:    pIdent
 509:    Node unit = oNodeNew( nUnit )
 519:    oNodeSetInt( unit, qIdent, LAST_ID )
 530:    Node unitImpl = oNodeNew( nUnitImpl )
 540:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 551:    oNodeSet( unit, qImpl, unitImpl )
 563:    ';'
      
         % mandatory sections
      
 565:    pInterface
 567:    @UsesMySystem( unit )
 574:    [
 574:       | pUses :   @UsesClause( unit )
 583:       | * :
 588:    ]
 588:    @EnterUsedUnits( unit )
      
 595:    oScopeBegin( 0, allocGlobal )
 604:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 615:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 620:    oScopeBegin( 0, allocDown )
 629:    initScope = oScopeCurrent
 634:    oNodeSet( unit, qInitRoutineScope, initScope )
 646:    oScopeEnd
      
 647:    @UnitInterface( unit )
 654:    oScopeEnd  % interface scope
      
 655:    pImplementation
 657:    @UsesMySystem( unitImpl )
 664:    [
 664:       | pUses :   @UsesClause( unitImpl )
 673:       | * :
 678:    ]
 678:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 685:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 698:    oScopeBegin( 0, allocGlobal )
 707:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
 718:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
 736:    globalScope = oScopeCurrent
 741:    @UnitImplementation( unit )
      
 748:    [
 748:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
 760:       | * :                @UnitInitialization( unit, false )  % implicit init routine
 775:    ]
 775:    [
 775:       | pFinalization :  @UnitFinalization( unit, true )
 787:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
 802:    ]
 802:    pEnd  '.'
      
 806:    oScopeEnd  % impl scope
 807:    oScopeEnd  % interface scope
 808:    @EndUsedUnits( unitImpl )  % used units scopes
 815:    @EndUsedUnits( unit )
 822:    oNodeAddLast( workspace, qUnits, unit )
 834:    >> unit;
      
      
 838: UnitInterface( Node unit ):
 840:    {[
 840:       | pConst :     @ConstDecl
 844:       | pType :      @TypeDecl
 848:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
 857:       | pProcedure :
 859:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
 865:          [
 865:             | pExternal :
 867:                @ExternalDecl( decl )
 874:                ';'
 876:             | * :
 881:          ]
      
 881:       | pFunction :
 883:          Node decl = @FuncHeaderDecl
 889:          [
 889:             | pExternal :
 891:                @ExternalDecl( decl )
 898:                ';'
 900:             | * :
 905:          ]
      
 905:       | * :          >
 920:    ]}
 922:    @FindSelectSystemDecls( unit )
 930:    ;
      
 930: UnitImplementation( Node unit ):
 932:    @BlockDecls( nGlobalVar )
 940:    ;
      
      
 940: UnitInitialization( Node unit, boolean hasStmts ):
 942:    Label label = oLabelNew
 947:    .tLabel  oEmitLabel( label )
 955:    oNodeSetLabel( unit, qInitLabel, label )
      
 967:    int patchLS
 967:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
 976:    Node scope
 976:    Code initCode
      
 976:    scope = oNodeGet( unit, qPublicScope )
 989:    initCode = oNodeGetCode( scope, qInitCode )
1002:    oEmitCode( initCode )
1008:    oNodeSetCode( scope, qInitCode, codeNull )
      
1020:    scope = oNodeGet( unit, qPrivateScope )
1033:    initCode = oNodeGetCode( scope, qInitCode )
1046:    oEmitCode( initCode )
1052:    oNodeSetCode( scope, qInitCode, codeNull )
      
1064:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1077:    [ hasStmts
1080:       | true :     
1081:          @Statement
1083:          {[
1083:             | ';' :  @Statement
1087:             | * :    >
1094:          ]}
1096:       | * :
1101:    ]
      
1101:    .tReturn
      
1103:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1115:    oPatch( patchLS, localSpace )
1124:    oScopeEnd   % init routine scope, for temporaries
1126:    ;
      
      
1126: UnitFinalization( Node unit, boolean hasStmts ):
1128:    Label label = oLabelNew
1133:    .tLabel  oEmitLabel( label )
1141:    oNodeSetLabel( unit, qFinalLabel, label )
      
1153:    int patchLS
1153:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1162:    oScopeBegin( 0, allocDown )
      
1171:    [ hasStmts
1174:       | true :     
1175:          @Statement
1177:          {[
1177:             | ';' :  @Statement
1181:             | * :    >
1188:          ]}
1190:       | * :
1195:    ]
      
1195:    .tReturn
      
1197:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1209:    oPatch( patchLS, localSpace )
1218:    oScopeEnd   % final routine scope, for temporaries
1220:    ;
      
      
1220: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1222:    NodeIter it = oNodeGetIter( workspace, qUnits )
1235:    {
1235:       Node unit = oNodeIterValue( it )
1245:       [ oNodeNull( unit )
1252:          | true :  >
1255:          | false :
1257:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1265:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1280:             .tFreeActuals  oEmitInt( 0 )
1288:             oNodeIterNext( it )
1294:       ]
1302:    };
      
      
1305: FinalizeUnits:
1307:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1320:    {
1320:       Node unit = oNodeIterValue( it )
1330:       [ oNodeNull( unit )
1337:          | true :  >
1340:          | false :
1342:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1350:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1365:             .tFreeActuals  oEmitInt( 0 )
1373:             oNodeIterPrev( it )
1379:       ]
1387:    };
      
1390: include 'pascal_decl.ssl'
      %
      % Pascal Compiler
      %
      
      % ----------------------------- Declarations ----------------------------
      
      
      
      % modifers that may appear on a proc/function declaration.
      %
1390: MethodModifiers( Node decl ):
1392:    {[
1392:       | pCdecl :
1394:          oNodeSetBoolean( decl, qCdecl, true )
1406:          ';'
      
1408:       | * : >
1415:    ]}
1418:    ;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
1418: ExternalDecl( Node decl ):
1420:    [ equal_zero( @DeclLevel( decl ) )
1432:       | false :  #eExternalMethodCannotBeNested
1435:       | * :
1440:    ]
1440:    oNodeSetBoolean( decl, qExternal, true )
1452:    [
1452:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
1454:          [
1454:             | pName :
1456:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
1458:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
1469:             | * :
1474:          ]
1474:       | * :
1479:    ]
1479:    @DefineExternLabel( decl )
1487:    ;
      
      
1487: ProcHeaderDecl >> Node:
1489:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1491:    boolean redeclaring = false
1497:    Node decl = oScopeFindInCurrentScope
      
1502:    [ oNodeNull( decl )
1509:       | true :
               % first declaration
1510:          decl = @newIdent( nProc, LAST_ID )
1523:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1534:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1536:          redeclaring = true
1542:          [ oNodeGetBoolean( decl, qBodyDefined )
1552:             | true : #eAlreadyDefined
1555:             | * :
1560:          ]
1560:          [ oNodeGetBoolean( decl, qExternal )
1570:             | true : #eAlreadyDefined
1573:             | * :
1578:          ]
1578:          [ oNodeType( decl )
1585:             | nProc :
1586:             | * : #eAlreadyDefined   % wrong kind
1593:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
1593:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
1612:          oNodeSet( decl, qParams, Null )
1624:    ]
      
1632:    int level = @ScopeLevel
1638:    boolean nested = greater( level, 0 )
1651:    inc( level )
1657:    oScopeBegin( level, allocUp )
1666:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
1671:    [ nested
1674:       | true :
1675:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
1690:       | * :
1695:    ]
      
1695:    @FormalArgDecl
1697:    oNodeSet( decl, qParams, paramScope )
1709:    oScopeEnd
1710:    ';'
      
1712:    [ redeclaring
1715:       | false : oScopeDeclare( decl )
1722:       | true :  % TO DO: check that qParams is consistent with qOldParams
1724:    ]
      
1732:    @MethodModifiers( decl )
1739:    >> decl;
      
      
1743: ProcDecl:
1745:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
1751:    [
1751:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
1753:       | pExternal : @ExternalDecl( decl )
      
1762:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
1769:          Node paramScope = oNodeGet( decl, qParams )
1782:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
1788:          int level = oNodeGetInt( paramScope, qLevel )
1801:          oScopeBegin( level, allocDown )
1810:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
1821:          Label label = oNodeGetLabel( decl, qValue )
1834:          @Block( nLocalVar, label )
1844:          oNodeSetBoolean( decl, qBodyDefined, true )
1856:          oScopeEnd
      
1857:          oScopeEnd  % paramScope
1858:    ]
1858:    ';';
      
      
      
1861: FuncHeaderDecl >> Node:
1863:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1865:    boolean redeclaring = false
1871:    Node decl = oScopeFindInCurrentScope
      
1876:    [ oNodeNull( decl )
1883:       | true :
               % first declaration
1884:          decl = @newIdent( nFunc, LAST_ID )
1897:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1908:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1910:          redeclaring = true
1916:          [ oNodeGetBoolean( decl, qBodyDefined )
1926:             | true : #eAlreadyDefined
1929:             | * :
1934:          ]
1934:          [ oNodeType( decl )
1941:             | nFunc :
1942:             | * : #eAlreadyDefined   % wrong kind
1949:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
1949:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
1968:          oNodeSet( decl, qParams, Null )
1980:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
1999:          oNodeSet( decl, qType, Null )
2011:    ]
      
2019:    int level = @ScopeLevel
2025:    boolean nested = greater( level, 0 )
2038:    inc( level )
2044:    oScopeBegin( level, allocUp )
2053:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2058:    [ nested
2061:       | true :
2062:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2077:       | * :
2082:    ]
      
2082:    @FormalArgDecl
2084:    oNodeSet( decl, qParams, paramScope )
      
2096:    ':'
      
2098:    Node theType
2098:    @TypeRef( theType )
2105:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2117:    Node ptrType = @PointerTypeTo( theType )
2128:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2144:    oScopeEnd
2145:    ';'
      
2147:    [ redeclaring
2150:       | false : oScopeDeclare( decl )
2157:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2159:    ]
      
2167:    @MethodModifiers( decl )
      
2174:    >> decl;
      
      
2178: FuncDecl:
2180:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2186:    [
2186:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2188:       | pExternal : @ExternalDecl( decl )
      
2197:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2204:          Node paramScope = oNodeGet( decl, qParams )
2217:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2223:          int level = oNodeGetInt( paramScope, qLevel )
2236:          oScopeBegin( level, allocDown )
2245:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2256:          Label label = oNodeGetLabel( decl, qValue )
2269:          @Block( nLocalVar, label )
2279:          oNodeSetBoolean( decl, qBodyDefined, true )
2291:          oScopeEnd
      
2292:          oScopeEnd  % paramScope
2293:    ]
2293:    ';';
      
      
2296: FormalArgDecl:
2298:    [
2298:       | '(' :
2300:          {
2300:             NodeVec decls = oNodeVecNew
2305:             Node decl
2305:             boolean isInOut = false
      
2311:             [
2311:                | pVar : isInOut = true
2319:                | * :
2324:             ]
      
2324:             {  pIdent
      
2326:                decl = @newIdent( nParam, LAST_ID )
2339:                oNodeSetBoolean( decl, qInOut, isInOut )
2351:                oNodeVecAppend( decls, decl )
      
2360:                [
2360:                   | ':' : >
2364:                   | ',' :
2366:                ]
2374:             }
      
2376:             Node theType
2376:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
2383:             Node allocType
2383:             [ isInOut
2386:                | true :   allocType = @PointerTypeTo( theType )
2398:                | * :      allocType = theType
2409:             ]
      
2409:             int i = 0
2415:             {[ equal( i, oNodeVecSize( decls ) )
2429:                | false :
2430:                   decl = oNodeVecElement( decls, i )
      
2443:                   oNodeSet( decl, qType, theType )
2455:                   oScopeDeclare( decl )
2461:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
2477:                   inc( i )
2483:                | * :
2488:                   >
2490:             ]}
      
2492:             oNodeVecDelete( decls )
      
2498:             [
2498:                | ')' : >
2502:                | ';' :
2504:             ]
2512:          }
2514:       | * :
2519:    ];
      
      
2520: ConstDecl:
2522:    {[
2522:       | pIdent :
2524:          [
2524:             | ':' :
2526:                @TypedConstDecl
2528:             | * :
2533:                @TrueConstDecl
2535:          ]
2535:       | * :
2540:          >
2542:    ]};
      
      
      % Parse a true constant declaration (as opposed to a typed const declaration).
      % The "true constant" terminology comes from Delphi docs.  It refers to a const that is
      % evaluated at compile time, rather than at program startup time.
      %
      % We've just accepted the identifier.
      %
2545: TrueConstDecl:
2547:    int id = LAST_ID
2552:    '='
      
2554:    @ConstExpr
      
2556:    Node decl
2556:    [ oTypeSNodeType
2558:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType,
2559:         nPointerType, nUniversalPointerType :
2559:          decl = @newIdent( nConst, id )
2573:          oNodeSetInt( decl, qValue, oValueTop )
2584:       | nStrLitType :
2586:          decl = @newIdent( nConstStr, id )
2600:          oNodeSetString( decl, qValueStr, oValueTopString )
2611:       | * :  #eNotAllowed
2632:    ]
2632:    oValuePop
2633:    oNodeSet( decl, qType, oTypeSTop )
2644:    oTypeSPop
2645:    oScopeDeclare( decl )
2651:    ';'
2654:    ;
      
      
      % Parse a typed const declaration.
      % We've just accepted the identifier and ':'
      %
2654: TypedConstDecl:
2656:    Node decl = @newIdent( nTypedConst, LAST_ID )
      
2669:    Node theType
2669:    @TypeRef( theType )
2676:    oNodeSet( decl, qType, theType )
      
         % Array and record consts are allocated in global memory,
         % with global offset stored as decl value.
         % Scalar consts are not allocated in memory, and their value is
         % stored directly as the decl value, as I do with "true constants".
         %
         % TO DO: I probably should store scalar consts in memory too, in case somebody
         % wants to get a pointer to them.  And anyway, typed constants can't be used in
         % constant expressions, so less need to store value in decl node.
      
         % TO DO: skip subranges, similar to oTypeSNodeType.
2688:    [ oNodeType( theType )
2695:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType,
2696:         nPointerType, nUniversalPointerType :
               % Parse expression and store value in decl
2696:          '='
      
2698:          oTypeSPush( theType )
2704:          @ConstExpr
2706:          @ConstCoerceType
      
2708:          oNodeSetInt( decl, qValue, oValueTop )
2719:          oValuePop
2720:          oTypeSPop
2721:          oScopeDeclare( decl )
2727:          ';'
      
2729:       | nShortStringType, nFileType :
2731:          #eNotImplemented
      
2733:       | nArrayType, nRecordType :
               % Allocate global space, store address in decl.
               % Push into global scope init code stream (since we'll be issuing code
               % rather than creating static data, at the moment).
               % Parse expression and store in global memory.
2735:          oScopeEnter( globalScope )
2741:          int addr = oScopeAllocType( theType )
2751:          oScopeEnd
2752:          oCodePush( @GetOrCreateInitCode( globalScope ) )
2763:          oNodeSetInt( decl, qValue, addr )
2775:          '='
2777:          @TypedConstInit( theType, addr )
2787:          oCodePop
2788:          oScopeDeclare( decl )
2794:          ';'
2796:    ]
2823:    ;
      
      
      % Parse the initial value of a constant that's being stored in global memory.
      % (An array or record constant, and recursively all its elements.)
      % Given the type, and the address in global memory for the const value.
      % The caller has already pushed into the global init code stream.
      %
2823: TypedConstInit( Node theType, int addr ):
      
         % TO DO: skip subranges, similar to oTypeSNodeTYpe
2825:    [ oNodeType( theType )
2832:       | nArrayType :
2833:          Node baseType = oNodeGet( theType, qBaseType )
2846:          Node indexType = oNodeGet( theType, qIndexType )
2859:          int low = @OrdinalLow( indexType )
2870:          int high = @OrdinalHigh( indexType )
2881:          int elementSize = oNodeGetInt( baseType, qSize )
      
2894:          '('
               % Loop over elements
2896:          int i = low
2902:          {
2902:             @TypedConstInit( baseType, addr )
2912:             [ equal( i, high )
2922:                | true : >
2925:                | false :
2927:             ]
2935:             ','
2937:             addr = add( addr, elementSize )
2950:             inc( i )
2956:          }
2958:          ')'
      
2960:       | nRecordType :
2962:          '('
2964:          Node fieldScope = oNodeGet( theType, qScope )
               % Loop over zero or more named fields.  It's not necessary to name them all.
               % fpc says the names that are given should be in order, but I'm not requiring that.
               % Since this is global memory, uninitialized fields will be left as 0.
2977:          {
2977:             [
2977:                | pIdent :
2979:                | * :  >
2986:             ]
2986:             Node field = oScopeFindRequireInScope( fieldScope )
2996:             ':'
2998:             Node fieldType = oNodeGet( field, qType )
3011:             int fieldAddr = add( addr, oNodeGetInt( field, qValue ) )
3031:             @TypedConstInit( fieldType, fieldAddr )
3041:             [
3041:                | ';' :
3043:                | * :  >
3050:             ]
3050:          }
3052:          ')'
      
3054:       | nBooleanType, nByteType, nCharType:
3056:          .tPushAddrGlobal  oEmitInt( addr )
3064:          oTypeSPush( theType )
3070:          @ConstExpr
3072:          @ConstCoerceType
3074:          .tPushConstI  oEmitInt( oValueTop )
3081:          oValuePop
3082:          oTypeSPop
3083:          .tAssignB
      
3085:       | nIntegerType, nEnumType:
3087:          .tPushAddrGlobal  oEmitInt( addr )
3095:          oTypeSPush( theType )
3101:          @ConstExpr
3103:          @ConstCoerceType
3105:          .tPushConstI  oEmitInt( oValueTop )
3112:          oValuePop
3113:          oTypeSPop
3114:          .tAssignI
      
3116:       | nPointerType, nUniversalPointerType :
3118:          .tPushAddrGlobal  oEmitInt( addr )
3126:          oTypeSPush( theType )
3132:          @ConstExpr
3134:          @ConstCoerceType
3136:          .tPushConstI  oEmitInt( oValueTop )   % only allowing ptr constant Nil so don't need tPushConstP or link redirection
3143:          oValuePop
3144:          oTypeSPop
3145:          .tAssignP
      
3147:       | nShortStringType, nFileType :
3149:          #eNotImplemented
3151:    ]
3178:    ;
      
      
3178: TypeDecl:
3180:    {[
3180:       | pIdent :
3182:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3195:          '='
3197:          Node theType
3197:          @TypeRef( theType )
3204:          oNodeSet( decl, qType, theType )
3216:          oScopeDeclare( decl )
3222:          ';'
3224:       | * :
3229:          >
3231:    ]};
      
3234: VarDecl( node_type varNodeType ):
3236:    {[
3236:       | pIdent :
3238:          NodeVec decls = oNodeVecNew
3243:          Node decl
3243:          {
3243:             decl = @newIdent( varNodeType, LAST_ID )
3256:             oNodeVecAppend( decls, decl )
3265:             [
3265:                | ',' :
3267:                   pIdent
3269:                | * :
3274:                   >
3276:             ]
3276:          }
3278:          ':'
3280:          Node theType
3280:          @TypeRef( theType )
      
3287:          int i = 0
3293:          {[ equal( i, oNodeVecSize( decls ) )
3307:             | false :
3308:                decl = oNodeVecElement( decls, i )
3321:                oNodeSet( decl, qType, theType )
3333:                oScopeDeclareAlloc( decl )
3339:                inc( i )
3345:             | * :
3350:               >
3352:          ]}
      
               % optional initialization
3354:          [
3354:             | '=' :
3356:                [ oNodeVecSize( decls )
3363:                   | 1 :
3364:                   | * :  #eOnlyOneVarCanBeInitialized
3371:                ]
      
                     % we need an initCode stream for this scope
3371:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3381:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3387:                boolean changedScope = false
3393:                [ equal_zero( @ScopeLevel )
3400:                   | true : oScopeEnter( initScope )
3407:                            changedScope = true
3413:                   | * :
3418:                ]
                     % generate assignment in initCode stream
3418:                @LValueVar( decl, true )
3428:                @Expr
3430:                @CoerceType
3432:                @Assign
3434:                [ changedScope
3437:                   | true : oScopeEnd
3439:                   | * :
3444:                ]
3444:                oCodePop
                   
3445:             | * :
3450:          ]
      
3450:          oNodeVecDelete( decls )
3456:          ';'
3458:       | * :
3463:          >
3465:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3468: LabelDecl:
3470:    {
3470:       Node decl
3470:       [
3470:          | pIdent :
3472:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3474:             oChangeIntLitToLabelIdent
3475:       ]
3483:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
3496:       Label label = oLabelNew
3501:       oNodeSetLabel( decl, qValue, label )
3513:       oScopeDeclare( decl )
3519:       [
3519:          | ',' :
3521:          | * :
3526:             >
3528:       ]
3528:    }
3530:    ';'
3533:    ;
3533: include 'pascal_constexpr.ssl'
      %
      % Pascal Compiler
      %
      
      % --------------------------- Const Expressions --------------------------
      
      
      % Constant expressions are evaluated at compile time.
      % They are limited to constant literals, declared constants (not including TypedConstants!)
      % and a small selection of built-in functions. 
      %
      % The value of a constant expression is left on the Value Stack.
      % The type is left on the Type Stack.
      
3533: ConstExpr:
3535:    @ConstBoolExpr
3537:    {[
3537:       | '=' :
3539:          @ConstBoolTerm
3541:          @ConstMatchTypes
3543:          [ oTypeSNodeType
3545:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueEqual
3554:             | * :             oValueEqual
3560:          ]
3560:          oTypeSPop  oTypeSPush( BooleanType )
3567:       | '<>' :
3569:          @ConstBoolExpr
3571:          @ConstMatchTypes
3573:          [ oTypeSNodeType
3575:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueNotEqual
3584:             | * :             oValueNotEqual
3590:          ]
3590:          oTypeSPop  oTypeSPush( BooleanType )
3597:       | '<' :
3599:          @ConstBoolExpr
3601:          @ConstMatchTypes
3603:          [ oTypeSNodeType
3605:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueLess
3614:             | * :             oValueLess
3620:          ]
3620:          oTypeSPop  oTypeSPush( BooleanType )
3627:       | '>' :
3629:          @ConstBoolExpr
3631:          @ConstMatchTypes
3633:          [ oTypeSNodeType
3635:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueGreater
3644:             | * :             oValueGreater
3650:          ]
3650:          oTypeSPop  oTypeSPush( BooleanType )
3657:       | '<=' :
3659:          @ConstBoolExpr
3661:          @ConstMatchTypes
3663:          [ oTypeSNodeType
3665:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueLessEqual
3674:             | * :             oValueLessEqual
3680:          ]
3680:          oTypeSPop  oTypeSPush( BooleanType )
3687:       | '>=' :
3689:          @ConstBoolExpr
3691:          @ConstMatchTypes
3693:          [ oTypeSNodeType
3695:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueGreaterEqual
3704:             | * :             oValueGreaterEqual
3710:          ]
3710:          oTypeSPop  oTypeSPush( BooleanType )
3717:       | * :  >
3734:    ]};
      
      
3737: ConstBoolExpr:
3739:    @ConstBoolTerm
3741:    {[
3741:       | pOr :
3743:          @ConstRequireBool
3745:          @ConstBoolTerm
3747:          @ConstRequireBoolPop
3749:          oValueOr
3750:       | * :  >
3757:    ]};
      
      
3760: ConstBoolTerm:
3762:    @ConstBoolFactor
3764:    {[
3764:       | pAnd :
3766:          @ConstRequireBool
3768:          @ConstBoolFactor
3770:          @ConstRequireBoolPop
3772:          oValueAnd
3773:       | * :  >
3780:    ]};
      
      
3783: ConstBoolFactor:
3785:    [
3785:       | pNot :
3787:          @ConstBoolFactor
3789:          @ConstRequireBool
3791:          oValueNot
3792:       | * :
3797:          @ConstArithExpr
3799:    ];
      
      
3800: ConstArithExpr:
3802:    @ConstTerm
3804:    {[
3804:       | '+' :
3806:          @ConstTerm
3808:          @ConstMatchTypes
3810:          [ oTypeSNodeType
3812:             | nStrLitType :   oValueStringConcat
3814:             | * :             oValueAdd
3820:          ]
3820:       | '-' :
3822:          @ConstTerm
3824:          @ConstMatchTypes
3826:          [ oTypeSNodeType
3828:             | nStrLitType :   #eNotAllowed
3831:             | * :             oValueSub
3837:          ]
3837:       | * :  >
3846:    ]};
      
      
3849: ConstTerm:
3851:    @ConstFactor
3853:    {[
3853:       | pTimes :
3855:          @ConstFactor
3857:          @ConstMatchTypes
3859:          [ oTypeSNodeType
3861:             | nStrLitType :   #eNotAllowed
3864:             | * :             oValueMult
3870:          ]
3870:       | pDivide :
3872:          @ConstFactor
3874:          @ConstMatchTypes
3876:          [ oTypeSNodeType
3878:             | nStrLitType :   #eNotAllowed
3881:             | * :             oValueDiv
3887:          ]
3887:       | * :  >
3896:    ]};
      
      
3899: ConstFactor:
3901:    [
3901:       | pPlus :
3903:          @ConstPrimary
3905:       | pMinus :
3907:          @ConstPrimary
3909:          oValueNegate
3910:       | * :
3917:          @ConstPrimary
3919:    ];
      
      
3920: ConstPrimary:
3922:    [
3922:       | pIntLit :
3924:          oValuePush( TOKEN_VALUE )
3929:          oTypeSPush( IntegerType )
3935:       | pCharLit :
3937:          oValuePush( TOKEN_VALUE )
3942:          oTypeSPush( CharType )
3948:       | pStrLit :
3950:          oValuePushString( CURRENT_STRLIT )
3955:          oTypeSPush( StrLitType )
3961:       | '(' :
3963:          @ConstExpr
3965:          ')'
3967:       | pIdent :
3969:          Node decl = oScopeFindRequire
3974:          @ResolveUnitRef( decl )
3981:          [ oNodeType( decl )
3988:             | nBuiltInFunc :
3989:                @ConstBuiltInFunc( decl )
3996:             | nConst :
3998:                oValuePush( oNodeGetInt( decl, qValue ) )
4011:                oTypeSPush( oNodeGet( decl, qType ) )
4024:             | nConstStr :
4026:                oValuePushString( oNodeGetString( decl, qValueStr ) )
4039:                oTypeSPush( oNodeGet( decl, qType ) )
4052:             | nEnumValue :
4054:                oValuePush( oNodeGetInt( decl, qValue ) )
4067:                oTypeSPush( oNodeGet( decl, qType ) )
4080:             | nTypeDecl :
                     % A type cast
4082:                oTypeSPush( oNodeGet( decl, qType ) )
4095:                '('
4097:                @ConstExpr
4099:                ')'
4101:                @ConstCastType
4103:             | * :
4116:                #eNotConst
4118:                oValuePush( 0 )
4124:                oTypeSPush( IntegerType )
4130:          ]
4130:       | '@' :
4132:          #eNotImplemented
4134:          oValuePush( 0 )
4140:          oTypeSPush( UniversalPointerType )
4146:       | * :
4161:          #eNotConst
4163:          oValuePush( 0 )
4169:          oTypeSPush( IntegerType )
4175:    ];
      
4176: ConstRequireBoolPop:
4178:    [ oTypeSNodeType
4180:       | nBooleanType :
4181:       | * :          #eNotBoolean
4188:    ]
4188:    oTypeSPop;
      
      
4190: ConstRequireBool:
4192:    [ oTypeSNodeType
4194:       | nBooleanType :
4195:       | * :          #eNotBoolean
4202:    ];
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      % The types refer to constant values on the Value Stack,
      % so any implicit conversion would occur there, not in code.
      %
      % Some implicit conversion is allowed for either of the types.
      % See also ConstCoerceType where only the top type may change.
      %
4203: ConstMatchTypes:
4205:    node_type nt = oTypeSNodeType
4210:    oTypeSPop
4211:    [ equal_node_type( nt, oTypeSNodeType )
4220:       | false :
               % Some implicit conversion is allowed even here
4221:          [ oTypeSNodeType
4223:             | nPointerType :
4224:                [ nt
4227:                   | nUniversalPointerType :  >>
4229:                   | * :
4234:                ]
4234:             | nUniversalPointerType :
4236:                [ nt
4239:                   | nPointerType :  >>
4241:                   | * :
4246:                ]
4246:             | nStrLitType :
4248:                [ nt
4251:                   | nCharType :
4252:                      oValueCharToString
4253:                      >>
4254:                   | * :
4259:                ]
4259:             | nCharType :
4261:                [ nt
4264:                   | nStrLitType :
4265:                      oValueSwap
4266:                      oValueCharToString
4267:                      oValueSwap
4268:                      oTypeSPop
4269:                      oTypeSPush( StrLitType )
4275:                      >>
4276:                   | * :
4281:                ]
4281:             | * :
4292:          ]
4292:          #eTypeMismatch
4294:       | * :
4299:    ];
      
      
      % Given a constant value on the value stack, its type on the type stack,
      % and the desired type under it on the type stack.
      % Perform any necessary implicit conversions so the value is the desired type.
      % Pop the top type, leaving only the desired type.
      %
4300: ConstCoerceType:
4302:    node_type nt = oTypeSNodeType
4307:    oTypeSPop
4308:    [ equal_node_type( nt, oTypeSNodeType )
4317:       | false :
               % Can we implicitly convert the value to the desired type?
4318:          [ oTypeSNodeType
4320:             | nIntegerType :
4321:                [ nt
4324:                   | nByteType :  >>
4326:                   | * :
4331:                ]
4331:             | nByteType :
4333:                [ nt
4336:                   | nIntegerType :  >>
4338:                   | * :
4343:                ]
4343:             | nPointerType :
4345:                [ nt
4348:                   | nUniversalPointerType :  >>
4350:                   | * :
4355:                ]
4355:             | nUniversalPointerType :
4357:                [ nt
4360:                   | nPointerType :  >>
4362:                   | * :
4367:                ]
4367:             | nStrLitType :
4369:                [ nt
4372:                   | nCharType :
4373:                      oValueCharToString
4374:                      >>
4375:                   | * :
4380:                ]
4380:             | nShortStringType :
4382:                [ nt
4385:                   | nStrLitType :  >>
4387:                   | nCharType :
4389:                      oValueCharToString
4390:                      >>
4391:                   | * :
4398:                ]
4398:             | * :
4413:          ]
4413:          #eTypeMismatch
4415:       | * :
4420:    ];
      
      
      % Given a constant value on the value stack, its type on the type stack,
      % and the desired type under it on the type stack.
      % Perform any necessary conversions so the value is cast to the desired type.
      % Pop the top type, leaving only the desired type.
      %
      % This is stronger than ConstCoerceType, since it isn't limited to implicit conversions.
      % There are still going to be limits on what is allowed though.
      %
4421: ConstCastType:
4423:    node_type nt = oTypeSNodeType
4428:    oTypeSPop
4429:    [ equal_node_type( nt, oTypeSNodeType )
4438:       | false :
               % Can we cast the value to the desired type?
4439:          [ oTypeSNodeType
4441:             | nIntegerType, nEnumType :
4442:                [ nt
4445:                   | nByteType, nCharType, nBooleanType :  >>
4447:                   | nIntegerType, nEnumType :  >>
4450:                   | * :
4463:                ]
4463:             | nByteType, nCharType, nBooleanType :
4465:                [ nt
4468:                   | nByteType, nCharType, nBooleanType :  >>
4470:                   | nIntegerType, nEnumType :  >>
4473:                   | * :
4486:                ]
4486:             | nPointerType :
4488:                [ nt
4491:                   | nUniversalPointerType :  >>
4493:                   | * :
4498:                ]
4498:             | nUniversalPointerType :
4500:                [ nt
4503:                   | nPointerType :  >>
4505:                   | * :
4510:                ]
4510:             | nStrLitType :
4512:                [ nt
4515:                   | nCharType :
4516:                      oValueCharToString
4517:                      >>
4518:                   | * :
4523:                ]
4523:             | nShortStringType :
4525:                [ nt
4528:                   | nStrLitType :  >>
4530:                   | nCharType :
4532:                      oValueCharToString
4533:                      >>
4534:                   | * :
4541:                ]
4541:             | * :
4562:          ]
4562:          #eTypeMismatch
4564:       | * :
4569:    ];
      
      
      % These are the methods that Pascal allows in a constant expression:
      %   Abs( x: integer_or_real ) : integer_or_real
      %   Round( x: real ) : integer
      %   Trunc( x: real ) : integer
      %   Chr( x: integer ) : char
      %   Ord( x: ordinal ) : integer
      %   Length( s: string ) : integer
      %   Pred( x: ordinal ) : ordinal
      %   Succ( x: ordinal ) : ordinal
      %   SizeOf( var, expr, or typename ) : integer
      %   Odd( x: integer ) : boolean  - true if the argument is odd
      %
4570: ConstBuiltInFunc( Node method ):
      
         % Ord(x)
4572:    [ oNodeEqual( method, BuiltIn_Ord )
4582:       | true :
4583:          '('
4585:          @ConstExpr
4587:          ')'
4589:          [ oTypeSNodeType
4591:             | nIntegerType, nEnumType :
4592:             | nBooleanType, nByteType, nCharType :
4594:             | * :  #eTypeMismatch
4609:          ]
4609:          oTypeSPop
4610:          oTypeSPush( IntegerType )
4616:          ')'
4618:          >>
4619:       | * :
4624:    ]
      
         % Chr(x)
4624:    [ oNodeEqual( method, BuiltIn_Chr )
4634:       | true :
4635:          '('
4637:          @ConstExpr
4639:          ')'
4641:          [ oTypeSNodeType
4643:             | nIntegerType :
4644:             | nByteType :
4646:             | * :  #eTypeMismatch
4655:          ]
4655:          oTypeSPop
4656:          oTypeSPush( CharType )
4662:          ')'
4664:          >>
4665:       | * :
4670:    ]
      
         % Pred(x)
4670:    [ oNodeEqual( method, BuiltIn_Pred )
4680:       | true :
4681:          '('
4683:          @ConstExpr
4685:          [ oTypeSNodeType
4687:             | nEnumType :
4688:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
4697:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
4700:                   | * :
4705:                ]
4705:             | * :  #eTypeMismatch
4712:          ]
4712:          oValuePush( 1 )  oValueSub
4719:          ')'
4721:          >>
4722:       | * :
4727:    ]
      
         % Succ(x)
4727:    [ oNodeEqual( method, BuiltIn_Succ )
4737:       | true :
4738:          '('
4740:          @ConstExpr
4742:          [ oTypeSNodeType
4744:             | nEnumType :
4745:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
4754:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
4757:                   | * :
4762:                ]
4762:             | * :  #eTypeMismatch
4769:          ]
4769:          oValuePush( 1 )  oValueAdd
4776:          ')'
4778:          >>
4779:       | * :
4784:    ]
      
4784:    #eNotImplemented
4787:    ;
      
      
4787: include 'pascal_expr.ssl'
      %
      % Pascal Compiler
      %
      
      
      % ------------------------------ Expressions -----------------------------
      
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanFlowType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
4787: Expr:
4789:    Label falseLabel = labelNull
      
4795:    @ExprAllowFlow( falseLabel )
4802:    @FlowToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
4810: BooleanExprControlFlow( out Label falseLabel ):
4812:    @ExprAllowFlow( falseLabel )
4819:    [ oTypeSNodeType
4821:       | nBooleanFlowType :
4822:       | nBooleanType :
               % convert value to control flow
4824:          falseLabel = oLabelNew
4829:          .tJumpFalse  oEmitLabel( falseLabel )
4837:       | * :
4844:          #eNotBoolean
4846:    ]
4846:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
4848: FlowToVal( inout Label falseLabel ):
4850:    [ oTypeSNodeType
4852:       | nBooleanFlowType :
4853:          Label doneLabel = oLabelNew
4858:          .tPushConstI  oEmitInt( 1 )
4866:          .tJump  oEmitLabel( doneLabel )
4874:          .tLabel  oEmitLabel( falseLabel )
4882:          .tPushConstI  oEmitInt( 0 )
4890:          .tLabel  oEmitLabel( doneLabel )
4898:          oTypeSPop
4899:          oTypeSPush( BooleanType )
4905:          falseLabel = labelNull
4911:       | * :
4916:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
4917: ValToFlow( out Label falseLabel ):
4919:    [ oTypeSNodeType
4921:       | nBooleanType :
4922:          falseLabel = oLabelNew
4927:          .tJumpFalse  oEmitLabel( falseLabel )
4935:          oTypeSPop
4936:          oTypeSPush( BooleanFlowType )
4942:       | * :
4947:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanFlowType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanFlowType.
      % In this case, falseLabel is ignored.
      %
4948: ExprAllowFlow( out Label falseLabel ):
4950:    @BoolExprAllowFlow( falseLabel )
4957:    {[
4957:       | '=' :
4959:          @FlowToVal( falseLabel )
4966:          @PromoteToIntOptional
4968:          @BoolExprAllowFlow( falseLabel )
4975:          @FlowToVal( falseLabel )
4982:          @PromoteToIntOptional
4984:          @MatchTypes
4986:          [ oTypeSNodeType
4988:             | nBooleanType, nCharType :     .tEqualB
4991:             | nIntegerType, nEnumType :     .tEqualI
4995:             | nPointerType, nUniversalPointerType :    .tEqualP
4999:             | nShortStringType, nStrLitType :
5001:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tEqualI
5013:             | * :                           #eNotAllowed
5034:          ]
5034:          oTypeSPop
5035:          oTypeSPush( BooleanType )
      
5041:       | '<>' :
5043:          @FlowToVal( falseLabel )
5050:          @PromoteToIntOptional
5052:          @BoolExprAllowFlow( falseLabel )
5059:          @FlowToVal( falseLabel )
5066:          @PromoteToIntOptional
5068:          @MatchTypes
5070:          [ oTypeSNodeType
5072:             | nBooleanType, nCharType :     .tNotEqualB
5075:             | nIntegerType, nEnumType :     .tNotEqualI
5079:             | nPointerType, nUniversalPointerType :    .tNotEqualP
5083:             | nShortStringType, nStrLitType :
5085:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tNotEqualI
5097:             | * :                           #eNotAllowed
5118:          ]
5118:          oTypeSPop
5119:          oTypeSPush( BooleanType )
      
5125:       | '<' :
5127:          @FlowToVal( falseLabel )
5134:          @PromoteToIntOptional
5136:          @BoolExprAllowFlow( falseLabel )
5143:          @FlowToVal( falseLabel )
5150:          @PromoteToIntOptional
5152:          @MatchTypes
5154:          [ oTypeSNodeType
5156:             | nBooleanType, nCharType :     .tLessB
5159:             | nIntegerType, nEnumType :     .tLessI
5163:             | nPointerType, nUniversalPointerType :   .tLessP
5167:             | nShortStringType, nStrLitType :
5169:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessI
5181:             | * :                           #eNotAllowed
5202:          ]
5202:          oTypeSPop
5203:          oTypeSPush( BooleanType )
      
5209:       | '>' :
5211:          @FlowToVal( falseLabel )
5218:          @PromoteToIntOptional
5220:          @BoolExprAllowFlow( falseLabel )
5227:          @FlowToVal( falseLabel )
5234:          @PromoteToIntOptional
5236:          @MatchTypes
5238:          [ oTypeSNodeType
5240:             | nBooleanType, nCharType :     .tGreaterB
5243:             | nIntegerType, nEnumType :     .tGreaterI
5247:             | nPointerType, nUniversalPointerType :   .tGreaterP
5251:             | nShortStringType, nStrLitType :
5253:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterI
5265:             | * :                           #eNotAllowed
5286:          ]
5286:          oTypeSPop
5287:          oTypeSPush( BooleanType )
      
5293:       | '<=' :
5295:          @FlowToVal( falseLabel )
5302:          @PromoteToIntOptional
5304:          @BoolExprAllowFlow( falseLabel )
5311:          @FlowToVal( falseLabel )
5318:          @PromoteToIntOptional
5320:          @MatchTypes
5322:          [ oTypeSNodeType
5324:             | nBooleanType, nCharType :     .tLessEqualB
5327:             | nIntegerType, nEnumType :     .tLessEqualI
5331:             | nPointerType, nUniversalPointerType :   .tLessEqualP
5335:             | nShortStringType, nStrLitType :
5337:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessEqualI
5349:             | * :                           #eNotAllowed
5370:          ]
5370:          oTypeSPop
5371:          oTypeSPush( BooleanType )
      
5377:       | '>=' :
5379:          @FlowToVal( falseLabel )
5386:          @PromoteToIntOptional
5388:          @BoolExprAllowFlow( falseLabel )
5395:          @FlowToVal( falseLabel )
5402:          @PromoteToIntOptional
5404:          @MatchTypes
5406:          [ oTypeSNodeType
5408:             | nBooleanType, nCharType :     .tGreaterEqualB
5411:             | nIntegerType, nEnumType :     .tGreaterEqualI
5415:             | nPointerType, nUniversalPointerType :   .tGreaterEqualP
5419:             | nShortStringType, nStrLitType :
5421:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterEqualI
5433:             | * :                           #eNotAllowed
5454:          ]
5454:          oTypeSPop
5455:          oTypeSPush( BooleanType )
      
5461:       | * :
5476:          >
5478:    ]};
      
      
5481: BoolExprAllowFlow( out Label falseLabel ):
5483:    Label trueLabel = labelNull
      
5489:    @BoolTermAllowFlow( falseLabel )
5496:    {[
5496:       | pOr :
5498:          [ oTypeSNodeType
5500:             | nBooleanFlowType :
                     % We are true here. Jump ahead to done
5501:                [ equal_label( trueLabel, labelNull )
5511:                   | true :  trueLabel = oLabelNew
5517:                   | * :
5522:                ]
5522:                .tJump  oEmitLabel( trueLabel )
5530:             | nBooleanType :
5532:                @ValToFlow( falseLabel )
                     % We are true here. Jump ahead to done
5539:                [ equal_label( trueLabel, labelNull )
5549:                   | true :  trueLabel = oLabelNew
5555:                   | * :
5560:                ]
5560:                .tJump  oEmitLabel( trueLabel )
5568:             | * : #eNotBoolean
5577:          ]
5577:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5578:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5586:          falseLabel = labelNull
5592:          @BoolTermAllowFlow( falseLabel )
      
5599:          [ oTypeSNodeType
5601:             | nBooleanFlowType :
5602:             | nBooleanType :
5604:                @ValToFlow( falseLabel )
5611:             | * : #eNotBoolean
5620:          ]
      
5620:          oTypeSPop
5621:          oTypeSPush( BooleanFlowType )
      
5627:       | * :
5632:          >
5634:    ]}
      
         % any short-circuit trues jump here to the end
5636:    [ equal_label( trueLabel, labelNull )
5646:       | false :
5647:          .tLabel  oEmitLabel( trueLabel )
5655:       | * :
5660:    ]
5661:    ;
      
      
5661: BoolTermAllowFlow( out Label falseLabel ):
5663:    Label overallFalseLabel = labelNull
      
5669:    @BoolFactorAllowFlow( falseLabel )
5676:    {[
5676:       | pAnd :
5678:          [ oTypeSNodeType
5680:             | nBooleanFlowType :
5681:             | nBooleanType :
5683:                @ValToFlow( falseLabel )
5690:             | * :
5697:                #eNotBoolean
5699:          ]
5699:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
5700:          [ equal_label( overallFalseLabel, labelNull )
5710:             | true :
5711:                overallFalseLabel = oLabelNew
5716:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
5730:                falseLabel = overallFalseLabel
5736:             | * :
5741:          ]
      
5741:          Label factorFalseLabel = labelNull
5747:          @BoolFactorAllowFlow( factorFalseLabel )
      
5754:          [ oTypeSNodeType
5756:             | nBooleanFlowType :
5757:             | nBooleanType :
5759:                @ValToFlow( factorFalseLabel )
5766:             | * : #eNotBoolean
5775:          ]
5775:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
5789:       | * :
5794:          >
5796:    ]};
      
      
5799: BoolFactorAllowFlow( out Label falseLabel ):
5801:    [
5801:       | pNot :
5803:          Label factorFalseLabel = labelNull
      
5809:          @BoolFactorAllowFlow( factorFalseLabel )
5816:          [ oTypeSNodeType
5818:             | nBooleanFlowType :
                     % We have control flow, and are sitting at the point that has value false.
5819:                falseLabel = oLabelNew
5824:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
5832:                .tLabel  oEmitLabel( factorFalseLabel )
      
5840:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
5842:                .tNot
      
5844:             | * : #eNotBoolean
5853:          ]
      
5853:       | * :
5858:          @ArithExprAllowFlow( falseLabel )
5865:    ];
      
      
5866: ArithExprAllowFlow( out Label falseLabel ):
5868:    boolean first = true
5874:    int tempStrOffset
      
5874:    @TermAllowFlow( falseLabel )
5881:    {[
5881:       | '+' :
5883:          [ oTypeSNodeType
5885:             | nIntegerType, nByteType :
5886:                @PromoteToIntPop
5888:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
      
5895:                [ oTypeSNodeType
5897:                   | nPointerType, nUniversalPointerType :
                           % int + ptr
5898:                      .tSwap
                           % leave only the ptr type on the type stack (int was already popped above)
5900:                      @PointerAddition
5902:                   | * :
5909:                      @PromoteToInt
5911:                      .tAddI
5913:                ]
      
5913:             | nShortStringType, nStrLitType, nCharType :
                     % String concatenation
5915:                [ first
5918:                   | true :  % move into a temp string, so subsequent term(s) can further modify it.
5919:                             tempStrOffset = @MoveIntoTempShortString
5925:                             first = false
5931:                   | * :
5936:                ]
5936:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
5943:                [ oTypeSNodeType
5945:                   | nShortStringType, nStrLitType :
5946:                      @ShortStringAppendShortString
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
5948:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
5956:                      oTypeSPush( ShortStringType )
5962:                   | nCharType :
5964:                      @ShortStringAppendChar
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
5966:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
5974:                      oTypeSPush( ShortStringType )
5980:                   | * :
5989:                      #eTypeMismatch
5991:                      oTypeSPop
5992:                ]
      
5992:             | nPointerType, nUniversalPointerType :
5994:                @TermAllowFlow( falseLabel )   % actually not allowing CF
6001:                @PromoteToIntPop
6003:                @PointerAddition
      
6005:             | * :
6022:                #eNotAllowed
6024:          ]
      
6024:       | '-' :
6026:          [ oTypeSNodeType
6028:             | nIntegerType, nByteType :
6029:                @PromoteToIntPop
6031:                @TermAllowFlow( falseLabel )
6038:                @PromoteToInt
6040:                .tSubI
      
6042:             | nPointerType, nUniversalPointerType :
6044:                @TermAllowFlow( falseLabel )
6051:                [ oTypeSNodeType
6053:                   | nIntegerType, nByteType :
6054:                      @PromoteToIntPop
6056:                      @PointerSubInt
6058:                   | nPointerType, nUniversalPointerType :
6060:                      @MatchTypes
6062:                      @PointerSubPointer
6064:                   | * :
6075:                      #eNotAllowed
6077:                ]
      
6077:             | * :  #eNotAllowed
      
6090:          ]
6090:       | * :
6097:          >
6099:    ]};
      
      
6102: TermAllowFlow( out Label falseLabel ):
6104:    @FactorAllowFlow( falseLabel )
6111:    {[
6111:       | pTimes :
6113:          @PromoteToIntPop
6115:          @FactorAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6122:          @PromoteToInt
6124:          .tMultI
6126:       | pDivide :
6128:          @PromoteToIntPop
6130:          @FactorAllowFlow( falseLabel )
6137:          @PromoteToInt
6139:          .tDivI
6141:       | * :
6148:          >
6150:    ]};
      
      
6153: FactorAllowFlow( out Label falseLabel ):
6155:    [
6155:       | pPlus :
6157:          @PrimaryAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
               % TO DO: unary +/- is supposed to leave expression type as-is.
6164:          @PromoteToInt
6166:       | pMinus :
6168:          @PrimaryAllowFlow( falseLabel )
               % TO DO: unary +/- is supposed to leave expression type as-is.
6175:          @PromoteToInt
6177:          .tNegI
6179:       | * :
6186:          @PrimaryAllowFlow( falseLabel )
6193:    ];
      
      
6194: PrimaryAllowFlow( out Label falseLabel ):
6196:    [
6196:       | pIntLit :
6198:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6205:          oTypeSPush( IntegerType )
      
6211:       | pCharLit :
6213:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6220:          oTypeSPush( CharType )
      
6226:       | '(' :
6228:          @ExprAllowFlow( falseLabel )
6235:          ')'
      
6237:       | pStrLit :
6239:          int addr = oStringAllocShortStringLit( CURRENT_STRLIT )     % store in global data
6248:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: consider defining a ShortString type with the exact capacity used.
               % But, I don't think it should matter here, since nobody should be assigning to this string.
6256:          oTypeSPush( StrLitType )
               % This seems unlikely, but the strlit may be followed by
               % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
               % First, advance the pointer by index if any
6262:          @LValueIndexes
               % get final value of dereferencing, if any
6264:          @FetchVar
      
6266:       | pIdent :
6268:          Node decl = oScopeFindRequire
6273:          @ResolveUnitRef( decl )
6280:          Node theType
      
6280:          [ oNodeType( decl )
6287:             | nFunc :
6288:                @Call( decl )
      
6295:             | nBuiltInFunc :
6297:                @CallBuiltInFunc( decl )
      
6304:             | nConst, nEnumValue :
6306:                theType = oNodeGet( decl, qType )
6319:                oTypeSPush( theType )
6325:                [ oTypeSNodeType
6327:                   | nIntegerType, nEnumType, nBooleanType, nCharType, nByteType :
6328:                      .tPushConstI @EmitValue( decl )
6337:                   | nPointerType, nUniversalPointerType :
                           % We have one pointer const, Nil.  It's pushed as I.
                           % Sign-extending I to P won't hurt since it's 0.
6339:                      .tPushConstI @EmitValue( decl )
6348:                   | * :
6365:                      #eNotImplemented
6367:                ]
      
6367:             | nConstStr :
                     % This is a non-typed const defined as a strlit.
                     % So far, the value is held in the compiler's symbol table.
                     % Referencing the constant in the code will work the same as directly giving a strlit.
                     % (See pStrLit above).  We store the strlit in global memory, and set expr type to StrLitType.
      
                     % Storage in global memory only happens the first time the const is referenced.
                     % The global offset is stored in qValue.
6369:                int addr = oNodeGetInt( decl, qValue )
6382:                [ equal_zero( addr )
6389:                   | true :
6390:                      addr = oStringAllocShortStringLit( oNodeGetString( decl, qValueStr ) )
6407:                      oNodeSetInt( decl, qValue, addr )
6419:                   | * :
6424:                ]
6424:                .tPushAddrGlobal oEmitInt( addr )
6432:                oTypeSPush( StrLitType )
                     % This seems unlikely, but the strlit may be followed by
                     % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
                     % First, advance the pointer by index if any
6438:                @LValueIndexes
                     % get final value of dereferencing, if any
6440:                @FetchVar
      
6442:             | nGlobalVar, nLocalVar, nParam, nTypedConst :
6444:                @VarExpr( decl )
      
6451:             | nTypeDecl :
                     % A type cast
6453:                oTypeSPush( oNodeGet( decl, qType ) )
6466:                '('
6468:                @Expr
6470:                ')'
6472:                @CastType
      
6474:             | * :
6497:                #eNotValue
6499:                oTypeSPush( IntegerType )
6505:          ]
      
6505:       | '@' :        % @var -- pointer to var
6507:          pIdent
      
6509:          Node decl = oScopeFindRequire
6514:          @ResolveUnitRef( decl )
6521:          Node theType
      
               % writeable is false because we're not on the left hand side of an assignment,
               % or passign into a var parameter.  So it's ok to take the address of a typed const.
6521:          @LValueVar( decl, false )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
6531:          theType = oTypeSTop
6536:          oTypeSPop
6537:          Node ptrType = @PointerTypeTo( theType )
6548:          oTypeSPush( ptrType )
      
6554:       | * :
6569:          #eNotValue
6571:          oTypeSPush( IntegerType )
6577:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
6578: VarExpr( Node decl ):
6580:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
6593:    int uplevels = @DeclUpLevels( decl )
      
6604:    oTypeSPush( theType )
6610:    [ oTypeSNodeType
6612:       | nIntegerType, nEnumType :
6613:          [ oNodeType( decl )
6620:             | nGlobalVar, nTypedConst :   .tPushGlobalI  @EmitValue( decl )
6630:             | nLocalVar :
6632:                [ equal_zero( uplevels )
6639:                   | true :  .tPushLocalI  @EmitValue( decl )
6649:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
6669:                ]
6669:             | nParam :
6671:                [ oNodeGetBoolean( decl, qInOut )
6681:                   | true :    % VAR param points to the var.  Auto dereference.
6682:                      [ equal_zero( uplevels )
6689:                         | true :  .tPushParamP  @EmitValue( decl )
6699:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6719:                      ]
6719:                      .tFetchI
6721:                   | * :
6726:                      [ equal_zero( uplevels )
6733:                         | true :  .tPushParamI  @EmitValue( decl )
6743:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
6763:                      ]
6763:                ]
6763:          ]
      
6775:       | nBooleanType, nByteType, nCharType :
6777:          [ oNodeType( decl )
6784:             | nGlobalVar, nTypedConst :   .tPushGlobalB  @EmitValue( decl )
6794:             | nLocalVar :
6796:                [ equal_zero( uplevels )
6803:                   | true :  .tPushLocalB  @EmitValue( decl )
6813:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
6833:                ]
6833:             | nParam :
6835:                [ oNodeGetBoolean( decl, qInOut )
6845:                   | true :    % VAR param points to the var.  Auto dereference.
6846:                      [ equal_zero( uplevels )
6853:                         | true :  .tPushParamP  @EmitValue( decl )
6863:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6883:                      ]
6883:                      .tFetchB
6885:                   | * :
6890:                      [ equal_zero( uplevels )
6897:                         | true :  .tPushParamB  @EmitValue( decl )
6907:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
6927:                      ]
6927:                ]
6927:          ]
      
6939:       | nFileType :
6941:          #eNotImplemented
      
6943:       | nPointerType, nUniversalPointerType :
6945:          [ oNodeType( decl )
6952:             | nGlobalVar, nTypedConst :   .tPushGlobalP @EmitValue( decl )
6962:             | nLocalVar :
6964:                [ equal_zero( uplevels )
6971:                   | true :  .tPushLocalP  @EmitValue( decl )
6981:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
7001:                ]
7001:             | nParam :
7003:                [ oNodeGetBoolean( decl, qInOut )
7013:                   | true :    % VAR param points to the var.  Auto dereference.
7014:                      [ equal_zero( uplevels )
7021:                         | true :  .tPushParamP  @EmitValue( decl )
7031:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7051:                      ]
7051:                      .tFetchP
7053:                   | * :
7058:                      [ equal_zero( uplevels )
7065:                         | true :  .tPushParamP  @EmitValue( decl )
7075:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7095:                      ]
7095:                ]               
7095:          ]
7107:          [
7107:             | '^' :             % dereferenced
7109:                oTypeSPop
7110:                oTypeSPush( oNodeGet( theType, qBaseType ) )
7123:                @LValueIndexes
7125:                @FetchVar
7127:             | '[' :             % dereferencing pointer like an array [0..] of baseType
7129:                @PointerArraySubscript
                     % modify addr for any subsequent subscripts, field references, etc
7131:                @LValueIndexes
7133:                @FetchVar
7135:             | * :               % just ptr value alone
7142:          ]
      
7142:       | nArrayType, nRecordType, nShortStringType :
               % compound type
               % first, push addr of start of var
7144:          [ oNodeType( decl )
7151:             | nGlobalVar, nTypedConst :   .tPushAddrGlobal @EmitValue( decl )
7161:             | nLocalVar :
7163:                [ equal_zero( uplevels )
7170:                   | true :  .tPushAddrLocal  @EmitValue( decl )
7180:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
7200:                ]
7200:             | nParam :
7202:                [ oNodeGetBoolean( decl, qInOut )
7212:                   | true :    % VAR param points to the var.  Auto dereference.
7213:                      [ equal_zero( uplevels )
7220:                         | true :  .tPushParamP  @EmitValue( decl )
7230:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7250:                      ]
7250:                   | * :
7255:                      [ equal_zero( uplevels )
7262:                         | true :  .tPushAddrParam  @EmitValue( decl )
7272:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
7292:                      ]
7292:                ]
7292:          ]
               % modify addr for subscripts, field references, etc
7304:          @LValueIndexes
               % get final value
7306:          @FetchVar
7308:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
7335: FetchVar:
7337:    [ oTypeSNodeType
7339:       | nIntegerType, nEnumType :  .tFetchI
7342:       | nBooleanType, nByteType, nCharType :  .tFetchB
7346:       | nFileType :   #eNotImplemented
7350:       | nPointerType :             .tFetchP
7354:       | nUniversalPointerType :    #eCantDereference
7358:       | nArrayType, nRecordType, nStrLitType, nShortStringType :  % compound type; leave as addr
7360:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
7389: LValueIndexes:
7391:    {[
7391:       | '[' :
7393:          [ oTypeSNodeType
7395:             | nArrayType :    @ArraySubscripts
7398:             | nPointerType :  @PointerArraySubscript
7402:             | nStrLitType, nShortStringType :  @ShortStringArraySubscript
7406:             | * :             #eNotArray
7419:          ]
7419:       | '.' :       @RecordFieldRef
7423:       | '^' :       @PointerDeref   % TO DO: I suspect I don't have logic right here
                                          % about precondition and using .tFetchP
                                          % Ideally this should take over for the ^ in VarExpr too.
7427:       | * :         >
7438:    ]};
      
      
7441: ArraySubscripts:
7443:    [ oTypeSNodeType
7445:       | nArrayType :
7446:       | * :       #eNotArray
7453:    ]
7453:    {
7453:       [ oTypeSNodeType
7455:          | nArrayType :
7456:          | * :    #eTooManySubscripts
7463:       ]
      
            % low subscript of this dimension
7463:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
7480:       Node baseType
7480:       baseType = oNodeGet( oTypeSTop, qBaseType )
7492:       oTypeSPop
7493:       oTypeSPush( baseType )
      
7499:       @Expr
7501:       @RequireIntPop
            % adjust for low subscript
7503:       [ equal_zero( low )
7510:          | false :
7511:             .tPushConstI oEmitInt( low ) .tSubI
7521:          | * :
7526:       ]
      
            % multiply by element size
7526:       int size = oNodeGetInt( baseType, qSize )
7539:       [ equal( size, 1 )
7549:          | false :
7550:             .tPushConstI oEmitInt( size ) .tMultI
7560:          | * :
7565:       ]
      
            % update start address
7565:       .tAddPI
7567:       [
7567:          | ']' :  >
7571:          | ',' :
7573:       ]
7581:    };
      
      
      % pointer[index] - similar to array[index] where index counts from 0.
      % On entry, the pointer value is on the stack, and pointer type is on the type stack.
      % We've already accepted the '['.
      % On exit, the address of the pointed-to element is on the stack,
      % and the element type is on the type stack.
      %
7584: PointerArraySubscript:
7586:    [ oTypeSNodeType
7588:       | nPointerType :
7589:       | * :    #eCantDereference
7596:    ]
         % replace type stack with base type
7596:    Node baseType = oNodeGet( oTypeSTop, qBaseType )
7608:    oTypeSPop
7609:    oTypeSPush( baseType )
         
7615:    @Expr
7617:    @RequireIntPop
         % multiply by element size
7619:    int size = oNodeGetInt( baseType, qSize )
7632:    [ equal( size, 1 )
7642:       | false :
7643:          .tPushConstI  oEmitInt( size )  .tMultI
7653:       | * :
7658:    ]
         % update start address
7658:    .tAddPI
7660:    ']';
      
      
      % Specialization of array indexing for ShortString.
      % We treat the starting index as 0 so that str[1] sees the first string char,
      % past the length byte.
      %
7663: ShortStringArraySubscript:
7665:    [ oTypeSNodeType
7667:       | nStrLitType, nShortStringType :
7668:       | * :    #eCantDereference
7677:    ]
7677:    oTypeSPop
7678:    oTypeSPush( CharType )
7684:    @Expr
7686:    @RequireIntPop
7688:    .tAddPI
7690:    ']';
      
      
7693: RecordFieldRef:
7695:    [ oTypeSNodeType
7697:       | nRecordType :
7698:       | * :    #eNotRecord
7705:    ]
7705:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
7717:    pIdent
7719:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
7724:    [ oNodeType( field )
7731:       | nRecordField :
7732:       | * :   #eNotRecordField
7739:    ]
7739:    oScopeEnd
7740:    int offset = oNodeGetInt( field, qValue )
7753:    [ equal_zero( offset )
7760:       | false :
7761:          .tPushConstI oEmitInt( offset ) .tAddPI
7771:       | * :
7776:    ]
      
         % replace the type on the type stack, with the field type
7776:    oTypeSPop
7777:    oTypeSPush( oNodeGet( field, qType ) )
7791:    ;
      
      
      % On entry, expr stack has ptr, and integer index above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr advanced to that index
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
7791: PointerAddition:
7793:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
7805:    int elementSize = oNodeGetInt( elementType, qSize )
7818:    [ equal( elementSize, 1 )
7828:       | false :
7829:          .tPushConstI  oEmitInt( elementSize )
7837:          .tMultI
7839:       | * :
7844:    ]
7844:    .tAddPI
7847:    ;
      
      
      % On entry, expr stack has ptr, and integer above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr decremented by that integer
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
7847: PointerSubInt:
7849:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
7861:    int elementSize = oNodeGetInt( elementType, qSize )
7874:    [ equal( elementSize, 1 )
7884:       | false :
7885:          .tPushConstI  oEmitInt( elementSize )
7893:          .tMultI
7895:       | * :
7900:    ]
7900:    .tSubPI
7903:    ;
      
      
      % On entry, expr stack has two pointers, P1 and P2 above it.
      % The type stack has the type of P1.  (The type of P2 was already matched to P1.)
      % Replace the pointers on the expression stack with P1 - P2, scaled by the
      % pointed-to element size.  Type stack switched to integer.
      % 
7903: PointerSubPointer:
7905:    .tSubP
7907:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
7919:    int elementSize = oNodeGetInt( elementType, qSize )
7932:    [ equal( elementSize, 1 )
7942:       | false :
7943:          .tPushConstI  oEmitInt( elementSize )
7951:          .tDivI
7953:       | * :
7958:    ]
7958:    oTypeSPop
7959:    oTypeSPush( IntegerType )
7966:    ;
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
7966: PointerDeref:
7968:    [ oTypeSNodeType
7970:       | nPointerType :
7971:       | nUniversalPointerType :   #eCantDereference
7975:       | * :       #eNotPointer
7984:    ]
7984:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
7986:    Node theType = oTypeSTop
7991:    oTypeSPop
7992:    oTypeSPush( oNodeGet( theType, qBaseType ) )
8006:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
8006: CoerceType:
8008:    node_type nt = oTypeSNodeType
8013:    oTypeSPop
8014:    [ equal_node_type( nt, oTypeSNodeType )
8023:       | false :
               % Can we implicitly convert the value to the desired type?
8024:          [ oTypeSNodeType
8026:             | nIntegerType :
8027:                [ nt
8030:                   | nByteType :   .tCastBtoI  >>
8034:                   | * :
8039:                ]
8039:             | nByteType :
8041:                [ nt
8044:                   | nIntegerType :   .tCastItoB  >>
8048:                   | * :
8053:                ]
8053:             | nPointerType :
8055:                [ nt
8058:                   | nUniversalPointerType :  >>
8060:                   | nStrLitType :
8062:                      [ equal_node( oTypeSTop, PCharType )
8071:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8072:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8083:                         | * :
8088:                      ]
8088:                   | * :
8095:                ]
8095:             | nUniversalPointerType :
8097:                [ nt
8100:                   | nPointerType :  >>
8102:                   | * :
8107:                ]
8107:             | nShortStringType :
8109:                [ nt
8112:                   | nStrLitType :  >>
8114:                   | nCharType :
                           % Store char as a temp ShortString.
8116:                      oTypeSPush( CharType )
8122:                      int tempOffset = @MoveIntoTempShortString
8128:                      oTypeSPop
8129:                      >>
8130:                   | * :
8137:                ]
8137:             | * :
8150:          ]
8150:          #eTypeMismatch
8152:       | * :
8157:    ];
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to cast the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      %
      % This is stronger than CoerceType, since it isn't limited to implicit conversions.
      % There are still going to be limits on what is allowed though.
      %
8158: CastType:
8160:    node_type nt = oTypeSNodeType
8165:    oTypeSPop
8166:    [ equal_node_type( nt, oTypeSNodeType )
8175:       | false :
               % Can we cast the value to the desired type?
8176:          [ oTypeSNodeType
8178:             | nIntegerType, nEnumType :
8179:                [ nt
8182:                   | nByteType, nCharType, nBooleanType :   .tCastBtoI  >>
8186:                   | nIntegerType, nEnumType :   >>
8189:                   | * :
8202:                ]
8202:             | nByteType, nCharType, nBooleanType :
8204:                [ nt
8207:                   | nByteType, nCharType, nBooleanType :   >>
8209:                   | nIntegerType, nEnumType :   .tCastItoB  >>
8214:                   | * :
8227:                ]
8227:             | nPointerType :
8229:                [ nt
8232:                   | nUniversalPointerType :  >>
8234:                   | nStrLitType :
8236:                      [ equal_node( oTypeSTop, PCharType )
8245:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8246:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8257:                         | * :
8262:                      ]
8262:                   | * :
8269:                ]
8269:             | nUniversalPointerType :
8271:                [ nt
8274:                   | nPointerType :  >>
8276:                   | * :
8281:                ]
8281:             | nShortStringType :
8283:                [ nt
8286:                   | nStrLitType :  >>
8288:                   | nCharType :
                           % Store char as a temp ShortString.
8290:                      oTypeSPush( CharType )
8296:                      int tempOffset = @MoveIntoTempShortString
8302:                      oTypeSPop
8303:                      >>
8304:                   | * :
8311:                ]
8311:             | * :
8330:          ]
8330:          #eTypeMismatch
8332:       | * :
8337:    ];
      
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
8338: MatchTypes:
8340:    node_type nt = oTypeSNodeType
8345:    oTypeSPop
8346:    [ equal_node_type( nt, oTypeSNodeType )
8355:       | false :
               % Some implicit conversion is allowed even here
8356:          [ oTypeSNodeType
8358:             | nPointerType :
8359:                [ nt
8362:                   | nUniversalPointerType :  >>
8364:                   | * :
8369:                ]
8369:             | nUniversalPointerType :
8371:                [ nt
8374:                   | nPointerType :  >>
8376:                   | * :
8381:                ]
8381:             | * :
8388:          ]
8388:          #eTypeMismatch
8390:       | * :
8395:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
8396: RequireIntPop:
8398:    [ oTypeSNodeType
8400:       | nIntegerType :
8401:       | * :          #eNotInteger
8408:    ]
8408:    oTypeSPop;
      
8410: RequireInt:
8412:    [ oTypeSNodeType
8414:       | nIntegerType :
8415:       | * :          #eNotInteger
8422:    ];
      
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Pop the type stack.
      %
8423: PromoteToIntPop:
8425:    [ oTypeSNodeType
8427:       | nIntegerType :
8428:       | nByteType :        .tCastBtoI
8432:       | * :                #eNotInteger
8441:    ]
8441:    oTypeSPop;
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Leave integer on the type stack.
      %
8443: PromoteToInt:
8445:    [ oTypeSNodeType
8447:       | nIntegerType :
8448:       | nByteType :        .tCastBtoI
8452:                            oTypeSPop
8453:                            oTypeSPush( IntegerType )
8459:       | * :                #eNotInteger
8468:    ];
      
      
      % If the top value is implicitly convertable to integer, do so.
      % Otherwise leave it as-is.
      %
8469: PromoteToIntOptional:
8471:    [ oTypeSNodeType
8473:       | nByteType :        .tCastBtoI
8476:                            oTypeSPop
8477:                            oTypeSPush( IntegerType )
8483:       | * :
8488:    ];
      
      
8489: RequireBoolPop:
8491:    [ oTypeSNodeType
8493:       | nBooleanType :
8494:       | * :          #eNotBoolean
8501:    ]
8501:    oTypeSPop;
      
8503: RequireBool:
8505:    [ oTypeSNodeType
8507:       | nBooleanType :
8508:       | * :          #eNotBoolean
8515:    ];
      
      
8516: include 'pascal_stmt.ssl'
      %
      % Pascal Compiler
      %
      
      
      % ------------------------------ Statements -----------------------------
      
8516: Statement:
8518:    [
8518:       | pWriteln :     @WritelnStmt
8522:       | pWrite :       @WriteStmt
8526:       | pReadln :      @ReadlnStmt
8530:       | pRead :        @ReadStmt
8534:       | pIf :          @IfStmt
8538:       | pWhile :       @WhileStmt
8542:       | pFor :         @ForStmt
8546:       | pRepeat :      @RepeatStmt
8550:       | pBreak :       @BreakStmt
8554:       | pContinue :    @ContinueStmt
8558:       | pBegin :       @BeginStmt
8562:       | pIdent :       @LabelOrAssignOrCallStmt
8566:       | pCase :        @CaseStmt
8570:       | pGoto :        @GotoStmt
8574:       | pIntLit :      % should be an integer label
8576:                        oChangeIntLitToLabelIdent
8577:                        @LabelOrAssignOrCallStmt
8579:       | * :            % null statement : don't accept any tokens
8612:    ];
      
      
8613: LabelOrAssignOrCallStmt:
8615:    Node decl = oScopeFindRequire
8620:    @ResolveUnitRef( decl )
8627:    [ oNodeType( decl )
8634:       | nLabel :                          @LabelDefinition( decl )
8642:                                           @Statement
8644:       | nProc :                           @Call( decl )
8653:       | nGlobalVar, nLocalVar, nParam :   @AssignStmt( decl )
8662:       | nFunc :                           @AssignResultStmt( decl )
8671:       | * :                               #eBadStatement
8688:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
8689: LabelDefinition( Node decl ):
8691:    [ oNodeGetBoolean( decl, qDefined )
8701:       | true :  #eAlreadyDefined
8704:       | * :
8709:    ]
8709:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
8724:    oNodeSetBoolean( decl, qDefined, true )
8736:    ':'
8739:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
8739: AssignStmt( Node decl ):
      
8741:    @LValueVar( decl, true )
8751:    ':=' 
8753:    @Expr
8755:    @CoerceType
8757:    @Assign
8760:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack (already coerced to the lvalue type),
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
8760: Assign:
8762:    [ oTypeSNodeType
8764:       | nIntegerType, nEnumType :  .tAssignI
8767:       | nBooleanType, nByteType, nCharType :  .tAssignB
8771:       | nFileType :   #eNotImplemented
8775:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
8779:       | nArrayType, nRecordType, nShortStringType :
                % TO DO: for ShortString, allow destination to be smaller capacity,
                % and truncate the copied value/length.
8781:           int size = oNodeGetInt( oTypeSTop, qSize )
8793:           .tCopy  oEmitInt( size )    % multi-word copy
8801:    ]
8827:    oTypeSPop
8829:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
8829: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
8831:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
8847:       | false :   #eNotCurrentFunction
8850:       | * :
8855:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
8855:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
8870:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
8883:    ':='
8885:    @Expr
8887:    @CoerceType
8889:    [ oTypeSNodeType
8891:       | nIntegerType, nEnumType : .tAssignI
8894:       | nBooleanType, nByteType, nCharType :  .tAssignB
8898:       | nFileType :   #eNotImplemented
8902:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
8906:       | nArrayType, nRecordType, nShortStringType :
8908:           int size = oNodeGetInt( oTypeSTop, qSize )
8920:           .tCopy  oEmitInt( size )    % multi-word copy
8928:    ]
8954:    oTypeSPop
8956:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
8956: LValueExpr( boolean writeable ):
         % At the moment, all lvalue expressions start with a variable name.
         % I think there can also be typecasts, not supported yet.  Check standard syntax.
8958:    pIdent
8960:    Node decl = oScopeFindRequire
8965:    @ResolveUnitRef( decl )
8972:    [ oNodeType( decl )
8979:       | nGlobalVar, nLocalVar, nParam, nTypedConst :
8980:       | * :  #eNotVar
8993:    ]
8993:    @LValueVar( decl, writeable )
9004:    ;
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
9004: LValueVar( Node decl, boolean writeable ):
9006:    [ oNodeType( decl )
9013:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
9023:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
9034:       | nParam :
9036:          [ oNodeGetBoolean( decl, qInOut )
9046:             | true :   % VAR param points to variable.  No dereference.
9047:                        .tPushParamP @EmitValue( decl )
9056:             | * :      .tPushAddrParam @EmitValue( decl )
9070:          ]
9070:       | nTypedConst :
9072:          [ writeable
9075:             | false :  .tPushAddrGlobal @EmitValue( decl )                       
9085:             | * :      #eNotVar
9092:          ]
9092:       | * :            #eNotVar
9105:    ]
      
9105:    oTypeSPush( oNodeGet( decl, qType ) )
      
         % handle subscripts, if any.
         % There is one case that I'm not fitting into the pattern nicely, so need to
         % check for specially here:  if lvalue var is a pointer variable, and is
         % followed by [index], we need to dereference the pointer variable before applying
         % the index.  This is different from handling of [index] on an rvalue expression.
         % Right now I have LValueIndexes working for both lvalue and rvalue (composite types)
         % so can't easily add this behavior in there.
         % TO DO: probably I need separate rules LValueIndexes and RValueIndexes.
         %    This might also explain my confusion about handling of deref operator in LValueIndexes vs rvalue expr,
         %    and having separate rules might clear that up better.
      
9118:    [ oTypeSNodeType
9120:       | nPointerType :
9121:          [
9121:             | '[' :
                     % dereference the pointer var first
9123:                .tFetchP
9125:                @PointerArraySubscript
9127:             | * :
9132:          ]
9132:       | * :
9137:    ]
         % additional subscripts, if any
9137:    @LValueIndexes
9140:    ;
      
      
9140: IncVar( Node decl ):
9142:    @LValueVar( decl, true )
9152:    @RequireIntPop
9154:    @VarExpr( decl )
9161:    oTypeSPop
9162:    .tIncI
9164:    .tAssignI;
      
9167: DecVar( Node decl ):
9169:    @LValueVar( decl, true )
9179:    @RequireIntPop
9181:    @VarExpr( decl )
9188:    oTypeSPop
9189:    .tDecI
9191:    .tAssignI;
      
      
9194: IfStmt:
9196:    Label falseLabel = labelNull
      
9202:    @BooleanExprControlFlow( falseLabel )
9209:    pThen
9211:    @Statement
9213:    [
9213:       | pElse :
9215:          Label doneLabel = oLabelNew
      
9220:          .tJump  oEmitLabel( doneLabel )
9228:          .tLabel oEmitLabel( falseLabel )
9236:          @Statement
9238:          .tLabel oEmitLabel( doneLabel )
      
9246:       | * :
9251:          .tLabel oEmitLabel( falseLabel )
9259:    ];
      
      
9260: ForStmt:
9262:    pIdent
      
9264:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
9269:    @LValueVar( decl, true )
9279:    @RequireIntPop
      
9281:    ':='
      
9283:    @Expr
9285:    @RequireIntPop
9287:    .tAssignI
      
9289:    Label breakLabel = oLabelNew
      
9294:    Label checkLabel = oLabelNew
9299:    .tJump  oEmitLabel( checkLabel )
      
9307:    Label continueLabel = oLabelNew
9312:    .tLabel  oEmitLabel( continueLabel )
9320:    [
9320:       | pTo :
9322:          @IncVar( decl )
9329:          .tLabel  oEmitLabel( checkLabel )
9337:          @VarExpr( decl )  oTypeSPop
9345:          @Expr
9347:          @RequireIntPop
9349:          .tGreaterI
9351:          .tJumpTrue  oEmitLabel( breakLabel )
9359:       | pDownto :
9361:          @DecVar( decl )
9368:          .tLabel  oEmitLabel( checkLabel )
9376:          @VarExpr( decl )  oTypeSPop
9384:          @Expr
9386:          @RequireIntPop
9388:          .tLessI
9390:          .tJumpTrue  oEmitLabel( breakLabel )
9398:    ]
9406:    oLoopPush( continueLabel, breakLabel )
9415:    pDo
9417:    @Statement
9419:    .tJump  oEmitLabel( continueLabel )
9427:    .tLabel  oEmitLabel( breakLabel )
9435:    oLoopPop;
      
      
9437: RepeatStmt:
9439:    Label continueLabel = oLabelNew
9444:    .tLabel  oEmitLabel( continueLabel )
      
9452:    Label breakLabel = oLabelNew
      
9457:    oLoopPush( continueLabel, breakLabel )
9466:    @Statement
9468:    {[
9468:       | ';' :
9470:          @Statement
9472:       | pUntil :
9474:          Label falseLabel
9474:          @BooleanExprControlFlow( falseLabel )
9481:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
9495:          >
9497:    ]}
9507:    .tLabel  oEmitLabel( breakLabel )
9515:    oLoopPop;
      
      
9517: WhileStmt:
9519:    Label continueLabel = oLabelNew
9524:    .tLabel  oEmitLabel( continueLabel )
      
9532:    Label breakLabel
9532:    @BooleanExprControlFlow( breakLabel )
      
9539:    oLoopPush( continueLabel, breakLabel )
9548:    pDo
9550:    @Statement
9552:    .tJump  oEmitLabel( continueLabel )
9560:    .tLabel  oEmitLabel( breakLabel )
9568:    oLoopPop;
      
      
9570: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
9572:    [ equal_label( oLoopContinueLabel, labelNull )
9581:       | true :
9582:          #eNotInALoop
9584:       | false :
9586:          .tJump  oEmitLabel( oLoopContinueLabel )
9593:    ];
      
      
9602: BreakStmt:
9604:    [ equal_label( oLoopBreakLabel, labelNull )
9613:       | true :
9614:          #eNotInALoop
9616:       | false :
9618:          .tJump  oEmitLabel( oLoopBreakLabel )
9625:    ];
      
      
9634: CaseStmt:
9636:    Code tableCode = oCodeNew
9641:    Label tableLabel = oLabelNew
9646:    Label doneLabel = oLabelNew
9651:    Label otherwiseLabel = doneLabel
9657:    boolean isString = false
      
9663:    @Expr
         % Leave the expr type on the type stack throughout case statement
9665:    [ oTypeSNodeType
9667:       | nBooleanType, nByteType, nCharType :   .tJumpCaseB  oEmitLabel( tableLabel )
9676:       | nIntegerType, nEnumType :              .tJumpCaseI  oEmitLabel( tableLabel )
9686:       | nShortStringType, nStrLitType :        isString = true
9694:                                                .tJumpCaseS  oEmitLabel( tableLabel )
9702:       | * :     #eNotAllowed
9721:    ]
9721:    pOf
      
9723:    {
9723:       [
9723:          | pOtherwise, pElse :
9725:             otherwiseLabel = oLabelNew
9730:             .tLabel  oEmitLabel( otherwiseLabel )
      
                  % A bit tricky:
                  % The otherwise clause allows multiple statements (unlike other cases).
                  % ';' might be separating statements in the otherwise clause,
                  % or might be an optional trailing ; after the last statement.
                  % I have to watch for End to know when the statements stop.
                  % (Note, the otherwise clause is the last part of the case statement.)
9738:             {[
9738:                | pEnd :  >
9742:                | * :
9747:                   @Statement
9749:                   [
9749:                      | ';' :
9751:                      | * :   pEnd  >
9760:                   ]
9760:             ]}
9762:             >
      
9764:          | pEnd :
                  % Reached end with no otherwise clause
9766:             >
      
9768:          | * :
9777:             Label caseLabel = oLabelNew
9782:             oCodePush( tableCode )
9788:             {
9788:                @ConstExpr
9790:                @ConstCoerceType
9792:                int val
9792:                [ isString
9795:                   | true :    val = oStringAllocShortStringLit( oValueTopString )
9805:                   | false :   val = oValueTop
9812:                ]
9820:                oValuePop
9821:                [
9821:                   | '..' :  @ConstExpr
9825:                             @ConstCoerceType
9827:                             int highval
9827:                             [ isString
9830:                                | true :   highval = oStringAllocShortStringLit( oValueTopString )
9840:                                | false :  highval = oValueTop
9847:                             ]
9855:                             oValuePop
9856:                             .tCaseRange  oEmitInt( val )  oEmitInt( highval )  oEmitLabel( caseLabel )
9876:                   | * :     .tCase  oEmitInt( val )  oEmitLabel( caseLabel )
9895:                ]
9895:                [
9895:                   | ',' :
9897:                   | * :  >
9904:                ]
9904:             }
9906:             oCodePop
9907:             ':'
9909:             .tLabel  oEmitLabel( caseLabel )
9917:             @Statement
9919:             .tJump  oEmitLabel( doneLabel )
                  % Swallow optional trailing ';'
9927:             [
9927:                | ';' :
9929:                | * :
9934:             ]
                  
9934:       ]
         
9934:    }
      
9936:    .tLabel  oEmitLabel( tableLabel )
9944:    oEmitCode( tableCode )
9950:    .tCaseEnd  oEmitLabel( otherwiseLabel )
9958:    .tLabel  oEmitLabel( doneLabel )
9966:    oTypeSPop
9968:    ;
      
      
9968: GotoStmt:
9970:    [
9970:       | pIdent :
9972:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
9974:          oChangeIntLitToLabelIdent
9975:    ]
      
         % Some pascals have rules about where you can jump (to a sibling statement or
         % higher level statement in the block, but not into a lower lower level statement.)
         % fpc just says "jumping into a nested statement can have strange effects."
         % I'm going to follow that and not prohibit any goto, as long as it's in the same block.
      
         % Label must be declared in the same block (same scope) it is used.
         % Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
9983:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
9992:    oNodeSetBoolean( decl, qUsed, true )
10004:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
10020:    ;
      
      
10020: BeginStmt:
10022:    @Statement
10024:    {[
10024:       | ';' :   @Statement
10028:       | pEnd :  >
10032:    ]};
      
      
10043: WritelnStmt:
10045:    @WriteStmt
10047:    .tWriteCR;
      
      
10050: WriteStmt:
10052:    [
10052:       | '(' :
10054:          {
10054:             @Expr
10056:             [ oTypeSNodeType
10058:                | nIntegerType :             .tWriteI
10061:                | nBooleanType :             .tWriteBool
10065:                | nByteType :                .tCastBtoI  .tWriteI
10071:                | nCharType :                .tWriteChar
10075:                | nShortStringType, nStrLitType :   .tWriteShortStr
10079:                | nFileType :                #eNotImplemented
10083:                | nEnumType :
                        % write name via table lookup
10085:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
10099:                   .tWriteEnum
10101:                | nPointerType :
10103:                   [ equal_node( oTypeSTop, PCharType )
10112:                      | true :               .tWritePChar
10115:                      | * :                  .tWriteP
10122:                   ]
10122:                | nUniversalPointerType :    .tWriteP
10126:                | * :                        #eNotAllowed
10151:             ]
10151:             oTypeSPop
10152:             [
10152:                | ')' : >
10156:                | ',' :
10158:             ]
10166:          }
10168:       | * :
10173:    ];
      
      
10174: ReadlnStmt:      % ***
         % TO DO
10177:    ;
      
10177: ReadStmt:
         % TO DO
10180:    ;
10180: include 'pascal_str.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ String Operations -----------------------------
      
      
      % Given a ShortString, StrLit, or Char on the expression stack
      % (and type on the type stack).  Move the value into a new temporary ShortString.
      % Leave that temp string and type on the stacks.
      % Also returns the offset of the temp string.
      %
10180: MoveIntoTempShortString >> int:
10182:    int tempOffset = oScopeAllocType( ShortStringType )
         % copy the value
10192:    [ oTypeSNodeType
10194:       | nShortStringType, nStrLitType :
10195:          .tPushAddrLocal  oEmitInt( tempOffset )
               % put temp addr under value addr
10203:          .tSwap
               % TO DO: we could just copy length + 1, but tCopy takes a fixed #bytes
10205:          .tCopy  oEmitInt( oNodeGetInt( ShortStringType, qSize ) )
10220:       | nCharType :
               % temp[0] = 1
10222:          .tPushAddrLocal  oEmitInt( tempOffset )
10230:          .tPushConstI  oEmitInt( 1 )
10238:          .tAssignB
               % temp[1] = value
10240:          .tPushAddrLocal  oEmitInt( add( tempOffset, 1 ) )
10255:          .tSwap
10257:          .tAssignB
10259:       | * :   #eTypeMismatch
10270:    ]
10270:    oTypeSPop
         % Leave the temp ShortString on the expr stack and type stack
10271:    .tPushAddrLocal  oEmitInt( tempOffset )
10279:    oTypeSPush( ShortStringType )
10285:    >> tempOffset;
      
      
      % Top of expr stack / type stack is ShortString B.
      % Under it is ShortString A.
      % Change A to append the contents of B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
10289: ShortStringAppendShortString:
         % TO DO: ideally I would do this directly with tcode.  But I think I need some more
         % enhancements for that to work well.   Meanwhile, generate a call to a method.
         % For the moment, I'll implement the method in Pascal, in the mysystem unit.
10291:    .tAllocActuals  oEmitInt( 16 )
10299:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
10311:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
10323:    .tCall   @EmitValue( System_ShortStringAppendShortString )
         % TO DO: Ideally I would leave A on the expr stack / type stack.
         %  But I can't really do that without dup, which I hesitate to add.
         %  I'll have the caller push A again themselves.
10332:    .tFreeActuals  oEmitInt( 16 )
10340:    oTypeSPop
10341:    oTypeSPop
10343:    ;
      
      % Top of expr stack / type stack is Char B.
      % Under it is ShortString A.
      % Change A to append char B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
10343: ShortStringAppendChar:
         % Note at the moment I don't align params
10345:    .tAllocActuals  oEmitInt( 12 )
10353:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignB
10365:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
10377:    .tCall  @EmitValue( System_ShortStringAppendChar )
10386:    .tFreeActuals  oEmitInt( 12 )
10394:    oTypeSPop
10395:    oTypeSPop
10397:    ;
      
      % Expr stack has ShortString A, and ShortString B above it.
      % Type stack has just the type of ShortString A.
      % Replaces the expr stack with the integer value of string comparison:
      % -1 if A < B,  0 if A = B,  1 if A > B
      % Leaves Integer on the type stack.
      %
      % TO DO: kind of annoying that we need to hardcode the fact that the called method is cdecl extern.
      %   It would be nicer if that was noted only in the label.
      %   Alternatively, use a utility method in SSL to generate the appropriate call,
      %   given the method decl.
      %
10397: ShortStringCmp:
10399:    .tAllocActualsCdecl  oEmitInt( 24 )
10407:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
10419:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
10431:    int tempOffset = oScopeAllocType( IntegerType )
10441:    .tPushAddrActual  oEmitInt( 16 )  .tPushAddrLocal  oEmitInt( tempOffset )  .tAssignP
10459:    .tCallCdecl  @EmitValue( System_ShortStringCmp )
10468:    .tPushLocalI  oEmitInt( tempOffset )
10476:    .tFreeActuals  oEmitInt( 24 )
10484:    oTypeSPop
10485:    oTypeSPush( IntegerType )
10492:    ;
10492: include 'pascal_call.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ Method Calls -----------------------------
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
10492: Call( Node method ):
10494:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
10506:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
10519:    Node resultType
10519:    int tempOffset
      
10519:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
10536:    [ isFunc
10539:       | true :
10540:          resultType = oNodeGet( method, qType )
10553:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
10563:       | * :
10568:    ]
         
      
10568:    Node paramScope = oNodeGet( method, qParams )
10581:    int actualsSize = oNodeGetInt( paramScope, qSize )
10594:    [ cdecl
10597:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
10606:       | false :  .tAllocActuals  oEmitInt( actualsSize )
10616:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
10624:    [ greater( @DeclLevel( method ), 0 )
10639:       | true :
10640:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
10648:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
10667:          .tAssignP
10669:       | * :
10674:    ]
      
      
10674:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
10687:    Node param = oNodeIterValue( paramIter )
10697:    [
10697:       | '(' :
            
10699:          {
10699:             [ oNodeNull( param )
10706:                | true : >
10709:                | * :
10714:             ]
      
10714:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
10727:             .tPushAddrActual oEmitInt( offset )
10735:             oTypeSPush( oNodeGet( param, qType ) )
      
10748:             [ oNodeGetBoolean( param, qInOut )
10758:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
10759:                           @LValueExpr( true )
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
10766:                           @MatchTypes
      
10768:                           .tAssignP
      
10770:                | false :  @Expr
10774:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
10776:                           [ oTypeSNodeType
10778:                              | nIntegerType, nEnumType : .tAssignI
10781:                              | nBooleanType, nByteType, nCharType :  .tAssignB
10785:                              | nFileType :   #eNotImplemented
10789:                              | nPointerType, nUniversalPointerType :  .tAssignP
10793:                              | nArrayType, nRecordType, nShortStringType :
                                       % compound types: copy value into actuals space
10795:                                  int size = oNodeGetInt( oTypeSTop, qSize )
10807:                                  .tCopy  oEmitInt( size )    % multi-word copy
10815:                           ]
10841:             ]
10849:             oTypeSPop
      
10850:             oNodeIterNext( paramIter )
10856:             param = oNodeIterValue( paramIter )
10866:             [ oNodeNull( param )
10873:                | true :  >
10876:                | false :
10878:             ]
      
10886:             ','
10888:          }
      
10890:          ')'
      
10892:       | * :
10897:    ]
      
10897:    [ oNodeNull( param )
10904:       | false :    #eMissingParameter
10907:       | * :
10912:    ]
      
10912:    [ isFunc
10915:       | true :
               % Pass result temp as an additional VAR parameter.
10916:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
10931:          .tPushAddrLocal  oEmitInt( tempOffset )
10939:          .tAssignP
10941:       | * :
10946:    ]
      
10946:    [ cdecl
10949:       | true :
10950:          .tCallCdecl  @EmitValue( method )
10959:       | false :
10961:          .tCall   @EmitValue( method )
10970:    ]
      
10978:    [ isFunc
10981:       | true :
               % push return value from temp
10982:          oTypeSPush( resultType )
      
10988:          [ oTypeSNodeType
10990:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
10999:             | nBooleanType, nByteType, nCharType :   .tPushLocalB  oEmitInt( tempOffset )
11009:             | nFileType :  #eNotImplemented
11013:             | nPointerType, nUniversalPointerType :   .tPushLocalP  oEmitInt( tempOffset )
11023:             | nArrayType, nRecordType, nShortStringType :   % compound type: push address
11025:                                .tPushAddrLocal  oEmitInt( tempOffset )
11033:          ]
11059:       | * :
11064:    ]
         
11064:    .tFreeActuals  oEmitInt( actualsSize )
11073:    ;
      
      
      
      % Called on first use of an extern method
      %
11073: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
11075:    int strAddr
11075:    String externalName = oNodeGetString( method, qExternalName )
11088:    [ equal_string( externalName, stringNull )
11098:       | true :
11099:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
11120:       | false :
11122:          strAddr = oStringAllocLit( externalName )
11132:    ]
11140:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
11156:    ;
      
      
      
      % Parse a call to a built-in function, identified by the just-accepted identifier.
      % This will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
11156: CallBuiltInFunc( Node method ):
      
         % Ord(x)
11158:    [ oNodeEqual( method, BuiltIn_Ord )
11168:       | true :
               % parameter is any scalar type (including boolean, enum, char)
               % result is integer
11169:          '('
11171:          @Expr
11173:          [ oTypeSNodeType
11175:             | nIntegerType, nEnumType :
11176:             | nBooleanType, nByteType, nCharType :  .tCastBtoI
11180:             | * :  #eTypeMismatch
11195:          ]
11195:          oTypeSPop
11196:          oTypeSPush( IntegerType )
11202:          ')'
11204:          >>
11205:       | * :
11210:    ]
      
         % Chr(x)
11210:    [ oNodeEqual( method, BuiltIn_Chr )
11220:       | true :
               % parameter is integer
               % result is char
11221:          '('
11223:          @Expr
11225:          [ oTypeSNodeType
11227:             | nIntegerType :    .tCastItoB
11230:             | nByteType :
11232:             | * :  #eTypeMismatch
11241:          ]
11241:          oTypeSPop
11242:          oTypeSPush( CharType )
11248:          ')'
11250:          >>
11251:       | * :
11256:    ]
      
         % Pred(x)
11256:    [ oNodeEqual( method, BuiltIn_Pred )
11266:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
11267:          '('
11269:          @Expr
11271:          [ oTypeSNodeType
11273:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
11274:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
11283:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
11286:                   | * :
11291:                ]
11291:             | * :  #eTypeMismatch
11298:          ]
11298:          .tDecI
11300:          ')'
11302:          >>
11303:       | * :
11308:    ]
      
         % Succ(x)
11308:    [ oNodeEqual( method, BuiltIn_Succ )
11318:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
11319:          '('
11321:          @Expr
11323:          [ oTypeSNodeType
11325:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
11326:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
11335:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
11338:                   | * :
11343:                ]
11343:             | * :  #eTypeMismatch
11350:          ]
11350:          .tIncI
11352:          ')'
11354:          >>
11355:       | * :
11360:    ]
      
11360:    #eNotImplemented
11363:    ;
      
11363: include 'pascal_type.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ Types -----------------------------
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
11363: newType( node_type nt, int size ) >> Node:
11365:   Node node = oNodeNew( nt )
11375:   oNodeSetInt( node, qSize, size )
11387:   oTypeAdd( node )
11393:   >> node
11397:   ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
11397: TypeRef( out Node resultType ):
11399:    [
11399:       | pIdent :           % previously named type (including intrinsics)
11401:          Node decl = oScopeFindRequire
11406:          @ResolveUnitRef( decl )
11413:          [ oNodeType( decl )
11420:             | nTypeDecl :
11421:                resultType = oNodeGet( decl, qType )
11434:             | * :
11439:                #eNotType
11441:                resultType = IntegerType
11447:          ]
         
11447:       | pArray :
11449:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
11451:          NodeVec dimensions = oNodeVecNew
      
11456:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
11456:             Node subrange = oNodeNew( nSubrangeType )
      
11466:             @ConstExpr
11468:             oNodeSetInt( subrange, qLow, oValueTop )
11479:             oValuePop
11480:             '..'
11482:             @ConstExpr
11484:             oNodeSetInt( subrange, qHigh, oValueTop )
11495:             oValuePop
      
11496:             @ConstMatchTypes
11498:             oNodeSet( subrange, qBaseType, oTypeSTop )
11509:             oNodeSetInt( subrange, qSize, oNodeGetInt( oTypeSTop, qSize ) )
11527:             oTypeSPop
11528:             oTypeAdd( subrange )
      
11534:             Node a = oNodeNew( nArrayType )
11544:             oNodeSet( a, qIndexType, subrange )
      
11556:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
11565:             [
11565:                | ']' : >
11569:                | ',' :
11571:             ]
11579:          }
      
11581:          pOf
11583:          Node baseType
11583:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
11590:          int dim = oNodeVecSize( dimensions )
      
11600:          {
11600:              dec(dim)
      
11606:              Node a = oNodeVecElement( dimensions, dim )
      
11619:              oNodeSet( a, qBaseType, baseType )
11631:              Node subrange = oNodeGet( a, qIndexType )
11644:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
11671:              inc( width )
11677:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
11703:              oTypeAdd( a )
11709:              baseType = a
      
11715:              [ equal_zero(dim)
11722:                  | true:  >
11725:                  | *:
11730:              ]
11730:          }
      
11732:          resultType = oNodeVecElement( dimensions, 0 )
11745:          oNodeVecDelete( dimensions )
      
11751:       | '^' :
11753:          Node theType
11753:          @TypeRef( theType )
11760:          resultType = @PointerTypeTo( theType )
      
11771:       | pRecord :
11773:          resultType = oNodeNew( nRecordType )
11783:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
11792:          @VarDecl( nRecordField )
      
11799:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
11811:          [ equal_zero( size )
11818:             | true : #eRecordEmpty
11821:             | * :
11826:          ]
      
11826:          pEnd
      
11828:          oNodeSet( resultType, qScope, oScopeCurrent )
11839:          oNodeSetInt( resultType, qSize, size )
11851:          oScopeEnd
11852:          oTypeAdd( resultType )
      
      
11858:       | '(' :
               % An enum type declaration.
11860:          @EnumTypeRef( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
11867:       | pSet :
11869:          pOf
11871:          Node theType
11871:          @TypeRef( theType )
11878:          #eNotImplemented
11880:       | * :       % this works for cases except where expr starts with an id
11895:          @ConstExpr '..' @ConstExpr
11901:          @ConstMatchTypes
11903:          #eNotImplemented
11905:    ];
      
      
      % Parse an enum type.
      % We've already accepted the '('
      % Returns the new type.
      %
11906: EnumTypeRef( out Node resultType ):
      
11908:    resultType = oNodeNew( nEnumType )
11918:    int value = 0
11924:    int numValues = 0
11930:    boolean first = true
      
         % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
         % That will let programs use either <val> or <enumType>.<val>
11936:    Node outerScope = oScopeCurrent
11941:    oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
11950:    {
            % TO DO: assert that name not already seen in this scope, i.e. this enum.
            %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
            %  It might be in some other higher/used scope.
11950:       pIdent
11952:       Node decl = @newIdent( nEnumValue, LAST_ID )
11965:       Node decl2 = @newIdent( nEnumValue, LAST_ID )
11978:       oNodeSet( decl, qType, resultType )
11990:       oNodeSet( decl2, qType, resultType )
      
            % build up name table, for i/o
12002:       int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
12015:       oNodeSetInt( decl, qNameOffset, nameOffset )
12027:       oNodeSetInt( decl2, qNameOffset, nameOffset )
12039:       [
12039:          | '=', ':=' :
12041:             oTypeSPush( IntegerType )
12047:             @ConstExpr
12049:             @ConstCoerceType
12051:             oTypeSPop
                  % value must be ascending
                  % this obviously doesn't apply to the first value
12052:             [ equal_zero( numValues )
12059:                | false :
12060:                   [ greater( oValueTop, value )
12069:                      | false :   #eEnumValueNotAscending
12072:                      | * :
12077:                   ]
12077:                | * :
12082:             ]
12082:             [ equal( value, oValueTop )
12091:                | false :
                        % The values differ from 0..N-1.  pred/succ may not be used with this type.
12092:                   oNodeSetBoolean( resultType, qHasGap, true )
12104:                | * :
12109:             ]
12109:             value = oValueTop
12114:             oValuePop
12115:          | * :
12122:       ]
12122:       oNodeSetInt( decl, qValue, value )
12134:       oNodeSetInt( decl2, qValue, value )
12146:       oScopeDeclare( decl )
      
12152:       oScopeEnter( outerScope )
12158:       oScopeDeclare( decl2 )
12164:       oScopeEnd
      
12165:       inc( value )
12171:       inc( numValues )
12177:       [
12177:          | ',' :
12179:          | * :    >
12186:       ]
12186:    }
12188:    ')'
      
12190:    oNodeSet( resultType, qScope, oScopeCurrent )
12201:    oNodeSetInt( resultType, qSize, 4 )   % always integer sized
12213:    oScopeEnd
      
         % Finish creation of the name table
         %    struct {
         %      int    value;
         %      int    padding;
         %      char*  name;
         %    } table[ numValues + 1 ];
         %  final entry will have name == nullptr
         %
         % I'll need to generate init code, to store pointers in global data,
         % since I don't have a relocation mechanism for static data at the moment.
12214:    oCodePush( @GetOrCreateInitCode( globalScope ) )
12225:    oScopeEnter( globalScope )
12231:    int size = multiply( add( numValues, 1 ), 16 )
12251:    int addr = oScopeAlloc( size, 8 )
12264:    oScopeEnd
12265:    oNodeSetInt( resultType, qNameTable, addr )
         % loop over enum values
12277:    NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
12297:    {
12297:       Node enumValue = oNodeIterValue( it )
12307:       [ oNodeNull( enumValue )
12314:          | true :  >
12317:          | * :
12322:       ]
12322:       .tPushAddrGlobal  oEmitInt( addr )
12330:       .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
12345:       .tAssignI
12347:       addr = add( addr, 8 )
12360:       .tPushAddrGlobal  oEmitInt( addr )
12368:       .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
12383:       .tAssignP
12385:       addr = add( addr, 8 )
12398:       oNodeIterNext( it )
12404:    }
         % final table entry
12406:    .tPushAddrGlobal  oEmitInt( addr )
12414:    .tPushConstI  oEmitInt( 0 )
12422:    .tAssignI
12424:    addr = add( addr, 8 )
12437:    .tPushAddrGlobal  oEmitInt( addr )
12445:    .tPushConstI  oEmitInt( 0 )
12453:    .tAssignP
12455:    addr = add( addr, 8 )
12468:    oCodePop
      
12469:    oTypeAdd( resultType )
12476:    ;
      
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
12476: PointerTypeTo( Node theType ) >> Node:
12478:    Node ptrType = oNodeGet( theType, qPointerType )
12491:    [ oNodeNull( ptrType )
12498:       | true :
12499:          ptrType = oNodeNew( nPointerType )
12509:          oNodeSet( ptrType, qBaseType, theType )
12521:          oNodeSetInt( ptrType, qSize, 8 )
12533:          oTypeAdd( ptrType )
12539:          oNodeSet( theType, qPointerType, ptrType )
12551:       | * :
12556:    ]
12556:    >> ptrType;
      
      
      
      % Return the low value of an ordinal type
      %
12560: OrdinalLow( Node theType ) >> int:
12562:    [ oNodeType( theType )
12569:       | nIntegerType :  >> oMININT
12572:       | nBooleanType :  >> 0
12577:       | nCharType :     >> 0
12582:       | nEnumType :
12584:          Node enumScope = oNodeGet( theType, qScope )
12597:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
12614:          >> oNodeGetInt( first, qValue )
12624:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
12636:       | * :             #eNotOrdinalType
12651:                         >> 0
12654:    ];
      
      
      % Return the high value of an ordinal type
      %
12655: OrdinalHigh( Node theType ) >> int:
12657:    [ oNodeType( theType )
12664:       | nIntegerType :  >> oMAXINT
12667:       | nBooleanType :  >> 1
12672:       | nCharType :     >> 255
12677:       | nEnumType :
12679:          Node enumScope = oNodeGet( theType, qScope )
12692:          Node last = oNodeIterValue( oNodeGetIterLast( enumScope, qDecls ) )
12709:          >> oNodeGetInt( last, qValue )
12719:       | nSubrangeType : >> oNodeGetInt( theType, qHigh )
12731:       | * :             #eNotOrdinalType
12746:                         >> 0
12749:    ];
      
      
      
12750: Program:
12752:    Node t
      
12752:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
12757:    oScopeBegin( 0, allocGlobal )
12766:    Node rootScope = oScopeCurrent
      
12771:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
12773:    .tEnter  oEmitInt( 0 )
12781:    Label mainLabel = oLabelNew
      
12786:    .tAllocActuals  oEmitInt( 0 )
12794:    .tCall  oEmitLabel( mainLabel )
12802:    .tFreeActuals  oEmitInt( 0 )
12810:    .tReturn
      
12812:    pProgram
12814:    pIdent
      
12816:    Node program = oNodeNew( nProgram )
12826:    oNodeSetInt( program, qIdent, LAST_ID )
12837:    oNodeSet( workspace, qProgram, program )
      
      
12849:    [
12849:       | '(' :
12851:          pIdent      % input, output files
      
12853:          t = @newIdent( nVar, LAST_ID )
12866:          oNodeSet( t, qType, FileType )
12878:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
12884:          ','
12886:          pIdent
      
12888:          t = @newIdent( nVar, LAST_ID )
12901:          oNodeSet( t, qType, FileType )
12913:          oScopeDeclareAlloc( t )
      
12919:          ')'
12921:       | * :
12926:    ]
12926:    ';'
      
12928:    @UsesMySystem( program )
         % The uses clause may only appear once, immediately after the program declaration.
12935:    [
12935:       | pUses :  @UsesClause( program )
12944:       | * :
12949:    ]
12949:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
12956:    oScopeBegin( 0, allocGlobal )
12965:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
12970:    oScopeBegin( 0, allocDown )
12979:    oNodeSet( oScopeCurrent, qExtends, globalScope )
12990:    initScope = oScopeCurrent
12995:    oNodeSet( program, qMainRoutineScope, initScope )
13007:    oScopeEnd
      
13008:    @BlockDecls( nGlobalVar )
      
      
13015:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
13021:    boolean isMain = true
13027:    @BlockStmt( mainLabel, globalScope, isMain )
      
13040:    oScopeEnd   % main routine scope
      
13041:    '.'
13043:    @CheckForUndefinedLabels
13045:    oScopeEnd   % global scope
13046:    @EndUsedUnits( program )   % used units scopes
13054:    ;
      
      
      
      
13054: Block( node_type varNodeType, Label labelForBody ):
13056:    @BlockDecls( varNodeType )
13063:    @BlockStmt( labelForBody, oScopeCurrent, false )
13075:    @CheckForUndefinedLabels
13078:    ;
      
      
13078: BlockDecls( node_type varNodeType ):
13080:    {[
13080:       | pConst :     @ConstDecl
13084:       | pType :      @TypeDecl
13088:       | pVar :       @VarDecl( varNodeType )
13097:       | pLabel :     @LabelDecl
13101:       | pProcedure : @ProcDecl
13105:       | pFunction :  @FuncDecl
13109:       | * :          >
13126:    ]}
13128:    @CheckForUndefinedMethods
13131:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
13131: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
13134:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
13134: CheckForUndefinedLabels:
13136:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
13148:    {
13148:       Node decl = oNodeIterValue( it )
13158:       [ oNodeNull( decl )
13165:          | false :
13166:          | * :  >
13173:       ]
13173:       [ oNodeType( decl )
13180:          | nLabel :
13181:             [ oNodeGetBoolean( decl, qDefined )
13191:                | false :
13192:                   [ oNodeGetBoolean( decl, qUsed )
13202:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
13205:                      | * :
13210:                   ]
13210:                | * :
13215:             ]
13215:          | * :
13220:       ]
13220:       oNodeIterNext( it )
13226:    }
13229:    ;
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
13229: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
13231:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
13239:    int patchLS
13239:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
13248:    [ isMain
13251:       | true :  @InitializeUnits
13254:       | * :
13259:    ]
      
         % insert any code for initialization of this scope's variables
13259:    Code initCode = oNodeGetCode( varScope, qInitCode )
13272:    oEmitCode( initCode )
13278:    oNodeSetCode( varScope, qInitCode, codeNull )
      
13290:    @Statement
      
13292:    [ isMain
13295:       | true :  @FinalizeUnits
13298:       | * :
13303:    ]
      
13303:    .tReturn
      
13305:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
13317:    oPatch( patchLS, localSpace )
13327:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
13327: GetOrCreateInitCode( Node scope ) >> Code:
13329:    Code initCode = oNodeGetCode( scope, qInitCode )
13342:    [ equal_code( initCode, codeNull )
13352:       | true :
13353:          initCode = oCodeNew
13358:          oNodeSetCode( scope, qInitCode, initCode )
13370:       | * :
13375:    ]
13375:    >> initCode;
      
      
      
      
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
13379: ScopeLevel >> int:
13381:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
13391: DeclLevel( Node decl ) >> int:
13393:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
13411: DeclUpLevels( Node decl ) >> int:
13413:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
13429: newIdent( node_type nt, int id ) >> Node:
13431:   Node t = oNodeNew( nt )
13441:   oNodeSetInt( t, qIdent, id )
13453:   >> t
13457:   ;
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
13457: EmitValue( Node decl ):
13459:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
13473: DeclareBuiltInFunc( int id ) >> Node:
13475:    Node decl = @newIdent( nBuiltInFunc, id )
13489:    oScopeDeclare( decl )
13495:    >> decl;
      
      
13499: installBuiltIns:
      
         % "mysystem" is the name of a unit that will be available everywhere.
         % Add its name to the id table so we can easily spot the name later.
13501:    mysystemId = oId_mysystem
      
         % install built-in types
13506:    FileType = @newType( nFileType, 4 )
13520:    IntegerType = @newType( nIntegerType, 4 )
13534:    BooleanType = @newType( nBooleanType, 1 )
13548:    BooleanFlowType = @newType( nBooleanFlowType, 1 )
13562:    CharType = @newType( nCharType, 1 )
13576:    PCharType = @PointerTypeTo( CharType )
13587:    ByteType = @newType( nByteType, 1 )
         % Universal pointer says base type Byte, but this is only for the sake of
         % pointer arithmetic.  It doesn't matter otherwise, because this type cannot be dereferened.
13601:    UniversalPointerType = @newType( nUniversalPointerType, 8 )
13615:    oNodeSet( UniversalPointerType, qBaseType, ByteType )
         % StrLitType is stored with both a length byte and null termination, so it can be assigned to
         % both a ShortString and a PChar.  StrLits longer than 255 characters appear truncated when
         % referenced as a ShortString, but not when referenced as a PChar.
13627:    StrLitType = @newType( nStrLitType, 256 )
         % ShortString is the original Pascal string type: an array of characters, not null-terminated,
         % with the first byte recording the current length.
         % The default ShortString type has capacity for 255 characters.  The user may define
         % additional ShortString types with smaller capacities.
         % The first character can be accessed as myString[1].
13641:    ShortStringType = @newType( nShortStringType, 256 )
13655:    oNodeSetInt( ShortStringType, qCapacity, 255 )
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oId_File
      
13667:    Node t
      
13667:    t = @newIdent( nTypeDecl, oId_File )
13680:    oNodeSet( t, qType, FileType )
13692:    oScopeDeclare( t )
      
13698:    t = @newIdent( nTypeDecl, oId_Integer )
13711:    oNodeSet( t, qType, IntegerType )
13723:    oScopeDeclare( t )
      
13729:    t = @newIdent( nTypeDecl, oId_Boolean )
13742:    oNodeSet( t, qType, BooleanType )
13754:    oScopeDeclare( t )
      
13760:    t = @newIdent( nTypeDecl, oId_Char )
13773:    oNodeSet( t, qType, CharType )
13785:    oScopeDeclare( t )
      
13791:    t = @newIdent( nTypeDecl, oId_Byte )
13804:    oNodeSet( t, qType, ByteType )
13816:    oScopeDeclare( t )
      
13822:    t = @newIdent( nTypeDecl, oId_Pointer )
13835:    oNodeSet( t, qType, UniversalPointerType )
13847:    oScopeDeclare( t )
      
13853:    t = @newIdent( nTypeDecl, oId_ShortString )
13866:    oNodeSet( t, qType, ShortStringType )
13878:    oScopeDeclare( t )
      
         % Built-in constants
      
13884:    t = @newIdent( nConst, oId_True )
13897:    oNodeSet( t, qType, BooleanType )
13909:    oNodeSetInt( t, qValue, 1 )
13921:    oScopeDeclare( t )
      
13927:    t = @newIdent( nConst, oId_False )
13940:    oNodeSet( t, qType, BooleanType )
13952:    oNodeSetInt( t, qValue, 0 )
13964:    oScopeDeclare( t )
      
13970:    t = @newIdent( nConst, oId_Nil )
13983:    oNodeSet( t, qType, UniversalPointerType )
13995:    oNodeSetInt( t, qValue, 0 )
14007:    oScopeDeclare( t )
      
         % Built-in methods
         % These aren't declared like normal methods, because they may have
         % special rules for parameter types (e.g. any scalar type).
         % Calls to these methods will be handled specially by the compiler.
      
14013:    BuiltIn_Ord = @DeclareBuiltInFunc( oId_Ord )
14023:    BuiltIn_Chr = @DeclareBuiltInFunc( oId_Chr )
14033:    BuiltIn_Pred = @DeclareBuiltInFunc( oId_Pred )
14043:    BuiltIn_Succ = @DeclareBuiltInFunc( oId_Succ )
14054:    ;
      
14054: end
      
14054: 

Generated code:

   0: oGlobalSpace 22
   2: oLocalSpace 0
   4: oCall 12750
   6: oReturn
   7: oLocalSpace 0
   9: oInput 0
  11: LAST_ID
  12: oPushResult
  13: oGetParam 1
  15: oPushResult
  16: oCall 148
  18: oPop 2
  20: oInputChoice 24
  22: oJumpForward 29
  24: Choice Lookup Table
          13     22
  27: oJumpForward 31
  29: oJumpBack 9
  31: oInput 5
  33: oReturn
  34: oLocalSpace 0
  36: oGetParam 1
  38: oPushResult
  39: oSetResult 4
  41: oPushResult
  42: oNodeGetInt
  43: oPop 2
  45: oPushResult
  46: oGetGlobal 4
  48: oPushResult
  49: equal
  50: oPop 2
  52: oChoice 57
  54: oReturn
  55: oJumpForward 60
  57: Choice Lookup Table
           1     54
  60: oGetGlobal 4
  62: oPushResult
  63: oGetParam 1
  65: oPushResult
  66: oCall 148
  68: oPop 2
  70: oReturn
  71: oLocalSpace 0
  73: oGetParam 1
  75: oPushResult
  76: oSetResult 4
  78: oPushResult
  79: oNodeGetInt
  80: oPop 2
  82: oPushResult
  83: oGetGlobal 4
  85: oPushResult
  86: equal
  87: oPop 2
  89: oChoice 144
  91: oGetAddrGlobal 19
  93: oPushResult
  94: oScopeCurrent
  95: oPushResult
  96: oSetResult 15
  98: oPushResult
  99: oSetResult 4
 101: oPushResult
 102: oId_ShortStringAppendShortString
 103: oPushResult
 104: oNodeFind
 105: oPop 4
 107: oAssign
 108: oGetAddrGlobal 20
 110: oPushResult
 111: oScopeCurrent
 112: oPushResult
 113: oSetResult 15
 115: oPushResult
 116: oSetResult 4
 118: oPushResult
 119: oId_ShortStringAppendChar
 120: oPushResult
 121: oNodeFind
 122: oPop 4
 124: oAssign
 125: oGetAddrGlobal 21
 127: oPushResult
 128: oScopeCurrent
 129: oPushResult
 130: oSetResult 15
 132: oPushResult
 133: oSetResult 4
 135: oPushResult
 136: oId_ShortStringCmp
 137: oPushResult
 138: oNodeFind
 139: oPop 4
 141: oAssign
 142: oJumpForward 147
 144: Choice Lookup Table
           1     91
 147: oReturn
 148: oLocalSpace 2
 150: oGetAddrLocal 1
 152: oPushResult
 153: oGetParam 2
 155: oPushResult
 156: oCall 428
 158: oPop 1
 160: oAssign
 161: oGetLocal 1
 163: oPushResult
 164: oSetResult 0
 166: oPushResult
 167: equal_node
 168: oPop 2
 170: oChoice 240
 172: oGetParam 1
 174: oPushResult
 175: oSetResult 5
 177: oPushResult
 178: oGetLocal 1
 180: oPushResult
 181: oNodeAddLast
 182: oPop 3
 184: oGetAddrLocal 2
 186: oPushResult
 187: oSetResult 10
 189: oPushResult
 190: oNodeNew
 191: oPop 1
 193: oAssign
 194: oGetLocal 2
 196: oPushResult
 197: oSetResult 4
 199: oPushResult
 200: oGetLocal 1
 202: oPushResult
 203: oSetResult 4
 205: oPushResult
 206: oNodeGetInt
 207: oPop 2
 209: oPushResult
 210: oNodeSetInt
 211: oPop 3
 213: oGetLocal 2
 215: oPushResult
 216: oSetResult 9
 218: oPushResult
 219: oGetLocal 1
 221: oPushResult
 222: oSetResult 9
 224: oPushResult
 225: oNodeGet
 226: oPop 2
 228: oPushResult
 229: oNodeSet
 230: oPop 3
 232: oGetLocal 2
 234: oPushResult
 235: oScopeDeclare
 236: oPop 1
 238: oJumpForward 243
 240: Choice Lookup Table
           0    172
 243: oReturn
 244: oLocalSpace 1
 246: oGetFromParam 1
 248: oPushResult
 249: oNodeType
 250: oPop 1
 252: oChoice 283
 254: oGetAddrLocal 1
 256: oPushResult
 257: oGetFromParam 1
 259: oPushResult
 260: oSetResult 9
 262: oPushResult
 263: oNodeGet
 264: oPop 2
 266: oAssign
 267: oInput 20
 269: oInput 0
 271: oGetParam 1
 273: oPushResult
 274: oGetLocal 1
 276: oPushResult
 277: oScopeFindRequireInScope
 278: oPop 1
 280: oAssign
 281: oJumpForward 286
 283: Choice Lookup Table
          10    254
 286: oReturn
 287: oLocalSpace 2
 289: oGetAddrLocal 1
 291: oPushResult
 292: oGetParam 1
 294: oPushResult
 295: oSetResult 5
 297: oPushResult
 298: oNodeGetIter
 299: oPop 2
 301: oAssign
 302: oGetAddrLocal 2
 304: oPushResult
 305: oGetLocal 1
 307: oPushResult
 308: oNodeIterValue
 309: oPop 1
 311: oAssign
 312: oGetLocal 2
 314: oPushResult
 315: oNodeNull
 316: oPop 1
 318: oChoice 335
 320: oGetLocal 2
 322: oPushResult
 323: oSetResult 9
 325: oPushResult
 326: oNodeGet
 327: oPop 2
 329: oPushResult
 330: oScopeEnter
 331: oPop 1
 333: oJumpForward 340
 335: Choice Lookup Table
           0    320
 338: oJumpForward 348
 340: oGetAddrLocal 1
 342: oPushResult
 343: oNodeIterNext
 344: oPop 1
 346: oJumpBack 302
 348: oReturn
 349: oLocalSpace 2
 351: oGetAddrLocal 1
 353: oPushResult
 354: oGetParam 1
 356: oPushResult
 357: oSetResult 5
 359: oPushResult
 360: oNodeGetIterLast
 361: oPop 2
 363: oAssign
 364: oGetAddrLocal 2
 366: oPushResult
 367: oGetLocal 1
 369: oPushResult
 370: oNodeIterValue
 371: oPop 1
 373: oAssign
 374: oGetLocal 2
 376: oPushResult
 377: oNodeNull
 378: oPop 1
 380: oChoice 414
 382: oScopeCurrent
 383: oPushResult
 384: oGetLocal 2
 386: oPushResult
 387: oSetResult 9
 389: oPushResult
 390: oNodeGet
 391: oPop 2
 393: oPushResult
 394: oNodeEqual
 395: oPop 2
 397: oChoice 405
 399: oJumpForward 411
 401: oError 25
 403: oJumpForward 411
 405: Choice Lookup Table
           0    401
           1    399
 410: oEndChoice
 411: oScopeEnd
 412: oJumpForward 419
 414: Choice Lookup Table
           0    382
 417: oJumpForward 427
 419: oGetAddrLocal 1
 421: oPushResult
 422: oNodeIterPrev
 423: oPop 1
 425: oJumpBack 364
 427: oReturn
 428: oLocalSpace 2
 430: oGetAddrLocal 1
 432: oPushResult
 433: oGetGlobal 1
 435: oPushResult
 436: oSetResult 1
 438: oPushResult
 439: oSetResult 4
 441: oPushResult
 442: oGetParam 1
 444: oPushResult
 445: oNodeFind
 446: oPop 4
 448: oAssign
 449: oGetLocal 1
 451: oPushResult
 452: oSetResult 0
 454: oPushResult
 455: equal_node
 456: oPop 2
 458: oChoice 465
 460: oGetLocal 1
 462: oReturn
 463: oJumpForward 468
 465: Choice Lookup Table
           0    460
 468: oGetAddrLocal 2
 470: oPushResult
 471: oGetParam 1
 473: oPushResult
 474: oIncludeUnitFile
 475: oPop 1
 477: oAssign
 478: oGetLocal 2
 480: oChoice 489
 482: oError 24
 484: oSetResult 0
 486: oReturn
 487: oJumpForward 492
 489: Choice Lookup Table
           0    482
 492: oGetAddrLocal 1
 494: oPushResult
 495: oCall 503
 497: oAssign
 498: oIncludeEnd
 499: oGetLocal 1
 501: oReturn
 502: oReturn
 503: oLocalSpace 2
 505: oInput 60
 507: oInput 0
 509: oGetAddrLocal 1
 511: oPushResult
 512: oSetResult 5
 514: oPushResult
 515: oNodeNew
 516: oPop 1
 518: oAssign
 519: oGetLocal 1
 521: oPushResult
 522: oSetResult 4
 524: oPushResult
 525: LAST_ID
 526: oPushResult
 527: oNodeSetInt
 528: oPop 3
 530: oGetAddrLocal 2
 532: oPushResult
 533: oSetResult 6
 535: oPushResult
 536: oNodeNew
 537: oPop 1
 539: oAssign
 540: oGetLocal 2
 542: oPushResult
 543: oSetResult 4
 545: oPushResult
 546: LAST_ID
 547: oPushResult
 548: oNodeSetInt
 549: oPop 3
 551: oGetLocal 1
 553: oPushResult
 554: oSetResult 8
 556: oPushResult
 557: oGetLocal 2
 559: oPushResult
 560: oNodeSet
 561: oPop 3
 563: oInput 5
 565: oInput 61
 567: oGetLocal 1
 569: oPushResult
 570: oCall 34
 572: oPop 1
 574: oInputChoice 585
 576: oGetLocal 1
 578: oPushResult
 579: oCall 7
 581: oPop 1
 583: oJumpForward 588
 585: Choice Lookup Table
          59    576
 588: oGetLocal 1
 590: oPushResult
 591: oCall 287
 593: oPop 1
 595: oSetResult 0
 597: oPushResult
 598: oSetResult 0
 600: oPushResult
 601: oScopeBegin
 602: oPop 2
 604: oGetLocal 1
 606: oPushResult
 607: oSetResult 9
 609: oPushResult
 610: oScopeCurrent
 611: oPushResult
 612: oNodeSet
 613: oPop 3
 615: oGetAddrGlobal 2
 617: oPushResult
 618: oScopeCurrent
 619: oAssign
 620: oSetResult 0
 622: oPushResult
 623: oSetResult 1
 625: oPushResult
 626: oScopeBegin
 627: oPop 2
 629: oGetAddrGlobal 3
 631: oPushResult
 632: oScopeCurrent
 633: oAssign
 634: oGetLocal 1
 636: oPushResult
 637: oSetResult 13
 639: oPushResult
 640: oGetGlobal 3
 642: oPushResult
 643: oNodeSet
 644: oPop 3
 646: oScopeEnd
 647: oGetLocal 1
 649: oPushResult
 650: oCall 838
 652: oPop 1
 654: oScopeEnd
 655: oInput 62
 657: oGetLocal 2
 659: oPushResult
 660: oCall 34
 662: oPop 1
 664: oInputChoice 675
 666: oGetLocal 2
 668: oPushResult
 669: oCall 7
 671: oPop 1
 673: oJumpForward 678
 675: Choice Lookup Table
          59    666
 678: oGetLocal 2
 680: oPushResult
 681: oCall 287
 683: oPop 1
 685: oGetLocal 1
 687: oPushResult
 688: oSetResult 9
 690: oPushResult
 691: oNodeGet
 692: oPop 2
 694: oPushResult
 695: oScopeEnter
 696: oPop 1
 698: oSetResult 0
 700: oPushResult
 701: oSetResult 0
 703: oPushResult
 704: oScopeBegin
 705: oPop 2
 707: oGetLocal 1
 709: oPushResult
 710: oSetResult 10
 712: oPushResult
 713: oScopeCurrent
 714: oPushResult
 715: oNodeSet
 716: oPop 3
 718: oScopeCurrent
 719: oPushResult
 720: oSetResult 16
 722: oPushResult
 723: oGetLocal 1
 725: oPushResult
 726: oSetResult 9
 728: oPushResult
 729: oNodeGet
 730: oPop 2
 732: oPushResult
 733: oNodeSet
 734: oPop 3
 736: oGetAddrGlobal 2
 738: oPushResult
 739: oScopeCurrent
 740: oAssign
 741: oGetLocal 1
 743: oPushResult
 744: oCall 930
 746: oPop 1
 748: oInputChoice 762
 750: oGetLocal 1
 752: oPushResult
 753: oSetResult 1
 755: oPushResult
 756: oCall 940
 758: oPop 2
 760: oJumpForward 775
 762: Choice Lookup Table
          63    750
 765: oGetLocal 1
 767: oPushResult
 768: oSetResult 0
 770: oPushResult
 771: oCall 940
 773: oPop 2
 775: oInputChoice 789
 777: oGetLocal 1
 779: oPushResult
 780: oSetResult 1
 782: oPushResult
 783: oCall 1126
 785: oPop 2
 787: oJumpForward 802
 789: Choice Lookup Table
          64    777
 792: oGetLocal 1
 794: oPushResult
 795: oSetResult 0
 797: oPushResult
 798: oCall 1126
 800: oPop 2
 802: oInput 36
 804: oInput 20
 806: oScopeEnd
 807: oScopeEnd
 808: oGetLocal 2
 810: oPushResult
 811: oCall 349
 813: oPop 1
 815: oGetLocal 1
 817: oPushResult
 818: oCall 349
 820: oPop 1
 822: oGetGlobal 1
 824: oPushResult
 825: oSetResult 1
 827: oPushResult
 828: oGetLocal 1
 830: oPushResult
 831: oNodeAddLast
 832: oPop 3
 834: oGetLocal 1
 836: oReturn
 837: oReturn
 838: oLocalSpace 2
 840: oInputChoice 907
 842: oCall 2520
 844: oJumpForward 920
 846: oCall 3178
 848: oJumpForward 920
 850: oSetResult 21
 852: oPushResult
 853: oCall 3234
 855: oPop 1
 857: oJumpForward 920
 859: oGetAddrLocal 1
 861: oPushResult
 862: oCall 1487
 864: oAssign
 865: oInputChoice 878
 867: oGetLocal 1
 869: oPushResult
 870: oCall 1418
 872: oPop 1
 874: oInput 5
 876: oJumpForward 881
 878: Choice Lookup Table
          70    867
 881: oJumpForward 920
 883: oGetAddrLocal 2
 885: oPushResult
 886: oCall 1861
 888: oAssign
 889: oInputChoice 902
 891: oGetLocal 2
 893: oPushResult
 894: oCall 1418
 896: oPop 1
 898: oInput 5
 900: oJumpForward 905
 902: Choice Lookup Table
          70    891
 905: oJumpForward 920
 907: Choice Lookup Table
          30    883
          29    859
          33    850
          32    846
          31    842
 918: oJumpForward 922
 920: oJumpBack 840
 922: oGetParam 1
 924: oPushResult
 925: oCall 71
 927: oPop 1
 929: oReturn
 930: oLocalSpace 0
 932: oSetResult 21
 934: oPushResult
 935: oCall 13078
 937: oPop 1
 939: oReturn
 940: oLocalSpace 5
 942: oGetAddrLocal 1
 944: oPushResult
 945: oLabelNew
 946: oAssign
 947: oEmit 77
 949: oGetLocal 1
 951: oPushResult
 952: oEmitLabel
 953: oPop 1
 955: oGetParam 2
 957: oPushResult
 958: oSetResult 11
 960: oPushResult
 961: oGetLocal 1
 963: oPushResult
 964: oNodeSetLabel
 965: oPop 3
 967: oEmit 67
 969: oGetAddrLocal 2
 971: oPushResult
 972: Here
 973: oAssign
 974: oEmit 90
 976: oGetAddrLocal 3
 978: oPushResult
 979: oGetParam 2
 981: oPushResult
 982: oSetResult 9
 984: oPushResult
 985: oNodeGet
 986: oPop 2
 988: oAssign
 989: oGetAddrLocal 4
 991: oPushResult
 992: oGetLocal 3
 994: oPushResult
 995: oSetResult 19
 997: oPushResult
 998: oNodeGetCode
 999: oPop 2
1001: oAssign
1002: oGetLocal 4
1004: oPushResult
1005: oEmitCode
1006: oPop 1
1008: oGetLocal 3
1010: oPushResult
1011: oSetResult 19
1013: oPushResult
1014: oSetResult 0
1016: oPushResult
1017: oNodeSetCode
1018: oPop 3
1020: oGetAddrLocal 3
1022: oPushResult
1023: oGetParam 2
1025: oPushResult
1026: oSetResult 10
1028: oPushResult
1029: oNodeGet
1030: oPop 2
1032: oAssign
1033: oGetAddrLocal 4
1035: oPushResult
1036: oGetLocal 3
1038: oPushResult
1039: oSetResult 19
1041: oPushResult
1042: oNodeGetCode
1043: oPop 2
1045: oAssign
1046: oGetLocal 4
1048: oPushResult
1049: oEmitCode
1050: oPop 1
1052: oGetLocal 3
1054: oPushResult
1055: oSetResult 19
1057: oPushResult
1058: oSetResult 0
1060: oPushResult
1061: oNodeSetCode
1062: oPop 3
1064: oGetParam 2
1066: oPushResult
1067: oSetResult 13
1069: oPushResult
1070: oNodeGet
1071: oPop 2
1073: oPushResult
1074: oScopeEnter
1075: oPop 1
1077: oGetParam 1
1079: oChoice 1098
1081: oCall 8516
1083: oInputChoice 1089
1085: oCall 8516
1087: oJumpForward 1094
1089: Choice Lookup Table
           5   1085
1092: oJumpForward 1096
1094: oJumpBack 1083
1096: oJumpForward 1101
1098: Choice Lookup Table
           1   1081
1101: oEmit 66
1103: oGetAddrLocal 5
1105: oPushResult
1106: oScopeCurrent
1107: oPushResult
1108: oSetResult 17
1110: oPushResult
1111: oNodeGetInt
1112: oPop 2
1114: oAssign
1115: oGetLocal 2
1117: oPushResult
1118: oGetLocal 5
1120: oPushResult
1121: oPatch
1122: oPop 2
1124: oScopeEnd
1125: oReturn
1126: oLocalSpace 3
1128: oGetAddrLocal 1
1130: oPushResult
1131: oLabelNew
1132: oAssign
1133: oEmit 77
1135: oGetLocal 1
1137: oPushResult
1138: oEmitLabel
1139: oPop 1
1141: oGetParam 2
1143: oPushResult
1144: oSetResult 12
1146: oPushResult
1147: oGetLocal 1
1149: oPushResult
1150: oNodeSetLabel
1151: oPop 3
1153: oEmit 67
1155: oGetAddrLocal 2
1157: oPushResult
1158: Here
1159: oAssign
1160: oEmit 90
1162: oSetResult 0
1164: oPushResult
1165: oSetResult 1
1167: oPushResult
1168: oScopeBegin
1169: oPop 2
1171: oGetParam 1
1173: oChoice 1192
1175: oCall 8516
1177: oInputChoice 1183
1179: oCall 8516
1181: oJumpForward 1188
1183: Choice Lookup Table
           5   1179
1186: oJumpForward 1190
1188: oJumpBack 1177
1190: oJumpForward 1195
1192: Choice Lookup Table
           1   1175
1195: oEmit 66
1197: oGetAddrLocal 3
1199: oPushResult
1200: oScopeCurrent
1201: oPushResult
1202: oSetResult 17
1204: oPushResult
1205: oNodeGetInt
1206: oPop 2
1208: oAssign
1209: oGetLocal 2
1211: oPushResult
1212: oGetLocal 3
1214: oPushResult
1215: oPatch
1216: oPop 2
1218: oScopeEnd
1219: oReturn
1220: oLocalSpace 2
1222: oGetAddrLocal 1
1224: oPushResult
1225: oGetGlobal 1
1227: oPushResult
1228: oSetResult 1
1230: oPushResult
1231: oNodeGetIter
1232: oPop 2
1234: oAssign
1235: oGetAddrLocal 2
1237: oPushResult
1238: oGetLocal 1
1240: oPushResult
1241: oNodeIterValue
1242: oPop 1
1244: oAssign
1245: oGetLocal 2
1247: oPushResult
1248: oNodeNull
1249: oPop 1
1251: oChoice 1296
1253: oJumpForward 1304
1255: oJumpForward 1302
1257: oEmit 61
1259: oSetResult 0
1261: oPushResult
1262: oEmitInt
1263: oPop 1
1265: oEmit 64
1267: oGetLocal 2
1269: oPushResult
1270: oSetResult 11
1272: oPushResult
1273: oNodeGetLabel
1274: oPop 2
1276: oPushResult
1277: oEmitLabel
1278: oPop 1
1280: oEmit 63
1282: oSetResult 0
1284: oPushResult
1285: oEmitInt
1286: oPop 1
1288: oGetAddrLocal 1
1290: oPushResult
1291: oNodeIterNext
1292: oPop 1
1294: oJumpForward 1302
1296: Choice Lookup Table
           0   1257
           1   1253
1301: oEndChoice
1302: oJumpBack 1235
1304: oReturn
1305: oLocalSpace 2
1307: oGetAddrLocal 1
1309: oPushResult
1310: oGetGlobal 1
1312: oPushResult
1313: oSetResult 1
1315: oPushResult
1316: oNodeGetIterLast
1317: oPop 2
1319: oAssign
1320: oGetAddrLocal 2
1322: oPushResult
1323: oGetLocal 1
1325: oPushResult
1326: oNodeIterValue
1327: oPop 1
1329: oAssign
1330: oGetLocal 2
1332: oPushResult
1333: oNodeNull
1334: oPop 1
1336: oChoice 1381
1338: oJumpForward 1389
1340: oJumpForward 1387
1342: oEmit 61
1344: oSetResult 0
1346: oPushResult
1347: oEmitInt
1348: oPop 1
1350: oEmit 64
1352: oGetLocal 2
1354: oPushResult
1355: oSetResult 12
1357: oPushResult
1358: oNodeGetLabel
1359: oPop 2
1361: oPushResult
1362: oEmitLabel
1363: oPop 1
1365: oEmit 63
1367: oSetResult 0
1369: oPushResult
1370: oEmitInt
1371: oPop 1
1373: oGetAddrLocal 1
1375: oPushResult
1376: oNodeIterPrev
1377: oPop 1
1379: oJumpForward 1387
1381: Choice Lookup Table
           0   1342
           1   1338
1386: oEndChoice
1387: oJumpBack 1320
1389: oReturn
1390: oLocalSpace 0
1392: oInputChoice 1410
1394: oGetParam 1
1396: oPushResult
1397: oSetResult 27
1399: oPushResult
1400: oSetResult 1
1402: oPushResult
1403: oNodeSetBoolean
1404: oPop 3
1406: oInput 5
1408: oJumpForward 1415
1410: Choice Lookup Table
          72   1394
1413: oJumpForward 1417
1415: oJumpBack 1392
1417: oReturn
1418: oLocalSpace 0
1420: oGetParam 1
1422: oPushResult
1423: oCall 13391
1425: oPop 1
1427: oPushResult
1428: equal_zero
1429: oPop 1
1431: oChoice 1437
1433: oError 23
1435: oJumpForward 1440
1437: Choice Lookup Table
           0   1433
1440: oGetParam 1
1442: oPushResult
1443: oSetResult 25
1445: oPushResult
1446: oSetResult 1
1448: oPushResult
1449: oNodeSetBoolean
1450: oPop 3
1452: oInputChoice 1476
1454: oInputChoice 1471
1456: oInput 2
1458: oGetParam 1
1460: oPushResult
1461: oSetResult 26
1463: oPushResult
1464: CURRENT_STRLIT
1465: oPushResult
1466: oNodeSetString
1467: oPop 3
1469: oJumpForward 1474
1471: Choice Lookup Table
          71   1456
1474: oJumpForward 1479
1476: Choice Lookup Table
           2   1454
1479: oGetParam 1
1481: oPushResult
1482: oCall 11073
1484: oPop 1
1486: oReturn
1487: oLocalSpace 6
1489: oInput 0
1491: oGetAddrLocal 1
1493: oPushResult
1494: oSetResult 0
1496: oAssign
1497: oGetAddrLocal 2
1499: oPushResult
1500: oScopeFindInCurrentScope
1501: oAssign
1502: oGetLocal 2
1504: oPushResult
1505: oNodeNull
1506: oPop 1
1508: oChoice 1626
1510: oGetAddrLocal 2
1512: oPushResult
1513: oSetResult 12
1515: oPushResult
1516: LAST_ID
1517: oPushResult
1518: oCall 13429
1520: oPop 2
1522: oAssign
1523: oGetLocal 2
1525: oPushResult
1526: oSetResult 22
1528: oPushResult
1529: oLabelNew
1530: oPushResult
1531: oNodeSetLabel
1532: oPop 3
1534: oJumpForward 1632
1536: oGetAddrLocal 1
1538: oPushResult
1539: oSetResult 1
1541: oAssign
1542: oGetLocal 2
1544: oPushResult
1545: oSetResult 24
1547: oPushResult
1548: oNodeGetBoolean
1549: oPop 2
1551: oChoice 1557
1553: oError 21
1555: oJumpForward 1560
1557: Choice Lookup Table
           1   1553
1560: oGetLocal 2
1562: oPushResult
1563: oSetResult 25
1565: oPushResult
1566: oNodeGetBoolean
1567: oPop 2
1569: oChoice 1575
1571: oError 21
1573: oJumpForward 1578
1575: Choice Lookup Table
           1   1571
1578: oGetLocal 2
1580: oPushResult
1581: oNodeType
1582: oPop 1
1584: oChoice 1588
1586: oJumpForward 1593
1588: Choice Lookup Table
          12   1586
1591: oError 21
1593: oGetLocal 2
1595: oPushResult
1596: oSetResult 29
1598: oPushResult
1599: oGetLocal 2
1601: oPushResult
1602: oSetResult 23
1604: oPushResult
1605: oNodeGet
1606: oPop 2
1608: oPushResult
1609: oNodeSet
1610: oPop 3
1612: oGetLocal 2
1614: oPushResult
1615: oSetResult 23
1617: oPushResult
1618: oSetResult 0
1620: oPushResult
1621: oNodeSet
1622: oPop 3
1624: oJumpForward 1632
1626: Choice Lookup Table
           0   1536
           1   1510
1631: oEndChoice
1632: oGetAddrLocal 3
1634: oPushResult
1635: oCall 13379
1637: oAssign
1638: oGetAddrLocal 4
1640: oPushResult
1641: oGetLocal 3
1643: oPushResult
1644: oSetResult 0
1646: oPushResult
1647: greater
1648: oPop 2
1650: oAssign
1651: oGetAddrLocal 3
1653: oPushResult
1654: inc
1655: oPop 1
1657: oGetLocal 3
1659: oPushResult
1660: oSetResult 2
1662: oPushResult
1663: oScopeBegin
1664: oPop 2
1666: oGetAddrLocal 5
1668: oPushResult
1669: oScopeCurrent
1670: oAssign
1671: oGetLocal 4
1673: oChoice 1692
1675: oGetAddrLocal 6
1677: oPushResult
1678: oGetGlobal 6
1680: oPushResult
1681: oCall 12476
1683: oPop 1
1685: oPushResult
1686: oScopeAllocType
1687: oPop 1
1689: oAssign
1690: oJumpForward 1695
1692: Choice Lookup Table
           1   1675
1695: oCall 2296
1697: oGetLocal 2
1699: oPushResult
1700: oSetResult 23
1702: oPushResult
1703: oGetLocal 5
1705: oPushResult
1706: oNodeSet
1707: oPop 3
1709: oScopeEnd
1710: oInput 5
1712: oGetLocal 1
1714: oChoice 1726
1716: oGetLocal 2
1718: oPushResult
1719: oScopeDeclare
1720: oPop 1
1722: oJumpForward 1732
1724: oJumpForward 1732
1726: Choice Lookup Table
           1   1724
           0   1716
1731: oEndChoice
1732: oGetLocal 2
1734: oPushResult
1735: oCall 1390
1737: oPop 1
1739: oGetLocal 2
1741: oReturn
1742: oReturn
1743: oLocalSpace 4
1745: oGetAddrLocal 1
1747: oPushResult
1748: oCall 1487
1750: oAssign
1751: oInputChoice 1764
1753: oJumpForward 1858
1755: oGetLocal 1
1757: oPushResult
1758: oCall 1418
1760: oPop 1
1762: oJumpForward 1858
1764: Choice Lookup Table
          70   1755
          69   1753
1769: oGetAddrLocal 2
1771: oPushResult
1772: oGetLocal 1
1774: oPushResult
1775: oSetResult 23
1777: oPushResult
1778: oNodeGet
1779: oPop 2
1781: oAssign
1782: oGetLocal 2
1784: oPushResult
1785: oScopeEnter
1786: oPop 1
1788: oGetAddrLocal 3
1790: oPushResult
1791: oGetLocal 2
1793: oPushResult
1794: oSetResult 14
1796: oPushResult
1797: oNodeGetInt
1798: oPop 2
1800: oAssign
1801: oGetLocal 3
1803: oPushResult
1804: oSetResult 1
1806: oPushResult
1807: oScopeBegin
1808: oPop 2
1810: oGetLocal 1
1812: oPushResult
1813: oSetResult 6
1815: oPushResult
1816: oScopeCurrent
1817: oPushResult
1818: oNodeSet
1819: oPop 3
1821: oGetAddrLocal 4
1823: oPushResult
1824: oGetLocal 1
1826: oPushResult
1827: oSetResult 22
1829: oPushResult
1830: oNodeGetLabel
1831: oPop 2
1833: oAssign
1834: oSetResult 22
1836: oPushResult
1837: oGetLocal 4
1839: oPushResult
1840: oCall 13054
1842: oPop 2
1844: oGetLocal 1
1846: oPushResult
1847: oSetResult 24
1849: oPushResult
1850: oSetResult 1
1852: oPushResult
1853: oNodeSetBoolean
1854: oPop 3
1856: oScopeEnd
1857: oScopeEnd
1858: oInput 5
1860: oReturn
1861: oLocalSpace 8
1863: oInput 0
1865: oGetAddrLocal 1
1867: oPushResult
1868: oSetResult 0
1870: oAssign
1871: oGetAddrLocal 2
1873: oPushResult
1874: oScopeFindInCurrentScope
1875: oAssign
1876: oGetLocal 2
1878: oPushResult
1879: oNodeNull
1880: oPop 1
1882: oChoice 2013
1884: oGetAddrLocal 2
1886: oPushResult
1887: oSetResult 13
1889: oPushResult
1890: LAST_ID
1891: oPushResult
1892: oCall 13429
1894: oPop 2
1896: oAssign
1897: oGetLocal 2
1899: oPushResult
1900: oSetResult 22
1902: oPushResult
1903: oLabelNew
1904: oPushResult
1905: oNodeSetLabel
1906: oPop 3
1908: oJumpForward 2019
1910: oGetAddrLocal 1
1912: oPushResult
1913: oSetResult 1
1915: oAssign
1916: oGetLocal 2
1918: oPushResult
1919: oSetResult 24
1921: oPushResult
1922: oNodeGetBoolean
1923: oPop 2
1925: oChoice 1931
1927: oError 21
1929: oJumpForward 1934
1931: Choice Lookup Table
           1   1927
1934: oGetLocal 2
1936: oPushResult
1937: oNodeType
1938: oPop 1
1940: oChoice 1944
1942: oJumpForward 1949
1944: Choice Lookup Table
          13   1942
1947: oError 21
1949: oGetLocal 2
1951: oPushResult
1952: oSetResult 29
1954: oPushResult
1955: oGetLocal 2
1957: oPushResult
1958: oSetResult 23
1960: oPushResult
1961: oNodeGet
1962: oPop 2
1964: oPushResult
1965: oNodeSet
1966: oPop 3
1968: oGetLocal 2
1970: oPushResult
1971: oSetResult 23
1973: oPushResult
1974: oSetResult 0
1976: oPushResult
1977: oNodeSet
1978: oPop 3
1980: oGetLocal 2
1982: oPushResult
1983: oSetResult 30
1985: oPushResult
1986: oGetLocal 2
1988: oPushResult
1989: oSetResult 21
1991: oPushResult
1992: oNodeGet
1993: oPop 2
1995: oPushResult
1996: oNodeSet
1997: oPop 3
1999: oGetLocal 2
2001: oPushResult
2002: oSetResult 21
2004: oPushResult
2005: oSetResult 0
2007: oPushResult
2008: oNodeSet
2009: oPop 3
2011: oJumpForward 2019
2013: Choice Lookup Table
           0   1910
           1   1884
2018: oEndChoice
2019: oGetAddrLocal 3
2021: oPushResult
2022: oCall 13379
2024: oAssign
2025: oGetAddrLocal 4
2027: oPushResult
2028: oGetLocal 3
2030: oPushResult
2031: oSetResult 0
2033: oPushResult
2034: greater
2035: oPop 2
2037: oAssign
2038: oGetAddrLocal 3
2040: oPushResult
2041: inc
2042: oPop 1
2044: oGetLocal 3
2046: oPushResult
2047: oSetResult 2
2049: oPushResult
2050: oScopeBegin
2051: oPop 2
2053: oGetAddrLocal 5
2055: oPushResult
2056: oScopeCurrent
2057: oAssign
2058: oGetLocal 4
2060: oChoice 2079
2062: oGetAddrLocal 6
2064: oPushResult
2065: oGetGlobal 6
2067: oPushResult
2068: oCall 12476
2070: oPop 1
2072: oPushResult
2073: oScopeAllocType
2074: oPop 1
2076: oAssign
2077: oJumpForward 2082
2079: Choice Lookup Table
           1   2062
2082: oCall 2296
2084: oGetLocal 2
2086: oPushResult
2087: oSetResult 23
2089: oPushResult
2090: oGetLocal 5
2092: oPushResult
2093: oNodeSet
2094: oPop 3
2096: oInput 12
2098: oGetAddrLocal 7
2100: oPushResult
2101: oCall 11397
2103: oPop 1
2105: oGetLocal 2
2107: oPushResult
2108: oSetResult 21
2110: oPushResult
2111: oGetLocal 7
2113: oPushResult
2114: oNodeSet
2115: oPop 3
2117: oGetAddrLocal 8
2119: oPushResult
2120: oGetLocal 7
2122: oPushResult
2123: oCall 12476
2125: oPop 1
2127: oAssign
2128: oGetLocal 2
2130: oPushResult
2131: oSetResult 31
2133: oPushResult
2134: oGetLocal 8
2136: oPushResult
2137: oScopeAllocType
2138: oPop 1
2140: oPushResult
2141: oNodeSetInt
2142: oPop 3
2144: oScopeEnd
2145: oInput 5
2147: oGetLocal 1
2149: oChoice 2161
2151: oGetLocal 2
2153: oPushResult
2154: oScopeDeclare
2155: oPop 1
2157: oJumpForward 2167
2159: oJumpForward 2167
2161: Choice Lookup Table
           1   2159
           0   2151
2166: oEndChoice
2167: oGetLocal 2
2169: oPushResult
2170: oCall 1390
2172: oPop 1
2174: oGetLocal 2
2176: oReturn
2177: oReturn
2178: oLocalSpace 4
2180: oGetAddrLocal 1
2182: oPushResult
2183: oCall 1861
2185: oAssign
2186: oInputChoice 2199
2188: oJumpForward 2293
2190: oGetLocal 1
2192: oPushResult
2193: oCall 1418
2195: oPop 1
2197: oJumpForward 2293
2199: Choice Lookup Table
          70   2190
          69   2188
2204: oGetAddrLocal 2
2206: oPushResult
2207: oGetLocal 1
2209: oPushResult
2210: oSetResult 23
2212: oPushResult
2213: oNodeGet
2214: oPop 2
2216: oAssign
2217: oGetLocal 2
2219: oPushResult
2220: oScopeEnter
2221: oPop 1
2223: oGetAddrLocal 3
2225: oPushResult
2226: oGetLocal 2
2228: oPushResult
2229: oSetResult 14
2231: oPushResult
2232: oNodeGetInt
2233: oPop 2
2235: oAssign
2236: oGetLocal 3
2238: oPushResult
2239: oSetResult 1
2241: oPushResult
2242: oScopeBegin
2243: oPop 2
2245: oGetLocal 1
2247: oPushResult
2248: oSetResult 6
2250: oPushResult
2251: oScopeCurrent
2252: oPushResult
2253: oNodeSet
2254: oPop 3
2256: oGetAddrLocal 4
2258: oPushResult
2259: oGetLocal 1
2261: oPushResult
2262: oSetResult 22
2264: oPushResult
2265: oNodeGetLabel
2266: oPop 2
2268: oAssign
2269: oSetResult 22
2271: oPushResult
2272: oGetLocal 4
2274: oPushResult
2275: oCall 13054
2277: oPop 2
2279: oGetLocal 1
2281: oPushResult
2282: oSetResult 24
2284: oPushResult
2285: oSetResult 1
2287: oPushResult
2288: oNodeSetBoolean
2289: oPop 3
2291: oScopeEnd
2292: oScopeEnd
2293: oInput 5
2295: oReturn
2296: oLocalSpace 6
2298: oInputChoice 2516
2300: oGetAddrLocal 1
2302: oPushResult
2303: oNodeVecNew
2304: oAssign
2305: oGetAddrLocal 3
2307: oPushResult
2308: oSetResult 0
2310: oAssign
2311: oInputChoice 2321
2313: oGetAddrLocal 3
2315: oPushResult
2316: oSetResult 1
2318: oAssign
2319: oJumpForward 2324
2321: Choice Lookup Table
          33   2313
2324: oInput 0
2326: oGetAddrLocal 2
2328: oPushResult
2329: oSetResult 24
2331: oPushResult
2332: LAST_ID
2333: oPushResult
2334: oCall 13429
2336: oPop 2
2338: oAssign
2339: oGetLocal 2
2341: oPushResult
2342: oSetResult 34
2344: oPushResult
2345: oGetLocal 3
2347: oPushResult
2348: oNodeSetBoolean
2349: oPop 3
2351: oGetLocal 1
2353: oPushResult
2354: oGetLocal 2
2356: oPushResult
2357: oNodeVecAppend
2358: oPop 2
2360: oInputChoice 2368
2362: oJumpForward 2376
2364: oJumpForward 2374
2366: oJumpForward 2374
2368: Choice Lookup Table
          13   2366
          12   2362
2373: oEndChoice
2374: oJumpBack 2324
2376: oGetAddrLocal 4
2378: oPushResult
2379: oCall 11397
2381: oPop 1
2383: oGetLocal 3
2385: oChoice 2400
2387: oGetAddrLocal 5
2389: oPushResult
2390: oGetLocal 4
2392: oPushResult
2393: oCall 12476
2395: oPop 1
2397: oAssign
2398: oJumpForward 2409
2400: Choice Lookup Table
           1   2387
2403: oGetAddrLocal 5
2405: oPushResult
2406: oGetLocal 4
2408: oAssign
2409: oGetAddrLocal 6
2411: oPushResult
2412: oSetResult 0
2414: oAssign
2415: oGetLocal 6
2417: oPushResult
2418: oGetLocal 1
2420: oPushResult
2421: oNodeVecSize
2422: oPop 1
2424: oPushResult
2425: equal
2426: oPop 2
2428: oChoice 2485
2430: oGetAddrLocal 2
2432: oPushResult
2433: oGetLocal 1
2435: oPushResult
2436: oGetLocal 6
2438: oPushResult
2439: oNodeVecElement
2440: oPop 2
2442: oAssign
2443: oGetLocal 2
2445: oPushResult
2446: oSetResult 21
2448: oPushResult
2449: oGetLocal 4
2451: oPushResult
2452: oNodeSet
2453: oPop 3
2455: oGetLocal 2
2457: oPushResult
2458: oScopeDeclare
2459: oPop 1
2461: oGetLocal 2
2463: oPushResult
2464: oSetResult 22
2466: oPushResult
2467: oGetLocal 5
2469: oPushResult
2470: oScopeAllocType
2471: oPop 1
2473: oPushResult
2474: oNodeSetInt
2475: oPop 3
2477: oGetAddrLocal 6
2479: oPushResult
2480: inc
2481: oPop 1
2483: oJumpForward 2490
2485: Choice Lookup Table
           0   2430
2488: oJumpForward 2492
2490: oJumpBack 2415
2492: oGetLocal 1
2494: oPushResult
2495: oNodeVecDelete
2496: oPop 1
2498: oInputChoice 2506
2500: oJumpForward 2514
2502: oJumpForward 2512
2504: oJumpForward 2512
2506: Choice Lookup Table
           5   2504
          15   2500
2511: oEndChoice
2512: oJumpBack 2300
2514: oJumpForward 2519
2516: Choice Lookup Table
          14   2300
2519: oReturn
2520: oLocalSpace 0
2522: oInputChoice 2537
2524: oInputChoice 2530
2526: oCall 2654
2528: oJumpForward 2535
2530: Choice Lookup Table
          12   2526
2533: oCall 2545
2535: oJumpForward 2542
2537: Choice Lookup Table
           0   2524
2540: oJumpForward 2544
2542: oJumpBack 2522
2544: oReturn
2545: oLocalSpace 2
2547: oGetAddrLocal 1
2549: oPushResult
2550: LAST_ID
2551: oAssign
2552: oInput 6
2554: oCall 3533
2556: oTypeSNodeType
2557: oChoice 2613
2559: oGetAddrLocal 2
2561: oPushResult
2562: oSetResult 16
2564: oPushResult
2565: oGetLocal 1
2567: oPushResult
2568: oCall 13429
2570: oPop 2
2572: oAssign
2573: oGetLocal 2
2575: oPushResult
2576: oSetResult 22
2578: oPushResult
2579: oValueTop
2580: oPushResult
2581: oNodeSetInt
2582: oPop 3
2584: oJumpForward 2632
2586: oGetAddrLocal 2
2588: oPushResult
2589: oSetResult 18
2591: oPushResult
2592: oGetLocal 1
2594: oPushResult
2595: oCall 13429
2597: oPop 2
2599: oAssign
2600: oGetLocal 2
2602: oPushResult
2603: oSetResult 33
2605: oPushResult
2606: oValueTopString
2607: oPushResult
2608: oNodeSetString
2609: oPop 3
2611: oJumpForward 2632
2613: Choice Lookup Table
          39   2586
          35   2559
          34   2559
          41   2559
          29   2559
          33   2559
          30   2559
          31   2559
2630: oError 17
2632: oValuePop
2633: oGetLocal 2
2635: oPushResult
2636: oSetResult 21
2638: oPushResult
2639: oTypeSTop
2640: oPushResult
2641: oNodeSet
2642: oPop 3
2644: oTypeSPop
2645: oGetLocal 2
2647: oPushResult
2648: oScopeDeclare
2649: oPop 1
2651: oInput 5
2653: oReturn
2654: oLocalSpace 3
2656: oGetAddrLocal 1
2658: oPushResult
2659: oSetResult 25
2661: oPushResult
2662: LAST_ID
2663: oPushResult
2664: oCall 13429
2666: oPop 2
2668: oAssign
2669: oGetAddrLocal 2
2671: oPushResult
2672: oCall 11397
2674: oPop 1
2676: oGetLocal 1
2678: oPushResult
2679: oSetResult 21
2681: oPushResult
2682: oGetLocal 2
2684: oPushResult
2685: oNodeSet
2686: oPop 3
2688: oGetLocal 2
2690: oPushResult
2691: oNodeType
2692: oPop 1
2694: oChoice 2798
2696: oInput 6
2698: oGetLocal 2
2700: oPushResult
2701: oTypeSPush
2702: oPop 1
2704: oCall 3533
2706: oCall 4300
2708: oGetLocal 1
2710: oPushResult
2711: oSetResult 22
2713: oPushResult
2714: oValueTop
2715: oPushResult
2716: oNodeSetInt
2717: oPop 3
2719: oValuePop
2720: oTypeSPop
2721: oGetLocal 1
2723: oPushResult
2724: oScopeDeclare
2725: oPop 1
2727: oInput 5
2729: oJumpForward 2822
2731: oError 16
2733: oJumpForward 2822
2735: oGetGlobal 2
2737: oPushResult
2738: oScopeEnter
2739: oPop 1
2741: oGetAddrLocal 3
2743: oPushResult
2744: oGetLocal 2
2746: oPushResult
2747: oScopeAllocType
2748: oPop 1
2750: oAssign
2751: oScopeEnd
2752: oGetGlobal 2
2754: oPushResult
2755: oCall 13327
2757: oPop 1
2759: oPushResult
2760: oCodePush
2761: oPop 1
2763: oGetLocal 1
2765: oPushResult
2766: oSetResult 22
2768: oPushResult
2769: oGetLocal 3
2771: oPushResult
2772: oNodeSetInt
2773: oPop 3
2775: oInput 6
2777: oGetLocal 2
2779: oPushResult
2780: oGetLocal 3
2782: oPushResult
2783: oCall 2823
2785: oPop 2
2787: oCodePop
2788: oGetLocal 1
2790: oPushResult
2791: oScopeDeclare
2792: oPop 1
2794: oInput 5
2796: oJumpForward 2822
2798: Choice Lookup Table
          38   2735
          36   2735
          28   2731
          40   2731
          35   2696
          34   2696
          41   2696
          29   2696
          33   2696
          30   2696
          31   2696
2821: oEndChoice
2822: oReturn
2823: oLocalSpace 10
2825: oGetParam 2
2827: oPushResult
2828: oNodeType
2829: oPop 1
2831: oChoice 3153
2833: oGetAddrLocal 1
2835: oPushResult
2836: oGetParam 2
2838: oPushResult
2839: oSetResult 37
2841: oPushResult
2842: oNodeGet
2843: oPop 2
2845: oAssign
2846: oGetAddrLocal 2
2848: oPushResult
2849: oGetParam 2
2851: oPushResult
2852: oSetResult 38
2854: oPushResult
2855: oNodeGet
2856: oPop 2
2858: oAssign
2859: oGetAddrLocal 3
2861: oPushResult
2862: oGetLocal 2
2864: oPushResult
2865: oCall 12560
2867: oPop 1
2869: oAssign
2870: oGetAddrLocal 4
2872: oPushResult
2873: oGetLocal 2
2875: oPushResult
2876: oCall 12655
2878: oPop 1
2880: oAssign
2881: oGetAddrLocal 5
2883: oPushResult
2884: oGetLocal 1
2886: oPushResult
2887: oSetResult 17
2889: oPushResult
2890: oNodeGetInt
2891: oPop 2
2893: oAssign
2894: oInput 14
2896: oGetAddrLocal 6
2898: oPushResult
2899: oGetLocal 3
2901: oAssign
2902: oGetLocal 1
2904: oPushResult
2905: oGetParam 1
2907: oPushResult
2908: oCall 2823
2910: oPop 2
2912: oGetLocal 6
2914: oPushResult
2915: oGetLocal 4
2917: oPushResult
2918: equal
2919: oPop 2
2921: oChoice 2929
2923: oJumpForward 2958
2925: oJumpForward 2935
2927: oJumpForward 2935
2929: Choice Lookup Table
           0   2927
           1   2923
2934: oEndChoice
2935: oInput 13
2937: oGetAddrParam 1
2939: oPushResult
2940: oGetParam 1
2942: oPushResult
2943: oGetLocal 5
2945: oPushResult
2946: add
2947: oPop 2
2949: oAssign
2950: oGetAddrLocal 6
2952: oPushResult
2953: inc
2954: oPop 1
2956: oJumpBack 2902
2958: oInput 15
2960: oJumpForward 3177
2962: oInput 14
2964: oGetAddrLocal 7
2966: oPushResult
2967: oGetParam 2
2969: oPushResult
2970: oSetResult 41
2972: oPushResult
2973: oNodeGet
2974: oPop 2
2976: oAssign
2977: oInputChoice 2981
2979: oJumpForward 2986
2981: Choice Lookup Table
           0   2979
2984: oJumpForward 3052
2986: oGetAddrLocal 8
2988: oPushResult
2989: oGetLocal 7
2991: oPushResult
2992: oScopeFindRequireInScope
2993: oPop 1
2995: oAssign
2996: oInput 12
2998: oGetAddrLocal 9
3000: oPushResult
3001: oGetLocal 8
3003: oPushResult
3004: oSetResult 21
3006: oPushResult
3007: oNodeGet
3008: oPop 2
3010: oAssign
3011: oGetAddrLocal 10
3013: oPushResult
3014: oGetParam 1
3016: oPushResult
3017: oGetLocal 8
3019: oPushResult
3020: oSetResult 22
3022: oPushResult
3023: oNodeGetInt
3024: oPop 2
3026: oPushResult
3027: add
3028: oPop 2
3030: oAssign
3031: oGetLocal 9
3033: oPushResult
3034: oGetLocal 10
3036: oPushResult
3037: oCall 2823
3039: oPop 2
3041: oInputChoice 3045
3043: oJumpForward 3050
3045: Choice Lookup Table
           5   3043
3048: oJumpForward 3052
3050: oJumpBack 2977
3052: oInput 15
3054: oJumpForward 3177
3056: oEmit 16
3058: oGetParam 1
3060: oPushResult
3061: oEmitInt
3062: oPop 1
3064: oGetParam 2
3066: oPushResult
3067: oTypeSPush
3068: oPop 1
3070: oCall 3533
3072: oCall 4300
3074: oEmit 15
3076: oValueTop
3077: oPushResult
3078: oEmitInt
3079: oPop 1
3081: oValuePop
3082: oTypeSPop
3083: oEmit 27
3085: oJumpForward 3177
3087: oEmit 16
3089: oGetParam 1
3091: oPushResult
3092: oEmitInt
3093: oPop 1
3095: oGetParam 2
3097: oPushResult
3098: oTypeSPush
3099: oPop 1
3101: oCall 3533
3103: oCall 4300
3105: oEmit 15
3107: oValueTop
3108: oPushResult
3109: oEmitInt
3110: oPop 1
3112: oValuePop
3113: oTypeSPop
3114: oEmit 26
3116: oJumpForward 3177
3118: oEmit 16
3120: oGetParam 1
3122: oPushResult
3123: oEmitInt
3124: oPop 1
3126: oGetParam 2
3128: oPushResult
3129: oTypeSPush
3130: oPop 1
3132: oCall 3533
3134: oCall 4300
3136: oEmit 15
3138: oValueTop
3139: oPushResult
3140: oEmitInt
3141: oPop 1
3143: oValuePop
3144: oTypeSPop
3145: oEmit 28
3147: oJumpForward 3177
3149: oError 16
3151: oJumpForward 3177
3153: Choice Lookup Table
          28   3149
          40   3149
          35   3118
          34   3118
          41   3087
          29   3087
          33   3056
          30   3056
          31   3056
          38   2962
          36   2833
3176: oEndChoice
3177: oReturn
3178: oLocalSpace 2
3180: oInputChoice 3226
3182: oGetAddrLocal 1
3184: oPushResult
3185: oSetResult 19
3187: oPushResult
3188: LAST_ID
3189: oPushResult
3190: oCall 13429
3192: oPop 2
3194: oAssign
3195: oInput 6
3197: oGetAddrLocal 2
3199: oPushResult
3200: oCall 11397
3202: oPop 1
3204: oGetLocal 1
3206: oPushResult
3207: oSetResult 21
3209: oPushResult
3210: oGetLocal 2
3212: oPushResult
3213: oNodeSet
3214: oPop 3
3216: oGetLocal 1
3218: oPushResult
3219: oScopeDeclare
3220: oPop 1
3222: oInput 5
3224: oJumpForward 3231
3226: Choice Lookup Table
           0   3182
3229: oJumpForward 3233
3231: oJumpBack 3180
3233: oReturn
3234: oLocalSpace 6
3236: oInputChoice 3460
3238: oGetAddrLocal 1
3240: oPushResult
3241: oNodeVecNew
3242: oAssign
3243: oGetAddrLocal 2
3245: oPushResult
3246: oGetParam 1
3248: oPushResult
3249: LAST_ID
3250: oPushResult
3251: oCall 13429
3253: oPop 2
3255: oAssign
3256: oGetLocal 1
3258: oPushResult
3259: oGetLocal 2
3261: oPushResult
3262: oNodeVecAppend
3263: oPop 2
3265: oInputChoice 3271
3267: oInput 0
3269: oJumpForward 3276
3271: Choice Lookup Table
          13   3267
3274: oJumpForward 3278
3276: oJumpBack 3243
3278: oInput 12
3280: oGetAddrLocal 3
3282: oPushResult
3283: oCall 11397
3285: oPop 1
3287: oGetAddrLocal 4
3289: oPushResult
3290: oSetResult 0
3292: oAssign
3293: oGetLocal 4
3295: oPushResult
3296: oGetLocal 1
3298: oPushResult
3299: oNodeVecSize
3300: oPop 1
3302: oPushResult
3303: equal
3304: oPop 2
3306: oChoice 3347
3308: oGetAddrLocal 2
3310: oPushResult
3311: oGetLocal 1
3313: oPushResult
3314: oGetLocal 4
3316: oPushResult
3317: oNodeVecElement
3318: oPop 2
3320: oAssign
3321: oGetLocal 2
3323: oPushResult
3324: oSetResult 21
3326: oPushResult
3327: oGetLocal 3
3329: oPushResult
3330: oNodeSet
3331: oPop 3
3333: oGetLocal 2
3335: oPushResult
3336: oScopeDeclareAlloc
3337: oPop 1
3339: oGetAddrLocal 4
3341: oPushResult
3342: inc
3343: oPop 1
3345: oJumpForward 3352
3347: Choice Lookup Table
           0   3308
3350: oJumpForward 3354
3352: oJumpBack 3293
3354: oInputChoice 3447
3356: oGetLocal 1
3358: oPushResult
3359: oNodeVecSize
3360: oPop 1
3362: oChoice 3366
3364: oJumpForward 3371
3366: Choice Lookup Table
           1   3364
3369: oError 22
3371: oGetAddrLocal 5
3373: oPushResult
3374: oScopeCurrent
3375: oPushResult
3376: oCall 13327
3378: oPop 1
3380: oAssign
3381: oGetLocal 5
3383: oPushResult
3384: oCodePush
3385: oPop 1
3387: oGetAddrLocal 6
3389: oPushResult
3390: oSetResult 0
3392: oAssign
3393: oCall 13379
3395: oPushResult
3396: equal_zero
3397: oPop 1
3399: oChoice 3415
3401: oGetGlobal 3
3403: oPushResult
3404: oScopeEnter
3405: oPop 1
3407: oGetAddrLocal 6
3409: oPushResult
3410: oSetResult 1
3412: oAssign
3413: oJumpForward 3418
3415: Choice Lookup Table
           1   3401
3418: oGetLocal 2
3420: oPushResult
3421: oSetResult 1
3423: oPushResult
3424: oCall 9004
3426: oPop 2
3428: oCall 4787
3430: oCall 8006
3432: oCall 8760
3434: oGetLocal 6
3436: oChoice 3441
3438: oScopeEnd
3439: oJumpForward 3444
3441: Choice Lookup Table
           1   3438
3444: oCodePop
3445: oJumpForward 3450
3447: Choice Lookup Table
           6   3356
3450: oGetLocal 1
3452: oPushResult
3453: oNodeVecDelete
3454: oPop 1
3456: oInput 5
3458: oJumpForward 3465
3460: Choice Lookup Table
           0   3238
3463: oJumpForward 3467
3465: oJumpBack 3236
3467: oReturn
3468: oLocalSpace 2
3470: oInputChoice 3477
3472: oJumpForward 3483
3474: oChangeIntLitToLabelIdent
3475: oJumpForward 3483
3477: Choice Lookup Table
           1   3474
           0   3472
3482: oEndChoice
3483: oGetAddrLocal 1
3485: oPushResult
3486: oSetResult 26
3488: oPushResult
3489: LAST_ID
3490: oPushResult
3491: oCall 13429
3493: oPop 2
3495: oAssign
3496: oGetAddrLocal 2
3498: oPushResult
3499: oLabelNew
3500: oAssign
3501: oGetLocal 1
3503: oPushResult
3504: oSetResult 22
3506: oPushResult
3507: oGetLocal 2
3509: oPushResult
3510: oNodeSetLabel
3511: oPop 3
3513: oGetLocal 1
3515: oPushResult
3516: oScopeDeclare
3517: oPop 1
3519: oInputChoice 3523
3521: oJumpForward 3528
3523: Choice Lookup Table
          13   3521
3526: oJumpForward 3530
3528: oJumpBack 3470
3530: oInput 5
3532: oReturn
3533: oLocalSpace 0
3535: oCall 3737
3537: oInputChoice 3719
3539: oCall 3760
3541: oCall 4203
3543: oTypeSNodeType
3544: oChoice 3556
3546: oValueStringCmp
3547: oSetResult 0
3549: oPushResult
3550: oValuePush
3551: oPop 1
3553: oValueEqual
3554: oJumpForward 3560
3556: Choice Lookup Table
          39   3546
3559: oValueEqual
3560: oTypeSPop
3561: oGetGlobal 7
3563: oPushResult
3564: oTypeSPush
3565: oPop 1
3567: oJumpForward 3734
3569: oCall 3737
3571: oCall 4203
3573: oTypeSNodeType
3574: oChoice 3586
3576: oValueStringCmp
3577: oSetResult 0
3579: oPushResult
3580: oValuePush
3581: oPop 1
3583: oValueNotEqual
3584: oJumpForward 3590
3586: Choice Lookup Table
          39   3576
3589: oValueNotEqual
3590: oTypeSPop
3591: oGetGlobal 7
3593: oPushResult
3594: oTypeSPush
3595: oPop 1
3597: oJumpForward 3734
3599: oCall 3737
3601: oCall 4203
3603: oTypeSNodeType
3604: oChoice 3616
3606: oValueStringCmp
3607: oSetResult 0
3609: oPushResult
3610: oValuePush
3611: oPop 1
3613: oValueLess
3614: oJumpForward 3620
3616: Choice Lookup Table
          39   3606
3619: oValueLess
3620: oTypeSPop
3621: oGetGlobal 7
3623: oPushResult
3624: oTypeSPush
3625: oPop 1
3627: oJumpForward 3734
3629: oCall 3737
3631: oCall 4203
3633: oTypeSNodeType
3634: oChoice 3646
3636: oValueStringCmp
3637: oSetResult 0
3639: oPushResult
3640: oValuePush
3641: oPop 1
3643: oValueGreater
3644: oJumpForward 3650
3646: Choice Lookup Table
          39   3636
3649: oValueGreater
3650: oTypeSPop
3651: oGetGlobal 7
3653: oPushResult
3654: oTypeSPush
3655: oPop 1
3657: oJumpForward 3734
3659: oCall 3737
3661: oCall 4203
3663: oTypeSNodeType
3664: oChoice 3676
3666: oValueStringCmp
3667: oSetResult 0
3669: oPushResult
3670: oValuePush
3671: oPop 1
3673: oValueLessEqual
3674: oJumpForward 3680
3676: Choice Lookup Table
          39   3666
3679: oValueLessEqual
3680: oTypeSPop
3681: oGetGlobal 7
3683: oPushResult
3684: oTypeSPush
3685: oPop 1
3687: oJumpForward 3734
3689: oCall 3737
3691: oCall 4203
3693: oTypeSNodeType
3694: oChoice 3706
3696: oValueStringCmp
3697: oSetResult 0
3699: oPushResult
3700: oValuePush
3701: oPop 1
3703: oValueGreaterEqual
3704: oJumpForward 3710
3706: Choice Lookup Table
          39   3696
3709: oValueGreaterEqual
3710: oTypeSPop
3711: oGetGlobal 7
3713: oPushResult
3714: oTypeSPush
3715: oPop 1
3717: oJumpForward 3734
3719: Choice Lookup Table
          11   3689
          10   3659
           9   3629
           8   3599
           7   3569
           6   3539
3732: oJumpForward 3736
3734: oJumpBack 3537
3736: oReturn
3737: oLocalSpace 0
3739: oCall 3760
3741: oInputChoice 3752
3743: oCall 4190
3745: oCall 3760
3747: oCall 4176
3749: oValueOr
3750: oJumpForward 3757
3752: Choice Lookup Table
          57   3743
3755: oJumpForward 3759
3757: oJumpBack 3741
3759: oReturn
3760: oLocalSpace 0
3762: oCall 3783
3764: oInputChoice 3775
3766: oCall 4190
3768: oCall 3783
3770: oCall 4176
3772: oValueAnd
3773: oJumpForward 3780
3775: Choice Lookup Table
          56   3766
3778: oJumpForward 3782
3780: oJumpBack 3764
3782: oReturn
3783: oLocalSpace 0
3785: oInputChoice 3794
3787: oCall 3783
3789: oCall 4190
3791: oValueNot
3792: oJumpForward 3799
3794: Choice Lookup Table
          58   3787
3797: oCall 3800
3799: oReturn
3800: oLocalSpace 0
3802: oCall 3849
3804: oInputChoice 3839
3806: oCall 3849
3808: oCall 4203
3810: oTypeSNodeType
3811: oChoice 3816
3813: oValueStringConcat
3814: oJumpForward 3820
3816: Choice Lookup Table
          39   3813
3819: oValueAdd
3820: oJumpForward 3846
3822: oCall 3849
3824: oCall 4203
3826: oTypeSNodeType
3827: oChoice 3833
3829: oError 17
3831: oJumpForward 3837
3833: Choice Lookup Table
          39   3829
3836: oValueSub
3837: oJumpForward 3846
3839: Choice Lookup Table
          25   3822
          24   3806
3844: oJumpForward 3848
3846: oJumpBack 3804
3848: oReturn
3849: oLocalSpace 0
3851: oCall 3899
3853: oInputChoice 3889
3855: oCall 3899
3857: oCall 4203
3859: oTypeSNodeType
3860: oChoice 3866
3862: oError 17
3864: oJumpForward 3870
3866: Choice Lookup Table
          39   3862
3869: oValueMult
3870: oJumpForward 3896
3872: oCall 3899
3874: oCall 4203
3876: oTypeSNodeType
3877: oChoice 3883
3879: oError 17
3881: oJumpForward 3887
3883: Choice Lookup Table
          39   3879
3886: oValueDiv
3887: oJumpForward 3896
3889: Choice Lookup Table
          23   3872
          22   3855
3894: oJumpForward 3898
3896: oJumpBack 3853
3898: oReturn
3899: oLocalSpace 0
3901: oInputChoice 3912
3903: oCall 3920
3905: oJumpForward 3919
3907: oCall 3920
3909: oValueNegate
3910: oJumpForward 3919
3912: Choice Lookup Table
          25   3907
          24   3903
3917: oCall 3920
3919: oReturn
3920: oLocalSpace 1
3922: oInputChoice 4148
3924: TOKEN_VALUE
3925: oPushResult
3926: oValuePush
3927: oPop 1
3929: oGetGlobal 6
3931: oPushResult
3932: oTypeSPush
3933: oPop 1
3935: oJumpForward 4175
3937: TOKEN_VALUE
3938: oPushResult
3939: oValuePush
3940: oPop 1
3942: oGetGlobal 9
3944: oPushResult
3945: oTypeSPush
3946: oPop 1
3948: oJumpForward 4175
3950: CURRENT_STRLIT
3951: oPushResult
3952: oValuePushString
3953: oPop 1
3955: oGetGlobal 13
3957: oPushResult
3958: oTypeSPush
3959: oPop 1
3961: oJumpForward 4175
3963: oCall 3533
3965: oInput 15
3967: oJumpForward 4175
3969: oGetAddrLocal 1
3971: oPushResult
3972: oScopeFindRequire
3973: oAssign
3974: oGetAddrLocal 1
3976: oPushResult
3977: oCall 244
3979: oPop 1
3981: oGetLocal 1
3983: oPushResult
3984: oNodeType
3985: oPop 1
3987: oChoice 4105
3989: oGetLocal 1
3991: oPushResult
3992: oCall 4570
3994: oPop 1
3996: oJumpForward 4130
3998: oGetLocal 1
4000: oPushResult
4001: oSetResult 22
4003: oPushResult
4004: oNodeGetInt
4005: oPop 2
4007: oPushResult
4008: oValuePush
4009: oPop 1
4011: oGetLocal 1
4013: oPushResult
4014: oSetResult 21
4016: oPushResult
4017: oNodeGet
4018: oPop 2
4020: oPushResult
4021: oTypeSPush
4022: oPop 1
4024: oJumpForward 4130
4026: oGetLocal 1
4028: oPushResult
4029: oSetResult 33
4031: oPushResult
4032: oNodeGetString
4033: oPop 2
4035: oPushResult
4036: oValuePushString
4037: oPop 1
4039: oGetLocal 1
4041: oPushResult
4042: oSetResult 21
4044: oPushResult
4045: oNodeGet
4046: oPop 2
4048: oPushResult
4049: oTypeSPush
4050: oPop 1
4052: oJumpForward 4130
4054: oGetLocal 1
4056: oPushResult
4057: oSetResult 22
4059: oPushResult
4060: oNodeGetInt
4061: oPop 2
4063: oPushResult
4064: oValuePush
4065: oPop 1
4067: oGetLocal 1
4069: oPushResult
4070: oSetResult 21
4072: oPushResult
4073: oNodeGet
4074: oPop 2
4076: oPushResult
4077: oTypeSPush
4078: oPop 1
4080: oJumpForward 4130
4082: oGetLocal 1
4084: oPushResult
4085: oSetResult 21
4087: oPushResult
4088: oNodeGet
4089: oPop 2
4091: oPushResult
4092: oTypeSPush
4093: oPop 1
4095: oInput 14
4097: oCall 3533
4099: oInput 15
4101: oCall 4421
4103: oJumpForward 4130
4105: Choice Lookup Table
          19   4082
          17   4054
          18   4026
          16   3998
          14   3989
4116: oError 1
4118: oSetResult 0
4120: oPushResult
4121: oValuePush
4122: oPop 1
4124: oGetGlobal 6
4126: oPushResult
4127: oTypeSPush
4128: oPop 1
4130: oJumpForward 4175
4132: oError 16
4134: oSetResult 0
4136: oPushResult
4137: oValuePush
4138: oPop 1
4140: oGetGlobal 12
4142: oPushResult
4143: oTypeSPush
4144: oPop 1
4146: oJumpForward 4175
4148: Choice Lookup Table
          19   4132
           0   3969
          14   3963
           2   3950
           3   3937
           1   3924
4161: oError 1
4163: oSetResult 0
4165: oPushResult
4166: oValuePush
4167: oPop 1
4169: oGetGlobal 6
4171: oPushResult
4172: oTypeSPush
4173: oPop 1
4175: oReturn
4176: oLocalSpace 0
4178: oTypeSNodeType
4179: oChoice 4183
4181: oJumpForward 4188
4183: Choice Lookup Table
          31   4181
4186: oError 8
4188: oTypeSPop
4189: oReturn
4190: oLocalSpace 0
4192: oTypeSNodeType
4193: oChoice 4197
4195: oJumpForward 4202
4197: Choice Lookup Table
          31   4195
4200: oError 8
4202: oReturn
4203: oLocalSpace 1
4205: oGetAddrLocal 1
4207: oPushResult
4208: oTypeSNodeType
4209: oAssign
4210: oTypeSPop
4211: oGetLocal 1
4213: oPushResult
4214: oTypeSNodeType
4215: oPushResult
4216: equal_node_type
4217: oPop 2
4219: oChoice 4296
4221: oTypeSNodeType
4222: oChoice 4283
4224: oGetLocal 1
4226: oChoice 4231
4228: oReturn
4229: oJumpForward 4234
4231: Choice Lookup Table
          35   4228
4234: oJumpForward 4292
4236: oGetLocal 1
4238: oChoice 4243
4240: oReturn
4241: oJumpForward 4246
4243: Choice Lookup Table
          34   4240
4246: oJumpForward 4292
4248: oGetLocal 1
4250: oChoice 4256
4252: oValueCharToString
4253: oReturn
4254: oJumpForward 4259
4256: Choice Lookup Table
          33   4252
4259: oJumpForward 4292
4261: oGetLocal 1
4263: oChoice 4278
4265: oValueSwap
4266: oValueCharToString
4267: oValueSwap
4268: oTypeSPop
4269: oGetGlobal 13
4271: oPushResult
4272: oTypeSPush
4273: oPop 1
4275: oReturn
4276: oJumpForward 4281
4278: Choice Lookup Table
          39   4265
4281: oJumpForward 4292
4283: Choice Lookup Table
          33   4261
          39   4248
          35   4236
          34   4224
4292: oError 14
4294: oJumpForward 4299
4296: Choice Lookup Table
           0   4221
4299: oReturn
4300: oLocalSpace 1
4302: oGetAddrLocal 1
4304: oPushResult
4305: oTypeSNodeType
4306: oAssign
4307: oTypeSPop
4308: oGetLocal 1
4310: oPushResult
4311: oTypeSNodeType
4312: oPushResult
4313: equal_node_type
4314: oPop 2
4316: oChoice 4417
4318: oTypeSNodeType
4319: oChoice 4400
4321: oGetLocal 1
4323: oChoice 4328
4325: oReturn
4326: oJumpForward 4331
4328: Choice Lookup Table
          30   4325
4331: oJumpForward 4413
4333: oGetLocal 1
4335: oChoice 4340
4337: oReturn
4338: oJumpForward 4343
4340: Choice Lookup Table
          29   4337
4343: oJumpForward 4413
4345: oGetLocal 1
4347: oChoice 4352
4349: oReturn
4350: oJumpForward 4355
4352: Choice Lookup Table
          35   4349
4355: oJumpForward 4413
4357: oGetLocal 1
4359: oChoice 4364
4361: oReturn
4362: oJumpForward 4367
4364: Choice Lookup Table
          34   4361
4367: oJumpForward 4413
4369: oGetLocal 1
4371: oChoice 4377
4373: oValueCharToString
4374: oReturn
4375: oJumpForward 4380
4377: Choice Lookup Table
          33   4373
4380: oJumpForward 4413
4382: oGetLocal 1
4384: oChoice 4393
4386: oReturn
4387: oJumpForward 4398
4389: oValueCharToString
4390: oReturn
4391: oJumpForward 4398
4393: Choice Lookup Table
          33   4389
          39   4386
4398: oJumpForward 4413
4400: Choice Lookup Table
          40   4382
          39   4369
          35   4357
          34   4345
          30   4333
          29   4321
4413: oError 14
4415: oJumpForward 4420
4417: Choice Lookup Table
           0   4318
4420: oReturn
4421: oLocalSpace 1
4423: oGetAddrLocal 1
4425: oPushResult
4426: oTypeSNodeType
4427: oAssign
4428: oTypeSPop
4429: oGetLocal 1
4431: oPushResult
4432: oTypeSNodeType
4433: oPushResult
4434: equal_node_type
4435: oPop 2
4437: oChoice 4566
4439: oTypeSNodeType
4440: oChoice 4543
4442: oGetLocal 1
4444: oChoice 4452
4446: oReturn
4447: oJumpForward 4463
4449: oReturn
4450: oJumpForward 4463
4452: Choice Lookup Table
          41   4449
          29   4449
          31   4446
          33   4446
          30   4446
4463: oJumpForward 4562
4465: oGetLocal 1
4467: oChoice 4475
4469: oReturn
4470: oJumpForward 4486
4472: oReturn
4473: oJumpForward 4486
4475: Choice Lookup Table
          41   4472
          29   4472
          31   4469
          33   4469
          30   4469
4486: oJumpForward 4562
4488: oGetLocal 1
4490: oChoice 4495
4492: oReturn
4493: oJumpForward 4498
4495: Choice Lookup Table
          35   4492
4498: oJumpForward 4562
4500: oGetLocal 1
4502: oChoice 4507
4504: oReturn
4505: oJumpForward 4510
4507: Choice Lookup Table
          34   4504
4510: oJumpForward 4562
4512: oGetLocal 1
4514: oChoice 4520
4516: oValueCharToString
4517: oReturn
4518: oJumpForward 4523
4520: Choice Lookup Table
          33   4516
4523: oJumpForward 4562
4525: oGetLocal 1
4527: oChoice 4536
4529: oReturn
4530: oJumpForward 4541
4532: oValueCharToString
4533: oReturn
4534: oJumpForward 4541
4536: Choice Lookup Table
          33   4532
          39   4529
4541: oJumpForward 4562
4543: Choice Lookup Table
          40   4525
          39   4512
          35   4500
          34   4488
          31   4465
          33   4465
          30   4465
          41   4442
          29   4442
4562: oError 14
4564: oJumpForward 4569
4566: Choice Lookup Table
           0   4439
4569: oReturn
4570: oLocalSpace 0
4572: oGetParam 1
4574: oPushResult
4575: oGetGlobal 15
4577: oPushResult
4578: oNodeEqual
4579: oPop 2
4581: oChoice 4621
4583: oInput 14
4585: oCall 3533
4587: oInput 15
4589: oTypeSNodeType
4590: oChoice 4596
4592: oJumpForward 4609
4594: oJumpForward 4609
4596: Choice Lookup Table
          33   4594
          30   4594
          31   4594
          41   4592
          29   4592
4607: oError 14
4609: oTypeSPop
4610: oGetGlobal 6
4612: oPushResult
4613: oTypeSPush
4614: oPop 1
4616: oInput 15
4618: oReturn
4619: oJumpForward 4624
4621: Choice Lookup Table
           1   4583
4624: oGetParam 1
4626: oPushResult
4627: oGetGlobal 16
4629: oPushResult
4630: oNodeEqual
4631: oPop 2
4633: oChoice 4667
4635: oInput 14
4637: oCall 3533
4639: oInput 15
4641: oTypeSNodeType
4642: oChoice 4648
4644: oJumpForward 4655
4646: oJumpForward 4655
4648: Choice Lookup Table
          30   4646
          29   4644
4653: oError 14
4655: oTypeSPop
4656: oGetGlobal 9
4658: oPushResult
4659: oTypeSPush
4660: oPop 1
4662: oInput 15
4664: oReturn
4665: oJumpForward 4670
4667: Choice Lookup Table
           1   4635
4670: oGetParam 1
4672: oPushResult
4673: oGetGlobal 17
4675: oPushResult
4676: oNodeEqual
4677: oPop 2
4679: oChoice 4724
4681: oInput 14
4683: oCall 3533
4685: oTypeSNodeType
4686: oChoice 4707
4688: oTypeSTop
4689: oPushResult
4690: oSetResult 44
4692: oPushResult
4693: oNodeGetBoolean
4694: oPop 2
4696: oChoice 4702
4698: oError 28
4700: oJumpForward 4705
4702: Choice Lookup Table
           1   4698
4705: oJumpForward 4712
4707: Choice Lookup Table
          41   4688
4710: oError 14
4712: oSetResult 1
4714: oPushResult
4715: oValuePush
4716: oPop 1
4718: oValueSub
4719: oInput 15
4721: oReturn
4722: oJumpForward 4727
4724: Choice Lookup Table
           1   4681
4727: oGetParam 1
4729: oPushResult
4730: oGetGlobal 18
4732: oPushResult
4733: oNodeEqual
4734: oPop 2
4736: oChoice 4781
4738: oInput 14
4740: oCall 3533
4742: oTypeSNodeType
4743: oChoice 4764
4745: oTypeSTop
4746: oPushResult
4747: oSetResult 44
4749: oPushResult
4750: oNodeGetBoolean
4751: oPop 2
4753: oChoice 4759
4755: oError 28
4757: oJumpForward 4762
4759: Choice Lookup Table
           1   4755
4762: oJumpForward 4769
4764: Choice Lookup Table
          41   4745
4767: oError 14
4769: oSetResult 1
4771: oPushResult
4772: oValuePush
4773: oPop 1
4775: oValueAdd
4776: oInput 15
4778: oReturn
4779: oJumpForward 4784
4781: Choice Lookup Table
           1   4738
4784: oError 16
4786: oReturn
4787: oLocalSpace 1
4789: oGetAddrLocal 1
4791: oPushResult
4792: oSetResult 0
4794: oAssign
4795: oGetAddrLocal 1
4797: oPushResult
4798: oCall 4948
4800: oPop 1
4802: oGetAddrLocal 1
4804: oPushResult
4805: oCall 4848
4807: oPop 1
4809: oReturn
4810: oLocalSpace 0
4812: oGetParam 1
4814: oPushResult
4815: oCall 4948
4817: oPop 1
4819: oTypeSNodeType
4820: oChoice 4839
4822: oJumpForward 4846
4824: oGetParam 1
4826: oPushResult
4827: oLabelNew
4828: oAssign
4829: oEmit 70
4831: oGetFromParam 1
4833: oPushResult
4834: oEmitLabel
4835: oPop 1
4837: oJumpForward 4846
4839: Choice Lookup Table
          31   4824
          32   4822
4844: oError 8
4846: oTypeSPop
4847: oReturn
4848: oLocalSpace 1
4850: oTypeSNodeType
4851: oChoice 4913
4853: oGetAddrLocal 1
4855: oPushResult
4856: oLabelNew
4857: oAssign
4858: oEmit 15
4860: oSetResult 1
4862: oPushResult
4863: oEmitInt
4864: oPop 1
4866: oEmit 68
4868: oGetLocal 1
4870: oPushResult
4871: oEmitLabel
4872: oPop 1
4874: oEmit 77
4876: oGetFromParam 1
4878: oPushResult
4879: oEmitLabel
4880: oPop 1
4882: oEmit 15
4884: oSetResult 0
4886: oPushResult
4887: oEmitInt
4888: oPop 1
4890: oEmit 77
4892: oGetLocal 1
4894: oPushResult
4895: oEmitLabel
4896: oPop 1
4898: oTypeSPop
4899: oGetGlobal 7
4901: oPushResult
4902: oTypeSPush
4903: oPop 1
4905: oGetParam 1
4907: oPushResult
4908: oSetResult 0
4910: oAssign
4911: oJumpForward 4916
4913: Choice Lookup Table
          32   4853
4916: oReturn
4917: oLocalSpace 0
4919: oTypeSNodeType
4920: oChoice 4944
4922: oGetParam 1
4924: oPushResult
4925: oLabelNew
4926: oAssign
4927: oEmit 70
4929: oGetFromParam 1
4931: oPushResult
4932: oEmitLabel
4933: oPop 1
4935: oTypeSPop
4936: oGetGlobal 8
4938: oPushResult
4939: oTypeSPush
4940: oPop 1
4942: oJumpForward 4947
4944: Choice Lookup Table
          31   4922
4947: oReturn
4948: oLocalSpace 0
4950: oGetParam 1
4952: oPushResult
4953: oCall 5481
4955: oPop 1
4957: oInputChoice 5463
4959: oGetParam 1
4961: oPushResult
4962: oCall 4848
4964: oPop 1
4966: oCall 8469
4968: oGetParam 1
4970: oPushResult
4971: oCall 5481
4973: oPop 1
4975: oGetParam 1
4977: oPushResult
4978: oCall 4848
4980: oPop 1
4982: oCall 8469
4984: oCall 8338
4986: oTypeSNodeType
4987: oChoice 5015
4989: oEmit 43
4991: oJumpForward 5034
4993: oEmit 49
4995: oJumpForward 5034
4997: oEmit 55
4999: oJumpForward 5034
5001: oCall 10397
5003: oEmit 15
5005: oSetResult 0
5007: oPushResult
5008: oEmitInt
5009: oPop 1
5011: oEmit 49
5013: oJumpForward 5034
5015: Choice Lookup Table
          39   5001
          40   5001
          35   4997
          34   4997
          41   4993
          29   4993
          33   4989
          31   4989
5032: oError 17
5034: oTypeSPop
5035: oGetGlobal 7
5037: oPushResult
5038: oTypeSPush
5039: oPop 1
5041: oJumpForward 5478
5043: oGetParam 1
5045: oPushResult
5046: oCall 4848
5048: oPop 1
5050: oCall 8469
5052: oGetParam 1
5054: oPushResult
5055: oCall 5481
5057: oPop 1
5059: oGetParam 1
5061: oPushResult
5062: oCall 4848
5064: oPop 1
5066: oCall 8469
5068: oCall 8338
5070: oTypeSNodeType
5071: oChoice 5099
5073: oEmit 44
5075: oJumpForward 5118
5077: oEmit 50
5079: oJumpForward 5118
5081: oEmit 56
5083: oJumpForward 5118
5085: oCall 10397
5087: oEmit 15
5089: oSetResult 0
5091: oPushResult
5092: oEmitInt
5093: oPop 1
5095: oEmit 50
5097: oJumpForward 5118
5099: Choice Lookup Table
          39   5085
          40   5085
          35   5081
          34   5081
          41   5077
          29   5077
          33   5073
          31   5073
5116: oError 17
5118: oTypeSPop
5119: oGetGlobal 7
5121: oPushResult
5122: oTypeSPush
5123: oPop 1
5125: oJumpForward 5478
5127: oGetParam 1
5129: oPushResult
5130: oCall 4848
5132: oPop 1
5134: oCall 8469
5136: oGetParam 1
5138: oPushResult
5139: oCall 5481
5141: oPop 1
5143: oGetParam 1
5145: oPushResult
5146: oCall 4848
5148: oPop 1
5150: oCall 8469
5152: oCall 8338
5154: oTypeSNodeType
5155: oChoice 5183
5157: oEmit 46
5159: oJumpForward 5202
5161: oEmit 52
5163: oJumpForward 5202
5165: oEmit 58
5167: oJumpForward 5202
5169: oCall 10397
5171: oEmit 15
5173: oSetResult 0
5175: oPushResult
5176: oEmitInt
5177: oPop 1
5179: oEmit 52
5181: oJumpForward 5202
5183: Choice Lookup Table
          39   5169
          40   5169
          35   5165
          34   5165
          41   5161
          29   5161
          33   5157
          31   5157
5200: oError 17
5202: oTypeSPop
5203: oGetGlobal 7
5205: oPushResult
5206: oTypeSPush
5207: oPop 1
5209: oJumpForward 5478
5211: oGetParam 1
5213: oPushResult
5214: oCall 4848
5216: oPop 1
5218: oCall 8469
5220: oGetParam 1
5222: oPushResult
5223: oCall 5481
5225: oPop 1
5227: oGetParam 1
5229: oPushResult
5230: oCall 4848
5232: oPop 1
5234: oCall 8469
5236: oCall 8338
5238: oTypeSNodeType
5239: oChoice 5267
5241: oEmit 45
5243: oJumpForward 5286
5245: oEmit 51
5247: oJumpForward 5286
5249: oEmit 57
5251: oJumpForward 5286
5253: oCall 10397
5255: oEmit 15
5257: oSetResult 0
5259: oPushResult
5260: oEmitInt
5261: oPop 1
5263: oEmit 51
5265: oJumpForward 5286
5267: Choice Lookup Table
          39   5253
          40   5253
          35   5249
          34   5249
          41   5245
          29   5245
          33   5241
          31   5241
5284: oError 17
5286: oTypeSPop
5287: oGetGlobal 7
5289: oPushResult
5290: oTypeSPush
5291: oPop 1
5293: oJumpForward 5478
5295: oGetParam 1
5297: oPushResult
5298: oCall 4848
5300: oPop 1
5302: oCall 8469
5304: oGetParam 1
5306: oPushResult
5307: oCall 5481
5309: oPop 1
5311: oGetParam 1
5313: oPushResult
5314: oCall 4848
5316: oPop 1
5318: oCall 8469
5320: oCall 8338
5322: oTypeSNodeType
5323: oChoice 5351
5325: oEmit 48
5327: oJumpForward 5370
5329: oEmit 54
5331: oJumpForward 5370
5333: oEmit 60
5335: oJumpForward 5370
5337: oCall 10397
5339: oEmit 15
5341: oSetResult 0
5343: oPushResult
5344: oEmitInt
5345: oPop 1
5347: oEmit 54
5349: oJumpForward 5370
5351: Choice Lookup Table
          39   5337
          40   5337
          35   5333
          34   5333
          41   5329
          29   5329
          33   5325
          31   5325
5368: oError 17
5370: oTypeSPop
5371: oGetGlobal 7
5373: oPushResult
5374: oTypeSPush
5375: oPop 1
5377: oJumpForward 5478
5379: oGetParam 1
5381: oPushResult
5382: oCall 4848
5384: oPop 1
5386: oCall 8469
5388: oGetParam 1
5390: oPushResult
5391: oCall 5481
5393: oPop 1
5395: oGetParam 1
5397: oPushResult
5398: oCall 4848
5400: oPop 1
5402: oCall 8469
5404: oCall 8338
5406: oTypeSNodeType
5407: oChoice 5435
5409: oEmit 47
5411: oJumpForward 5454
5413: oEmit 53
5415: oJumpForward 5454
5417: oEmit 59
5419: oJumpForward 5454
5421: oCall 10397
5423: oEmit 15
5425: oSetResult 0
5427: oPushResult
5428: oEmitInt
5429: oPop 1
5431: oEmit 53
5433: oJumpForward 5454
5435: Choice Lookup Table
          39   5421
          40   5421
          35   5417
          34   5417
          41   5413
          29   5413
          33   5409
          31   5409
5452: oError 17
5454: oTypeSPop
5455: oGetGlobal 7
5457: oPushResult
5458: oTypeSPush
5459: oPop 1
5461: oJumpForward 5478
5463: Choice Lookup Table
          11   5379
          10   5295
           9   5211
           8   5127
           7   5043
           6   4959
5476: oJumpForward 5480
5478: oJumpBack 4957
5480: oReturn
5481: oLocalSpace 1
5483: oGetAddrLocal 1
5485: oPushResult
5486: oSetResult 0
5488: oAssign
5489: oGetParam 1
5491: oPushResult
5492: oCall 5661
5494: oPop 1
5496: oInputChoice 5629
5498: oTypeSNodeType
5499: oChoice 5570
5501: oGetLocal 1
5503: oPushResult
5504: oSetResult 0
5506: oPushResult
5507: equal_label
5508: oPop 2
5510: oChoice 5519
5512: oGetAddrLocal 1
5514: oPushResult
5515: oLabelNew
5516: oAssign
5517: oJumpForward 5522
5519: Choice Lookup Table
           1   5512
5522: oEmit 68
5524: oGetLocal 1
5526: oPushResult
5527: oEmitLabel
5528: oPop 1
5530: oJumpForward 5577
5532: oGetParam 1
5534: oPushResult
5535: oCall 4917
5537: oPop 1
5539: oGetLocal 1
5541: oPushResult
5542: oSetResult 0
5544: oPushResult
5545: equal_label
5546: oPop 2
5548: oChoice 5557
5550: oGetAddrLocal 1
5552: oPushResult
5553: oLabelNew
5554: oAssign
5555: oJumpForward 5560
5557: Choice Lookup Table
           1   5550
5560: oEmit 68
5562: oGetLocal 1
5564: oPushResult
5565: oEmitLabel
5566: oPop 1
5568: oJumpForward 5577
5570: Choice Lookup Table
          31   5532
          32   5501
5575: oError 8
5577: oTypeSPop
5578: oEmit 77
5580: oGetFromParam 1
5582: oPushResult
5583: oEmitLabel
5584: oPop 1
5586: oGetParam 1
5588: oPushResult
5589: oSetResult 0
5591: oAssign
5592: oGetParam 1
5594: oPushResult
5595: oCall 5661
5597: oPop 1
5599: oTypeSNodeType
5600: oChoice 5613
5602: oJumpForward 5620
5604: oGetParam 1
5606: oPushResult
5607: oCall 4917
5609: oPop 1
5611: oJumpForward 5620
5613: Choice Lookup Table
          31   5604
          32   5602
5618: oError 8
5620: oTypeSPop
5621: oGetGlobal 8
5623: oPushResult
5624: oTypeSPush
5625: oPop 1
5627: oJumpForward 5634
5629: Choice Lookup Table
          57   5498
5632: oJumpForward 5636
5634: oJumpBack 5496
5636: oGetLocal 1
5638: oPushResult
5639: oSetResult 0
5641: oPushResult
5642: equal_label
5643: oPop 2
5645: oChoice 5657
5647: oEmit 77
5649: oGetLocal 1
5651: oPushResult
5652: oEmitLabel
5653: oPop 1
5655: oJumpForward 5660
5657: Choice Lookup Table
           0   5647
5660: oReturn
5661: oLocalSpace 2
5663: oGetAddrLocal 1
5665: oPushResult
5666: oSetResult 0
5668: oAssign
5669: oGetParam 1
5671: oPushResult
5672: oCall 5799
5674: oPop 1
5676: oInputChoice 5791
5678: oTypeSNodeType
5679: oChoice 5692
5681: oJumpForward 5699
5683: oGetParam 1
5685: oPushResult
5686: oCall 4917
5688: oPop 1
5690: oJumpForward 5699
5692: Choice Lookup Table
          31   5683
          32   5681
5697: oError 8
5699: oTypeSPop
5700: oGetLocal 1
5702: oPushResult
5703: oSetResult 0
5705: oPushResult
5706: equal_label
5707: oPop 2
5709: oChoice 5738
5711: oGetAddrLocal 1
5713: oPushResult
5714: oLabelNew
5715: oAssign
5716: oEmit 78
5718: oGetFromParam 1
5720: oPushResult
5721: oEmitLabel
5722: oPop 1
5724: oGetLocal 1
5726: oPushResult
5727: oEmitLabel
5728: oPop 1
5730: oGetParam 1
5732: oPushResult
5733: oGetLocal 1
5735: oAssign
5736: oJumpForward 5741
5738: Choice Lookup Table
           1   5711
5741: oGetAddrLocal 2
5743: oPushResult
5744: oSetResult 0
5746: oAssign
5747: oGetAddrLocal 2
5749: oPushResult
5750: oCall 5799
5752: oPop 1
5754: oTypeSNodeType
5755: oChoice 5768
5757: oJumpForward 5775
5759: oGetAddrLocal 2
5761: oPushResult
5762: oCall 4917
5764: oPop 1
5766: oJumpForward 5775
5768: Choice Lookup Table
          31   5759
          32   5757
5773: oError 8
5775: oEmit 78
5777: oGetLocal 2
5779: oPushResult
5780: oEmitLabel
5781: oPop 1
5783: oGetLocal 1
5785: oPushResult
5786: oEmitLabel
5787: oPop 1
5789: oJumpForward 5796
5791: Choice Lookup Table
          56   5678
5794: oJumpForward 5798
5796: oJumpBack 5676
5798: oReturn
5799: oLocalSpace 1
5801: oInputChoice 5855
5803: oGetAddrLocal 1
5805: oPushResult
5806: oSetResult 0
5808: oAssign
5809: oGetAddrLocal 1
5811: oPushResult
5812: oCall 5799
5814: oPop 1
5816: oTypeSNodeType
5817: oChoice 5846
5819: oGetParam 1
5821: oPushResult
5822: oLabelNew
5823: oAssign
5824: oEmit 68
5826: oGetFromParam 1
5828: oPushResult
5829: oEmitLabel
5830: oPop 1
5832: oEmit 77
5834: oGetLocal 1
5836: oPushResult
5837: oEmitLabel
5838: oPop 1
5840: oJumpForward 5853
5842: oEmit 42
5844: oJumpForward 5853
5846: Choice Lookup Table
          31   5842
          32   5819
5851: oError 8
5853: oJumpForward 5865
5855: Choice Lookup Table
          58   5803
5858: oGetParam 1
5860: oPushResult
5861: oCall 5866
5863: oPop 1
5865: oReturn
5866: oLocalSpace 2
5868: oGetAddrLocal 1
5870: oPushResult
5871: oSetResult 1
5873: oAssign
5874: oGetParam 1
5876: oPushResult
5877: oCall 6102
5879: oPop 1
5881: oInputChoice 6092
5883: oTypeSNodeType
5884: oChoice 6007
5886: oCall 8423
5888: oGetParam 1
5890: oPushResult
5891: oCall 6102
5893: oPop 1
5895: oTypeSNodeType
5896: oChoice 5904
5898: oEmit 22
5900: oCall 7791
5902: oJumpForward 5913
5904: Choice Lookup Table
          35   5898
          34   5898
5909: oCall 8443
5911: oEmit 37
5913: oJumpForward 6024
5915: oGetLocal 1
5917: oChoice 5933
5919: oGetAddrLocal 2
5921: oPushResult
5922: oCall 10180
5924: oAssign
5925: oGetAddrLocal 1
5927: oPushResult
5928: oSetResult 0
5930: oAssign
5931: oJumpForward 5936
5933: Choice Lookup Table
           1   5919
5936: oGetParam 1
5938: oPushResult
5939: oCall 6102
5941: oPop 1
5943: oTypeSNodeType
5944: oChoice 5982
5946: oCall 10289
5948: oEmit 17
5950: oGetLocal 2
5952: oPushResult
5953: oEmitInt
5954: oPop 1
5956: oGetGlobal 14
5958: oPushResult
5959: oTypeSPush
5960: oPop 1
5962: oJumpForward 5992
5964: oCall 10343
5966: oEmit 17
5968: oGetLocal 2
5970: oPushResult
5971: oEmitInt
5972: oPop 1
5974: oGetGlobal 14
5976: oPushResult
5977: oTypeSPush
5978: oPop 1
5980: oJumpForward 5992
5982: Choice Lookup Table
          33   5964
          39   5946
          40   5946
5989: oError 14
5991: oTypeSPop
5992: oJumpForward 6024
5994: oGetParam 1
5996: oPushResult
5997: oCall 6102
5999: oPop 1
6001: oCall 8423
6003: oCall 7791
6005: oJumpForward 6024
6007: Choice Lookup Table
          35   5994
          34   5994
          33   5915
          39   5915
          40   5915
          30   5886
          29   5886
6022: oError 17
6024: oJumpForward 6099
6026: oTypeSNodeType
6027: oChoice 6079
6029: oCall 8423
6031: oGetParam 1
6033: oPushResult
6034: oCall 6102
6036: oPop 1
6038: oCall 8443
6040: oEmit 40
6042: oJumpForward 6090
6044: oGetParam 1
6046: oPushResult
6047: oCall 6102
6049: oPop 1
6051: oTypeSNodeType
6052: oChoice 6066
6054: oCall 8423
6056: oCall 7847
6058: oJumpForward 6077
6060: oCall 8338
6062: oCall 7903
6064: oJumpForward 6077
6066: Choice Lookup Table
          35   6060
          34   6060
          30   6054
          29   6054
6075: oError 17
6077: oJumpForward 6090
6079: Choice Lookup Table
          35   6044
          34   6044
          30   6029
          29   6029
6088: oError 17
6090: oJumpForward 6099
6092: Choice Lookup Table
          25   6026
          24   5883
6097: oJumpForward 6101
6099: oJumpBack 5881
6101: oReturn
6102: oLocalSpace 0
6104: oGetParam 1
6106: oPushResult
6107: oCall 6153
6109: oPop 1
6111: oInputChoice 6143
6113: oCall 8423
6115: oGetParam 1
6117: oPushResult
6118: oCall 6153
6120: oPop 1
6122: oCall 8443
6124: oEmit 34
6126: oJumpForward 6150
6128: oCall 8423
6130: oGetParam 1
6132: oPushResult
6133: oCall 6153
6135: oPop 1
6137: oCall 8443
6139: oEmit 35
6141: oJumpForward 6150
6143: Choice Lookup Table
          23   6128
          22   6113
6148: oJumpForward 6152
6150: oJumpBack 6111
6152: oReturn
6153: oLocalSpace 0
6155: oInputChoice 6181
6157: oGetParam 1
6159: oPushResult
6160: oCall 6194
6162: oPop 1
6164: oCall 8443
6166: oJumpForward 6193
6168: oGetParam 1
6170: oPushResult
6171: oCall 6194
6173: oPop 1
6175: oCall 8443
6177: oEmit 41
6179: oJumpForward 6193
6181: Choice Lookup Table
          25   6168
          24   6157
6186: oGetParam 1
6188: oPushResult
6189: oCall 6194
6191: oPop 1
6193: oReturn
6194: oLocalSpace 7
6196: oInputChoice 6556
6198: oEmit 15
6200: TOKEN_VALUE
6201: oPushResult
6202: oEmitInt
6203: oPop 1
6205: oGetGlobal 6
6207: oPushResult
6208: oTypeSPush
6209: oPop 1
6211: oJumpForward 6577
6213: oEmit 15
6215: TOKEN_VALUE
6216: oPushResult
6217: oEmitInt
6218: oPop 1
6220: oGetGlobal 9
6222: oPushResult
6223: oTypeSPush
6224: oPop 1
6226: oJumpForward 6577
6228: oGetParam 1
6230: oPushResult
6231: oCall 4948
6233: oPop 1
6235: oInput 15
6237: oJumpForward 6577
6239: oGetAddrLocal 1
6241: oPushResult
6242: CURRENT_STRLIT
6243: oPushResult
6244: oStringAllocShortStringLit
6245: oPop 1
6247: oAssign
6248: oEmit 16
6250: oGetLocal 1
6252: oPushResult
6253: oEmitInt
6254: oPop 1
6256: oGetGlobal 13
6258: oPushResult
6259: oTypeSPush
6260: oPop 1
6262: oCall 7389
6264: oCall 7335
6266: oJumpForward 6577
6268: oGetAddrLocal 2
6270: oPushResult
6271: oScopeFindRequire
6272: oAssign
6273: oGetAddrLocal 2
6275: oPushResult
6276: oCall 244
6278: oPop 1
6280: oGetLocal 2
6282: oPushResult
6283: oNodeType
6284: oPop 1
6286: oChoice 6476
6288: oGetLocal 2
6290: oPushResult
6291: oCall 10492
6293: oPop 1
6295: oJumpForward 6505
6297: oGetLocal 2
6299: oPushResult
6300: oCall 11156
6302: oPop 1
6304: oJumpForward 6505
6306: oGetAddrLocal 3
6308: oPushResult
6309: oGetLocal 2
6311: oPushResult
6312: oSetResult 21
6314: oPushResult
6315: oNodeGet
6316: oPop 2
6318: oAssign
6319: oGetLocal 3
6321: oPushResult
6322: oTypeSPush
6323: oPop 1
6325: oTypeSNodeType
6326: oChoice 6350
6328: oEmit 15
6330: oGetLocal 2
6332: oPushResult
6333: oCall 13457
6335: oPop 1
6337: oJumpForward 6367
6339: oEmit 15
6341: oGetLocal 2
6343: oPushResult
6344: oCall 13457
6346: oPop 1
6348: oJumpForward 6367
6350: Choice Lookup Table
          35   6339
          34   6339
          30   6328
          33   6328
          31   6328
          41   6328
          29   6328
6365: oError 16
6367: oJumpForward 6505
6369: oGetAddrLocal 4
6371: oPushResult
6372: oGetLocal 2
6374: oPushResult
6375: oSetResult 22
6377: oPushResult
6378: oNodeGetInt
6379: oPop 2
6381: oAssign
6382: oGetLocal 4
6384: oPushResult
6385: equal_zero
6386: oPop 1
6388: oChoice 6421
6390: oGetAddrLocal 4
6392: oPushResult
6393: oGetLocal 2
6395: oPushResult
6396: oSetResult 33
6398: oPushResult
6399: oNodeGetString
6400: oPop 2
6402: oPushResult
6403: oStringAllocShortStringLit
6404: oPop 1
6406: oAssign
6407: oGetLocal 2
6409: oPushResult
6410: oSetResult 22
6412: oPushResult
6413: oGetLocal 4
6415: oPushResult
6416: oNodeSetInt
6417: oPop 3
6419: oJumpForward 6424
6421: Choice Lookup Table
           1   6390
6424: oEmit 16
6426: oGetLocal 4
6428: oPushResult
6429: oEmitInt
6430: oPop 1
6432: oGetGlobal 13
6434: oPushResult
6435: oTypeSPush
6436: oPop 1
6438: oCall 7389
6440: oCall 7335
6442: oJumpForward 6505
6444: oGetLocal 2
6446: oPushResult
6447: oCall 6578
6449: oPop 1
6451: oJumpForward 6505
6453: oGetLocal 2
6455: oPushResult
6456: oSetResult 21
6458: oPushResult
6459: oNodeGet
6460: oPop 2
6462: oPushResult
6463: oTypeSPush
6464: oPop 1
6466: oInput 14
6468: oCall 4787
6470: oInput 15
6472: oCall 8158
6474: oJumpForward 6505
6476: Choice Lookup Table
          19   6453
          25   6444
          24   6444
          22   6444
          21   6444
          18   6369
          17   6306
          16   6306
          14   6297
          13   6288
6497: oError 6
6499: oGetGlobal 6
6501: oPushResult
6502: oTypeSPush
6503: oPop 1
6505: oJumpForward 6577
6507: oInput 0
6509: oGetAddrLocal 5
6511: oPushResult
6512: oScopeFindRequire
6513: oAssign
6514: oGetAddrLocal 5
6516: oPushResult
6517: oCall 244
6519: oPop 1
6521: oGetLocal 5
6523: oPushResult
6524: oSetResult 0
6526: oPushResult
6527: oCall 9004
6529: oPop 2
6531: oGetAddrLocal 6
6533: oPushResult
6534: oTypeSTop
6535: oAssign
6536: oTypeSPop
6537: oGetAddrLocal 7
6539: oPushResult
6540: oGetLocal 6
6542: oPushResult
6543: oCall 12476
6545: oPop 1
6547: oAssign
6548: oGetLocal 7
6550: oPushResult
6551: oTypeSPush
6552: oPop 1
6554: oJumpForward 6577
6556: Choice Lookup Table
          19   6507
           0   6268
           2   6239
          14   6228
           3   6213
           1   6198
6569: oError 6
6571: oGetGlobal 6
6573: oPushResult
6574: oTypeSPush
6575: oPop 1
6577: oReturn
6578: oLocalSpace 2
6580: oGetAddrLocal 1
6582: oPushResult
6583: oGetParam 1
6585: oPushResult
6586: oSetResult 21
6588: oPushResult
6589: oNodeGet
6590: oPop 2
6592: oAssign
6593: oGetAddrLocal 2
6595: oPushResult
6596: oGetParam 1
6598: oPushResult
6599: oCall 13411
6601: oPop 1
6603: oAssign
6604: oGetLocal 1
6606: oPushResult
6607: oTypeSPush
6608: oPop 1
6610: oTypeSNodeType
6611: oChoice 7310
6613: oGetParam 1
6615: oPushResult
6616: oNodeType
6617: oPop 1
6619: oChoice 6765
6621: oEmit 0
6623: oGetParam 1
6625: oPushResult
6626: oCall 13457
6628: oPop 1
6630: oJumpForward 6775
6632: oGetLocal 2
6634: oPushResult
6635: equal_zero
6636: oPop 1
6638: oChoice 6651
6640: oEmit 3
6642: oGetParam 1
6644: oPushResult
6645: oCall 13457
6647: oPop 1
6649: oJumpForward 6669
6651: Choice Lookup Table
           1   6640
6654: oEmit 9
6656: oGetLocal 2
6658: oPushResult
6659: oEmitInt
6660: oPop 1
6662: oGetParam 1
6664: oPushResult
6665: oCall 13457
6667: oPop 1
6669: oJumpForward 6775
6671: oGetParam 1
6673: oPushResult
6674: oSetResult 34
6676: oPushResult
6677: oNodeGetBoolean
6678: oPop 2
6680: oChoice 6723
6682: oGetLocal 2
6684: oPushResult
6685: equal_zero
6686: oPop 1
6688: oChoice 6701
6690: oEmit 8
6692: oGetParam 1
6694: oPushResult
6695: oCall 13457
6697: oPop 1
6699: oJumpForward 6719
6701: Choice Lookup Table
           1   6690
6704: oEmit 14
6706: oGetLocal 2
6708: oPushResult
6709: oEmitInt
6710: oPop 1
6712: oGetParam 1
6714: oPushResult
6715: oCall 13457
6717: oPop 1
6719: oEmit 23
6721: oJumpForward 6763
6723: Choice Lookup Table
           1   6682
6726: oGetLocal 2
6728: oPushResult
6729: equal_zero
6730: oPop 1
6732: oChoice 6745
6734: oEmit 6
6736: oGetParam 1
6738: oPushResult
6739: oCall 13457
6741: oPop 1
6743: oJumpForward 6763
6745: Choice Lookup Table
           1   6734
6748: oEmit 12
6750: oGetLocal 2
6752: oPushResult
6753: oEmitInt
6754: oPop 1
6756: oGetParam 1
6758: oPushResult
6759: oCall 13457
6761: oPop 1
6763: oJumpForward 6775
6765: Choice Lookup Table
          24   6671
          22   6632
          25   6621
          21   6621
6774: oEndChoice
6775: oJumpForward 7334
6777: oGetParam 1
6779: oPushResult
6780: oNodeType
6781: oPop 1
6783: oChoice 6929
6785: oEmit 1
6787: oGetParam 1
6789: oPushResult
6790: oCall 13457
6792: oPop 1
6794: oJumpForward 6939
6796: oGetLocal 2
6798: oPushResult
6799: equal_zero
6800: oPop 1
6802: oChoice 6815
6804: oEmit 4
6806: oGetParam 1
6808: oPushResult
6809: oCall 13457
6811: oPop 1
6813: oJumpForward 6833
6815: Choice Lookup Table
           1   6804
6818: oEmit 10
6820: oGetLocal 2
6822: oPushResult
6823: oEmitInt
6824: oPop 1
6826: oGetParam 1
6828: oPushResult
6829: oCall 13457
6831: oPop 1
6833: oJumpForward 6939
6835: oGetParam 1
6837: oPushResult
6838: oSetResult 34
6840: oPushResult
6841: oNodeGetBoolean
6842: oPop 2
6844: oChoice 6887
6846: oGetLocal 2
6848: oPushResult
6849: equal_zero
6850: oPop 1
6852: oChoice 6865
6854: oEmit 8
6856: oGetParam 1
6858: oPushResult
6859: oCall 13457
6861: oPop 1
6863: oJumpForward 6883
6865: Choice Lookup Table
           1   6854
6868: oEmit 14
6870: oGetLocal 2
6872: oPushResult
6873: oEmitInt
6874: oPop 1
6876: oGetParam 1
6878: oPushResult
6879: oCall 13457
6881: oPop 1
6883: oEmit 24
6885: oJumpForward 6927
6887: Choice Lookup Table
           1   6846
6890: oGetLocal 2
6892: oPushResult
6893: equal_zero
6894: oPop 1
6896: oChoice 6909
6898: oEmit 7
6900: oGetParam 1
6902: oPushResult
6903: oCall 13457
6905: oPop 1
6907: oJumpForward 6927
6909: Choice Lookup Table
           1   6898
6912: oEmit 13
6914: oGetLocal 2
6916: oPushResult
6917: oEmitInt
6918: oPop 1
6920: oGetParam 1
6922: oPushResult
6923: oCall 13457
6925: oPop 1
6927: oJumpForward 6939
6929: Choice Lookup Table
          24   6835
          22   6796
          25   6785
          21   6785
6938: oEndChoice
6939: oJumpForward 7334
6941: oError 16
6943: oJumpForward 7334
6945: oGetParam 1
6947: oPushResult
6948: oNodeType
6949: oPop 1
6951: oChoice 7097
6953: oEmit 2
6955: oGetParam 1
6957: oPushResult
6958: oCall 13457
6960: oPop 1
6962: oJumpForward 7107
6964: oGetLocal 2
6966: oPushResult
6967: equal_zero
6968: oPop 1
6970: oChoice 6983
6972: oEmit 5
6974: oGetParam 1
6976: oPushResult
6977: oCall 13457
6979: oPop 1
6981: oJumpForward 7001
6983: Choice Lookup Table
           1   6972
6986: oEmit 11
6988: oGetLocal 2
6990: oPushResult
6991: oEmitInt
6992: oPop 1
6994: oGetParam 1
6996: oPushResult
6997: oCall 13457
6999: oPop 1
7001: oJumpForward 7107
7003: oGetParam 1
7005: oPushResult
7006: oSetResult 34
7008: oPushResult
7009: oNodeGetBoolean
7010: oPop 2
7012: oChoice 7055
7014: oGetLocal 2
7016: oPushResult
7017: equal_zero
7018: oPop 1
7020: oChoice 7033
7022: oEmit 8
7024: oGetParam 1
7026: oPushResult
7027: oCall 13457
7029: oPop 1
7031: oJumpForward 7051
7033: Choice Lookup Table
           1   7022
7036: oEmit 14
7038: oGetLocal 2
7040: oPushResult
7041: oEmitInt
7042: oPop 1
7044: oGetParam 1
7046: oPushResult
7047: oCall 13457
7049: oPop 1
7051: oEmit 25
7053: oJumpForward 7095
7055: Choice Lookup Table
           1   7014
7058: oGetLocal 2
7060: oPushResult
7061: equal_zero
7062: oPop 1
7064: oChoice 7077
7066: oEmit 8
7068: oGetParam 1
7070: oPushResult
7071: oCall 13457
7073: oPop 1
7075: oJumpForward 7095
7077: Choice Lookup Table
           1   7066
7080: oEmit 14
7082: oGetLocal 2
7084: oPushResult
7085: oEmitInt
7086: oPop 1
7088: oGetParam 1
7090: oPushResult
7091: oCall 13457
7093: oPop 1
7095: oJumpForward 7107
7097: Choice Lookup Table
          24   7003
          22   6964
          25   6953
          21   6953
7106: oEndChoice
7107: oInputChoice 7137
7109: oTypeSPop
7110: oGetLocal 1
7112: oPushResult
7113: oSetResult 37
7115: oPushResult
7116: oNodeGet
7117: oPop 2
7119: oPushResult
7120: oTypeSPush
7121: oPop 1
7123: oCall 7389
7125: oCall 7335
7127: oJumpForward 7142
7129: oCall 7584
7131: oCall 7389
7133: oCall 7335
7135: oJumpForward 7142
7137: Choice Lookup Table
          16   7129
          18   7109
7142: oJumpForward 7334
7144: oGetParam 1
7146: oPushResult
7147: oNodeType
7148: oPop 1
7150: oChoice 7294
7152: oEmit 16
7154: oGetParam 1
7156: oPushResult
7157: oCall 13457
7159: oPop 1
7161: oJumpForward 7304
7163: oGetLocal 2
7165: oPushResult
7166: equal_zero
7167: oPop 1
7169: oChoice 7182
7171: oEmit 17
7173: oGetParam 1
7175: oPushResult
7176: oCall 13457
7178: oPop 1
7180: oJumpForward 7200
7182: Choice Lookup Table
           1   7171
7185: oEmit 20
7187: oGetLocal 2
7189: oPushResult
7190: oEmitInt
7191: oPop 1
7193: oGetParam 1
7195: oPushResult
7196: oCall 13457
7198: oPop 1
7200: oJumpForward 7304
7202: oGetParam 1
7204: oPushResult
7205: oSetResult 34
7207: oPushResult
7208: oNodeGetBoolean
7209: oPop 2
7211: oChoice 7252
7213: oGetLocal 2
7215: oPushResult
7216: equal_zero
7217: oPop 1
7219: oChoice 7232
7221: oEmit 8
7223: oGetParam 1
7225: oPushResult
7226: oCall 13457
7228: oPop 1
7230: oJumpForward 7250
7232: Choice Lookup Table
           1   7221
7235: oEmit 14
7237: oGetLocal 2
7239: oPushResult
7240: oEmitInt
7241: oPop 1
7243: oGetParam 1
7245: oPushResult
7246: oCall 13457
7248: oPop 1
7250: oJumpForward 7292
7252: Choice Lookup Table
           1   7213
7255: oGetLocal 2
7257: oPushResult
7258: equal_zero
7259: oPop 1
7261: oChoice 7274
7263: oEmit 18
7265: oGetParam 1
7267: oPushResult
7268: oCall 13457
7270: oPop 1
7272: oJumpForward 7292
7274: Choice Lookup Table
           1   7263
7277: oEmit 21
7279: oGetLocal 2
7281: oPushResult
7282: oEmitInt
7283: oPop 1
7285: oGetParam 1
7287: oPushResult
7288: oCall 13457
7290: oPop 1
7292: oJumpForward 7304
7294: Choice Lookup Table
          24   7202
          22   7163
          25   7152
          21   7152
7303: oEndChoice
7304: oCall 7389
7306: oCall 7335
7308: oJumpForward 7334
7310: Choice Lookup Table
          40   7144
          38   7144
          36   7144
          35   6945
          34   6945
          28   6941
          33   6777
          30   6777
          31   6777
          41   6613
          29   6613
7333: oEndChoice
7334: oReturn
7335: oLocalSpace 0
7337: oTypeSNodeType
7338: oChoice 7362
7340: oEmit 23
7342: oJumpForward 7388
7344: oEmit 24
7346: oJumpForward 7388
7348: oError 16
7350: oJumpForward 7388
7352: oEmit 25
7354: oJumpForward 7388
7356: oError 29
7358: oJumpForward 7388
7360: oJumpForward 7388
7362: Choice Lookup Table
          40   7360
          39   7360
          38   7360
          36   7360
          35   7356
          34   7352
          28   7348
          33   7344
          30   7344
          31   7344
          41   7340
          29   7340
7387: oEndChoice
7388: oReturn
7389: oLocalSpace 0
7391: oInputChoice 7429
7393: oTypeSNodeType
7394: oChoice 7408
7396: oCall 7441
7398: oJumpForward 7419
7400: oCall 7584
7402: oJumpForward 7419
7404: oCall 7663
7406: oJumpForward 7419
7408: Choice Lookup Table
          40   7404
          39   7404
          34   7400
          36   7396
7417: oError 10
7419: oJumpForward 7438
7421: oCall 7693
7423: oJumpForward 7438
7425: oCall 7966
7427: oJumpForward 7438
7429: Choice Lookup Table
          18   7425
          20   7421
          16   7393
7436: oJumpForward 7440
7438: oJumpBack 7391
7440: oReturn
7441: oLocalSpace 3
7443: oTypeSNodeType
7444: oChoice 7448
7446: oJumpForward 7453
7448: Choice Lookup Table
          36   7446
7451: oError 10
7453: oTypeSNodeType
7454: oChoice 7458
7456: oJumpForward 7463
7458: Choice Lookup Table
          36   7456
7461: oError 13
7463: oGetAddrLocal 1
7465: oPushResult
7466: oTypeSTop
7467: oPushResult
7468: oSetResult 38
7470: oPushResult
7471: oNodeGet
7472: oPop 2
7474: oPushResult
7475: oCall 12560
7477: oPop 1
7479: oAssign
7480: oGetAddrLocal 2
7482: oPushResult
7483: oTypeSTop
7484: oPushResult
7485: oSetResult 37
7487: oPushResult
7488: oNodeGet
7489: oPop 2
7491: oAssign
7492: oTypeSPop
7493: oGetLocal 2
7495: oPushResult
7496: oTypeSPush
7497: oPop 1
7499: oCall 4787
7501: oCall 8396
7503: oGetLocal 1
7505: oPushResult
7506: equal_zero
7507: oPop 1
7509: oChoice 7523
7511: oEmit 15
7513: oGetLocal 1
7515: oPushResult
7516: oEmitInt
7517: oPop 1
7519: oEmit 40
7521: oJumpForward 7526
7523: Choice Lookup Table
           0   7511
7526: oGetAddrLocal 3
7528: oPushResult
7529: oGetLocal 2
7531: oPushResult
7532: oSetResult 17
7534: oPushResult
7535: oNodeGetInt
7536: oPop 2
7538: oAssign
7539: oGetLocal 3
7541: oPushResult
7542: oSetResult 1
7544: oPushResult
7545: equal
7546: oPop 2
7548: oChoice 7562
7550: oEmit 15
7552: oGetLocal 3
7554: oPushResult
7555: oEmitInt
7556: oPop 1
7558: oEmit 34
7560: oJumpForward 7565
7562: Choice Lookup Table
           0   7550
7565: oEmit 36
7567: oInputChoice 7575
7569: oJumpForward 7583
7571: oJumpForward 7581
7573: oJumpForward 7581
7575: Choice Lookup Table
          13   7573
          17   7569
7580: oEndChoice
7581: oJumpBack 7453
7583: oReturn
7584: oLocalSpace 2
7586: oTypeSNodeType
7587: oChoice 7591
7589: oJumpForward 7596
7591: Choice Lookup Table
          34   7589
7594: oError 29
7596: oGetAddrLocal 1
7598: oPushResult
7599: oTypeSTop
7600: oPushResult
7601: oSetResult 37
7603: oPushResult
7604: oNodeGet
7605: oPop 2
7607: oAssign
7608: oTypeSPop
7609: oGetLocal 1
7611: oPushResult
7612: oTypeSPush
7613: oPop 1
7615: oCall 4787
7617: oCall 8396
7619: oGetAddrLocal 2
7621: oPushResult
7622: oGetLocal 1
7624: oPushResult
7625: oSetResult 17
7627: oPushResult
7628: oNodeGetInt
7629: oPop 2
7631: oAssign
7632: oGetLocal 2
7634: oPushResult
7635: oSetResult 1
7637: oPushResult
7638: equal
7639: oPop 2
7641: oChoice 7655
7643: oEmit 15
7645: oGetLocal 2
7647: oPushResult
7648: oEmitInt
7649: oPop 1
7651: oEmit 34
7653: oJumpForward 7658
7655: Choice Lookup Table
           0   7643
7658: oEmit 36
7660: oInput 17
7662: oReturn
7663: oLocalSpace 0
7665: oTypeSNodeType
7666: oChoice 7670
7668: oJumpForward 7677
7670: Choice Lookup Table
          40   7668
          39   7668
7675: oError 29
7677: oTypeSPop
7678: oGetGlobal 9
7680: oPushResult
7681: oTypeSPush
7682: oPop 1
7684: oCall 4787
7686: oCall 8396
7688: oEmit 36
7690: oInput 17
7692: oReturn
7693: oLocalSpace 2
7695: oTypeSNodeType
7696: oChoice 7700
7698: oJumpForward 7705
7700: Choice Lookup Table
          38   7698
7703: oError 11
7705: oTypeSTop
7706: oPushResult
7707: oSetResult 41
7709: oPushResult
7710: oNodeGet
7711: oPop 2
7713: oPushResult
7714: oScopeEnter
7715: oPop 1
7717: oInput 0
7719: oGetAddrLocal 1
7721: oPushResult
7722: oScopeFindRequire
7723: oAssign
7724: oGetLocal 1
7726: oPushResult
7727: oNodeType
7728: oPop 1
7730: oChoice 7734
7732: oJumpForward 7739
7734: Choice Lookup Table
          23   7732
7737: oError 12
7739: oScopeEnd
7740: oGetAddrLocal 2
7742: oPushResult
7743: oGetLocal 1
7745: oPushResult
7746: oSetResult 22
7748: oPushResult
7749: oNodeGetInt
7750: oPop 2
7752: oAssign
7753: oGetLocal 2
7755: oPushResult
7756: equal_zero
7757: oPop 1
7759: oChoice 7773
7761: oEmit 15
7763: oGetLocal 2
7765: oPushResult
7766: oEmitInt
7767: oPop 1
7769: oEmit 36
7771: oJumpForward 7776
7773: Choice Lookup Table
           0   7761
7776: oTypeSPop
7777: oGetLocal 1
7779: oPushResult
7780: oSetResult 21
7782: oPushResult
7783: oNodeGet
7784: oPop 2
7786: oPushResult
7787: oTypeSPush
7788: oPop 1
7790: oReturn
7791: oLocalSpace 2
7793: oGetAddrLocal 1
7795: oPushResult
7796: oTypeSTop
7797: oPushResult
7798: oSetResult 37
7800: oPushResult
7801: oNodeGet
7802: oPop 2
7804: oAssign
7805: oGetAddrLocal 2
7807: oPushResult
7808: oGetLocal 1
7810: oPushResult
7811: oSetResult 17
7813: oPushResult
7814: oNodeGetInt
7815: oPop 2
7817: oAssign
7818: oGetLocal 2
7820: oPushResult
7821: oSetResult 1
7823: oPushResult
7824: equal
7825: oPop 2
7827: oChoice 7841
7829: oEmit 15
7831: oGetLocal 2
7833: oPushResult
7834: oEmitInt
7835: oPop 1
7837: oEmit 34
7839: oJumpForward 7844
7841: Choice Lookup Table
           0   7829
7844: oEmit 36
7846: oReturn
7847: oLocalSpace 2
7849: oGetAddrLocal 1
7851: oPushResult
7852: oTypeSTop
7853: oPushResult
7854: oSetResult 37
7856: oPushResult
7857: oNodeGet
7858: oPop 2
7860: oAssign
7861: oGetAddrLocal 2
7863: oPushResult
7864: oGetLocal 1
7866: oPushResult
7867: oSetResult 17
7869: oPushResult
7870: oNodeGetInt
7871: oPop 2
7873: oAssign
7874: oGetLocal 2
7876: oPushResult
7877: oSetResult 1
7879: oPushResult
7880: equal
7881: oPop 2
7883: oChoice 7897
7885: oEmit 15
7887: oGetLocal 2
7889: oPushResult
7890: oEmitInt
7891: oPop 1
7893: oEmit 34
7895: oJumpForward 7900
7897: Choice Lookup Table
           0   7885
7900: oEmit 39
7902: oReturn
7903: oLocalSpace 2
7905: oEmit 38
7907: oGetAddrLocal 1
7909: oPushResult
7910: oTypeSTop
7911: oPushResult
7912: oSetResult 37
7914: oPushResult
7915: oNodeGet
7916: oPop 2
7918: oAssign
7919: oGetAddrLocal 2
7921: oPushResult
7922: oGetLocal 1
7924: oPushResult
7925: oSetResult 17
7927: oPushResult
7928: oNodeGetInt
7929: oPop 2
7931: oAssign
7932: oGetLocal 2
7934: oPushResult
7935: oSetResult 1
7937: oPushResult
7938: equal
7939: oPop 2
7941: oChoice 7955
7943: oEmit 15
7945: oGetLocal 2
7947: oPushResult
7948: oEmitInt
7949: oPop 1
7951: oEmit 35
7953: oJumpForward 7958
7955: Choice Lookup Table
           0   7943
7958: oTypeSPop
7959: oGetGlobal 6
7961: oPushResult
7962: oTypeSPush
7963: oPop 1
7965: oReturn
7966: oLocalSpace 1
7968: oTypeSNodeType
7969: oChoice 7977
7971: oJumpForward 7984
7973: oError 29
7975: oJumpForward 7984
7977: Choice Lookup Table
          35   7973
          34   7971
7982: oError 9
7984: oEmit 25
7986: oGetAddrLocal 1
7988: oPushResult
7989: oTypeSTop
7990: oAssign
7991: oTypeSPop
7992: oGetLocal 1
7994: oPushResult
7995: oSetResult 37
7997: oPushResult
7998: oNodeGet
7999: oPop 2
8001: oPushResult
8002: oTypeSPush
8003: oPop 1
8005: oReturn
8006: oLocalSpace 2
8008: oGetAddrLocal 1
8010: oPushResult
8011: oTypeSNodeType
8012: oAssign
8013: oTypeSPop
8014: oGetLocal 1
8016: oPushResult
8017: oTypeSNodeType
8018: oPushResult
8019: equal_node_type
8020: oPop 2
8022: oChoice 8154
8024: oTypeSNodeType
8025: oChoice 8139
8027: oGetLocal 1
8029: oChoice 8036
8031: oEmit 30
8033: oReturn
8034: oJumpForward 8039
8036: Choice Lookup Table
          30   8031
8039: oJumpForward 8150
8041: oGetLocal 1
8043: oChoice 8050
8045: oEmit 31
8047: oReturn
8048: oJumpForward 8053
8050: Choice Lookup Table
          29   8045
8053: oJumpForward 8150
8055: oGetLocal 1
8057: oChoice 8090
8059: oReturn
8060: oJumpForward 8095
8062: oTypeSTop
8063: oPushResult
8064: oGetGlobal 10
8066: oPushResult
8067: equal_node
8068: oPop 2
8070: oChoice 8085
8072: oEmit 15
8074: oSetResult 1
8076: oPushResult
8077: oEmitInt
8078: oPop 1
8080: oEmit 36
8082: oReturn
8083: oJumpForward 8088
8085: Choice Lookup Table
           1   8072
8088: oJumpForward 8095
8090: Choice Lookup Table
          39   8062
          35   8059
8095: oJumpForward 8150
8097: oGetLocal 1
8099: oChoice 8104
8101: oReturn
8102: oJumpForward 8107
8104: Choice Lookup Table
          34   8101
8107: oJumpForward 8150
8109: oGetLocal 1
8111: oChoice 8132
8113: oReturn
8114: oJumpForward 8137
8116: oGetGlobal 9
8118: oPushResult
8119: oTypeSPush
8120: oPop 1
8122: oGetAddrLocal 2
8124: oPushResult
8125: oCall 10180
8127: oAssign
8128: oTypeSPop
8129: oReturn
8130: oJumpForward 8137
8132: Choice Lookup Table
          33   8116
          39   8113
8137: oJumpForward 8150
8139: Choice Lookup Table
          40   8109
          35   8097
          34   8055
          30   8041
          29   8027
8150: oError 14
8152: oJumpForward 8157
8154: Choice Lookup Table
           0   8024
8157: oReturn
8158: oLocalSpace 2
8160: oGetAddrLocal 1
8162: oPushResult
8163: oTypeSNodeType
8164: oAssign
8165: oTypeSPop
8166: oGetLocal 1
8168: oPushResult
8169: oTypeSNodeType
8170: oPushResult
8171: equal_node_type
8172: oPop 2
8174: oChoice 8334
8176: oTypeSNodeType
8177: oChoice 8313
8179: oGetLocal 1
8181: oChoice 8191
8183: oEmit 30
8185: oReturn
8186: oJumpForward 8202
8188: oReturn
8189: oJumpForward 8202
8191: Choice Lookup Table
          41   8188
          29   8188
          31   8183
          33   8183
          30   8183
8202: oJumpForward 8330
8204: oGetLocal 1
8206: oChoice 8216
8208: oReturn
8209: oJumpForward 8227
8211: oEmit 31
8213: oReturn
8214: oJumpForward 8227
8216: Choice Lookup Table
          41   8211
          29   8211
          31   8208
          33   8208
          30   8208
8227: oJumpForward 8330
8229: oGetLocal 1
8231: oChoice 8264
8233: oReturn
8234: oJumpForward 8269
8236: oTypeSTop
8237: oPushResult
8238: oGetGlobal 10
8240: oPushResult
8241: equal_node
8242: oPop 2
8244: oChoice 8259
8246: oEmit 15
8248: oSetResult 1
8250: oPushResult
8251: oEmitInt
8252: oPop 1
8254: oEmit 36
8256: oReturn
8257: oJumpForward 8262
8259: Choice Lookup Table
           1   8246
8262: oJumpForward 8269
8264: Choice Lookup Table
          39   8236
          35   8233
8269: oJumpForward 8330
8271: oGetLocal 1
8273: oChoice 8278
8275: oReturn
8276: oJumpForward 8281
8278: Choice Lookup Table
          34   8275
8281: oJumpForward 8330
8283: oGetLocal 1
8285: oChoice 8306
8287: oReturn
8288: oJumpForward 8311
8290: oGetGlobal 9
8292: oPushResult
8293: oTypeSPush
8294: oPop 1
8296: oGetAddrLocal 2
8298: oPushResult
8299: oCall 10180
8301: oAssign
8302: oTypeSPop
8303: oReturn
8304: oJumpForward 8311
8306: Choice Lookup Table
          33   8290
          39   8287
8311: oJumpForward 8330
8313: Choice Lookup Table
          40   8283
          35   8271
          34   8229
          31   8204
          33   8204
          30   8204
          41   8179
          29   8179
8330: oError 14
8332: oJumpForward 8337
8334: Choice Lookup Table
           0   8176
8337: oReturn
8338: oLocalSpace 1
8340: oGetAddrLocal 1
8342: oPushResult
8343: oTypeSNodeType
8344: oAssign
8345: oTypeSPop
8346: oGetLocal 1
8348: oPushResult
8349: oTypeSNodeType
8350: oPushResult
8351: equal_node_type
8352: oPop 2
8354: oChoice 8392
8356: oTypeSNodeType
8357: oChoice 8383
8359: oGetLocal 1
8361: oChoice 8366
8363: oReturn
8364: oJumpForward 8369
8366: Choice Lookup Table
          35   8363
8369: oJumpForward 8388
8371: oGetLocal 1
8373: oChoice 8378
8375: oReturn
8376: oJumpForward 8381
8378: Choice Lookup Table
          34   8375
8381: oJumpForward 8388
8383: Choice Lookup Table
          35   8371
          34   8359
8388: oError 14
8390: oJumpForward 8395
8392: Choice Lookup Table
           0   8356
8395: oReturn
8396: oLocalSpace 0
8398: oTypeSNodeType
8399: oChoice 8403
8401: oJumpForward 8408
8403: Choice Lookup Table
          29   8401
8406: oError 7
8408: oTypeSPop
8409: oReturn
8410: oLocalSpace 0
8412: oTypeSNodeType
8413: oChoice 8417
8415: oJumpForward 8422
8417: Choice Lookup Table
          29   8415
8420: oError 7
8422: oReturn
8423: oLocalSpace 0
8425: oTypeSNodeType
8426: oChoice 8434
8428: oJumpForward 8441
8430: oEmit 30
8432: oJumpForward 8441
8434: Choice Lookup Table
          30   8430
          29   8428
8439: oError 7
8441: oTypeSPop
8442: oReturn
8443: oLocalSpace 0
8445: oTypeSNodeType
8446: oChoice 8461
8448: oJumpForward 8468
8450: oEmit 30
8452: oTypeSPop
8453: oGetGlobal 6
8455: oPushResult
8456: oTypeSPush
8457: oPop 1
8459: oJumpForward 8468
8461: Choice Lookup Table
          30   8450
          29   8448
8466: oError 7
8468: oReturn
8469: oLocalSpace 0
8471: oTypeSNodeType
8472: oChoice 8485
8474: oEmit 30
8476: oTypeSPop
8477: oGetGlobal 6
8479: oPushResult
8480: oTypeSPush
8481: oPop 1
8483: oJumpForward 8488
8485: Choice Lookup Table
          30   8474
8488: oReturn
8489: oLocalSpace 0
8491: oTypeSNodeType
8492: oChoice 8496
8494: oJumpForward 8501
8496: Choice Lookup Table
          31   8494
8499: oError 8
8501: oTypeSPop
8502: oReturn
8503: oLocalSpace 0
8505: oTypeSNodeType
8506: oChoice 8510
8508: oJumpForward 8515
8510: Choice Lookup Table
          31   8508
8513: oError 8
8515: oReturn
8516: oLocalSpace 0
8518: oInputChoice 8581
8520: oCall 10043
8522: oJumpForward 8612
8524: oCall 10050
8526: oJumpForward 8612
8528: oCall 10174
8530: oJumpForward 8612
8532: oCall 10177
8534: oJumpForward 8612
8536: oCall 9194
8538: oJumpForward 8612
8540: oCall 9517
8542: oJumpForward 8612
8544: oCall 9260
8546: oJumpForward 8612
8548: oCall 9437
8550: oJumpForward 8612
8552: oCall 9602
8554: oJumpForward 8612
8556: oCall 9570
8558: oJumpForward 8612
8560: oCall 10020
8562: oJumpForward 8612
8564: oCall 8613
8566: oJumpForward 8612
8568: oCall 9634
8570: oJumpForward 8612
8572: oCall 9968
8574: oJumpForward 8612
8576: oChangeIntLitToLabelIdent
8577: oCall 8613
8579: oJumpForward 8612
8581: Choice Lookup Table
           1   8576
          55   8572
          53   8568
           0   8564
          35   8560
          51   8556
          52   8552
          49   8548
          44   8544
          48   8540
          41   8536
          68   8532
          67   8528
          66   8524
          65   8520
8612: oReturn
8613: oLocalSpace 1
8615: oGetAddrLocal 1
8617: oPushResult
8618: oScopeFindRequire
8619: oAssign
8620: oGetAddrLocal 1
8622: oPushResult
8623: oCall 244
8625: oPop 1
8627: oGetLocal 1
8629: oPushResult
8630: oNodeType
8631: oPop 1
8633: oChoice 8673
8635: oGetLocal 1
8637: oPushResult
8638: oCall 8689
8640: oPop 1
8642: oCall 8516
8644: oJumpForward 8688
8646: oGetLocal 1
8648: oPushResult
8649: oCall 10492
8651: oPop 1
8653: oJumpForward 8688
8655: oGetLocal 1
8657: oPushResult
8658: oCall 8739
8660: oPop 1
8662: oJumpForward 8688
8664: oGetLocal 1
8666: oPushResult
8667: oCall 8829
8669: oPop 1
8671: oJumpForward 8688
8673: Choice Lookup Table
          13   8664
          24   8655
          22   8655
          21   8655
          12   8646
          26   8635
8686: oError 0
8688: oReturn
8689: oLocalSpace 0
8691: oGetParam 1
8693: oPushResult
8694: oSetResult 35
8696: oPushResult
8697: oNodeGetBoolean
8698: oPop 2
8700: oChoice 8706
8702: oError 21
8704: oJumpForward 8709
8706: Choice Lookup Table
           1   8702
8709: oEmit 77
8711: oGetParam 1
8713: oPushResult
8714: oSetResult 22
8716: oPushResult
8717: oNodeGetLabel
8718: oPop 2
8720: oPushResult
8721: oEmitLabel
8722: oPop 1
8724: oGetParam 1
8726: oPushResult
8727: oSetResult 35
8729: oPushResult
8730: oSetResult 1
8732: oPushResult
8733: oNodeSetBoolean
8734: oPop 3
8736: oInput 12
8738: oReturn
8739: oLocalSpace 0
8741: oGetParam 1
8743: oPushResult
8744: oSetResult 1
8746: oPushResult
8747: oCall 9004
8749: oPop 2
8751: oInput 4
8753: oCall 4787
8755: oCall 8006
8757: oCall 8760
8759: oReturn
8760: oLocalSpace 1
8762: oTypeSNodeType
8763: oChoice 8803
8765: oEmit 26
8767: oJumpForward 8827
8769: oEmit 27
8771: oJumpForward 8827
8773: oError 16
8775: oJumpForward 8827
8777: oEmit 28
8779: oJumpForward 8827
8781: oGetAddrLocal 1
8783: oPushResult
8784: oTypeSTop
8785: oPushResult
8786: oSetResult 17
8788: oPushResult
8789: oNodeGetInt
8790: oPop 2
8792: oAssign
8793: oEmit 29
8795: oGetLocal 1
8797: oPushResult
8798: oEmitInt
8799: oPop 1
8801: oJumpForward 8827
8803: Choice Lookup Table
          40   8781
          38   8781
          36   8781
          35   8777
          34   8777
          28   8773
          33   8769
          30   8769
          31   8769
          41   8765
          29   8765
8826: oEndChoice
8827: oTypeSPop
8828: oReturn
8829: oLocalSpace 1
8831: oGetParam 1
8833: oPushResult
8834: oSetResult 6
8836: oPushResult
8837: oNodeGet
8838: oPop 2
8840: oPushResult
8841: oScopeCurrent
8842: oPushResult
8843: oNodeEqual
8844: oPop 2
8846: oChoice 8852
8848: oError 20
8850: oJumpForward 8855
8852: Choice Lookup Table
           0   8848
8855: oEmit 8
8857: oGetParam 1
8859: oPushResult
8860: oSetResult 31
8862: oPushResult
8863: oNodeGetInt
8864: oPop 2
8866: oPushResult
8867: oEmitInt
8868: oPop 1
8870: oGetParam 1
8872: oPushResult
8873: oSetResult 21
8875: oPushResult
8876: oNodeGet
8877: oPop 2
8879: oPushResult
8880: oTypeSPush
8881: oPop 1
8883: oInput 4
8885: oCall 4787
8887: oCall 8006
8889: oTypeSNodeType
8890: oChoice 8930
8892: oEmit 26
8894: oJumpForward 8954
8896: oEmit 27
8898: oJumpForward 8954
8900: oError 16
8902: oJumpForward 8954
8904: oEmit 28
8906: oJumpForward 8954
8908: oGetAddrLocal 1
8910: oPushResult
8911: oTypeSTop
8912: oPushResult
8913: oSetResult 17
8915: oPushResult
8916: oNodeGetInt
8917: oPop 2
8919: oAssign
8920: oEmit 29
8922: oGetLocal 1
8924: oPushResult
8925: oEmitInt
8926: oPop 1
8928: oJumpForward 8954
8930: Choice Lookup Table
          40   8908
          38   8908
          36   8908
          35   8904
          34   8904
          28   8900
          33   8896
          30   8896
          31   8896
          41   8892
          29   8892
8953: oEndChoice
8954: oTypeSPop
8955: oReturn
8956: oLocalSpace 1
8958: oInput 0
8960: oGetAddrLocal 1
8962: oPushResult
8963: oScopeFindRequire
8964: oAssign
8965: oGetAddrLocal 1
8967: oPushResult
8968: oCall 244
8970: oPop 1
8972: oGetLocal 1
8974: oPushResult
8975: oNodeType
8976: oPop 1
8978: oChoice 8982
8980: oJumpForward 8993
8982: Choice Lookup Table
          25   8980
          24   8980
          22   8980
          21   8980
8991: oError 4
8993: oGetLocal 1
8995: oPushResult
8996: oGetParam 1
8998: oPushResult
8999: oCall 9004
9001: oPop 2
9003: oReturn
9004: oLocalSpace 0
9006: oGetParam 2
9008: oPushResult
9009: oNodeType
9010: oPop 1
9012: oChoice 9094
9014: oEmit 16
9016: oGetParam 2
9018: oPushResult
9019: oCall 13457
9021: oPop 1
9023: oJumpForward 9105
9025: oEmit 17
9027: oGetParam 2
9029: oPushResult
9030: oCall 13457
9032: oPop 1
9034: oJumpForward 9105
9036: oGetParam 2
9038: oPushResult
9039: oSetResult 34
9041: oPushResult
9042: oNodeGetBoolean
9043: oPop 2
9045: oChoice 9058
9047: oEmit 8
9049: oGetParam 2
9051: oPushResult
9052: oCall 13457
9054: oPop 1
9056: oJumpForward 9070
9058: Choice Lookup Table
           1   9047
9061: oEmit 18
9063: oGetParam 2
9065: oPushResult
9066: oCall 13457
9068: oPop 1
9070: oJumpForward 9105
9072: oGetParam 1
9074: oChoice 9087
9076: oEmit 16
9078: oGetParam 2
9080: oPushResult
9081: oCall 13457
9083: oPop 1
9085: oJumpForward 9092
9087: Choice Lookup Table
           0   9076
9090: oError 4
9092: oJumpForward 9105
9094: Choice Lookup Table
          25   9072
          24   9036
          22   9025
          21   9014
9103: oError 4
9105: oGetParam 2
9107: oPushResult
9108: oSetResult 21
9110: oPushResult
9111: oNodeGet
9112: oPop 2
9114: oPushResult
9115: oTypeSPush
9116: oPop 1
9118: oTypeSNodeType
9119: oChoice 9134
9121: oInputChoice 9129
9123: oEmit 25
9125: oCall 7584
9127: oJumpForward 9132
9129: Choice Lookup Table
          16   9123
9132: oJumpForward 9137
9134: Choice Lookup Table
          34   9121
9137: oCall 7389
9139: oReturn
9140: oLocalSpace 0
9142: oGetParam 1
9144: oPushResult
9145: oSetResult 1
9147: oPushResult
9148: oCall 9004
9150: oPop 2
9152: oCall 8396
9154: oGetParam 1
9156: oPushResult
9157: oCall 6578
9159: oPop 1
9161: oTypeSPop
9162: oEmit 32
9164: oEmit 26
9166: oReturn
9167: oLocalSpace 0
9169: oGetParam 1
9171: oPushResult
9172: oSetResult 1
9174: oPushResult
9175: oCall 9004
9177: oPop 2
9179: oCall 8396
9181: oGetParam 1
9183: oPushResult
9184: oCall 6578
9186: oPop 1
9188: oTypeSPop
9189: oEmit 33
9191: oEmit 26
9193: oReturn
9194: oLocalSpace 2
9196: oGetAddrLocal 1
9198: oPushResult
9199: oSetResult 0
9201: oAssign
9202: oGetAddrLocal 1
9204: oPushResult
9205: oCall 4810
9207: oPop 1
9209: oInput 42
9211: oCall 8516
9213: oInputChoice 9248
9215: oGetAddrLocal 2
9217: oPushResult
9218: oLabelNew
9219: oAssign
9220: oEmit 68
9222: oGetLocal 2
9224: oPushResult
9225: oEmitLabel
9226: oPop 1
9228: oEmit 77
9230: oGetLocal 1
9232: oPushResult
9233: oEmitLabel
9234: oPop 1
9236: oCall 8516
9238: oEmit 77
9240: oGetLocal 2
9242: oPushResult
9243: oEmitLabel
9244: oPop 1
9246: oJumpForward 9259
9248: Choice Lookup Table
          43   9215
9251: oEmit 77
9253: oGetLocal 1
9255: oPushResult
9256: oEmitLabel
9257: oPop 1
9259: oReturn
9260: oLocalSpace 4
9262: oInput 0
9264: oGetAddrLocal 1
9266: oPushResult
9267: oScopeFindRequire
9268: oAssign
9269: oGetLocal 1
9271: oPushResult
9272: oSetResult 1
9274: oPushResult
9275: oCall 9004
9277: oPop 2
9279: oCall 8396
9281: oInput 4
9283: oCall 4787
9285: oCall 8396
9287: oEmit 26
9289: oGetAddrLocal 2
9291: oPushResult
9292: oLabelNew
9293: oAssign
9294: oGetAddrLocal 3
9296: oPushResult
9297: oLabelNew
9298: oAssign
9299: oEmit 68
9301: oGetLocal 3
9303: oPushResult
9304: oEmitLabel
9305: oPop 1
9307: oGetAddrLocal 4
9309: oPushResult
9310: oLabelNew
9311: oAssign
9312: oEmit 77
9314: oGetLocal 4
9316: oPushResult
9317: oEmitLabel
9318: oPop 1
9320: oInputChoice 9400
9322: oGetLocal 1
9324: oPushResult
9325: oCall 9140
9327: oPop 1
9329: oEmit 77
9331: oGetLocal 3
9333: oPushResult
9334: oEmitLabel
9335: oPop 1
9337: oGetLocal 1
9339: oPushResult
9340: oCall 6578
9342: oPop 1
9344: oTypeSPop
9345: oCall 4787
9347: oCall 8396
9349: oEmit 51
9351: oEmit 69
9353: oGetLocal 2
9355: oPushResult
9356: oEmitLabel
9357: oPop 1
9359: oJumpForward 9406
9361: oGetLocal 1
9363: oPushResult
9364: oCall 9167
9366: oPop 1
9368: oEmit 77
9370: oGetLocal 3
9372: oPushResult
9373: oEmitLabel
9374: oPop 1
9376: oGetLocal 1
9378: oPushResult
9379: oCall 6578
9381: oPop 1
9383: oTypeSPop
9384: oCall 4787
9386: oCall 8396
9388: oEmit 52
9390: oEmit 69
9392: oGetLocal 2
9394: oPushResult
9395: oEmitLabel
9396: oPop 1
9398: oJumpForward 9406
9400: Choice Lookup Table
          46   9361
          45   9322
9405: oEndChoice
9406: oGetLocal 4
9408: oPushResult
9409: oGetLocal 2
9411: oPushResult
9412: oLoopPush
9413: oPop 2
9415: oInput 47
9417: oCall 8516
9419: oEmit 68
9421: oGetLocal 4
9423: oPushResult
9424: oEmitLabel
9425: oPop 1
9427: oEmit 77
9429: oGetLocal 2
9431: oPushResult
9432: oEmitLabel
9433: oPop 1
9435: oLoopPop
9436: oReturn
9437: oLocalSpace 3
9439: oGetAddrLocal 1
9441: oPushResult
9442: oLabelNew
9443: oAssign
9444: oEmit 77
9446: oGetLocal 1
9448: oPushResult
9449: oEmitLabel
9450: oPop 1
9452: oGetAddrLocal 2
9454: oPushResult
9455: oLabelNew
9456: oAssign
9457: oGetLocal 1
9459: oPushResult
9460: oGetLocal 2
9462: oPushResult
9463: oLoopPush
9464: oPop 2
9466: oCall 8516
9468: oInputChoice 9499
9470: oCall 8516
9472: oJumpForward 9505
9474: oGetAddrLocal 3
9476: oPushResult
9477: oCall 4810
9479: oPop 1
9481: oEmit 78
9483: oGetLocal 3
9485: oPushResult
9486: oEmitLabel
9487: oPop 1
9489: oGetLocal 1
9491: oPushResult
9492: oEmitLabel
9493: oPop 1
9495: oJumpForward 9507
9497: oJumpForward 9505
9499: Choice Lookup Table
          50   9474
           5   9470
9504: oEndChoice
9505: oJumpBack 9468
9507: oEmit 77
9509: oGetLocal 2
9511: oPushResult
9512: oEmitLabel
9513: oPop 1
9515: oLoopPop
9516: oReturn
9517: oLocalSpace 2
9519: oGetAddrLocal 1
9521: oPushResult
9522: oLabelNew
9523: oAssign
9524: oEmit 77
9526: oGetLocal 1
9528: oPushResult
9529: oEmitLabel
9530: oPop 1
9532: oGetAddrLocal 2
9534: oPushResult
9535: oCall 4810
9537: oPop 1
9539: oGetLocal 1
9541: oPushResult
9542: oGetLocal 2
9544: oPushResult
9545: oLoopPush
9546: oPop 2
9548: oInput 47
9550: oCall 8516
9552: oEmit 68
9554: oGetLocal 1
9556: oPushResult
9557: oEmitLabel
9558: oPop 1
9560: oEmit 77
9562: oGetLocal 2
9564: oPushResult
9565: oEmitLabel
9566: oPop 1
9568: oLoopPop
9569: oReturn
9570: oLocalSpace 0
9572: oLoopContinueLabel
9573: oPushResult
9574: oSetResult 0
9576: oPushResult
9577: equal_label
9578: oPop 2
9580: oChoice 9595
9582: oError 18
9584: oJumpForward 9601
9586: oEmit 68
9588: oLoopContinueLabel
9589: oPushResult
9590: oEmitLabel
9591: oPop 1
9593: oJumpForward 9601
9595: Choice Lookup Table
           0   9586
           1   9582
9600: oEndChoice
9601: oReturn
9602: oLocalSpace 0
9604: oLoopBreakLabel
9605: oPushResult
9606: oSetResult 0
9608: oPushResult
9609: equal_label
9610: oPop 2
9612: oChoice 9627
9614: oError 18
9616: oJumpForward 9633
9618: oEmit 68
9620: oLoopBreakLabel
9621: oPushResult
9622: oEmitLabel
9623: oPop 1
9625: oJumpForward 9633
9627: Choice Lookup Table
           0   9618
           1   9614
9632: oEndChoice
9633: oReturn
9634: oLocalSpace 8
9636: oGetAddrLocal 1
9638: oPushResult
9639: oCodeNew
9640: oAssign
9641: oGetAddrLocal 2
9643: oPushResult
9644: oLabelNew
9645: oAssign
9646: oGetAddrLocal 3
9648: oPushResult
9649: oLabelNew
9650: oAssign
9651: oGetAddrLocal 4
9653: oPushResult
9654: oGetLocal 3
9656: oAssign
9657: oGetAddrLocal 5
9659: oPushResult
9660: oSetResult 0
9662: oAssign
9663: oCall 4787
9665: oTypeSNodeType
9666: oChoice 9704
9668: oEmit 71
9670: oGetLocal 2
9672: oPushResult
9673: oEmitLabel
9674: oPop 1
9676: oJumpForward 9721
9678: oEmit 72
9680: oGetLocal 2
9682: oPushResult
9683: oEmitLabel
9684: oPop 1
9686: oJumpForward 9721
9688: oGetAddrLocal 5
9690: oPushResult
9691: oSetResult 1
9693: oAssign
9694: oEmit 73
9696: oGetLocal 2
9698: oPushResult
9699: oEmitLabel
9700: oPop 1
9702: oJumpForward 9721
9704: Choice Lookup Table
          39   9688
          40   9688
          41   9678
          29   9678
          33   9668
          30   9668
          31   9668
9719: oError 17
9721: oInput 40
9723: oInputChoice 9770
9725: oGetAddrLocal 4
9727: oPushResult
9728: oLabelNew
9729: oAssign
9730: oEmit 77
9732: oGetLocal 4
9734: oPushResult
9735: oEmitLabel
9736: oPop 1
9738: oInputChoice 9744
9740: oJumpForward 9762
9742: oJumpForward 9760
9744: Choice Lookup Table
          36   9740
9747: oCall 8516
9749: oInputChoice 9753
9751: oJumpForward 9760
9753: Choice Lookup Table
           5   9751
9756: oInput 36
9758: oJumpForward 9762
9760: oJumpBack 9738
9762: oJumpForward 9936
9764: oJumpForward 9934
9766: oJumpForward 9936
9768: oJumpForward 9934
9770: Choice Lookup Table
          36   9766
          43   9725
          54   9725
9777: oGetAddrLocal 6
9779: oPushResult
9780: oLabelNew
9781: oAssign
9782: oGetLocal 1
9784: oPushResult
9785: oCodePush
9786: oPop 1
9788: oCall 3533
9790: oCall 4300
9792: oGetLocal 5
9794: oChoice 9814
9796: oGetAddrLocal 7
9798: oPushResult
9799: oValueTopString
9800: oPushResult
9801: oStringAllocShortStringLit
9802: oPop 1
9804: oAssign
9805: oJumpForward 9820
9807: oGetAddrLocal 7
9809: oPushResult
9810: oValueTop
9811: oAssign
9812: oJumpForward 9820
9814: Choice Lookup Table
           0   9807
           1   9796
9819: oEndChoice
9820: oValuePop
9821: oInputChoice 9878
9823: oCall 3533
9825: oCall 4300
9827: oGetLocal 5
9829: oChoice 9849
9831: oGetAddrLocal 8
9833: oPushResult
9834: oValueTopString
9835: oPushResult
9836: oStringAllocShortStringLit
9837: oPop 1
9839: oAssign
9840: oJumpForward 9855
9842: oGetAddrLocal 8
9844: oPushResult
9845: oValueTop
9846: oAssign
9847: oJumpForward 9855
9849: Choice Lookup Table
           0   9842
           1   9831
9854: oEndChoice
9855: oValuePop
9856: oEmit 75
9858: oGetLocal 7
9860: oPushResult
9861: oEmitInt
9862: oPop 1
9864: oGetLocal 8
9866: oPushResult
9867: oEmitInt
9868: oPop 1
9870: oGetLocal 6
9872: oPushResult
9873: oEmitLabel
9874: oPop 1
9876: oJumpForward 9895
9878: Choice Lookup Table
          21   9823
9881: oEmit 74
9883: oGetLocal 7
9885: oPushResult
9886: oEmitInt
9887: oPop 1
9889: oGetLocal 6
9891: oPushResult
9892: oEmitLabel
9893: oPop 1
9895: oInputChoice 9899
9897: oJumpForward 9904
9899: Choice Lookup Table
          13   9897
9902: oJumpForward 9906
9904: oJumpBack 9788
9906: oCodePop
9907: oInput 12
9909: oEmit 77
9911: oGetLocal 6
9913: oPushResult
9914: oEmitLabel
9915: oPop 1
9917: oCall 8516
9919: oEmit 68
9921: oGetLocal 3
9923: oPushResult
9924: oEmitLabel
9925: oPop 1
9927: oInputChoice 9931
9929: oJumpForward 9934
9931: Choice Lookup Table
           5   9929
9934: oJumpBack 9723
9936: oEmit 77
9938: oGetLocal 2
9940: oPushResult
9941: oEmitLabel
9942: oPop 1
9944: oGetLocal 1
9946: oPushResult
9947: oEmitCode
9948: oPop 1
9950: oEmit 76
9952: oGetLocal 4
9954: oPushResult
9955: oEmitLabel
9956: oPop 1
9958: oEmit 77
9960: oGetLocal 3
9962: oPushResult
9963: oEmitLabel
9964: oPop 1
9966: oTypeSPop
9967: oReturn
9968: oLocalSpace 1
9970: oInputChoice 9977
9972: oJumpForward 9983
9974: oChangeIntLitToLabelIdent
9975: oJumpForward 9983
9977: Choice Lookup Table
           1   9974
           0   9972
9982: oEndChoice
9983: oGetAddrLocal 1
9985: oPushResult
9986: oScopeCurrent
9987: oPushResult
9988: oScopeFindRequireInScope
9989: oPop 1
9991: oAssign
9992: oGetLocal 1
9994: oPushResult
9995: oSetResult 28
9997: oPushResult
9998: oSetResult 1
10000: oPushResult
10001: oNodeSetBoolean
10002: oPop 3
10004: oEmit 68
10006: oGetLocal 1
10008: oPushResult
10009: oSetResult 22
10011: oPushResult
10012: oNodeGetLabel
10013: oPop 2
10015: oPushResult
10016: oEmitLabel
10017: oPop 1
10019: oReturn
10020: oLocalSpace 0
10022: oCall 8516
10024: oInputChoice 10034
10026: oCall 8516
10028: oJumpForward 10040
10030: oJumpForward 10042
10032: oJumpForward 10040
10034: Choice Lookup Table
          36   10030
           5   10026
10039: oEndChoice
10040: oJumpBack 10024
10042: oReturn
10043: oLocalSpace 0
10045: oCall 10050
10047: oEmit 87
10049: oReturn
10050: oLocalSpace 0
10052: oInputChoice 10170
10054: oCall 4787
10056: oTypeSNodeType
10057: oChoice 10128
10059: oEmit 80
10061: oJumpForward 10151
10063: oEmit 81
10065: oJumpForward 10151
10067: oEmit 30
10069: oEmit 80
10071: oJumpForward 10151
10073: oEmit 82
10075: oJumpForward 10151
10077: oEmit 83
10079: oJumpForward 10151
10081: oError 16
10083: oJumpForward 10151
10085: oEmit 16
10087: oTypeSTop
10088: oPushResult
10089: oSetResult 43
10091: oPushResult
10092: oNodeGetInt
10093: oPop 2
10095: oPushResult
10096: oEmitInt
10097: oPop 1
10099: oEmit 86
10101: oJumpForward 10151
10103: oTypeSTop
10104: oPushResult
10105: oGetGlobal 10
10107: oPushResult
10108: equal_node
10109: oPop 2
10111: oChoice 10117
10113: oEmit 84
10115: oJumpForward 10122
10117: Choice Lookup Table
           1   10113
10120: oEmit 85
10122: oJumpForward 10151
10124: oEmit 85
10126: oJumpForward 10151
10128: Choice Lookup Table
          35   10124
          34   10103
          41   10085
          28   10081
          39   10077
          40   10077
          33   10073
          30   10067
          31   10063
          29   10059
10149: oError 17
10151: oTypeSPop
10152: oInputChoice 10160
10154: oJumpForward 10168
10156: oJumpForward 10166
10158: oJumpForward 10166
10160: Choice Lookup Table
          13   10158
          15   10154
10165: oEndChoice
10166: oJumpBack 10054
10168: oJumpForward 10173
10170: Choice Lookup Table
          14   10054
10173: oReturn
10174: oLocalSpace 0
10176: oReturn
10177: oLocalSpace 0
10179: oReturn
10180: oLocalSpace 1
10182: oGetAddrLocal 1
10184: oPushResult
10185: oGetGlobal 14
10187: oPushResult
10188: oScopeAllocType
10189: oPop 1
10191: oAssign
10192: oTypeSNodeType
10193: oChoice 10261
10195: oEmit 17
10197: oGetLocal 1
10199: oPushResult
10200: oEmitInt
10201: oPop 1
10203: oEmit 22
10205: oEmit 29
10207: oGetGlobal 14
10209: oPushResult
10210: oSetResult 17
10212: oPushResult
10213: oNodeGetInt
10214: oPop 2
10216: oPushResult
10217: oEmitInt
10218: oPop 1
10220: oJumpForward 10270
10222: oEmit 17
10224: oGetLocal 1
10226: oPushResult
10227: oEmitInt
10228: oPop 1
10230: oEmit 15
10232: oSetResult 1
10234: oPushResult
10235: oEmitInt
10236: oPop 1
10238: oEmit 27
10240: oEmit 17
10242: oGetLocal 1
10244: oPushResult
10245: oSetResult 1
10247: oPushResult
10248: add
10249: oPop 2
10251: oPushResult
10252: oEmitInt
10253: oPop 1
10255: oEmit 22
10257: oEmit 27
10259: oJumpForward 10270
10261: Choice Lookup Table
          33   10222
          39   10195
          40   10195
10268: oError 14
10270: oTypeSPop
10271: oEmit 17
10273: oGetLocal 1
10275: oPushResult
10276: oEmitInt
10277: oPop 1
10279: oGetGlobal 14
10281: oPushResult
10282: oTypeSPush
10283: oPop 1
10285: oGetLocal 1
10287: oReturn
10288: oReturn
10289: oLocalSpace 0
10291: oEmit 61
10293: oSetResult 16
10295: oPushResult
10296: oEmitInt
10297: oPop 1
10299: oEmit 19
10301: oSetResult 8
10303: oPushResult
10304: oEmitInt
10305: oPop 1
10307: oEmit 22
10309: oEmit 28
10311: oEmit 19
10313: oSetResult 0
10315: oPushResult
10316: oEmitInt
10317: oPop 1
10319: oEmit 22
10321: oEmit 28
10323: oEmit 64
10325: oGetGlobal 19
10327: oPushResult
10328: oCall 13457
10330: oPop 1
10332: oEmit 63
10334: oSetResult 16
10336: oPushResult
10337: oEmitInt
10338: oPop 1
10340: oTypeSPop
10341: oTypeSPop
10342: oReturn
10343: oLocalSpace 0
10345: oEmit 61
10347: oSetResult 12
10349: oPushResult
10350: oEmitInt
10351: oPop 1
10353: oEmit 19
10355: oSetResult 8
10357: oPushResult
10358: oEmitInt
10359: oPop 1
10361: oEmit 22
10363: oEmit 27
10365: oEmit 19
10367: oSetResult 0
10369: oPushResult
10370: oEmitInt
10371: oPop 1
10373: oEmit 22
10375: oEmit 28
10377: oEmit 64
10379: oGetGlobal 20
10381: oPushResult
10382: oCall 13457
10384: oPop 1
10386: oEmit 63
10388: oSetResult 12
10390: oPushResult
10391: oEmitInt
10392: oPop 1
10394: oTypeSPop
10395: oTypeSPop
10396: oReturn
10397: oLocalSpace 1
10399: oEmit 62
10401: oSetResult 24
10403: oPushResult
10404: oEmitInt
10405: oPop 1
10407: oEmit 19
10409: oSetResult 8
10411: oPushResult
10412: oEmitInt
10413: oPop 1
10415: oEmit 22
10417: oEmit 28
10419: oEmit 19
10421: oSetResult 0
10423: oPushResult
10424: oEmitInt
10425: oPop 1
10427: oEmit 22
10429: oEmit 28
10431: oGetAddrLocal 1
10433: oPushResult
10434: oGetGlobal 6
10436: oPushResult
10437: oScopeAllocType
10438: oPop 1
10440: oAssign
10441: oEmit 19
10443: oSetResult 16
10445: oPushResult
10446: oEmitInt
10447: oPop 1
10449: oEmit 17
10451: oGetLocal 1
10453: oPushResult
10454: oEmitInt
10455: oPop 1
10457: oEmit 28
10459: oEmit 65
10461: oGetGlobal 21
10463: oPushResult
10464: oCall 13457
10466: oPop 1
10468: oEmit 3
10470: oGetLocal 1
10472: oPushResult
10473: oEmitInt
10474: oPop 1
10476: oEmit 63
10478: oSetResult 24
10480: oPushResult
10481: oEmitInt
10482: oPop 1
10484: oTypeSPop
10485: oGetGlobal 6
10487: oPushResult
10488: oTypeSPush
10489: oPop 1
10491: oReturn
10492: oLocalSpace 10
10494: oGetParam 1
10496: oPushResult
10497: oSetResult 28
10499: oPushResult
10500: oSetResult 1
10502: oPushResult
10503: oNodeSetBoolean
10504: oPop 3
10506: oGetAddrLocal 1
10508: oPushResult
10509: oGetParam 1
10511: oPushResult
10512: oSetResult 27
10514: oPushResult
10515: oNodeGetBoolean
10516: oPop 2
10518: oAssign
10519: oGetAddrLocal 4
10521: oPushResult
10522: oGetParam 1
10524: oPushResult
10525: oNodeType
10526: oPop 1
10528: oPushResult
10529: oSetResult 13
10531: oPushResult
10532: equal_node_type
10533: oPop 2
10535: oAssign
10536: oGetLocal 4
10538: oChoice 10565
10540: oGetAddrLocal 2
10542: oPushResult
10543: oGetParam 1
10545: oPushResult
10546: oSetResult 21
10548: oPushResult
10549: oNodeGet
10550: oPop 2
10552: oAssign
10553: oGetAddrLocal 3
10555: oPushResult
10556: oGetLocal 2
10558: oPushResult
10559: oScopeAllocType
10560: oPop 1
10562: oAssign
10563: oJumpForward 10568
10565: Choice Lookup Table
           1   10540
10568: oGetAddrLocal 5
10570: oPushResult
10571: oGetParam 1
10573: oPushResult
10574: oSetResult 23
10576: oPushResult
10577: oNodeGet
10578: oPop 2
10580: oAssign
10581: oGetAddrLocal 6
10583: oPushResult
10584: oGetLocal 5
10586: oPushResult
10587: oSetResult 17
10589: oPushResult
10590: oNodeGetInt
10591: oPop 2
10593: oAssign
10594: oGetLocal 1
10596: oChoice 10618
10598: oEmit 62
10600: oGetLocal 6
10602: oPushResult
10603: oEmitInt
10604: oPop 1
10606: oJumpForward 10624
10608: oEmit 61
10610: oGetLocal 6
10612: oPushResult
10613: oEmitInt
10614: oPop 1
10616: oJumpForward 10624
10618: Choice Lookup Table
           0   10608
           1   10598
10623: oEndChoice
10624: oGetParam 1
10626: oPushResult
10627: oCall 13391
10629: oPop 1
10631: oPushResult
10632: oSetResult 0
10634: oPushResult
10635: greater
10636: oPop 2
10638: oChoice 10671
10640: oEmit 19
10642: oSetResult 0
10644: oPushResult
10645: oEmitInt
10646: oPop 1
10648: oEmit 20
10650: oGetParam 1
10652: oPushResult
10653: oCall 13411
10655: oPop 1
10657: oPushResult
10658: oEmitInt
10659: oPop 1
10661: oSetResult 0
10663: oPushResult
10664: oEmitInt
10665: oPop 1
10667: oEmit 28
10669: oJumpForward 10674
10671: Choice Lookup Table
           1   10640
10674: oGetAddrLocal 7
10676: oPushResult
10677: oGetLocal 5
10679: oPushResult
10680: oSetResult 15
10682: oPushResult
10683: oNodeGetIter
10684: oPop 2
10686: oAssign
10687: oGetAddrLocal 8
10689: oPushResult
10690: oGetLocal 7
10692: oPushResult
10693: oNodeIterValue
10694: oPop 1
10696: oAssign
10697: oInputChoice 10894
10699: oGetLocal 8
10701: oPushResult
10702: oNodeNull
10703: oPop 1
10705: oChoice 10711
10707: oJumpForward 10890
10709: oJumpForward 10714
10711: Choice Lookup Table
           1   10707
10714: oGetAddrLocal 9
10716: oPushResult
10717: oGetLocal 8
10719: oPushResult
10720: oSetResult 22
10722: oPushResult
10723: oNodeGetInt
10724: oPop 2
10726: oAssign
10727: oEmit 19
10729: oGetLocal 9
10731: oPushResult
10732: oEmitInt
10733: oPop 1
10735: oGetLocal 8
10737: oPushResult
10738: oSetResult 21
10740: oPushResult
10741: oNodeGet
10742: oPop 2
10744: oPushResult
10745: oTypeSPush
10746: oPop 1
10748: oGetLocal 8
10750: oPushResult
10751: oSetResult 34
10753: oPushResult
10754: oNodeGetBoolean
10755: oPop 2
10757: oChoice 10843
10759: oSetResult 1
10761: oPushResult
10762: oCall 8956
10764: oPop 1
10766: oCall 8338
10768: oEmit 28
10770: oJumpForward 10849
10772: oCall 4787
10774: oCall 8006
10776: oTypeSNodeType
10777: oChoice 10817
10779: oEmit 26
10781: oJumpForward 10841
10783: oEmit 27
10785: oJumpForward 10841
10787: oError 16
10789: oJumpForward 10841
10791: oEmit 28
10793: oJumpForward 10841
10795: oGetAddrLocal 10
10797: oPushResult
10798: oTypeSTop
10799: oPushResult
10800: oSetResult 17
10802: oPushResult
10803: oNodeGetInt
10804: oPop 2
10806: oAssign
10807: oEmit 29
10809: oGetLocal 10
10811: oPushResult
10812: oEmitInt
10813: oPop 1
10815: oJumpForward 10841
10817: Choice Lookup Table
          40   10795
          38   10795
          36   10795
          35   10791
          34   10791
          28   10787
          33   10783
          30   10783
          31   10783
          41   10779
          29   10779
10840: oEndChoice
10841: oJumpForward 10849
10843: Choice Lookup Table
           0   10772
           1   10759
10848: oEndChoice
10849: oTypeSPop
10850: oGetAddrLocal 7
10852: oPushResult
10853: oNodeIterNext
10854: oPop 1
10856: oGetAddrLocal 8
10858: oPushResult
10859: oGetLocal 7
10861: oPushResult
10862: oNodeIterValue
10863: oPop 1
10865: oAssign
10866: oGetLocal 8
10868: oPushResult
10869: oNodeNull
10870: oPop 1
10872: oChoice 10880
10874: oJumpForward 10890
10876: oJumpForward 10886
10878: oJumpForward 10886
10880: Choice Lookup Table
           0   10878
           1   10874
10885: oEndChoice
10886: oInput 13
10888: oJumpBack 10699
10890: oInput 15
10892: oJumpForward 10897
10894: Choice Lookup Table
          14   10699
10897: oGetLocal 8
10899: oPushResult
10900: oNodeNull
10901: oPop 1
10903: oChoice 10909
10905: oError 15
10907: oJumpForward 10912
10909: Choice Lookup Table
           0   10905
10912: oGetLocal 4
10914: oChoice 10943
10916: oEmit 19
10918: oGetParam 1
10920: oPushResult
10921: oSetResult 31
10923: oPushResult
10924: oNodeGetInt
10925: oPop 2
10927: oPushResult
10928: oEmitInt
10929: oPop 1
10931: oEmit 17
10933: oGetLocal 3
10935: oPushResult
10936: oEmitInt
10937: oPop 1
10939: oEmit 28
10941: oJumpForward 10946
10943: Choice Lookup Table
           1   10916
10946: oGetLocal 1
10948: oChoice 10972
10950: oEmit 65
10952: oGetParam 1
10954: oPushResult
10955: oCall 13457
10957: oPop 1
10959: oJumpForward 10978
10961: oEmit 64
10963: oGetParam 1
10965: oPushResult
10966: oCall 13457
10968: oPop 1
10970: oJumpForward 10978
10972: Choice Lookup Table
           0   10961
           1   10950
10977: oEndChoice
10978: oGetLocal 4
10980: oChoice 11061
10982: oGetLocal 2
10984: oPushResult
10985: oTypeSPush
10986: oPop 1
10988: oTypeSNodeType
10989: oChoice 11035
10991: oEmit 3
10993: oGetLocal 3
10995: oPushResult
10996: oEmitInt
10997: oPop 1
10999: oJumpForward 11059
11001: oEmit 4
11003: oGetLocal 3
11005: oPushResult
11006: oEmitInt
11007: oPop 1
11009: oJumpForward 11059
11011: oError 16
11013: oJumpForward 11059
11015: oEmit 5
11017: oGetLocal 3
11019: oPushResult
11020: oEmitInt
11021: oPop 1
11023: oJumpForward 11059
11025: oEmit 17
11027: oGetLocal 3
11029: oPushResult
11030: oEmitInt
11031: oPop 1
11033: oJumpForward 11059
11035: Choice Lookup Table
          40   11025
          38   11025
          36   11025
          35   11015
          34   11015
          28   11011
          33   11001
          30   11001
          31   11001
          41   10991
          29   10991
11058: oEndChoice
11059: oJumpForward 11064
11061: Choice Lookup Table
           1   10982
11064: oEmit 63
11066: oGetLocal 6
11068: oPushResult
11069: oEmitInt
11070: oPop 1
11072: oReturn
11073: oLocalSpace 2
11075: oGetAddrLocal 2
11077: oPushResult
11078: oGetParam 1
11080: oPushResult
11081: oSetResult 26
11083: oPushResult
11084: oNodeGetString
11085: oPop 2
11087: oAssign
11088: oGetLocal 2
11090: oPushResult
11091: oSetResult 0
11093: oPushResult
11094: equal_string
11095: oPop 2
11097: oChoice 11134
11099: oGetAddrLocal 1
11101: oPushResult
11102: oGetParam 1
11104: oPushResult
11105: oSetResult 4
11107: oPushResult
11108: oNodeGetInt
11109: oPop 2
11111: oPushResult
11112: ID_STRING
11113: oPop 1
11115: oPushResult
11116: oStringAllocLit
11117: oPop 1
11119: oAssign
11120: oJumpForward 11140
11122: oGetAddrLocal 1
11124: oPushResult
11125: oGetLocal 2
11127: oPushResult
11128: oStringAllocLit
11129: oPop 1
11131: oAssign
11132: oJumpForward 11140
11134: Choice Lookup Table
           0   11122
           1   11099
11139: oEndChoice
11140: oEmit 79
11142: oGetParam 1
11144: oPushResult
11145: oCall 13457
11147: oPop 1
11149: oGetLocal 1
11151: oPushResult
11152: oEmitInt
11153: oPop 1
11155: oReturn
11156: oLocalSpace 0
11158: oGetParam 1
11160: oPushResult
11161: oGetGlobal 15
11163: oPushResult
11164: oNodeEqual
11165: oPop 2
11167: oChoice 11207
11169: oInput 14
11171: oCall 4787
11173: oTypeSNodeType
11174: oChoice 11182
11176: oJumpForward 11195
11178: oEmit 30
11180: oJumpForward 11195
11182: Choice Lookup Table
          33   11178
          30   11178
          31   11178
          41   11176
          29   11176
11193: oError 14
11195: oTypeSPop
11196: oGetGlobal 6
11198: oPushResult
11199: oTypeSPush
11200: oPop 1
11202: oInput 15
11204: oReturn
11205: oJumpForward 11210
11207: Choice Lookup Table
           1   11169
11210: oGetParam 1
11212: oPushResult
11213: oGetGlobal 16
11215: oPushResult
11216: oNodeEqual
11217: oPop 2
11219: oChoice 11253
11221: oInput 14
11223: oCall 4787
11225: oTypeSNodeType
11226: oChoice 11234
11228: oEmit 31
11230: oJumpForward 11241
11232: oJumpForward 11241
11234: Choice Lookup Table
          30   11232
          29   11228
11239: oError 14
11241: oTypeSPop
11242: oGetGlobal 9
11244: oPushResult
11245: oTypeSPush
11246: oPop 1
11248: oInput 15
11250: oReturn
11251: oJumpForward 11256
11253: Choice Lookup Table
           1   11221
11256: oGetParam 1
11258: oPushResult
11259: oGetGlobal 17
11261: oPushResult
11262: oNodeEqual
11263: oPop 2
11265: oChoice 11305
11267: oInput 14
11269: oCall 4787
11271: oTypeSNodeType
11272: oChoice 11293
11274: oTypeSTop
11275: oPushResult
11276: oSetResult 44
11278: oPushResult
11279: oNodeGetBoolean
11280: oPop 2
11282: oChoice 11288
11284: oError 28
11286: oJumpForward 11291
11288: Choice Lookup Table
           1   11284
11291: oJumpForward 11298
11293: Choice Lookup Table
          41   11274
11296: oError 14
11298: oEmit 33
11300: oInput 15
11302: oReturn
11303: oJumpForward 11308
11305: Choice Lookup Table
           1   11267
11308: oGetParam 1
11310: oPushResult
11311: oGetGlobal 18
11313: oPushResult
11314: oNodeEqual
11315: oPop 2
11317: oChoice 11357
11319: oInput 14
11321: oCall 4787
11323: oTypeSNodeType
11324: oChoice 11345
11326: oTypeSTop
11327: oPushResult
11328: oSetResult 44
11330: oPushResult
11331: oNodeGetBoolean
11332: oPop 2
11334: oChoice 11340
11336: oError 28
11338: oJumpForward 11343
11340: Choice Lookup Table
           1   11336
11343: oJumpForward 11350
11345: Choice Lookup Table
          41   11326
11348: oError 14
11350: oEmit 32
11352: oInput 15
11354: oReturn
11355: oJumpForward 11360
11357: Choice Lookup Table
           1   11319
11360: oError 16
11362: oReturn
11363: oLocalSpace 1
11365: oGetAddrLocal 1
11367: oPushResult
11368: oGetParam 2
11370: oPushResult
11371: oNodeNew
11372: oPop 1
11374: oAssign
11375: oGetLocal 1
11377: oPushResult
11378: oSetResult 17
11380: oPushResult
11381: oGetParam 1
11383: oPushResult
11384: oNodeSetInt
11385: oPop 3
11387: oGetLocal 1
11389: oPushResult
11390: oTypeAdd
11391: oPop 1
11393: oGetLocal 1
11395: oReturn
11396: oReturn
11397: oLocalSpace 12
11399: oInputChoice 11882
11401: oGetAddrLocal 1
11403: oPushResult
11404: oScopeFindRequire
11405: oAssign
11406: oGetAddrLocal 1
11408: oPushResult
11409: oCall 244
11411: oPop 1
11413: oGetLocal 1
11415: oPushResult
11416: oNodeType
11417: oPop 1
11419: oChoice 11436
11421: oGetParam 1
11423: oPushResult
11424: oGetLocal 1
11426: oPushResult
11427: oSetResult 21
11429: oPushResult
11430: oNodeGet
11431: oPop 2
11433: oAssign
11434: oJumpForward 11447
11436: Choice Lookup Table
          19   11421
11439: oError 2
11441: oGetParam 1
11443: oPushResult
11444: oGetGlobal 6
11446: oAssign
11447: oJumpForward 11905
11449: oInput 16
11451: oGetAddrLocal 2
11453: oPushResult
11454: oNodeVecNew
11455: oAssign
11456: oGetAddrLocal 3
11458: oPushResult
11459: oSetResult 37
11461: oPushResult
11462: oNodeNew
11463: oPop 1
11465: oAssign
11466: oCall 3533
11468: oGetLocal 3
11470: oPushResult
11471: oSetResult 39
11473: oPushResult
11474: oValueTop
11475: oPushResult
11476: oNodeSetInt
11477: oPop 3
11479: oValuePop
11480: oInput 21
11482: oCall 3533
11484: oGetLocal 3
11486: oPushResult
11487: oSetResult 40
11489: oPushResult
11490: oValueTop
11491: oPushResult
11492: oNodeSetInt
11493: oPop 3
11495: oValuePop
11496: oCall 4203
11498: oGetLocal 3
11500: oPushResult
11501: oSetResult 37
11503: oPushResult
11504: oTypeSTop
11505: oPushResult
11506: oNodeSet
11507: oPop 3
11509: oGetLocal 3
11511: oPushResult
11512: oSetResult 17
11514: oPushResult
11515: oTypeSTop
11516: oPushResult
11517: oSetResult 17
11519: oPushResult
11520: oNodeGetInt
11521: oPop 2
11523: oPushResult
11524: oNodeSetInt
11525: oPop 3
11527: oTypeSPop
11528: oGetLocal 3
11530: oPushResult
11531: oTypeAdd
11532: oPop 1
11534: oGetAddrLocal 4
11536: oPushResult
11537: oSetResult 36
11539: oPushResult
11540: oNodeNew
11541: oPop 1
11543: oAssign
11544: oGetLocal 4
11546: oPushResult
11547: oSetResult 38
11549: oPushResult
11550: oGetLocal 3
11552: oPushResult
11553: oNodeSet
11554: oPop 3
11556: oGetLocal 2
11558: oPushResult
11559: oGetLocal 4
11561: oPushResult
11562: oNodeVecAppend
11563: oPop 2
11565: oInputChoice 11573
11567: oJumpForward 11581
11569: oJumpForward 11579
11571: oJumpForward 11579
11573: Choice Lookup Table
          13   11571
          17   11567
11578: oEndChoice
11579: oJumpBack 11456
11581: oInput 40
11583: oGetAddrLocal 5
11585: oPushResult
11586: oCall 11397
11588: oPop 1
11590: oGetAddrLocal 6
11592: oPushResult
11593: oGetLocal 2
11595: oPushResult
11596: oNodeVecSize
11597: oPop 1
11599: oAssign
11600: oGetAddrLocal 6
11602: oPushResult
11603: dec
11604: oPop 1
11606: oGetAddrLocal 7
11608: oPushResult
11609: oGetLocal 2
11611: oPushResult
11612: oGetLocal 6
11614: oPushResult
11615: oNodeVecElement
11616: oPop 2
11618: oAssign
11619: oGetLocal 7
11621: oPushResult
11622: oSetResult 37
11624: oPushResult
11625: oGetLocal 5
11627: oPushResult
11628: oNodeSet
11629: oPop 3
11631: oGetAddrLocal 8
11633: oPushResult
11634: oGetLocal 7
11636: oPushResult
11637: oSetResult 38
11639: oPushResult
11640: oNodeGet
11641: oPop 2
11643: oAssign
11644: oGetAddrLocal 9
11646: oPushResult
11647: oGetLocal 8
11649: oPushResult
11650: oSetResult 40
11652: oPushResult
11653: oNodeGetInt
11654: oPop 2
11656: oPushResult
11657: oGetLocal 8
11659: oPushResult
11660: oSetResult 39
11662: oPushResult
11663: oNodeGetInt
11664: oPop 2
11666: oPushResult
11667: subtract
11668: oPop 2
11670: oAssign
11671: oGetAddrLocal 9
11673: oPushResult
11674: inc
11675: oPop 1
11677: oGetLocal 7
11679: oPushResult
11680: oSetResult 17
11682: oPushResult
11683: oGetLocal 9
11685: oPushResult
11686: oGetLocal 5
11688: oPushResult
11689: oSetResult 17
11691: oPushResult
11692: oNodeGetInt
11693: oPop 2
11695: oPushResult
11696: multiply
11697: oPop 2
11699: oPushResult
11700: oNodeSetInt
11701: oPop 3
11703: oGetLocal 7
11705: oPushResult
11706: oTypeAdd
11707: oPop 1
11709: oGetAddrLocal 5
11711: oPushResult
11712: oGetLocal 7
11714: oAssign
11715: oGetLocal 6
11717: oPushResult
11718: equal_zero
11719: oPop 1
11721: oChoice 11727
11723: oJumpForward 11732
11725: oJumpForward 11730
11727: Choice Lookup Table
           1   11723
11730: oJumpBack 11600
11732: oGetParam 1
11734: oPushResult
11735: oGetLocal 2
11737: oPushResult
11738: oSetResult 0
11740: oPushResult
11741: oNodeVecElement
11742: oPop 2
11744: oAssign
11745: oGetLocal 2
11747: oPushResult
11748: oNodeVecDelete
11749: oPop 1
11751: oJumpForward 11905
11753: oGetAddrLocal 10
11755: oPushResult
11756: oCall 11397
11758: oPop 1
11760: oGetParam 1
11762: oPushResult
11763: oGetLocal 10
11765: oPushResult
11766: oCall 12476
11768: oPop 1
11770: oAssign
11771: oJumpForward 11905
11773: oGetParam 1
11775: oPushResult
11776: oSetResult 38
11778: oPushResult
11779: oNodeNew
11780: oPop 1
11782: oAssign
11783: oSetResult -1
11785: oPushResult
11786: oSetResult 2
11788: oPushResult
11789: oScopeBegin
11790: oPop 2
11792: oSetResult 23
11794: oPushResult
11795: oCall 3234
11797: oPop 1
11799: oGetAddrLocal 11
11801: oPushResult
11802: oScopeCurrent
11803: oPushResult
11804: oSetResult 17
11806: oPushResult
11807: oNodeGetInt
11808: oPop 2
11810: oAssign
11811: oGetLocal 11
11813: oPushResult
11814: equal_zero
11815: oPop 1
11817: oChoice 11823
11819: oError 19
11821: oJumpForward 11826
11823: Choice Lookup Table
           1   11819
11826: oInput 36
11828: oGetFromParam 1
11830: oPushResult
11831: oSetResult 41
11833: oPushResult
11834: oScopeCurrent
11835: oPushResult
11836: oNodeSet
11837: oPop 3
11839: oGetFromParam 1
11841: oPushResult
11842: oSetResult 17
11844: oPushResult
11845: oGetLocal 11
11847: oPushResult
11848: oNodeSetInt
11849: oPop 3
11851: oScopeEnd
11852: oGetFromParam 1
11854: oPushResult
11855: oTypeAdd
11856: oPop 1
11858: oJumpForward 11905
11860: oGetParam 1
11862: oPushResult
11863: oCall 11906
11865: oPop 1
11867: oJumpForward 11905
11869: oInput 40
11871: oGetAddrLocal 12
11873: oPushResult
11874: oCall 11397
11876: oPop 1
11878: oError 16
11880: oJumpForward 11905
11882: Choice Lookup Table
          39   11869
          14   11860
          38   11773
          18   11753
          37   11449
           0   11401
11895: oCall 3533
11897: oInput 21
11899: oCall 3533
11901: oCall 4203
11903: oError 16
11905: oReturn
11906: oLocalSpace 11
11908: oGetParam 1
11910: oPushResult
11911: oSetResult 41
11913: oPushResult
11914: oNodeNew
11915: oPop 1
11917: oAssign
11918: oGetAddrLocal 1
11920: oPushResult
11921: oSetResult 0
11923: oAssign
11924: oGetAddrLocal 2
11926: oPushResult
11927: oSetResult 0
11929: oAssign
11930: oGetAddrLocal 3
11932: oPushResult
11933: oSetResult 1
11935: oAssign
11936: oGetAddrLocal 4
11938: oPushResult
11939: oScopeCurrent
11940: oAssign
11941: oSetResult -1
11943: oPushResult
11944: oSetResult 2
11946: oPushResult
11947: oScopeBegin
11948: oPop 2
11950: oInput 0
11952: oGetAddrLocal 5
11954: oPushResult
11955: oSetResult 17
11957: oPushResult
11958: LAST_ID
11959: oPushResult
11960: oCall 13429
11962: oPop 2
11964: oAssign
11965: oGetAddrLocal 6
11967: oPushResult
11968: oSetResult 17
11970: oPushResult
11971: LAST_ID
11972: oPushResult
11973: oCall 13429
11975: oPop 2
11977: oAssign
11978: oGetLocal 5
11980: oPushResult
11981: oSetResult 21
11983: oPushResult
11984: oGetFromParam 1
11986: oPushResult
11987: oNodeSet
11988: oPop 3
11990: oGetLocal 6
11992: oPushResult
11993: oSetResult 21
11995: oPushResult
11996: oGetFromParam 1
11998: oPushResult
11999: oNodeSet
12000: oPop 3
12002: oGetAddrLocal 7
12004: oPushResult
12005: LAST_ID
12006: oPushResult
12007: ID_STRING
12008: oPop 1
12010: oPushResult
12011: oStringAllocLit
12012: oPop 1
12014: oAssign
12015: oGetLocal 5
12017: oPushResult
12018: oSetResult 32
12020: oPushResult
12021: oGetLocal 7
12023: oPushResult
12024: oNodeSetInt
12025: oPop 3
12027: oGetLocal 6
12029: oPushResult
12030: oSetResult 32
12032: oPushResult
12033: oGetLocal 7
12035: oPushResult
12036: oNodeSetInt
12037: oPop 3
12039: oInputChoice 12117
12041: oGetGlobal 6
12043: oPushResult
12044: oTypeSPush
12045: oPop 1
12047: oCall 3533
12049: oCall 4300
12051: oTypeSPop
12052: oGetLocal 2
12054: oPushResult
12055: equal_zero
12056: oPop 1
12058: oChoice 12079
12060: oValueTop
12061: oPushResult
12062: oGetLocal 1
12064: oPushResult
12065: greater
12066: oPop 2
12068: oChoice 12074
12070: oError 26
12072: oJumpForward 12077
12074: Choice Lookup Table
           0   12070
12077: oJumpForward 12082
12079: Choice Lookup Table
           0   12060
12082: oGetLocal 1
12084: oPushResult
12085: oValueTop
12086: oPushResult
12087: equal
12088: oPop 2
12090: oChoice 12106
12092: oGetFromParam 1
12094: oPushResult
12095: oSetResult 44
12097: oPushResult
12098: oSetResult 1
12100: oPushResult
12101: oNodeSetBoolean
12102: oPop 3
12104: oJumpForward 12109
12106: Choice Lookup Table
           0   12092
12109: oGetAddrLocal 1
12111: oPushResult
12112: oValueTop
12113: oAssign
12114: oValuePop
12115: oJumpForward 12122
12117: Choice Lookup Table
           4   12041
           6   12041
12122: oGetLocal 5
12124: oPushResult
12125: oSetResult 22
12127: oPushResult
12128: oGetLocal 1
12130: oPushResult
12131: oNodeSetInt
12132: oPop 3
12134: oGetLocal 6
12136: oPushResult
12137: oSetResult 22
12139: oPushResult
12140: oGetLocal 1
12142: oPushResult
12143: oNodeSetInt
12144: oPop 3
12146: oGetLocal 5
12148: oPushResult
12149: oScopeDeclare
12150: oPop 1
12152: oGetLocal 4
12154: oPushResult
12155: oScopeEnter
12156: oPop 1
12158: oGetLocal 6
12160: oPushResult
12161: oScopeDeclare
12162: oPop 1
12164: oScopeEnd
12165: oGetAddrLocal 1
12167: oPushResult
12168: inc
12169: oPop 1
12171: oGetAddrLocal 2
12173: oPushResult
12174: inc
12175: oPop 1
12177: oInputChoice 12181
12179: oJumpForward 12186
12181: Choice Lookup Table
          13   12179
12184: oJumpForward 12188
12186: oJumpBack 11950
12188: oInput 15
12190: oGetFromParam 1
12192: oPushResult
12193: oSetResult 41
12195: oPushResult
12196: oScopeCurrent
12197: oPushResult
12198: oNodeSet
12199: oPop 3
12201: oGetFromParam 1
12203: oPushResult
12204: oSetResult 17
12206: oPushResult
12207: oSetResult 4
12209: oPushResult
12210: oNodeSetInt
12211: oPop 3
12213: oScopeEnd
12214: oGetGlobal 2
12216: oPushResult
12217: oCall 13327
12219: oPop 1
12221: oPushResult
12222: oCodePush
12223: oPop 1
12225: oGetGlobal 2
12227: oPushResult
12228: oScopeEnter
12229: oPop 1
12231: oGetAddrLocal 8
12233: oPushResult
12234: oGetLocal 2
12236: oPushResult
12237: oSetResult 1
12239: oPushResult
12240: add
12241: oPop 2
12243: oPushResult
12244: oSetResult 16
12246: oPushResult
12247: multiply
12248: oPop 2
12250: oAssign
12251: oGetAddrLocal 9
12253: oPushResult
12254: oGetLocal 8
12256: oPushResult
12257: oSetResult 8
12259: oPushResult
12260: oScopeAlloc
12261: oPop 2
12263: oAssign
12264: oScopeEnd
12265: oGetFromParam 1
12267: oPushResult
12268: oSetResult 43
12270: oPushResult
12271: oGetLocal 9
12273: oPushResult
12274: oNodeSetInt
12275: oPop 3
12277: oGetAddrLocal 10
12279: oPushResult
12280: oGetFromParam 1
12282: oPushResult
12283: oSetResult 41
12285: oPushResult
12286: oNodeGet
12287: oPop 2
12289: oPushResult
12290: oSetResult 15
12292: oPushResult
12293: oNodeGetIter
12294: oPop 2
12296: oAssign
12297: oGetAddrLocal 11
12299: oPushResult
12300: oGetLocal 10
12302: oPushResult
12303: oNodeIterValue
12304: oPop 1
12306: oAssign
12307: oGetLocal 11
12309: oPushResult
12310: oNodeNull
12311: oPop 1
12313: oChoice 12319
12315: oJumpForward 12406
12317: oJumpForward 12322
12319: Choice Lookup Table
           1   12315
12322: oEmit 16
12324: oGetLocal 9
12326: oPushResult
12327: oEmitInt
12328: oPop 1
12330: oEmit 15
12332: oGetLocal 11
12334: oPushResult
12335: oSetResult 22
12337: oPushResult
12338: oNodeGetInt
12339: oPop 2
12341: oPushResult
12342: oEmitInt
12343: oPop 1
12345: oEmit 26
12347: oGetAddrLocal 9
12349: oPushResult
12350: oGetLocal 9
12352: oPushResult
12353: oSetResult 8
12355: oPushResult
12356: add
12357: oPop 2
12359: oAssign
12360: oEmit 16
12362: oGetLocal 9
12364: oPushResult
12365: oEmitInt
12366: oPop 1
12368: oEmit 16
12370: oGetLocal 11
12372: oPushResult
12373: oSetResult 32
12375: oPushResult
12376: oNodeGetInt
12377: oPop 2
12379: oPushResult
12380: oEmitInt
12381: oPop 1
12383: oEmit 28
12385: oGetAddrLocal 9
12387: oPushResult
12388: oGetLocal 9
12390: oPushResult
12391: oSetResult 8
12393: oPushResult
12394: add
12395: oPop 2
12397: oAssign
12398: oGetAddrLocal 10
12400: oPushResult
12401: oNodeIterNext
12402: oPop 1
12404: oJumpBack 12297
12406: oEmit 16
12408: oGetLocal 9
12410: oPushResult
12411: oEmitInt
12412: oPop 1
12414: oEmit 15
12416: oSetResult 0
12418: oPushResult
12419: oEmitInt
12420: oPop 1
12422: oEmit 26
12424: oGetAddrLocal 9
12426: oPushResult
12427: oGetLocal 9
12429: oPushResult
12430: oSetResult 8
12432: oPushResult
12433: add
12434: oPop 2
12436: oAssign
12437: oEmit 16
12439: oGetLocal 9
12441: oPushResult
12442: oEmitInt
12443: oPop 1
12445: oEmit 15
12447: oSetResult 0
12449: oPushResult
12450: oEmitInt
12451: oPop 1
12453: oEmit 28
12455: oGetAddrLocal 9
12457: oPushResult
12458: oGetLocal 9
12460: oPushResult
12461: oSetResult 8
12463: oPushResult
12464: add
12465: oPop 2
12467: oAssign
12468: oCodePop
12469: oGetFromParam 1
12471: oPushResult
12472: oTypeAdd
12473: oPop 1
12475: oReturn
12476: oLocalSpace 1
12478: oGetAddrLocal 1
12480: oPushResult
12481: oGetParam 1
12483: oPushResult
12484: oSetResult 36
12486: oPushResult
12487: oNodeGet
12488: oPop 2
12490: oAssign
12491: oGetLocal 1
12493: oPushResult
12494: oNodeNull
12495: oPop 1
12497: oChoice 12553
12499: oGetAddrLocal 1
12501: oPushResult
12502: oSetResult 34
12504: oPushResult
12505: oNodeNew
12506: oPop 1
12508: oAssign
12509: oGetLocal 1
12511: oPushResult
12512: oSetResult 37
12514: oPushResult
12515: oGetParam 1
12517: oPushResult
12518: oNodeSet
12519: oPop 3
12521: oGetLocal 1
12523: oPushResult
12524: oSetResult 17
12526: oPushResult
12527: oSetResult 8
12529: oPushResult
12530: oNodeSetInt
12531: oPop 3
12533: oGetLocal 1
12535: oPushResult
12536: oTypeAdd
12537: oPop 1
12539: oGetParam 1
12541: oPushResult
12542: oSetResult 36
12544: oPushResult
12545: oGetLocal 1
12547: oPushResult
12548: oNodeSet
12549: oPop 3
12551: oJumpForward 12556
12553: Choice Lookup Table
           1   12499
12556: oGetLocal 1
12558: oReturn
12559: oReturn
12560: oLocalSpace 2
12562: oGetParam 1
12564: oPushResult
12565: oNodeType
12566: oPop 1
12568: oChoice 12638
12570: oMININT
12571: oReturn
12572: oJumpForward 12654
12574: oSetResult 0
12576: oReturn
12577: oJumpForward 12654
12579: oSetResult 0
12581: oReturn
12582: oJumpForward 12654
12584: oGetAddrLocal 1
12586: oPushResult
12587: oGetParam 1
12589: oPushResult
12590: oSetResult 41
12592: oPushResult
12593: oNodeGet
12594: oPop 2
12596: oAssign
12597: oGetAddrLocal 2
12599: oPushResult
12600: oGetLocal 1
12602: oPushResult
12603: oSetResult 15
12605: oPushResult
12606: oNodeGetIter
12607: oPop 2
12609: oPushResult
12610: oNodeIterValue
12611: oPop 1
12613: oAssign
12614: oGetLocal 2
12616: oPushResult
12617: oSetResult 22
12619: oPushResult
12620: oNodeGetInt
12621: oPop 2
12623: oReturn
12624: oJumpForward 12654
12626: oGetParam 1
12628: oPushResult
12629: oSetResult 39
12631: oPushResult
12632: oNodeGetInt
12633: oPop 2
12635: oReturn
12636: oJumpForward 12654
12638: Choice Lookup Table
          37   12626
          41   12584
          33   12579
          31   12574
          29   12570
12649: oError 3
12651: oSetResult 0
12653: oReturn
12654: oReturn
12655: oLocalSpace 2
12657: oGetParam 1
12659: oPushResult
12660: oNodeType
12661: oPop 1
12663: oChoice 12733
12665: oMAXINT
12666: oReturn
12667: oJumpForward 12749
12669: oSetResult 1
12671: oReturn
12672: oJumpForward 12749
12674: oSetResult 255
12676: oReturn
12677: oJumpForward 12749
12679: oGetAddrLocal 1
12681: oPushResult
12682: oGetParam 1
12684: oPushResult
12685: oSetResult 41
12687: oPushResult
12688: oNodeGet
12689: oPop 2
12691: oAssign
12692: oGetAddrLocal 2
12694: oPushResult
12695: oGetLocal 1
12697: oPushResult
12698: oSetResult 15
12700: oPushResult
12701: oNodeGetIterLast
12702: oPop 2
12704: oPushResult
12705: oNodeIterValue
12706: oPop 1
12708: oAssign
12709: oGetLocal 2
12711: oPushResult
12712: oSetResult 22
12714: oPushResult
12715: oNodeGetInt
12716: oPop 2
12718: oReturn
12719: oJumpForward 12749
12721: oGetParam 1
12723: oPushResult
12724: oSetResult 40
12726: oPushResult
12727: oNodeGetInt
12728: oPop 2
12730: oReturn
12731: oJumpForward 12749
12733: Choice Lookup Table
          37   12721
          41   12679
          33   12674
          31   12669
          29   12665
12744: oError 3
12746: oSetResult 0
12748: oReturn
12749: oReturn
12750: oLocalSpace 5
12752: oGetAddrGlobal 1
12754: oPushResult
12755: oWorkspaceNew
12756: oAssign
12757: oSetResult 0
12759: oPushResult
12760: oSetResult 0
12762: oPushResult
12763: oScopeBegin
12764: oPop 2
12766: oGetAddrLocal 2
12768: oPushResult
12769: oScopeCurrent
12770: oAssign
12771: oCall 13499
12773: oEmit 67
12775: oSetResult 0
12777: oPushResult
12778: oEmitInt
12779: oPop 1
12781: oGetAddrLocal 3
12783: oPushResult
12784: oLabelNew
12785: oAssign
12786: oEmit 61
12788: oSetResult 0
12790: oPushResult
12791: oEmitInt
12792: oPop 1
12794: oEmit 64
12796: oGetLocal 3
12798: oPushResult
12799: oEmitLabel
12800: oPop 1
12802: oEmit 63
12804: oSetResult 0
12806: oPushResult
12807: oEmitInt
12808: oPop 1
12810: oEmit 66
12812: oInput 28
12814: oInput 0
12816: oGetAddrLocal 4
12818: oPushResult
12819: oSetResult 4
12821: oPushResult
12822: oNodeNew
12823: oPop 1
12825: oAssign
12826: oGetLocal 4
12828: oPushResult
12829: oSetResult 4
12831: oPushResult
12832: LAST_ID
12833: oPushResult
12834: oNodeSetInt
12835: oPop 3
12837: oGetGlobal 1
12839: oPushResult
12840: oSetResult 2
12842: oPushResult
12843: oGetLocal 4
12845: oPushResult
12846: oNodeSet
12847: oPop 3
12849: oInputChoice 12923
12851: oInput 0
12853: oGetAddrLocal 1
12855: oPushResult
12856: oSetResult 20
12858: oPushResult
12859: LAST_ID
12860: oPushResult
12861: oCall 13429
12863: oPop 2
12865: oAssign
12866: oGetLocal 1
12868: oPushResult
12869: oSetResult 21
12871: oPushResult
12872: oGetGlobal 5
12874: oPushResult
12875: oNodeSet
12876: oPop 3
12878: oGetLocal 1
12880: oPushResult
12881: oScopeDeclareAlloc
12882: oPop 1
12884: oInput 13
12886: oInput 0
12888: oGetAddrLocal 1
12890: oPushResult
12891: oSetResult 20
12893: oPushResult
12894: LAST_ID
12895: oPushResult
12896: oCall 13429
12898: oPop 2
12900: oAssign
12901: oGetLocal 1
12903: oPushResult
12904: oSetResult 21
12906: oPushResult
12907: oGetGlobal 5
12909: oPushResult
12910: oNodeSet
12911: oPop 3
12913: oGetLocal 1
12915: oPushResult
12916: oScopeDeclareAlloc
12917: oPop 1
12919: oInput 15
12921: oJumpForward 12926
12923: Choice Lookup Table
          14   12851
12926: oInput 5
12928: oGetLocal 4
12930: oPushResult
12931: oCall 34
12933: oPop 1
12935: oInputChoice 12946
12937: oGetLocal 4
12939: oPushResult
12940: oCall 7
12942: oPop 1
12944: oJumpForward 12949
12946: Choice Lookup Table
          59   12937
12949: oGetLocal 4
12951: oPushResult
12952: oCall 287
12954: oPop 1
12956: oSetResult 0
12958: oPushResult
12959: oSetResult 0
12961: oPushResult
12962: oScopeBegin
12963: oPop 2
12965: oGetAddrGlobal 2
12967: oPushResult
12968: oScopeCurrent
12969: oAssign
12970: oSetResult 0
12972: oPushResult
12973: oSetResult 1
12975: oPushResult
12976: oScopeBegin
12977: oPop 2
12979: oScopeCurrent
12980: oPushResult
12981: oSetResult 16
12983: oPushResult
12984: oGetGlobal 2
12986: oPushResult
12987: oNodeSet
12988: oPop 3
12990: oGetAddrGlobal 3
12992: oPushResult
12993: oScopeCurrent
12994: oAssign
12995: oGetLocal 4
12997: oPushResult
12998: oSetResult 7
13000: oPushResult
13001: oGetGlobal 3
13003: oPushResult
13004: oNodeSet
13005: oPop 3
13007: oScopeEnd
13008: oSetResult 21
13010: oPushResult
13011: oCall 13078
13013: oPop 1
13015: oGetGlobal 3
13017: oPushResult
13018: oScopeEnter
13019: oPop 1
13021: oGetAddrLocal 5
13023: oPushResult
13024: oSetResult 1
13026: oAssign
13027: oGetLocal 3
13029: oPushResult
13030: oGetGlobal 2
13032: oPushResult
13033: oGetLocal 5
13035: oPushResult
13036: oCall 13229
13038: oPop 3
13040: oScopeEnd
13041: oInput 20
13043: oCall 13134
13045: oScopeEnd
13046: oGetLocal 4
13048: oPushResult
13049: oCall 349
13051: oPop 1
13053: oReturn
13054: oLocalSpace 0
13056: oGetParam 2
13058: oPushResult
13059: oCall 13078
13061: oPop 1
13063: oGetParam 1
13065: oPushResult
13066: oScopeCurrent
13067: oPushResult
13068: oSetResult 0
13070: oPushResult
13071: oCall 13229
13073: oPop 3
13075: oCall 13134
13077: oReturn
13078: oLocalSpace 0
13080: oInputChoice 13111
13082: oCall 2520
13084: oJumpForward 13126
13086: oCall 3178
13088: oJumpForward 13126
13090: oGetParam 1
13092: oPushResult
13093: oCall 3234
13095: oPop 1
13097: oJumpForward 13126
13099: oCall 3468
13101: oJumpForward 13126
13103: oCall 1743
13105: oJumpForward 13126
13107: oCall 2178
13109: oJumpForward 13126
13111: Choice Lookup Table
          30   13107
          29   13103
          34   13099
          33   13090
          32   13086
          31   13082
13124: oJumpForward 13128
13126: oJumpBack 13080
13128: oCall 13131
13130: oReturn
13131: oLocalSpace 0
13133: oReturn
13134: oLocalSpace 2
13136: oGetAddrLocal 1
13138: oPushResult
13139: oScopeCurrent
13140: oPushResult
13141: oSetResult 15
13143: oPushResult
13144: oNodeGetIter
13145: oPop 2
13147: oAssign
13148: oGetAddrLocal 2
13150: oPushResult
13151: oGetLocal 1
13153: oPushResult
13154: oNodeIterValue
13155: oPop 1
13157: oAssign
13158: oGetLocal 2
13160: oPushResult
13161: oNodeNull
13162: oPop 1
13164: oChoice 13168
13166: oJumpForward 13173
13168: Choice Lookup Table
           0   13166
13171: oJumpForward 13228
13173: oGetLocal 2
13175: oPushResult
13176: oNodeType
13177: oPop 1
13179: oChoice 13217
13181: oGetLocal 2
13183: oPushResult
13184: oSetResult 35
13186: oPushResult
13187: oNodeGetBoolean
13188: oPop 2
13190: oChoice 13212
13192: oGetLocal 2
13194: oPushResult
13195: oSetResult 28
13197: oPushResult
13198: oNodeGetBoolean
13199: oPop 2
13201: oChoice 13207
13203: oError 27
13205: oJumpForward 13210
13207: Choice Lookup Table
           1   13203
13210: oJumpForward 13215
13212: Choice Lookup Table
           0   13192
13215: oJumpForward 13220
13217: Choice Lookup Table
          26   13181
13220: oGetAddrLocal 1
13222: oPushResult
13223: oNodeIterNext
13224: oPop 1
13226: oJumpBack 13148
13228: oReturn
13229: oLocalSpace 3
13231: oEmit 77
13233: oGetParam 3
13235: oPushResult
13236: oEmitLabel
13237: oPop 1
13239: oEmit 67
13241: oGetAddrLocal 1
13243: oPushResult
13244: Here
13245: oAssign
13246: oEmit 90
13248: oGetParam 1
13250: oChoice 13256
13252: oCall 1220
13254: oJumpForward 13259
13256: Choice Lookup Table
           1   13252
13259: oGetAddrLocal 2
13261: oPushResult
13262: oGetParam 2
13264: oPushResult
13265: oSetResult 19
13267: oPushResult
13268: oNodeGetCode
13269: oPop 2
13271: oAssign
13272: oGetLocal 2
13274: oPushResult
13275: oEmitCode
13276: oPop 1
13278: oGetParam 2
13280: oPushResult
13281: oSetResult 19
13283: oPushResult
13284: oSetResult 0
13286: oPushResult
13287: oNodeSetCode
13288: oPop 3
13290: oCall 8516
13292: oGetParam 1
13294: oChoice 13300
13296: oCall 1305
13298: oJumpForward 13303
13300: Choice Lookup Table
           1   13296
13303: oEmit 66
13305: oGetAddrLocal 3
13307: oPushResult
13308: oScopeCurrent
13309: oPushResult
13310: oSetResult 17
13312: oPushResult
13313: oNodeGetInt
13314: oPop 2
13316: oAssign
13317: oGetLocal 1
13319: oPushResult
13320: oGetLocal 3
13322: oPushResult
13323: oPatch
13324: oPop 2
13326: oReturn
13327: oLocalSpace 1
13329: oGetAddrLocal 1
13331: oPushResult
13332: oGetParam 1
13334: oPushResult
13335: oSetResult 19
13337: oPushResult
13338: oNodeGetCode
13339: oPop 2
13341: oAssign
13342: oGetLocal 1
13344: oPushResult
13345: oSetResult 0
13347: oPushResult
13348: equal_code
13349: oPop 2
13351: oChoice 13372
13353: oGetAddrLocal 1
13355: oPushResult
13356: oCodeNew
13357: oAssign
13358: oGetParam 1
13360: oPushResult
13361: oSetResult 19
13363: oPushResult
13364: oGetLocal 1
13366: oPushResult
13367: oNodeSetCode
13368: oPop 3
13370: oJumpForward 13375
13372: Choice Lookup Table
           1   13353
13375: oGetLocal 1
13377: oReturn
13378: oReturn
13379: oLocalSpace 0
13381: oScopeCurrent
13382: oPushResult
13383: oSetResult 14
13385: oPushResult
13386: oNodeGetInt
13387: oPop 2
13389: oReturn
13390: oReturn
13391: oLocalSpace 0
13393: oGetParam 1
13395: oPushResult
13396: oSetResult 20
13398: oPushResult
13399: oNodeGet
13400: oPop 2
13402: oPushResult
13403: oSetResult 14
13405: oPushResult
13406: oNodeGetInt
13407: oPop 2
13409: oReturn
13410: oReturn
13411: oLocalSpace 0
13413: oCall 13379
13415: oPushResult
13416: oGetParam 1
13418: oPushResult
13419: oCall 13391
13421: oPop 1
13423: oPushResult
13424: subtract
13425: oPop 2
13427: oReturn
13428: oReturn
13429: oLocalSpace 1
13431: oGetAddrLocal 1
13433: oPushResult
13434: oGetParam 2
13436: oPushResult
13437: oNodeNew
13438: oPop 1
13440: oAssign
13441: oGetLocal 1
13443: oPushResult
13444: oSetResult 4
13446: oPushResult
13447: oGetParam 1
13449: oPushResult
13450: oNodeSetInt
13451: oPop 3
13453: oGetLocal 1
13455: oReturn
13456: oReturn
13457: oLocalSpace 0
13459: oGetParam 1
13461: oPushResult
13462: oSetResult 22
13464: oPushResult
13465: oNodeGetInt
13466: oPop 2
13468: oPushResult
13469: oEmitInt
13470: oPop 1
13472: oReturn
13473: oLocalSpace 1
13475: oGetAddrLocal 1
13477: oPushResult
13478: oSetResult 14
13480: oPushResult
13481: oGetParam 1
13483: oPushResult
13484: oCall 13429
13486: oPop 2
13488: oAssign
13489: oGetLocal 1
13491: oPushResult
13492: oScopeDeclare
13493: oPop 1
13495: oGetLocal 1
13497: oReturn
13498: oReturn
13499: oLocalSpace 1
13501: oGetAddrGlobal 4
13503: oPushResult
13504: oId_mysystem
13505: oAssign
13506: oGetAddrGlobal 5
13508: oPushResult
13509: oSetResult 28
13511: oPushResult
13512: oSetResult 4
13514: oPushResult
13515: oCall 11363
13517: oPop 2
13519: oAssign
13520: oGetAddrGlobal 6
13522: oPushResult
13523: oSetResult 29
13525: oPushResult
13526: oSetResult 4
13528: oPushResult
13529: oCall 11363
13531: oPop 2
13533: oAssign
13534: oGetAddrGlobal 7
13536: oPushResult
13537: oSetResult 31
13539: oPushResult
13540: oSetResult 1
13542: oPushResult
13543: oCall 11363
13545: oPop 2
13547: oAssign
13548: oGetAddrGlobal 8
13550: oPushResult
13551: oSetResult 32
13553: oPushResult
13554: oSetResult 1
13556: oPushResult
13557: oCall 11363
13559: oPop 2
13561: oAssign
13562: oGetAddrGlobal 9
13564: oPushResult
13565: oSetResult 33
13567: oPushResult
13568: oSetResult 1
13570: oPushResult
13571: oCall 11363
13573: oPop 2
13575: oAssign
13576: oGetAddrGlobal 10
13578: oPushResult
13579: oGetGlobal 9
13581: oPushResult
13582: oCall 12476
13584: oPop 1
13586: oAssign
13587: oGetAddrGlobal 11
13589: oPushResult
13590: oSetResult 30
13592: oPushResult
13593: oSetResult 1
13595: oPushResult
13596: oCall 11363
13598: oPop 2
13600: oAssign
13601: oGetAddrGlobal 12
13603: oPushResult
13604: oSetResult 35
13606: oPushResult
13607: oSetResult 8
13609: oPushResult
13610: oCall 11363
13612: oPop 2
13614: oAssign
13615: oGetGlobal 12
13617: oPushResult
13618: oSetResult 37
13620: oPushResult
13621: oGetGlobal 11
13623: oPushResult
13624: oNodeSet
13625: oPop 3
13627: oGetAddrGlobal 13
13629: oPushResult
13630: oSetResult 39
13632: oPushResult
13633: oSetResult 256
13635: oPushResult
13636: oCall 11363
13638: oPop 2
13640: oAssign
13641: oGetAddrGlobal 14
13643: oPushResult
13644: oSetResult 40
13646: oPushResult
13647: oSetResult 256
13649: oPushResult
13650: oCall 11363
13652: oPop 2
13654: oAssign
13655: oGetGlobal 14
13657: oPushResult
13658: oSetResult 42
13660: oPushResult
13661: oSetResult 255
13663: oPushResult
13664: oNodeSetInt
13665: oPop 3
13667: oGetAddrLocal 1
13669: oPushResult
13670: oSetResult 19
13672: oPushResult
13673: oId_File
13674: oPushResult
13675: oCall 13429
13677: oPop 2
13679: oAssign
13680: oGetLocal 1
13682: oPushResult
13683: oSetResult 21
13685: oPushResult
13686: oGetGlobal 5
13688: oPushResult
13689: oNodeSet
13690: oPop 3
13692: oGetLocal 1
13694: oPushResult
13695: oScopeDeclare
13696: oPop 1
13698: oGetAddrLocal 1
13700: oPushResult
13701: oSetResult 19
13703: oPushResult
13704: oId_Integer
13705: oPushResult
13706: oCall 13429
13708: oPop 2
13710: oAssign
13711: oGetLocal 1
13713: oPushResult
13714: oSetResult 21
13716: oPushResult
13717: oGetGlobal 6
13719: oPushResult
13720: oNodeSet
13721: oPop 3
13723: oGetLocal 1
13725: oPushResult
13726: oScopeDeclare
13727: oPop 1
13729: oGetAddrLocal 1
13731: oPushResult
13732: oSetResult 19
13734: oPushResult
13735: oId_Boolean
13736: oPushResult
13737: oCall 13429
13739: oPop 2
13741: oAssign
13742: oGetLocal 1
13744: oPushResult
13745: oSetResult 21
13747: oPushResult
13748: oGetGlobal 7
13750: oPushResult
13751: oNodeSet
13752: oPop 3
13754: oGetLocal 1
13756: oPushResult
13757: oScopeDeclare
13758: oPop 1
13760: oGetAddrLocal 1
13762: oPushResult
13763: oSetResult 19
13765: oPushResult
13766: oId_Char
13767: oPushResult
13768: oCall 13429
13770: oPop 2
13772: oAssign
13773: oGetLocal 1
13775: oPushResult
13776: oSetResult 21
13778: oPushResult
13779: oGetGlobal 9
13781: oPushResult
13782: oNodeSet
13783: oPop 3
13785: oGetLocal 1
13787: oPushResult
13788: oScopeDeclare
13789: oPop 1
13791: oGetAddrLocal 1
13793: oPushResult
13794: oSetResult 19
13796: oPushResult
13797: oId_Byte
13798: oPushResult
13799: oCall 13429
13801: oPop 2
13803: oAssign
13804: oGetLocal 1
13806: oPushResult
13807: oSetResult 21
13809: oPushResult
13810: oGetGlobal 11
13812: oPushResult
13813: oNodeSet
13814: oPop 3
13816: oGetLocal 1
13818: oPushResult
13819: oScopeDeclare
13820: oPop 1
13822: oGetAddrLocal 1
13824: oPushResult
13825: oSetResult 19
13827: oPushResult
13828: oId_Pointer
13829: oPushResult
13830: oCall 13429
13832: oPop 2
13834: oAssign
13835: oGetLocal 1
13837: oPushResult
13838: oSetResult 21
13840: oPushResult
13841: oGetGlobal 12
13843: oPushResult
13844: oNodeSet
13845: oPop 3
13847: oGetLocal 1
13849: oPushResult
13850: oScopeDeclare
13851: oPop 1
13853: oGetAddrLocal 1
13855: oPushResult
13856: oSetResult 19
13858: oPushResult
13859: oId_ShortString
13860: oPushResult
13861: oCall 13429
13863: oPop 2
13865: oAssign
13866: oGetLocal 1
13868: oPushResult
13869: oSetResult 21
13871: oPushResult
13872: oGetGlobal 14
13874: oPushResult
13875: oNodeSet
13876: oPop 3
13878: oGetLocal 1
13880: oPushResult
13881: oScopeDeclare
13882: oPop 1
13884: oGetAddrLocal 1
13886: oPushResult
13887: oSetResult 16
13889: oPushResult
13890: oId_True
13891: oPushResult
13892: oCall 13429
13894: oPop 2
13896: oAssign
13897: oGetLocal 1
13899: oPushResult
13900: oSetResult 21
13902: oPushResult
13903: oGetGlobal 7
13905: oPushResult
13906: oNodeSet
13907: oPop 3
13909: oGetLocal 1
13911: oPushResult
13912: oSetResult 22
13914: oPushResult
13915: oSetResult 1
13917: oPushResult
13918: oNodeSetInt
13919: oPop 3
13921: oGetLocal 1
13923: oPushResult
13924: oScopeDeclare
13925: oPop 1
13927: oGetAddrLocal 1
13929: oPushResult
13930: oSetResult 16
13932: oPushResult
13933: oId_False
13934: oPushResult
13935: oCall 13429
13937: oPop 2
13939: oAssign
13940: oGetLocal 1
13942: oPushResult
13943: oSetResult 21
13945: oPushResult
13946: oGetGlobal 7
13948: oPushResult
13949: oNodeSet
13950: oPop 3
13952: oGetLocal 1
13954: oPushResult
13955: oSetResult 22
13957: oPushResult
13958: oSetResult 0
13960: oPushResult
13961: oNodeSetInt
13962: oPop 3
13964: oGetLocal 1
13966: oPushResult
13967: oScopeDeclare
13968: oPop 1
13970: oGetAddrLocal 1
13972: oPushResult
13973: oSetResult 16
13975: oPushResult
13976: oId_Nil
13977: oPushResult
13978: oCall 13429
13980: oPop 2
13982: oAssign
13983: oGetLocal 1
13985: oPushResult
13986: oSetResult 21
13988: oPushResult
13989: oGetGlobal 12
13991: oPushResult
13992: oNodeSet
13993: oPop 3
13995: oGetLocal 1
13997: oPushResult
13998: oSetResult 22
14000: oPushResult
14001: oSetResult 0
14003: oPushResult
14004: oNodeSetInt
14005: oPop 3
14007: oGetLocal 1
14009: oPushResult
14010: oScopeDeclare
14011: oPop 1
14013: oGetAddrGlobal 15
14015: oPushResult
14016: oId_Ord
14017: oPushResult
14018: oCall 13473
14020: oPop 1
14022: oAssign
14023: oGetAddrGlobal 16
14025: oPushResult
14026: oId_Chr
14027: oPushResult
14028: oCall 13473
14030: oPop 1
14032: oAssign
14033: oGetAddrGlobal 17
14035: oPushResult
14036: oId_Pred
14037: oPushResult
14038: oCall 13473
14040: oPop 1
14042: oAssign
14043: oGetAddrGlobal 18
14045: oPushResult
14046: oId_Succ
14047: oPushResult
14048: oCall 13473
14050: oPop 1
14052: oAssign
14053: oReturn
