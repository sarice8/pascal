   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pDoubleLit
   2:    pStrLit
   2:    pCharLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pCase
   2:    pOtherwise
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushAddrGlobal   % <offset> - push ptr to global var (same as tPushConstP)
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tSwap             % swap the top two entries on the stack
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tCastBtoI         % zero-extend uint8_t to int32_t
   2:    tCastItoB         % truncate int32_t to uint8_t
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubP
   2:    tSubPI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tNot              % negate top boolean
   2:    tEqualB
   2:    tNotEqualB
   2:    tGreaterB         % B is uint8_t, so these are unsigned comparisons
   2:    tLessB
   2:    tGreaterEqualB
   2:    tLessEqualB
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too, but I'm moving to tEqualB etc for those
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tGreaterP
   2:    tLessP
   2:    tGreaterEqualP
   2:    tLessEqualP
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tJumpCaseB        % <label#>  pops uint8_t, jumps to case indicated by table at label (consisting of tCase, tCaseRange, tCaseEnd)
   2:    tJumpCaseI        % <label#>  pops integer, jumps to case indicated by table at label
   2:    tJumpCaseS        % <label#>  pops pointer to ShortString, jumps to case indicated by table at label
   2:    tCase             % <int> <label#>  - case table entry: if match int, goto label.  For tJumpCaseS, int is offset into global data.
   2:    tCaseRange        % <lowint> <highint> <label#>  - case table entry: if lowint <= value <= highint, goto label.  For tJumpCaseS, offsets into global.
   2:    tCaseEnd          % <label#> - end of case table.  Label points to no-match code (otherwise clause or end of statement).
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteChar        %  "     "    : write char, pop
   2:    tWriteShortStr    %  "     "    : write ShortString whose addr is on tos, pop
   2:    tWritePChar       %  "     "    : write a null-terminated string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteCR          %  "     "    : write cr
   2:    tReadI            % for readln : pointer to integer on tos.  Assign read value to it, and pop
   2:    tReadChar         %  "     "   : pointer to char on tos.  Asign read value to it, and pop
   2:    tReadShortStr     % <capacity>  "     "   : pointer to ShortString on tos, and given max capacity.  Assign read value to it, and pop
   2:    tReadCR           %  "     "   : read the end-of-line.  Will accept any platform's eoln sequence.
   2:    tFile             % <file#> - pascal source file id, for debugging.  I haven't decided yet how I will communicate the corresponding filename.
   2:    tLine             % <line#> - pascal source line number, for debugging
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    eCantUsePredSuccOnEnumWithValueGaps
   2:    eCantDereference
   2:    eSizeMismatch
   2:    eTypeNameNotAllowedHere
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nBuiltInFunc
   2: 	nBuiltInProc
   2: 	nConst
   2: 	nEnumValue
   2: 	nConstStr
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nTypedConst
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nByteType
   2: 	nIntegerType
   2: 	nSingleType
   2: 	nDoubleType
   2: 	nBooleanType
   2: 	nBooleanFlowType
   2: 	nCharType
   2: 	nPointerType
   2: 	nUniversalPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nStrLitType
   2: 	nShortStringType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qValueStr
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qCapacity
   2: 	qNameTable
   2: 	qHasGap
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     oMAXINT >> int    % the maximum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     UNACCEPT_TOKEN            % Unaccept the last accepted token.  The next input, inputchoice will see it again.
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % gets/adds a predefined id to the scanner's id table, and returns the id code
   2:     oId_mysystem >> int
   2:     oId_ShortStringAppendShortString >> int
   2:     oId_ShortStringAppendChar >> int
   2:     oId_ShortStringCmp >> int
   2:     oId_File >> int
   2:     oId_Integer >> int
   2:     oId_Boolean >> int
   2:     oId_Char >> int
   2:     oId_Byte >> int
   2:     oId_Single >> int
   2:     oId_Double >> int
   2:     oId_Pointer >> int
   2:     oId_ShortString >> int
   2:     oId_True >> int
   2:     oId_False >> int
   2:     oId_Nil >> int
   2:     oId_Ord >> int
   2:     oId_Chr >> int
   2:     oId_Pred >> int
   2:     oId_Succ >> int
   2:     oId_Sizeof >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    oCodeDiscard( Code )     % discard the given code stream
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValuePushString(String)    % push string onto value stack
   2:    oValueTop >> int            % get top value on value stack
   2:    oValueTopString >> String
   2:    oValueSwap                  % swap top two
   2:    oValuePop
   2:    oValueCharToString          % convert top value from char to string
   2:    oValueNegate                % negate top numeric value
   2:    oValueEqual
   2:    oValueNotEqual
   2:    oValueLess
   2:    oValueGreater
   2:    oValueLessEqual
   2:    oValueGreaterEqual
   2:    oValueOr                    % boolean or
   2:    oValueAnd
   2:    oValueNot                   % boolean not
   2:    oValueAdd
   2:    oValueSub
   2:    oValueMult
   2:    oValueDiv
   2:    oValueStringCmp             % compare top two strings. replace with negative, 0, or positive
   2:    oValueStringConcat
   2:    ;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    oStringAllocShortStringLit( String ) >> int  % alloc global space for ShortString, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      
   2: int     mysystemId               % id of identifier "mysystem"
      
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanFlowType
   2: Node    CharType
   2: Node    PCharType
   2: Node    ByteType
   2: Node    SingleType
   2: Node    DoubleType
   2: Node    UniversalPointerType
   2: Node    StrLitType
   2: Node    ShortStringType
      
      % nBuiltInFunc
   2: Node    BuiltIn_Ord
   2: Node    BuiltIn_Chr
   2: Node    BuiltIn_Pred
   2: Node    BuiltIn_Succ
   2: Node    BuiltIn_Sizeof
      
      % Declarations in unit mysystem that the compiler may refer to directly.
      
   2: Node    System_ShortStringAppendShortString
   2: Node    System_ShortStringAppendChar
   2: Node    System_ShortStringCmp
      
      
      % Expr has a corner case flag, needed for sizeof()
   2: boolean flagExprAllowTypeName
      
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: EnumTypeRef( out Node resultType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: OrdinalHigh( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowFlow( out Label falseLabel );
   2: BoolExprAllowFlow( out Label falseLabel );
   2: BoolTermAllowFlow( out Label falseLabel );
   2: BoolFactorAllowFlow( out Label falseLabel );
   2: ArithExprAllowFlow( out Label falseLabel );
   2: TermAllowFlow( out Label falseLabel );
   2: FactorAllowFlow( out Label falseLabel );
   2: PrimaryAllowFlow( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueFromDecl( Node decl, boolean writeable );
   2: LValueVar( Node decl, boolean writeable );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: FlowToVal( inout Label falseLabel );
   2: ValToFlow( out Label falseLabel );
   2: MoveIntoTempShortString >> int;
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Start ----------------------------
      
   2: MainRule:
   4:    @Program
   7:    ;
      
   7: include 'pascal_unit.ssl'
      
      %
      %  Pascal Compiler
      %
      
      % ------------------------------ Units -----------------------------
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
   7: UsesClause( Node user ):
   9:    {
   9:       pIdent
  11:       @Uses( LAST_ID, user )
  20:       [
  20:          | ',' :
  22:          | * :  >
  29:       ]
  29:    }   
  31:    ';'
  34:    ;
      
      
      % Process an implicit "uses mysystem" in every module, except in the mysystem unit itself.
      % (I'm calling the unit mysystem rather than system, so fpc doesn't use it to replace its own system unit.)
      %
  34: UsesMySystem( Node user ):
  36:    [ equal( oNodeGetInt( user, qIdent ), mysystemId )
  53:       | true :  >>
  55:       | * :
  60:    ]
  60:    @Uses( mysystemId, user )
  71:    ;
      
      
      % After processing the mysystem unit interface, grab certain declarations from it
      % that the compiler may want to refer to later.
      %
  71: FindSelectSystemDecls( Node unit ):
  73:    [ equal( oNodeGetInt( unit, qIdent ), mysystemId )
  90:       | true :
  91:          System_ShortStringAppendShortString = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendShortString )
 108:          System_ShortStringAppendChar = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendChar )
 125:          System_ShortStringCmp = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringCmp )
 142:       | * :
 147:    ]
 148:    ;
      
      
      % The given user module uses a unit with the given id,
      % which may or may not have been loaded already.
      %
 148: Uses( int id, Node user ):
 150:    Node unit = @FindOrCompileUnit( id )
 161:    [ equal_node( unit, Null )
 171:       | false :
 172:          oNodeAddLast( user, qUsedUnits, unit )
      
               % Put a declaration in the current scope, naming the unit and pointing to it.
               % This is to allow references to  <unit>.<identifier_in_unit>
 184:          Node unitRef = oNodeNew( nUnitRef )
 194:          oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 213:          oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 232:          oScopeDeclare( unitRef )
 238:       | * :
 243:    ];
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 244: ResolveUnitRef( inout Node decl ):
 246:    [ oNodeType( decl )
 253:       | nUnitRef :
 254:          Node scope = oNodeGet( decl, qPublicScope )
 267:          '.'
 269:          pIdent
 271:          decl = oScopeFindRequireInScope( scope )
 281:       | * :
 286:    ];
      
      
 287: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 289:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 302:    {
 302:       Node unit = oNodeIterValue( unitIt )
 312:       [ oNodeNull( unit )
 319:          | false :
 320:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 333:          | * :
 338:             >
 340:       ]
 340:       oNodeIterNext( unitIt )
 346:    }
 349:    ;
      
 349: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 351:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 364:    {
 364:       Node unit = oNodeIterValue( unitIt )
 374:       [ oNodeNull( unit )
 381:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 382:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 398:                | true :
 399:                | false :  #eInternalScopeMismatch
 403:             ]
 411:             oScopeEnd
 412:          | * :
 417:             >
 419:       ]
 419:       oNodeIterPrev( unitIt )
 425:    }
 428:    ;
      
      
 428: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 430:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 449:    [ equal_node( unit, Null )
 459:       | false :  >> unit
 463:       | * :
 468:    ]
      
         % If not, search for the source file on disk
 468:    boolean ok = oIncludeUnitFile( id )
 478:    [ ok
 481:       | false :  #eCantFindUnitFile  >> Null
 487:       | * :
 492:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 492:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 498:    oIncludeEnd
 499:    >> unit;
      
      
      
 503: Unit >> Node:
 505:    pUnit
 507:    pIdent
 509:    Node unit = oNodeNew( nUnit )
 519:    oNodeSetInt( unit, qIdent, LAST_ID )
 530:    Node unitImpl = oNodeNew( nUnitImpl )
 540:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 551:    oNodeSet( unit, qImpl, unitImpl )
 563:    ';'
      
         % mandatory sections
      
 565:    pInterface
 567:    @UsesMySystem( unit )
 574:    [
 574:       | pUses :   @UsesClause( unit )
 583:       | * :
 588:    ]
 588:    @EnterUsedUnits( unit )
      
 595:    oScopeBegin( 0, allocGlobal )
 604:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 615:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 620:    oScopeBegin( 0, allocDown )
 629:    initScope = oScopeCurrent
 634:    oNodeSet( unit, qInitRoutineScope, initScope )
 646:    oScopeEnd
      
 647:    @UnitInterface( unit )
 654:    oScopeEnd  % interface scope
      
 655:    pImplementation
 657:    @UsesMySystem( unitImpl )
 664:    [
 664:       | pUses :   @UsesClause( unitImpl )
 673:       | * :
 678:    ]
 678:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 685:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 698:    oScopeBegin( 0, allocGlobal )
 707:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
 718:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
 736:    globalScope = oScopeCurrent
 741:    @UnitImplementation( unit )
      
 748:    [
 748:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
 760:       | * :                @UnitInitialization( unit, false )  % implicit init routine
 775:    ]
 775:    [
 775:       | pFinalization :  @UnitFinalization( unit, true )
 787:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
 802:    ]
 802:    pEnd  '.'
      
 806:    oScopeEnd  % impl scope
 807:    oScopeEnd  % interface scope
 808:    @EndUsedUnits( unitImpl )  % used units scopes
 815:    @EndUsedUnits( unit )
 822:    oNodeAddLast( workspace, qUnits, unit )
 834:    >> unit;
      
      
 838: UnitInterface( Node unit ):
 840:    {[
 840:       | pConst :     @ConstDecl
 844:       | pType :      @TypeDecl
 848:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
 857:       | pProcedure :
 859:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
 865:          [
 865:             | pExternal :
 867:                @ExternalDecl( decl )
 874:                ';'
 876:             | * :
 881:          ]
      
 881:       | pFunction :
 883:          Node decl = @FuncHeaderDecl
 889:          [
 889:             | pExternal :
 891:                @ExternalDecl( decl )
 898:                ';'
 900:             | * :
 905:          ]
      
 905:       | * :          >
 920:    ]}
 922:    @FindSelectSystemDecls( unit )
 930:    ;
      
 930: UnitImplementation( Node unit ):
 932:    @BlockDecls( nGlobalVar )
 940:    ;
      
      
 940: UnitInitialization( Node unit, boolean hasStmts ):
 942:    Label label = oLabelNew
 947:    .tLabel  oEmitLabel( label )
 955:    oNodeSetLabel( unit, qInitLabel, label )
      
 967:    int patchLS
 967:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
 976:    Node scope
 976:    Code initCode
      
 976:    scope = oNodeGet( unit, qPublicScope )
 989:    initCode = oNodeGetCode( scope, qInitCode )
1002:    oEmitCode( initCode )
1008:    oNodeSetCode( scope, qInitCode, codeNull )
      
1020:    scope = oNodeGet( unit, qPrivateScope )
1033:    initCode = oNodeGetCode( scope, qInitCode )
1046:    oEmitCode( initCode )
1052:    oNodeSetCode( scope, qInitCode, codeNull )
      
1064:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1077:    [ hasStmts
1080:       | true :     
1081:          @Statement
1083:          {[
1083:             | ';' :  @Statement
1087:             | * :    >
1094:          ]}
1096:       | * :
1101:    ]
      
1101:    .tReturn
      
1103:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1115:    oPatch( patchLS, localSpace )
1124:    oScopeEnd   % init routine scope, for temporaries
1126:    ;
      
      
1126: UnitFinalization( Node unit, boolean hasStmts ):
1128:    Label label = oLabelNew
1133:    .tLabel  oEmitLabel( label )
1141:    oNodeSetLabel( unit, qFinalLabel, label )
      
1153:    int patchLS
1153:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1162:    oScopeBegin( 0, allocDown )
      
1171:    [ hasStmts
1174:       | true :     
1175:          @Statement
1177:          {[
1177:             | ';' :  @Statement
1181:             | * :    >
1188:          ]}
1190:       | * :
1195:    ]
      
1195:    .tReturn
      
1197:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1209:    oPatch( patchLS, localSpace )
1218:    oScopeEnd   % final routine scope, for temporaries
1220:    ;
      
      
1220: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1222:    NodeIter it = oNodeGetIter( workspace, qUnits )
1235:    {
1235:       Node unit = oNodeIterValue( it )
1245:       [ oNodeNull( unit )
1252:          | true :  >
1255:          | false :
1257:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1265:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1280:             .tFreeActuals  oEmitInt( 0 )
1288:             oNodeIterNext( it )
1294:       ]
1302:    };
      
      
1305: FinalizeUnits:
1307:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1320:    {
1320:       Node unit = oNodeIterValue( it )
1330:       [ oNodeNull( unit )
1337:          | true :  >
1340:          | false :
1342:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1350:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1365:             .tFreeActuals  oEmitInt( 0 )
1373:             oNodeIterPrev( it )
1379:       ]
1387:    };
      
1390: include 'pascal_decl.ssl'
      %
      % Pascal Compiler
      %
      
      % ----------------------------- Declarations ----------------------------
      
      
      
      % modifers that may appear on a proc/function declaration.
      %
1390: MethodModifiers( Node decl ):
1392:    {[
1392:       | pCdecl :
1394:          oNodeSetBoolean( decl, qCdecl, true )
1406:          ';'
      
1408:       | * : >
1415:    ]}
1418:    ;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
1418: ExternalDecl( Node decl ):
1420:    [ equal_zero( @DeclLevel( decl ) )
1432:       | false :  #eExternalMethodCannotBeNested
1435:       | * :
1440:    ]
1440:    oNodeSetBoolean( decl, qExternal, true )
1452:    [
1452:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
1454:          [
1454:             | pName :
1456:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
1458:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
1469:             | * :
1474:          ]
1474:       | * :
1479:    ]
1479:    @DefineExternLabel( decl )
1487:    ;
      
      
1487: ProcHeaderDecl >> Node:
1489:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1491:    boolean redeclaring = false
1497:    Node decl = oScopeFindInCurrentScope
      
1502:    [ oNodeNull( decl )
1509:       | true :
               % first declaration
1510:          decl = @newIdent( nProc, LAST_ID )
1523:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1534:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1536:          redeclaring = true
1542:          [ oNodeGetBoolean( decl, qBodyDefined )
1552:             | true : #eAlreadyDefined
1555:             | * :
1560:          ]
1560:          [ oNodeGetBoolean( decl, qExternal )
1570:             | true : #eAlreadyDefined
1573:             | * :
1578:          ]
1578:          [ oNodeType( decl )
1585:             | nProc :
1586:             | * : #eAlreadyDefined   % wrong kind
1593:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
1593:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
1612:          oNodeSet( decl, qParams, Null )
1624:    ]
      
1632:    int level = @ScopeLevel
1638:    boolean nested = greater( level, 0 )
1651:    inc( level )
1657:    oScopeBegin( level, allocUp )
1666:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
1671:    [ nested
1674:       | true :
1675:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
1690:       | * :
1695:    ]
      
1695:    @FormalArgDecl
1697:    oNodeSet( decl, qParams, paramScope )
1709:    oScopeEnd
1710:    ';'
      
1712:    [ redeclaring
1715:       | false : oScopeDeclare( decl )
1722:       | true :  % TO DO: check that qParams is consistent with qOldParams
1724:    ]
      
1732:    @MethodModifiers( decl )
1739:    >> decl;
      
      
1743: ProcDecl:
1745:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
1751:    [
1751:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
1753:       | pExternal : @ExternalDecl( decl )
      
1762:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
1769:          Node paramScope = oNodeGet( decl, qParams )
1782:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
1788:          int level = oNodeGetInt( paramScope, qLevel )
1801:          oScopeBegin( level, allocDown )
1810:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
1821:          Label label = oNodeGetLabel( decl, qValue )
1834:          @Block( nLocalVar, label )
1844:          oNodeSetBoolean( decl, qBodyDefined, true )
1856:          oScopeEnd
      
1857:          oScopeEnd  % paramScope
1858:    ]
1858:    ';';
      
      
      
1861: FuncHeaderDecl >> Node:
1863:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1865:    boolean redeclaring = false
1871:    Node decl = oScopeFindInCurrentScope
      
1876:    [ oNodeNull( decl )
1883:       | true :
               % first declaration
1884:          decl = @newIdent( nFunc, LAST_ID )
1897:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1908:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1910:          redeclaring = true
1916:          [ oNodeGetBoolean( decl, qBodyDefined )
1926:             | true : #eAlreadyDefined
1929:             | * :
1934:          ]
1934:          [ oNodeType( decl )
1941:             | nFunc :
1942:             | * : #eAlreadyDefined   % wrong kind
1949:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
1949:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
1968:          oNodeSet( decl, qParams, Null )
1980:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
1999:          oNodeSet( decl, qType, Null )
2011:    ]
      
2019:    int level = @ScopeLevel
2025:    boolean nested = greater( level, 0 )
2038:    inc( level )
2044:    oScopeBegin( level, allocUp )
2053:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2058:    [ nested
2061:       | true :
2062:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2077:       | * :
2082:    ]
      
2082:    @FormalArgDecl
2084:    oNodeSet( decl, qParams, paramScope )
      
2096:    ':'
      
2098:    Node theType
2098:    @TypeRef( theType )
2105:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2117:    Node ptrType = @PointerTypeTo( theType )
2128:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2144:    oScopeEnd
2145:    ';'
      
2147:    [ redeclaring
2150:       | false : oScopeDeclare( decl )
2157:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2159:    ]
      
2167:    @MethodModifiers( decl )
      
2174:    >> decl;
      
      
2178: FuncDecl:
2180:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2186:    [
2186:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2188:       | pExternal : @ExternalDecl( decl )
      
2197:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2204:          Node paramScope = oNodeGet( decl, qParams )
2217:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2223:          int level = oNodeGetInt( paramScope, qLevel )
2236:          oScopeBegin( level, allocDown )
2245:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2256:          Label label = oNodeGetLabel( decl, qValue )
2269:          @Block( nLocalVar, label )
2279:          oNodeSetBoolean( decl, qBodyDefined, true )
2291:          oScopeEnd
      
2292:          oScopeEnd  % paramScope
2293:    ]
2293:    ';';
      
      
2296: FormalArgDecl:
2298:    [
2298:       | '(' :
2300:          {
2300:             NodeVec decls = oNodeVecNew
2305:             Node decl
2305:             boolean isInOut = false
      
2311:             [
2311:                | pVar : isInOut = true
2319:                | * :
2324:             ]
      
2324:             {  pIdent
      
2326:                decl = @newIdent( nParam, LAST_ID )
2339:                oNodeSetBoolean( decl, qInOut, isInOut )
2351:                oNodeVecAppend( decls, decl )
      
2360:                [
2360:                   | ':' : >
2364:                   | ',' :
2366:                ]
2374:             }
      
2376:             Node theType
2376:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
2383:             Node allocType
2383:             [ isInOut
2386:                | true :   allocType = @PointerTypeTo( theType )
2398:                | * :      allocType = theType
2409:             ]
      
2409:             int i = 0
2415:             {[ equal( i, oNodeVecSize( decls ) )
2429:                | false :
2430:                   decl = oNodeVecElement( decls, i )
      
2443:                   oNodeSet( decl, qType, theType )
2455:                   oScopeDeclare( decl )
2461:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
2477:                   inc( i )
2483:                | * :
2488:                   >
2490:             ]}
      
2492:             oNodeVecDelete( decls )
      
2498:             [
2498:                | ')' : >
2502:                | ';' :
2504:             ]
2512:          }
2514:       | * :
2519:    ];
      
      
2520: ConstDecl:
2522:    {[
2522:       | pIdent :
2524:          [
2524:             | ':' :
2526:                @TypedConstDecl
2528:             | * :
2533:                @TrueConstDecl
2535:          ]
2535:       | * :
2540:          >
2542:    ]};
      
      
      % Parse a true constant declaration (as opposed to a typed const declaration).
      % The "true constant" terminology comes from Delphi docs.  It refers to a const that is
      % evaluated at compile time, rather than at program startup time.
      %
      % We've just accepted the identifier.
      %
2545: TrueConstDecl:
2547:    int id = LAST_ID
2552:    '='
      
2554:    @ConstExpr
      
2556:    Node decl
2556:    [ oTypeSNodeType
2558:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType,
2559:         nPointerType, nUniversalPointerType :
2559:          decl = @newIdent( nConst, id )
2573:          oNodeSetInt( decl, qValue, oValueTop )
2584:       | nStrLitType :
2586:          decl = @newIdent( nConstStr, id )
2600:          oNodeSetString( decl, qValueStr, oValueTopString )
2611:       | * :  #eNotAllowed
2632:    ]
2632:    oValuePop
2633:    oNodeSet( decl, qType, oTypeSTop )
2644:    oTypeSPop
2645:    oScopeDeclare( decl )
2651:    ';'
2654:    ;
      
      
      % Parse a typed const declaration.
      % We've just accepted the identifier and ':'
      %
2654: TypedConstDecl:
2656:    Node decl = @newIdent( nTypedConst, LAST_ID )
      
2669:    Node theType
2669:    @TypeRef( theType )
2676:    oNodeSet( decl, qType, theType )
      
         % Array and record consts are allocated in global memory,
         % with global offset stored as decl value.
         % Scalar consts are not allocated in memory, and their value is
         % stored directly as the decl value, as I do with "true constants".
         %
         % TO DO: I probably should store scalar consts in memory too, in case somebody
         % wants to get a pointer to them.  And anyway, typed constants can't be used in
         % constant expressions, so less need to store value in decl node.
      
         % TO DO: skip subranges, similar to oTypeSNodeType.
2688:    [ oNodeType( theType )
2695:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType,
2696:         nPointerType, nUniversalPointerType :
               % Parse expression and store value in decl
2696:          '='
      
2698:          oTypeSPush( theType )
2704:          @ConstExpr
2706:          @ConstCoerceType
      
2708:          oNodeSetInt( decl, qValue, oValueTop )
2719:          oValuePop
2720:          oTypeSPop
2721:          oScopeDeclare( decl )
2727:          ';'
      
2729:       | nShortStringType, nFileType :
2731:          #eNotImplemented
      
2733:       | nArrayType, nRecordType :
               % Allocate global space, store address in decl.
               % Push into global scope init code stream (since we'll be issuing code
               % rather than creating static data, at the moment).
               % Parse expression and store in global memory.
2735:          oScopeEnter( globalScope )
2741:          int addr = oScopeAllocType( theType )
2751:          oScopeEnd
2752:          oCodePush( @GetOrCreateInitCode( globalScope ) )
2763:          oNodeSetInt( decl, qValue, addr )
2775:          '='
2777:          @TypedConstInit( theType, addr )
2787:          oCodePop
2788:          oScopeDeclare( decl )
2794:          ';'
2796:    ]
2823:    ;
      
      
      % Parse the initial value of a constant that's being stored in global memory.
      % (An array or record constant, and recursively all its elements.)
      % Given the type, and the address in global memory for the const value.
      % The caller has already pushed into the global init code stream.
      %
2823: TypedConstInit( Node theType, int addr ):
      
         % TO DO: skip subranges, similar to oTypeSNodeTYpe
2825:    [ oNodeType( theType )
2832:       | nArrayType :
2833:          Node baseType = oNodeGet( theType, qBaseType )
2846:          Node indexType = oNodeGet( theType, qIndexType )
2859:          int low = @OrdinalLow( indexType )
2870:          int high = @OrdinalHigh( indexType )
2881:          int elementSize = oNodeGetInt( baseType, qSize )
      
2894:          '('
               % Loop over elements
2896:          int i = low
2902:          {
2902:             @TypedConstInit( baseType, addr )
2912:             [ equal( i, high )
2922:                | true : >
2925:                | false :
2927:             ]
2935:             ','
2937:             addr = add( addr, elementSize )
2950:             inc( i )
2956:          }
2958:          ')'
      
2960:       | nRecordType :
2962:          '('
2964:          Node fieldScope = oNodeGet( theType, qScope )
               % Loop over zero or more named fields.  It's not necessary to name them all.
               % fpc says the names that are given should be in order, but I'm not requiring that.
               % Since this is global memory, uninitialized fields will be left as 0.
2977:          {
2977:             [
2977:                | pIdent :
2979:                | * :  >
2986:             ]
2986:             Node field = oScopeFindRequireInScope( fieldScope )
2996:             ':'
2998:             Node fieldType = oNodeGet( field, qType )
3011:             int fieldAddr = add( addr, oNodeGetInt( field, qValue ) )
3031:             @TypedConstInit( fieldType, fieldAddr )
3041:             [
3041:                | ';' :
3043:                | * :  >
3050:             ]
3050:          }
3052:          ')'
      
3054:       | nBooleanType, nByteType, nCharType:
3056:          .tPushAddrGlobal  oEmitInt( addr )
3064:          oTypeSPush( theType )
3070:          @ConstExpr
3072:          @ConstCoerceType
3074:          .tPushConstI  oEmitInt( oValueTop )
3081:          oValuePop
3082:          oTypeSPop
3083:          .tAssignB
      
3085:       | nIntegerType, nEnumType:
3087:          .tPushAddrGlobal  oEmitInt( addr )
3095:          oTypeSPush( theType )
3101:          @ConstExpr
3103:          @ConstCoerceType
3105:          .tPushConstI  oEmitInt( oValueTop )
3112:          oValuePop
3113:          oTypeSPop
3114:          .tAssignI
      
3116:       | nPointerType, nUniversalPointerType :
3118:          .tPushAddrGlobal  oEmitInt( addr )
3126:          oTypeSPush( theType )
3132:          @ConstExpr
3134:          @ConstCoerceType
3136:          .tPushConstI  oEmitInt( oValueTop )   % only allowing ptr constant Nil so don't need tPushConstP or link redirection
3143:          oValuePop
3144:          oTypeSPop
3145:          .tAssignP
      
3147:       | nShortStringType, nFileType :
3149:          #eNotImplemented
3151:    ]
3178:    ;
      
      
3178: TypeDecl:
3180:    {[
3180:       | pIdent :
3182:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3195:          '='
3197:          Node theType
3197:          @TypeRef( theType )
3204:          oNodeSet( decl, qType, theType )
3216:          oScopeDeclare( decl )
3222:          ';'
3224:       | * :
3229:          >
3231:    ]};
      
3234: VarDecl( node_type varNodeType ):
3236:    {[
3236:       | pIdent :
3238:          NodeVec decls = oNodeVecNew
3243:          Node decl
3243:          {
3243:             decl = @newIdent( varNodeType, LAST_ID )
3256:             oNodeVecAppend( decls, decl )
3265:             [
3265:                | ',' :
3267:                   pIdent
3269:                | * :
3274:                   >
3276:             ]
3276:          }
3278:          ':'
3280:          Node theType
3280:          @TypeRef( theType )
      
3287:          int i = 0
3293:          {[ equal( i, oNodeVecSize( decls ) )
3307:             | false :
3308:                decl = oNodeVecElement( decls, i )
3321:                oNodeSet( decl, qType, theType )
3333:                oScopeDeclareAlloc( decl )
3339:                inc( i )
3345:             | * :
3350:               >
3352:          ]}
      
               % optional initialization
3354:          [
3354:             | '=' :
3356:                [ oNodeVecSize( decls )
3363:                   | 1 :
3364:                   | * :  #eOnlyOneVarCanBeInitialized
3371:                ]
      
                     % we need an initCode stream for this scope
3371:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3381:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3387:                boolean changedScope = false
3393:                [ equal_zero( @ScopeLevel )
3400:                   | true : oScopeEnter( initScope )
3407:                            changedScope = true
3413:                   | * :
3418:                ]
                     % generate assignment in initCode stream
3418:                @LValueVar( decl, true )
3428:                @Expr
3430:                @CoerceType
3432:                @Assign
3434:                [ changedScope
3437:                   | true : oScopeEnd
3439:                   | * :
3444:                ]
3444:                oCodePop
                   
3445:             | * :
3450:          ]
      
3450:          oNodeVecDelete( decls )
3456:          ';'
3458:       | * :
3463:          >
3465:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3468: LabelDecl:
3470:    {
3470:       Node decl
3470:       [
3470:          | pIdent :
3472:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3474:             oChangeIntLitToLabelIdent
3475:       ]
3483:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
3496:       Label label = oLabelNew
3501:       oNodeSetLabel( decl, qValue, label )
3513:       oScopeDeclare( decl )
3519:       [
3519:          | ',' :
3521:          | * :
3526:             >
3528:       ]
3528:    }
3530:    ';'
3533:    ;
3533: include 'pascal_constexpr.ssl'
      %
      % Pascal Compiler
      %
      
      % --------------------------- Const Expressions --------------------------
      
      
      % Constant expressions are evaluated at compile time.
      % They are limited to constant literals, declared constants (not including TypedConstants!)
      % and a small selection of built-in functions. 
      %
      % The value of a constant expression is left on the Value Stack.
      % The type is left on the Type Stack.
      
3533: ConstExpr:
3535:    @ConstBoolExpr
3537:    {[
3537:       | '=' :
3539:          @ConstBoolTerm
3541:          @ConstMatchTypes
3543:          [ oTypeSNodeType
3545:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueEqual
3554:             | * :             oValueEqual
3560:          ]
3560:          oTypeSPop  oTypeSPush( BooleanType )
3567:       | '<>' :
3569:          @ConstBoolExpr
3571:          @ConstMatchTypes
3573:          [ oTypeSNodeType
3575:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueNotEqual
3584:             | * :             oValueNotEqual
3590:          ]
3590:          oTypeSPop  oTypeSPush( BooleanType )
3597:       | '<' :
3599:          @ConstBoolExpr
3601:          @ConstMatchTypes
3603:          [ oTypeSNodeType
3605:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueLess
3614:             | * :             oValueLess
3620:          ]
3620:          oTypeSPop  oTypeSPush( BooleanType )
3627:       | '>' :
3629:          @ConstBoolExpr
3631:          @ConstMatchTypes
3633:          [ oTypeSNodeType
3635:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueGreater
3644:             | * :             oValueGreater
3650:          ]
3650:          oTypeSPop  oTypeSPush( BooleanType )
3657:       | '<=' :
3659:          @ConstBoolExpr
3661:          @ConstMatchTypes
3663:          [ oTypeSNodeType
3665:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueLessEqual
3674:             | * :             oValueLessEqual
3680:          ]
3680:          oTypeSPop  oTypeSPush( BooleanType )
3687:       | '>=' :
3689:          @ConstBoolExpr
3691:          @ConstMatchTypes
3693:          [ oTypeSNodeType
3695:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueGreaterEqual
3704:             | * :             oValueGreaterEqual
3710:          ]
3710:          oTypeSPop  oTypeSPush( BooleanType )
3717:       | * :  >
3734:    ]};
      
      
      % Same as ConstExpr, but allow a typename as a primary.
      % This is for use within sizeof().
      % The value produced by that primary is bogus, but doesn't matter.
      %
3737: ConstExprAllowTypeName:
3739:    boolean oldAllowTypeName = flagExprAllowTypeName
3745:    flagExprAllowTypeName = true
3751:    @ConstExpr
3753:    flagExprAllowTypeName = oldAllowTypeName
3760:    ;
      
      
3760: ConstBoolExpr:
3762:    @ConstBoolTerm
3764:    {[
3764:       | pOr :
3766:          @ConstRequireBool
3768:          @ConstBoolTerm
3770:          @ConstRequireBoolPop
3772:          oValueOr
3773:       | * :  >
3780:    ]};
      
      
3783: ConstBoolTerm:
3785:    @ConstBoolFactor
3787:    {[
3787:       | pAnd :
3789:          @ConstRequireBool
3791:          @ConstBoolFactor
3793:          @ConstRequireBoolPop
3795:          oValueAnd
3796:       | * :  >
3803:    ]};
      
      
3806: ConstBoolFactor:
3808:    [
3808:       | pNot :
3810:          @ConstBoolFactor
3812:          @ConstRequireBool
3814:          oValueNot
3815:       | * :
3820:          @ConstArithExpr
3822:    ];
      
      
3823: ConstArithExpr:
3825:    @ConstTerm
3827:    {[
3827:       | '+' :
3829:          @ConstTerm
3831:          @ConstMatchTypes
3833:          [ oTypeSNodeType
3835:             | nStrLitType :   oValueStringConcat
3837:             | * :             oValueAdd
3843:          ]
3843:       | '-' :
3845:          @ConstTerm
3847:          @ConstMatchTypes
3849:          [ oTypeSNodeType
3851:             | nStrLitType :   #eNotAllowed
3854:             | * :             oValueSub
3860:          ]
3860:       | * :  >
3869:    ]};
      
      
3872: ConstTerm:
3874:    @ConstFactor
3876:    {[
3876:       | pTimes :
3878:          @ConstFactor
3880:          @ConstMatchTypes
3882:          [ oTypeSNodeType
3884:             | nStrLitType :   #eNotAllowed
3887:             | * :             oValueMult
3893:          ]
3893:       | pDivide :
3895:          @ConstFactor
3897:          @ConstMatchTypes
3899:          [ oTypeSNodeType
3901:             | nStrLitType :   #eNotAllowed
3904:             | * :             oValueDiv
3910:          ]
3910:       | * :  >
3919:    ]};
      
      
3922: ConstFactor:
3924:    [
3924:       | pPlus :
3926:          @ConstPrimary
3928:       | pMinus :
3930:          @ConstPrimary
3932:          oValueNegate
3933:       | * :
3940:          @ConstPrimary
3942:    ];
      
      
3943: ConstPrimary:
3945:    [
3945:       | pIntLit :
3947:          oValuePush( TOKEN_VALUE )
3952:          oTypeSPush( IntegerType )
3958:       | pCharLit :
3960:          oValuePush( TOKEN_VALUE )
3965:          oTypeSPush( CharType )
3971:       | pStrLit :
3973:          oValuePushString( CURRENT_STRLIT )
3978:          oTypeSPush( StrLitType )
3984:       | '(' :
3986:          @ConstExpr
3988:          ')'
3990:       | pIdent :
3992:          Node decl = oScopeFindRequire
3997:          @ResolveUnitRef( decl )
4004:          [ oNodeType( decl )
4011:             | nBuiltInFunc :
4012:                @ConstBuiltInFunc( decl )
4019:             | nConst :
4021:                oValuePush( oNodeGetInt( decl, qValue ) )
4034:                oTypeSPush( oNodeGet( decl, qType ) )
4047:             | nConstStr :
4049:                oValuePushString( oNodeGetString( decl, qValueStr ) )
4062:                oTypeSPush( oNodeGet( decl, qType ) )
4075:             | nEnumValue :
4077:                oValuePush( oNodeGetInt( decl, qValue ) )
4090:                oTypeSPush( oNodeGet( decl, qType ) )
4103:             | nTypeDecl :
                     % A type cast, or a typename primary when within sizeof()
4105:                oTypeSPush( oNodeGet( decl, qType ) )
4118:                [
4118:                   | '(' :
                           % Type cast
4120:                      @ConstExpr
4122:                      ')'
4124:                      @ConstCastType
                           % Constexprs are not compound types or dereferenceable pointers (I believe)
                           % so no need to check for additional suffixes here as we do in PrimaryAllowCF
4126:                   | * :
                           % Not a type cast
                           % A raw typename is only allowed in expressions within sizeof
4131:                      [ flagExprAllowTypeName
4134:                         | true :
                                 % The value we produce is bogus.  Only the type stack matters.
4135:                            oValuePush( 0 )
4141:                         | * :   #eTypeNameNotAllowedHere
4148:                      ]
4148:                ]
      
4148:             | * :
4161:                #eNotConst
4163:                oValuePush( 0 )
4169:                oTypeSPush( IntegerType )
4175:          ]
4175:       | '@' :
4177:          #eNotImplemented
4179:          oValuePush( 0 )
4185:          oTypeSPush( UniversalPointerType )
4191:       | * :
4206:          #eNotConst
4208:          oValuePush( 0 )
4214:          oTypeSPush( IntegerType )
4220:    ];
      
4221: ConstRequireBoolPop:
4223:    [ oTypeSNodeType
4225:       | nBooleanType :
4226:       | * :          #eNotBoolean
4233:    ]
4233:    oTypeSPop;
      
      
4235: ConstRequireBool:
4237:    [ oTypeSNodeType
4239:       | nBooleanType :
4240:       | * :          #eNotBoolean
4247:    ];
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      % The types refer to constant values on the Value Stack,
      % so any implicit conversion would occur there, not in code.
      %
      % Some implicit conversion is allowed for either of the types.
      % See also ConstCoerceType where only the top type may change.
      %
4248: ConstMatchTypes:
4250:    node_type nt = oTypeSNodeType
4255:    oTypeSPop
4256:    [ equal_node_type( nt, oTypeSNodeType )
4265:       | false :
               % Some implicit conversion is allowed even here
4266:          [ oTypeSNodeType
4268:             | nPointerType :
4269:                [ nt
4272:                   | nUniversalPointerType :  >>
4274:                   | * :
4279:                ]
4279:             | nUniversalPointerType :
4281:                [ nt
4284:                   | nPointerType :  >>
4286:                   | * :
4291:                ]
4291:             | nStrLitType :
4293:                [ nt
4296:                   | nCharType :
4297:                      oValueCharToString
4298:                      >>
4299:                   | * :
4304:                ]
4304:             | nCharType :
4306:                [ nt
4309:                   | nStrLitType :
4310:                      oValueSwap
4311:                      oValueCharToString
4312:                      oValueSwap
4313:                      oTypeSPop
4314:                      oTypeSPush( StrLitType )
4320:                      >>
4321:                   | * :
4326:                ]
4326:             | * :
4337:          ]
4337:          #eTypeMismatch
4339:       | * :
4344:    ];
      
      
      % Given a constant value on the value stack, its type on the type stack,
      % and the desired type under it on the type stack.
      % Perform any necessary implicit conversions so the value is the desired type.
      % Pop the top type, leaving only the desired type.
      %
4345: ConstCoerceType:
4347:    node_type nt = oTypeSNodeType
4352:    oTypeSPop
4353:    [ equal_node_type( nt, oTypeSNodeType )
4362:       | false :
               % Can we implicitly convert the value to the desired type?
4363:          [ oTypeSNodeType
4365:             | nIntegerType :
4366:                [ nt
4369:                   | nByteType :  >>
4371:                   | * :
4376:                ]
4376:             | nByteType :
4378:                [ nt
4381:                   | nIntegerType :  >>
4383:                   | * :
4388:                ]
4388:             | nPointerType :
4390:                [ nt
4393:                   | nUniversalPointerType :  >>
4395:                   | * :
4400:                ]
4400:             | nUniversalPointerType :
4402:                [ nt
4405:                   | nPointerType :  >>
4407:                   | * :
4412:                ]
4412:             | nStrLitType :
4414:                [ nt
4417:                   | nCharType :
4418:                      oValueCharToString
4419:                      >>
4420:                   | * :
4425:                ]
4425:             | nShortStringType :
4427:                [ nt
4430:                   | nStrLitType :  >>
4432:                   | nCharType :
4434:                      oValueCharToString
4435:                      >>
4436:                   | * :
4443:                ]
4443:             | * :
4458:          ]
4458:          #eTypeMismatch
4460:       | * :
4465:    ];
      
      
      % Given a constant value on the value stack, its type on the type stack,
      % and the desired type under it on the type stack.
      % Perform any necessary conversions so the value is cast to the desired type.
      % Pop the top type, leaving only the desired type.
      %
      % This is stronger than ConstCoerceType, since it isn't limited to implicit conversions.
      % There are still going to be limits on what is allowed though.
      %
4466: ConstCastType:
4468:    node_type nt = oTypeSNodeType
4473:    oTypeSPop
4474:    [ equal_node_type( nt, oTypeSNodeType )
4483:       | false :
               % Can we cast the value to the desired type?
4484:          [ oTypeSNodeType
4486:             | nIntegerType, nEnumType :
4487:                [ nt
4490:                   | nByteType, nCharType, nBooleanType :  >>
4492:                   | nIntegerType, nEnumType :  >>
4495:                   | * :
4508:                ]
4508:             | nByteType, nCharType, nBooleanType :
4510:                [ nt
4513:                   | nByteType, nCharType, nBooleanType :  >>
4515:                   | nIntegerType, nEnumType :  >>
4518:                   | * :
4531:                ]
4531:             | nPointerType :
4533:                [ nt
4536:                   | nUniversalPointerType :  >>
4538:                   | * :
4543:                ]
4543:             | nUniversalPointerType :
4545:                [ nt
4548:                   | nPointerType :  >>
4550:                   | * :
4555:                ]
4555:             | nStrLitType :
4557:                [ nt
4560:                   | nCharType :
4561:                      oValueCharToString
4562:                      >>
4563:                   | * :
4568:                ]
4568:             | nShortStringType :
4570:                [ nt
4573:                   | nStrLitType :  >>
4575:                   | nCharType :
4577:                      oValueCharToString
4578:                      >>
4579:                   | * :
4586:                ]
4586:             | * :
4607:          ]
4607:          #eTypeMismatch
4609:       | * :
4614:    ];
      
      
      % These are the methods that Pascal allows in a constant expression:
      %   Abs( x: integer_or_real ) : integer_or_real
      %   Round( x: real ) : integer
      %   Trunc( x: real ) : integer
      %   Chr( x: integer ) : char
      %   Ord( x: ordinal ) : integer
      %   Length( s: string ) : integer
      %   Pred( x: ordinal ) : ordinal
      %   Succ( x: ordinal ) : ordinal
      %   SizeOf( var, expr, or typename ) : integer
      %   Odd( x: integer ) : boolean  - true if the argument is odd
      %
4615: ConstBuiltInFunc( Node method ):
      
         % Ord(x)
4617:    [ oNodeEqual( method, BuiltIn_Ord )
4627:       | true :
4628:          '('
4630:          @ConstExpr
4632:          ')'
4634:          [ oTypeSNodeType
4636:             | nIntegerType, nEnumType :
4637:             | nBooleanType, nByteType, nCharType :
4639:             | * :  #eTypeMismatch
4654:          ]
4654:          oTypeSPop
4655:          oTypeSPush( IntegerType )
4661:          ')'
4663:          >>
4664:       | * :
4669:    ]
      
         % Chr(x)
4669:    [ oNodeEqual( method, BuiltIn_Chr )
4679:       | true :
4680:          '('
4682:          @ConstExpr
4684:          ')'
4686:          [ oTypeSNodeType
4688:             | nIntegerType :
4689:             | nByteType :
4691:             | * :  #eTypeMismatch
4700:          ]
4700:          oTypeSPop
4701:          oTypeSPush( CharType )
4707:          ')'
4709:          >>
4710:       | * :
4715:    ]
      
         % Pred(x)
4715:    [ oNodeEqual( method, BuiltIn_Pred )
4725:       | true :
4726:          '('
4728:          @ConstExpr
4730:          [ oTypeSNodeType
4732:             | nEnumType :
4733:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
4742:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
4745:                   | * :
4750:                ]
4750:             | * :  #eTypeMismatch
4757:          ]
4757:          oValuePush( 1 )  oValueSub
4764:          ')'
4766:          >>
4767:       | * :
4772:    ]
      
         % Succ(x)
4772:    [ oNodeEqual( method, BuiltIn_Succ )
4782:       | true :
4783:          '('
4785:          @ConstExpr
4787:          [ oTypeSNodeType
4789:             | nEnumType :
4790:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
4799:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
4802:                   | * :
4807:                ]
4807:             | * :  #eTypeMismatch
4814:          ]
4814:          oValuePush( 1 )  oValueAdd
4821:          ')'
4823:          >>
4824:       | * :
4829:    ]
      
         % Sizeof(x)
4829:    [ oNodeEqual( method, BuiltIn_Sizeof )
4839:       | true :
4840:          '('
               % Parse expression but only for its type.
               % And, allow use of typename as a primary in the expression.
4842:          @ConstExprAllowTypeName
4844:          oValuePop
4845:          Node theType = oTypeSTop
4850:          oTypeSPop
4851:          oValuePush( oNodeGetInt( theType, qSize ) )
4864:          oTypeSPush( IntegerType )
4870:          ')'
4872:          >>
4873:       | * :
4878:    ]
      
4878:    #eNotImplemented
4881:    ;
      
      
4881: include 'pascal_expr.ssl'
      %
      % Pascal Compiler
      %
      
      
      % ------------------------------ Expressions -----------------------------
      
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanFlowType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
4881: Expr:
4883:    Label falseLabel = labelNull
      
4889:    @ExprAllowFlow( falseLabel )
4896:    @FlowToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse an expression, just like Expr,
      % but also allows type names as Primary elements of the expression.
      % This is for use by sizeof().
      % The value produced by that primary is bogus, but this is ok because the
      % caller (sizeof) is going to discard all generated code for the expression.
      % It's only interested in the type produced by the expression.
      %
4904: ExprAllowTypeName:
4906:    boolean oldAllowTypeName = flagExprAllowTypeName
4912:    flagExprAllowTypeName = true
4918:    @Expr
4920:    flagExprAllowTypeName = oldAllowTypeName
4927:    ;
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
4927: BooleanExprControlFlow( out Label falseLabel ):
4929:    @ExprAllowFlow( falseLabel )
4936:    [ oTypeSNodeType
4938:       | nBooleanFlowType :
4939:       | nBooleanType :
               % convert value to control flow
4941:          falseLabel = oLabelNew
4946:          .tJumpFalse  oEmitLabel( falseLabel )
4954:       | * :
4961:          #eNotBoolean
4963:    ]
4963:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
4965: FlowToVal( inout Label falseLabel ):
4967:    [ oTypeSNodeType
4969:       | nBooleanFlowType :
4970:          Label doneLabel = oLabelNew
4975:          .tPushConstI  oEmitInt( 1 )
4983:          .tJump  oEmitLabel( doneLabel )
4991:          .tLabel  oEmitLabel( falseLabel )
4999:          .tPushConstI  oEmitInt( 0 )
5007:          .tLabel  oEmitLabel( doneLabel )
5015:          oTypeSPop
5016:          oTypeSPush( BooleanType )
5022:          falseLabel = labelNull
5028:       | * :
5033:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
5034: ValToFlow( out Label falseLabel ):
5036:    [ oTypeSNodeType
5038:       | nBooleanType :
5039:          falseLabel = oLabelNew
5044:          .tJumpFalse  oEmitLabel( falseLabel )
5052:          oTypeSPop
5053:          oTypeSPush( BooleanFlowType )
5059:       | * :
5064:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanFlowType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanFlowType.
      % In this case, falseLabel is ignored.
      %
5065: ExprAllowFlow( out Label falseLabel ):
5067:    @BoolExprAllowFlow( falseLabel )
5074:    {[
5074:       | '=' :
5076:          @FlowToVal( falseLabel )
5083:          @PromoteToIntOptional
5085:          @BoolExprAllowFlow( falseLabel )
5092:          @FlowToVal( falseLabel )
5099:          @PromoteToIntOptional
5101:          @MatchTypes
5103:          [ oTypeSNodeType
5105:             | nBooleanType, nCharType :     .tEqualB
5108:             | nIntegerType, nEnumType :     .tEqualI
5112:             | nPointerType, nUniversalPointerType :    .tEqualP
5116:             | nShortStringType, nStrLitType :
5118:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tEqualI
5130:             | * :                           #eNotAllowed
5151:          ]
5151:          oTypeSPop
5152:          oTypeSPush( BooleanType )
      
5158:       | '<>' :
5160:          @FlowToVal( falseLabel )
5167:          @PromoteToIntOptional
5169:          @BoolExprAllowFlow( falseLabel )
5176:          @FlowToVal( falseLabel )
5183:          @PromoteToIntOptional
5185:          @MatchTypes
5187:          [ oTypeSNodeType
5189:             | nBooleanType, nCharType :     .tNotEqualB
5192:             | nIntegerType, nEnumType :     .tNotEqualI
5196:             | nPointerType, nUniversalPointerType :    .tNotEqualP
5200:             | nShortStringType, nStrLitType :
5202:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tNotEqualI
5214:             | * :                           #eNotAllowed
5235:          ]
5235:          oTypeSPop
5236:          oTypeSPush( BooleanType )
      
5242:       | '<' :
5244:          @FlowToVal( falseLabel )
5251:          @PromoteToIntOptional
5253:          @BoolExprAllowFlow( falseLabel )
5260:          @FlowToVal( falseLabel )
5267:          @PromoteToIntOptional
5269:          @MatchTypes
5271:          [ oTypeSNodeType
5273:             | nBooleanType, nCharType :     .tLessB
5276:             | nIntegerType, nEnumType :     .tLessI
5280:             | nPointerType, nUniversalPointerType :   .tLessP
5284:             | nShortStringType, nStrLitType :
5286:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessI
5298:             | * :                           #eNotAllowed
5319:          ]
5319:          oTypeSPop
5320:          oTypeSPush( BooleanType )
      
5326:       | '>' :
5328:          @FlowToVal( falseLabel )
5335:          @PromoteToIntOptional
5337:          @BoolExprAllowFlow( falseLabel )
5344:          @FlowToVal( falseLabel )
5351:          @PromoteToIntOptional
5353:          @MatchTypes
5355:          [ oTypeSNodeType
5357:             | nBooleanType, nCharType :     .tGreaterB
5360:             | nIntegerType, nEnumType :     .tGreaterI
5364:             | nPointerType, nUniversalPointerType :   .tGreaterP
5368:             | nShortStringType, nStrLitType :
5370:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterI
5382:             | * :                           #eNotAllowed
5403:          ]
5403:          oTypeSPop
5404:          oTypeSPush( BooleanType )
      
5410:       | '<=' :
5412:          @FlowToVal( falseLabel )
5419:          @PromoteToIntOptional
5421:          @BoolExprAllowFlow( falseLabel )
5428:          @FlowToVal( falseLabel )
5435:          @PromoteToIntOptional
5437:          @MatchTypes
5439:          [ oTypeSNodeType
5441:             | nBooleanType, nCharType :     .tLessEqualB
5444:             | nIntegerType, nEnumType :     .tLessEqualI
5448:             | nPointerType, nUniversalPointerType :   .tLessEqualP
5452:             | nShortStringType, nStrLitType :
5454:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessEqualI
5466:             | * :                           #eNotAllowed
5487:          ]
5487:          oTypeSPop
5488:          oTypeSPush( BooleanType )
      
5494:       | '>=' :
5496:          @FlowToVal( falseLabel )
5503:          @PromoteToIntOptional
5505:          @BoolExprAllowFlow( falseLabel )
5512:          @FlowToVal( falseLabel )
5519:          @PromoteToIntOptional
5521:          @MatchTypes
5523:          [ oTypeSNodeType
5525:             | nBooleanType, nCharType :     .tGreaterEqualB
5528:             | nIntegerType, nEnumType :     .tGreaterEqualI
5532:             | nPointerType, nUniversalPointerType :   .tGreaterEqualP
5536:             | nShortStringType, nStrLitType :
5538:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterEqualI
5550:             | * :                           #eNotAllowed
5571:          ]
5571:          oTypeSPop
5572:          oTypeSPush( BooleanType )
      
5578:       | * :
5593:          >
5595:    ]};
      
      
5598: BoolExprAllowFlow( out Label falseLabel ):
5600:    Label trueLabel = labelNull
      
5606:    @BoolTermAllowFlow( falseLabel )
5613:    {[
5613:       | pOr :
5615:          [ oTypeSNodeType
5617:             | nBooleanFlowType :
                     % We are true here. Jump ahead to done
5618:                [ equal_label( trueLabel, labelNull )
5628:                   | true :  trueLabel = oLabelNew
5634:                   | * :
5639:                ]
5639:                .tJump  oEmitLabel( trueLabel )
5647:             | nBooleanType :
5649:                @ValToFlow( falseLabel )
                     % We are true here. Jump ahead to done
5656:                [ equal_label( trueLabel, labelNull )
5666:                   | true :  trueLabel = oLabelNew
5672:                   | * :
5677:                ]
5677:                .tJump  oEmitLabel( trueLabel )
5685:             | * : #eNotBoolean
5694:          ]
5694:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5695:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5703:          falseLabel = labelNull
5709:          @BoolTermAllowFlow( falseLabel )
      
5716:          [ oTypeSNodeType
5718:             | nBooleanFlowType :
5719:             | nBooleanType :
5721:                @ValToFlow( falseLabel )
5728:             | * : #eNotBoolean
5737:          ]
      
5737:          oTypeSPop
5738:          oTypeSPush( BooleanFlowType )
      
5744:       | * :
5749:          >
5751:    ]}
      
         % any short-circuit trues jump here to the end
5753:    [ equal_label( trueLabel, labelNull )
5763:       | false :
5764:          .tLabel  oEmitLabel( trueLabel )
5772:       | * :
5777:    ]
5778:    ;
      
      
5778: BoolTermAllowFlow( out Label falseLabel ):
5780:    Label overallFalseLabel = labelNull
      
5786:    @BoolFactorAllowFlow( falseLabel )
5793:    {[
5793:       | pAnd :
5795:          [ oTypeSNodeType
5797:             | nBooleanFlowType :
5798:             | nBooleanType :
5800:                @ValToFlow( falseLabel )
5807:             | * :
5814:                #eNotBoolean
5816:          ]
5816:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
5817:          [ equal_label( overallFalseLabel, labelNull )
5827:             | true :
5828:                overallFalseLabel = oLabelNew
5833:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
5847:                falseLabel = overallFalseLabel
5853:             | * :
5858:          ]
      
5858:          Label factorFalseLabel = labelNull
5864:          @BoolFactorAllowFlow( factorFalseLabel )
      
5871:          [ oTypeSNodeType
5873:             | nBooleanFlowType :
5874:             | nBooleanType :
5876:                @ValToFlow( factorFalseLabel )
5883:             | * : #eNotBoolean
5892:          ]
5892:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
5906:       | * :
5911:          >
5913:    ]};
      
      
5916: BoolFactorAllowFlow( out Label falseLabel ):
5918:    [
5918:       | pNot :
5920:          Label factorFalseLabel = labelNull
      
5926:          @BoolFactorAllowFlow( factorFalseLabel )
5933:          [ oTypeSNodeType
5935:             | nBooleanFlowType :
                     % We have control flow, and are sitting at the point that has value false.
5936:                falseLabel = oLabelNew
5941:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
5949:                .tLabel  oEmitLabel( factorFalseLabel )
      
5957:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
5959:                .tNot
      
5961:             | * : #eNotBoolean
5970:          ]
      
5970:       | * :
5975:          @ArithExprAllowFlow( falseLabel )
5982:    ];
      
      
5983: ArithExprAllowFlow( out Label falseLabel ):
5985:    boolean first = true
5991:    int tempStrOffset
      
5991:    @TermAllowFlow( falseLabel )
5998:    {[
5998:       | '+' :
6000:          [ oTypeSNodeType
6002:             | nIntegerType, nByteType :
6003:                @PromoteToIntPop
6005:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
      
6012:                [ oTypeSNodeType
6014:                   | nPointerType, nUniversalPointerType :
                           % int + ptr
6015:                      .tSwap
                           % leave only the ptr type on the type stack (int was already popped above)
6017:                      @PointerAddition
6019:                   | * :
6026:                      @PromoteToInt
6028:                      .tAddI
6030:                ]
      
6030:             | nShortStringType, nStrLitType, nCharType :
                     % String concatenation
6032:                [ first
6035:                   | true :  % move into a temp string, so subsequent term(s) can further modify it.
6036:                             tempStrOffset = @MoveIntoTempShortString
6042:                             first = false
6048:                   | * :
6053:                ]
6053:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6060:                [ oTypeSNodeType
6062:                   | nShortStringType, nStrLitType :
6063:                      @ShortStringAppendShortString
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6065:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6073:                      oTypeSPush( ShortStringType )
6079:                   | nCharType :
6081:                      @ShortStringAppendChar
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6083:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6091:                      oTypeSPush( ShortStringType )
6097:                   | * :
6106:                      #eTypeMismatch
6108:                      oTypeSPop
6109:                ]
      
6109:             | nPointerType, nUniversalPointerType :
6111:                @TermAllowFlow( falseLabel )   % actually not allowing CF
6118:                @PromoteToIntPop
6120:                @PointerAddition
      
6122:             | * :
6139:                #eNotAllowed
6141:          ]
      
6141:       | '-' :
6143:          [ oTypeSNodeType
6145:             | nIntegerType, nByteType :
6146:                @PromoteToIntPop
6148:                @TermAllowFlow( falseLabel )
6155:                @PromoteToInt
6157:                .tSubI
      
6159:             | nPointerType, nUniversalPointerType :
6161:                @TermAllowFlow( falseLabel )
6168:                [ oTypeSNodeType
6170:                   | nIntegerType, nByteType :
6171:                      @PromoteToIntPop
6173:                      @PointerSubInt
6175:                   | nPointerType, nUniversalPointerType :
6177:                      @MatchTypes
6179:                      @PointerSubPointer
6181:                   | * :
6192:                      #eNotAllowed
6194:                ]
      
6194:             | * :  #eNotAllowed
      
6207:          ]
6207:       | * :
6214:          >
6216:    ]};
      
      
6219: TermAllowFlow( out Label falseLabel ):
6221:    @FactorAllowFlow( falseLabel )
6228:    {[
6228:       | pTimes :
6230:          @PromoteToIntPop
6232:          @FactorAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6239:          @PromoteToInt
6241:          .tMultI
6243:       | pDivide :
6245:          @PromoteToIntPop
6247:          @FactorAllowFlow( falseLabel )
6254:          @PromoteToInt
6256:          .tDivI
6258:       | * :
6265:          >
6267:    ]};
      
      
6270: FactorAllowFlow( out Label falseLabel ):
6272:    [
6272:       | pPlus :
6274:          @PrimaryAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
               % TO DO: unary +/- is supposed to leave expression type as-is.
6281:          @PromoteToInt
6283:       | pMinus :
6285:          @PrimaryAllowFlow( falseLabel )
               % TO DO: unary +/- is supposed to leave expression type as-is.
6292:          @PromoteToInt
6294:          .tNegI
6296:       | * :
6303:          @PrimaryAllowFlow( falseLabel )
6310:    ];
      
      
6311: PrimaryAllowFlow( out Label falseLabel ):
6313:    [
6313:       | pIntLit :
6315:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6322:          oTypeSPush( IntegerType )
      
6328:       | pCharLit :
6330:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6337:          oTypeSPush( CharType )
      
6343:       | '(' :
6345:          @ExprAllowFlow( falseLabel )
6352:          ')'
      
6354:       | pStrLit :
6356:          int addr = oStringAllocShortStringLit( CURRENT_STRLIT )     % store in global data
6365:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: consider defining a ShortString type with the exact capacity used.
               % But, I don't think it should matter here, since nobody should be assigning to this string.
6373:          oTypeSPush( StrLitType )
               % This seems unlikely, but the strlit may be followed by
               % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
               % First, advance the pointer by index if any
6379:          @LValueIndexes
               % get final value of dereferencing, if any
6381:          @FetchVar
      
6383:       | pIdent :
6385:          Node decl = oScopeFindRequire
6390:          @ResolveUnitRef( decl )
6397:          Node theType
      
6397:          [ oNodeType( decl )
6404:             | nFunc :
6405:                @Call( decl )
      
6412:             | nBuiltInFunc :
6414:                @CallBuiltInFunc( decl )
      
6421:             | nConst, nEnumValue :
6423:                theType = oNodeGet( decl, qType )
6436:                oTypeSPush( theType )
6442:                [ oTypeSNodeType
6444:                   | nIntegerType, nEnumType, nBooleanType, nCharType, nByteType :
6445:                      .tPushConstI @EmitValue( decl )
6454:                   | nPointerType, nUniversalPointerType :
                           % We have one pointer const, Nil.  It's pushed as I.
                           % Sign-extending I to P won't hurt since it's 0.
6456:                      .tPushConstI @EmitValue( decl )
6465:                   | * :
6482:                      #eNotImplemented
6484:                ]
      
6484:             | nConstStr :
                     % This is a non-typed const defined as a strlit.
                     % So far, the value is held in the compiler's symbol table.
                     % Referencing the constant in the code will work the same as directly giving a strlit.
                     % (See pStrLit above).  We store the strlit in global memory, and set expr type to StrLitType.
      
                     % Storage in global memory only happens the first time the const is referenced.
                     % The global offset is stored in qValue.
6486:                int addr = oNodeGetInt( decl, qValue )
6499:                [ equal_zero( addr )
6506:                   | true :
6507:                      addr = oStringAllocShortStringLit( oNodeGetString( decl, qValueStr ) )
6524:                      oNodeSetInt( decl, qValue, addr )
6536:                   | * :
6541:                ]
6541:                .tPushAddrGlobal oEmitInt( addr )
6549:                oTypeSPush( StrLitType )
                     % This seems unlikely, but the strlit may be followed by
                     % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
                     % First, advance the pointer by index if any
6555:                @LValueIndexes
                     % get final value of dereferencing, if any
6557:                @FetchVar
      
6559:             | nGlobalVar, nLocalVar, nParam, nTypedConst :
6561:                @VarExpr( decl )
      
6568:             | nTypeDecl :
                     % A type name.
                     % This is normally a type cast.
                     % Or, if Expr is running within sizeof(), we do also allow type names as primaries.
6570:                oTypeSPush( oNodeGet( decl, qType ) )
6583:                [
6583:                   | '(' : 
                           % Type cast
6585:                      @Expr
6587:                      ')'
6589:                      @CastType
      
                           % The expression can be further modified after the typecast.
                           % This is taken from VarExpr.  Try to consolidate.
      
6591:                      [ oTypeSNodeType
6593:                         | nPointerType, nUniversalPointerType :
6594:                            [
6594:                               | '^' :             % dereferenced
6596:                                  oTypeSPop
6597:                                  oTypeSPush( oNodeGet( theType, qBaseType ) )
6610:                                  @LValueIndexes
6612:                                  @FetchVar
6614:                               | '[' :             % dereferencing pointer like an array [0..] of baseType
6616:                                  @PointerArraySubscript
                                       % modify addr for any subsequent subscripts, field references, etc
6618:                                  @LValueIndexes
6620:                                  @FetchVar
6622:                               | * :               % just ptr value alone
6629:                            ]
      
6629:                         | nArrayType, nRecordType, nShortStringType :
                                 % So far we would have the addr of the compound value.
                                 % Modify addr for subscripts, field references, etc
6631:                            @LValueIndexes
                                 % get final value, if no longer compound
6633:                            @FetchVar
      
6635:                         | *:
6648:                      ]
      
6648:                   | * :
                           % Not a type cast
                           % A raw typename is only allowed in expressions within sizeof
6653:                      [ flagExprAllowTypeName
6656:                         | true :
                                 % The value we produce is bogus.  The caller will discard all code.
                                 % Only the type stack matters.
6657:                            .tPushConstI  oEmitInt( 0 )
6665:                         | * :    #eTypeNameNotAllowedHere
6672:                      ]
6672:                ]
      
6672:             | * :
6695:                #eNotValue
6697:                oTypeSPush( IntegerType )
6703:          ]
      
6703:       | '@' :        % @var -- pointer to var
6705:          pIdent
      
6707:          Node decl = oScopeFindRequire
6712:          @ResolveUnitRef( decl )
6719:          Node theType
      
               % writeable is false because we're not on the left hand side of an assignment,
               % or passing into a var parameter.  So it's ok to take the address of a typed const.
6719:          @LValueFromDecl( decl, false )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
6729:          theType = oTypeSTop
6734:          oTypeSPop
6735:          Node ptrType = @PointerTypeTo( theType )
6746:          oTypeSPush( ptrType )
      
6752:       | * :
6767:          #eNotValue
6769:          oTypeSPush( IntegerType )
6775:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
6776: VarExpr( Node decl ):
6778:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
6791:    int uplevels = @DeclUpLevels( decl )
      
6802:    oTypeSPush( theType )
6808:    [ oTypeSNodeType
6810:       | nIntegerType, nEnumType :
6811:          [ oNodeType( decl )
6818:             | nGlobalVar, nTypedConst :   .tPushGlobalI  @EmitValue( decl )
6828:             | nLocalVar :
6830:                [ equal_zero( uplevels )
6837:                   | true :  .tPushLocalI  @EmitValue( decl )
6847:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
6867:                ]
6867:             | nParam :
6869:                [ oNodeGetBoolean( decl, qInOut )
6879:                   | true :    % VAR param points to the var.  Auto dereference.
6880:                      [ equal_zero( uplevels )
6887:                         | true :  .tPushParamP  @EmitValue( decl )
6897:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6917:                      ]
6917:                      .tFetchI
6919:                   | * :
6924:                      [ equal_zero( uplevels )
6931:                         | true :  .tPushParamI  @EmitValue( decl )
6941:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
6961:                      ]
6961:                ]
6961:          ]
      
6973:       | nBooleanType, nByteType, nCharType :
6975:          [ oNodeType( decl )
6982:             | nGlobalVar, nTypedConst :   .tPushGlobalB  @EmitValue( decl )
6992:             | nLocalVar :
6994:                [ equal_zero( uplevels )
7001:                   | true :  .tPushLocalB  @EmitValue( decl )
7011:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
7031:                ]
7031:             | nParam :
7033:                [ oNodeGetBoolean( decl, qInOut )
7043:                   | true :    % VAR param points to the var.  Auto dereference.
7044:                      [ equal_zero( uplevels )
7051:                         | true :  .tPushParamP  @EmitValue( decl )
7061:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7081:                      ]
7081:                      .tFetchB
7083:                   | * :
7088:                      [ equal_zero( uplevels )
7095:                         | true :  .tPushParamB  @EmitValue( decl )
7105:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
7125:                      ]
7125:                ]
7125:          ]
      
7137:       | nFileType :
7139:          #eNotImplemented
      
7141:       | nPointerType, nUniversalPointerType :
7143:          [ oNodeType( decl )
7150:             | nGlobalVar, nTypedConst :   .tPushGlobalP @EmitValue( decl )
7160:             | nLocalVar :
7162:                [ equal_zero( uplevels )
7169:                   | true :  .tPushLocalP  @EmitValue( decl )
7179:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
7199:                ]
7199:             | nParam :
7201:                [ oNodeGetBoolean( decl, qInOut )
7211:                   | true :    % VAR param points to the var.  Auto dereference.
7212:                      [ equal_zero( uplevels )
7219:                         | true :  .tPushParamP  @EmitValue( decl )
7229:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7249:                      ]
7249:                      .tFetchP
7251:                   | * :
7256:                      [ equal_zero( uplevels )
7263:                         | true :  .tPushParamP  @EmitValue( decl )
7273:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7293:                      ]
7293:                ]               
7293:          ]
7305:          [
7305:             | '^' :             % dereferenced
7307:                oTypeSPop
7308:                oTypeSPush( oNodeGet( theType, qBaseType ) )
7321:                @LValueIndexes
7323:                @FetchVar
7325:             | '[' :             % dereferencing pointer like an array [0..] of baseType
7327:                @PointerArraySubscript
                     % modify addr for any subsequent subscripts, field references, etc
7329:                @LValueIndexes
7331:                @FetchVar
7333:             | * :               % just ptr value alone
7340:          ]
      
7340:       | nArrayType, nRecordType, nShortStringType :
               % compound type
               % first, push addr of start of var
7342:          [ oNodeType( decl )
7349:             | nGlobalVar, nTypedConst :   .tPushAddrGlobal @EmitValue( decl )
7359:             | nLocalVar :
7361:                [ equal_zero( uplevels )
7368:                   | true :  .tPushAddrLocal  @EmitValue( decl )
7378:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
7398:                ]
7398:             | nParam :
7400:                [ oNodeGetBoolean( decl, qInOut )
7410:                   | true :    % VAR param points to the var.  Auto dereference.
7411:                      [ equal_zero( uplevels )
7418:                         | true :  .tPushParamP  @EmitValue( decl )
7428:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7448:                      ]
7448:                   | * :
7453:                      [ equal_zero( uplevels )
7460:                         | true :  .tPushAddrParam  @EmitValue( decl )
7470:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
7490:                      ]
7490:                ]
7490:          ]
               % modify addr for subscripts, field references, etc
7502:          @LValueIndexes
               % get final value
7504:          @FetchVar
7506:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
7533: FetchVar:
7535:    [ oTypeSNodeType
7537:       | nIntegerType, nEnumType :  .tFetchI
7540:       | nBooleanType, nByteType, nCharType :  .tFetchB
7544:       | nFileType :   #eNotImplemented
7548:       | nPointerType :             .tFetchP
7552:       | nUniversalPointerType :    #eCantDereference
7556:       | nArrayType, nRecordType, nStrLitType, nShortStringType :  % compound type; leave as addr
7558:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
7587: LValueIndexes:
7589:    {[
7589:       | '[' :
7591:          [ oTypeSNodeType
7593:             | nArrayType :    @ArraySubscripts
7596:             | nPointerType :  @PointerArraySubscript
7600:             | nStrLitType, nShortStringType :  @ShortStringArraySubscript
7604:             | * :             #eNotArray
7617:          ]
7617:       | '.' :       @RecordFieldRef
7621:       | '^' :       @PointerDeref   % TO DO: I suspect I don't have logic right here
                                          % about precondition and using .tFetchP
                                          % Ideally this should take over for the ^ in VarExpr too.
7625:       | * :         >
7636:    ]};
      
      
7639: ArraySubscripts:
7641:    [ oTypeSNodeType
7643:       | nArrayType :
7644:       | * :       #eNotArray
7651:    ]
7651:    {
7651:       [ oTypeSNodeType
7653:          | nArrayType :
7654:          | * :    #eTooManySubscripts
7661:       ]
      
            % low subscript of this dimension
7661:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
7678:       Node baseType
7678:       baseType = oNodeGet( oTypeSTop, qBaseType )
7690:       oTypeSPop
7691:       oTypeSPush( baseType )
      
7697:       @Expr
7699:       @RequireIntPop
            % adjust for low subscript
7701:       [ equal_zero( low )
7708:          | false :
7709:             .tPushConstI oEmitInt( low ) .tSubI
7719:          | * :
7724:       ]
      
            % multiply by element size
7724:       int size = oNodeGetInt( baseType, qSize )
7737:       [ equal( size, 1 )
7747:          | false :
7748:             .tPushConstI oEmitInt( size ) .tMultI
7758:          | * :
7763:       ]
      
            % update start address
7763:       .tAddPI
7765:       [
7765:          | ']' :  >
7769:          | ',' :
7771:       ]
7779:    };
      
      
      % pointer[index] - similar to array[index] where index counts from 0.
      % On entry, the pointer value is on the stack, and pointer type is on the type stack.
      % We've already accepted the '['.
      % On exit, the address of the pointed-to element is on the stack,
      % and the element type is on the type stack.
      %
7782: PointerArraySubscript:
7784:    [ oTypeSNodeType
7786:       | nPointerType :
7787:       | * :    #eCantDereference
7794:    ]
         % replace type stack with base type
7794:    Node baseType = oNodeGet( oTypeSTop, qBaseType )
7806:    oTypeSPop
7807:    oTypeSPush( baseType )
         
7813:    @Expr
7815:    @RequireIntPop
         % multiply by element size
7817:    int size = oNodeGetInt( baseType, qSize )
7830:    [ equal( size, 1 )
7840:       | false :
7841:          .tPushConstI  oEmitInt( size )  .tMultI
7851:       | * :
7856:    ]
         % update start address
7856:    .tAddPI
7858:    ']';
      
      
      % Specialization of array indexing for ShortString.
      % We treat the starting index as 0 so that str[1] sees the first string char,
      % past the length byte.
      %
7861: ShortStringArraySubscript:
7863:    [ oTypeSNodeType
7865:       | nStrLitType, nShortStringType :
7866:       | * :    #eCantDereference
7875:    ]
7875:    oTypeSPop
7876:    oTypeSPush( CharType )
7882:    @Expr
7884:    @RequireIntPop
7886:    .tAddPI
7888:    ']';
      
      
7891: RecordFieldRef:
7893:    [ oTypeSNodeType
7895:       | nRecordType :
7896:       | * :    #eNotRecord
7903:    ]
7903:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
7915:    pIdent
7917:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
7922:    [ oNodeType( field )
7929:       | nRecordField :
7930:       | * :   #eNotRecordField
7937:    ]
7937:    oScopeEnd
7938:    int offset = oNodeGetInt( field, qValue )
7951:    [ equal_zero( offset )
7958:       | false :
7959:          .tPushConstI oEmitInt( offset ) .tAddPI
7969:       | * :
7974:    ]
      
         % replace the type on the type stack, with the field type
7974:    oTypeSPop
7975:    oTypeSPush( oNodeGet( field, qType ) )
7989:    ;
      
      
      % On entry, expr stack has ptr, and integer index above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr advanced to that index
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
7989: PointerAddition:
7991:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8003:    int elementSize = oNodeGetInt( elementType, qSize )
8016:    [ equal( elementSize, 1 )
8026:       | false :
8027:          .tPushConstI  oEmitInt( elementSize )
8035:          .tMultI
8037:       | * :
8042:    ]
8042:    .tAddPI
8045:    ;
      
      
      % On entry, expr stack has ptr, and integer above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr decremented by that integer
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
8045: PointerSubInt:
8047:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8059:    int elementSize = oNodeGetInt( elementType, qSize )
8072:    [ equal( elementSize, 1 )
8082:       | false :
8083:          .tPushConstI  oEmitInt( elementSize )
8091:          .tMultI
8093:       | * :
8098:    ]
8098:    .tSubPI
8101:    ;
      
      
      % On entry, expr stack has two pointers, P1 and P2 above it.
      % The type stack has the type of P1.  (The type of P2 was already matched to P1.)
      % Replace the pointers on the expression stack with P1 - P2, scaled by the
      % pointed-to element size.  Type stack switched to integer.
      % 
8101: PointerSubPointer:
8103:    .tSubP
8105:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8117:    int elementSize = oNodeGetInt( elementType, qSize )
8130:    [ equal( elementSize, 1 )
8140:       | false :
8141:          .tPushConstI  oEmitInt( elementSize )
8149:          .tDivI
8151:       | * :
8156:    ]
8156:    oTypeSPop
8157:    oTypeSPush( IntegerType )
8164:    ;
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
8164: PointerDeref:
8166:    [ oTypeSNodeType
8168:       | nPointerType :
8169:       | nUniversalPointerType :   #eCantDereference
8173:       | * :       #eNotPointer
8182:    ]
8182:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
8184:    Node theType = oTypeSTop
8189:    oTypeSPop
8190:    oTypeSPush( oNodeGet( theType, qBaseType ) )
8204:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
8204: CoerceType:
8206:    node_type nt = oTypeSNodeType
8211:    Node given = oTypeSTop
8216:    oTypeSPop
8217:    [ equal_node_type( nt, oTypeSNodeType )
8226:       | false :
               % Can we implicitly convert the value to the desired type?
8227:          [ oTypeSNodeType
8229:             | nIntegerType :
8230:                [ nt
8233:                   | nByteType :   .tCastBtoI  >>
8237:                   | * :
8242:                ]
8242:             | nByteType :
8244:                [ nt
8247:                   | nIntegerType :   .tCastItoB  >>
8251:                   | * :
8256:                ]
8256:             | nPointerType :
8258:                [ nt
8261:                   | nUniversalPointerType :  >>
8263:                   | nStrLitType :
8265:                      [ equal_node( oTypeSTop, PCharType )
8274:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8275:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8286:                         | * :
8291:                      ]
8291:                   | * :
8298:                ]
8298:             | nUniversalPointerType :
8300:                [ nt
8303:                   | nPointerType :  >>
8305:                   | * :
8310:                ]
8310:             | nShortStringType :
8312:                [ nt
8315:                   | nStrLitType :  >>
8317:                   | nCharType :
                           % Store char as a temp ShortString.
8319:                      oTypeSPush( CharType )
8325:                      int tempOffset = @MoveIntoTempShortString
8331:                      oTypeSPop
8332:                      >>
8333:                   | * :
8340:                ]
8340:             | * :
8353:          ]
8353:          #eTypeMismatch
8355:       | * :
8360:    ];
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to cast the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      %
      % This is stronger than CoerceType, since it isn't limited to implicit conversions.
      % There are still going to be limits on what is allowed though.
      %
8361: CastType:
8363:    node_type nt = oTypeSNodeType
8368:    oTypeSPop
8369:    [ equal_node_type( nt, oTypeSNodeType )
8378:       | false :
               % Can we cast the value to the desired type?
8379:          [ oTypeSNodeType
8381:             | nIntegerType, nEnumType :
8382:                [ nt
8385:                   | nByteType, nCharType, nBooleanType :   .tCastBtoI  >>
8389:                   | nIntegerType, nEnumType :   >>
8392:                   | * :
8405:                ]
8405:             | nByteType, nCharType, nBooleanType :
8407:                [ nt
8410:                   | nByteType, nCharType, nBooleanType :   >>
8412:                   | nIntegerType, nEnumType :   .tCastItoB  >>
8417:                   | * :
8430:                ]
8430:             | nPointerType :
8432:                [ nt
8435:                   | nUniversalPointerType :  >>
8437:                   | nStrLitType :
8439:                      [ equal_node( oTypeSTop, PCharType )
8448:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8449:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8460:                         | * :
8465:                      ]
8465:                   | * :
8472:                ]
8472:             | nUniversalPointerType :
8474:                [ nt
8477:                   | nPointerType :  >>
8479:                   | * :
8484:                ]
8484:             | nShortStringType :
8486:                [ nt
8489:                   | nStrLitType :  >>
8491:                   | nCharType :
                           % Store char as a temp ShortString.
8493:                      oTypeSPush( CharType )
8499:                      int tempOffset = @MoveIntoTempShortString
8505:                      oTypeSPop
8506:                      >>
8507:                   | * :
8514:                ]
8514:             | * :
8533:          ]
8533:          #eTypeMismatch
8535:       | * :
8540:    ];
      
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
8541: MatchTypes:
8543:    node_type nt = oTypeSNodeType
8548:    oTypeSPop
8549:    [ equal_node_type( nt, oTypeSNodeType )
8558:       | false :
               % Some implicit conversion is allowed even here
8559:          [ oTypeSNodeType
8561:             | nPointerType :
8562:                [ nt
8565:                   | nUniversalPointerType :  >>
8567:                   | * :
8572:                ]
8572:             | nUniversalPointerType :
8574:                [ nt
8577:                   | nPointerType :  >>
8579:                   | * :
8584:                ]
8584:             | * :
8591:          ]
8591:          #eTypeMismatch
8593:       | * :
8598:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
8599: RequireIntPop:
8601:    [ oTypeSNodeType
8603:       | nIntegerType :
8604:       | * :          #eNotInteger
8611:    ]
8611:    oTypeSPop;
      
8613: RequireInt:
8615:    [ oTypeSNodeType
8617:       | nIntegerType :
8618:       | * :          #eNotInteger
8625:    ];
      
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Pop the type stack.
      %
8626: PromoteToIntPop:
8628:    [ oTypeSNodeType
8630:       | nIntegerType :
8631:       | nByteType :        .tCastBtoI
8635:       | * :                #eNotInteger
8644:    ]
8644:    oTypeSPop;
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Leave integer on the type stack.
      %
8646: PromoteToInt:
8648:    [ oTypeSNodeType
8650:       | nIntegerType :
8651:       | nByteType :        .tCastBtoI
8655:                            oTypeSPop
8656:                            oTypeSPush( IntegerType )
8662:       | * :                #eNotInteger
8671:    ];
      
      
      % If the top value is implicitly convertable to integer, do so.
      % Otherwise leave it as-is.
      %
8672: PromoteToIntOptional:
8674:    [ oTypeSNodeType
8676:       | nByteType :        .tCastBtoI
8679:                            oTypeSPop
8680:                            oTypeSPush( IntegerType )
8686:       | * :
8691:    ];
      
      
8692: RequireBoolPop:
8694:    [ oTypeSNodeType
8696:       | nBooleanType :
8697:       | * :          #eNotBoolean
8704:    ]
8704:    oTypeSPop;
      
8706: RequireBool:
8708:    [ oTypeSNodeType
8710:       | nBooleanType :
8711:       | * :          #eNotBoolean
8718:    ];
      
      
8719: include 'pascal_stmt.ssl'
      %
      % Pascal Compiler
      %
      
      
      % ------------------------------ Statements -----------------------------
      
8719: Statement:
8721:    [
8721:       | pWriteln :     @WritelnStmt
8725:       | pWrite :       @WriteStmt
8729:       | pReadln :      @ReadlnStmt
8733:       | pRead :        @ReadStmt
8737:       | pIf :          @IfStmt
8741:       | pWhile :       @WhileStmt
8745:       | pFor :         @ForStmt
8749:       | pRepeat :      @RepeatStmt
8753:       | pBreak :       @BreakStmt
8757:       | pContinue :    @ContinueStmt
8761:       | pBegin :       @BeginStmt
8765:       | pIdent :       @LabelOrAssignOrCallStmt
8769:       | pCase :        @CaseStmt
8773:       | pGoto :        @GotoStmt
8777:       | pIntLit :      % should be an integer label
8779:                        oChangeIntLitToLabelIdent
8780:                        @LabelOrAssignOrCallStmt
8782:       | * :            % null statement : don't accept any tokens
8815:    ];
      
      
8816: LabelOrAssignOrCallStmt:
8818:    Node decl = oScopeFindRequire
8823:    @ResolveUnitRef( decl )
8830:    [ oNodeType( decl )
8837:       | nLabel :                          @LabelDefinition( decl )
8845:                                           @Statement
8847:       | nProc :                           @Call( decl )
8856:       | nGlobalVar, nLocalVar, nParam, nTypeDecl :
8858:                                           @AssignStmt( decl )
8865:       | nFunc :                           @AssignResultStmt( decl )
8874:       | * :                               #eBadStatement
8893:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
8894: LabelDefinition( Node decl ):
8896:    [ oNodeGetBoolean( decl, qDefined )
8906:       | true :  #eAlreadyDefined
8909:       | * :
8914:    ]
8914:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
8929:    oNodeSetBoolean( decl, qDefined, true )
8941:    ':'
8944:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
8944: AssignStmt( Node decl ):
8946:    @LValueFromDecl( decl, true )
8956:    ':=' 
8958:    @Expr
8960:    @CoerceType
8962:    @Assign
8965:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack (already coerced to the lvalue type),
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
8965: Assign:
8967:    [ oTypeSNodeType
8969:       | nIntegerType, nEnumType :  .tAssignI
8972:       | nBooleanType, nByteType, nCharType :  .tAssignB
8976:       | nFileType :   #eNotImplemented
8980:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
8984:       | nArrayType, nRecordType, nShortStringType :
                % TO DO: for ShortString, allow destination to be smaller capacity,
                % and truncate the copied value/length.
8986:           int size = oNodeGetInt( oTypeSTop, qSize )
8998:           .tCopy  oEmitInt( size )    % multi-word copy
9006:    ]
9032:    oTypeSPop
9034:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
9034: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
9036:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
9052:       | false :   #eNotCurrentFunction
9055:       | * :
9060:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
9060:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
9075:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
9088:    ':='
9090:    @Expr
9092:    @CoerceType
9094:    [ oTypeSNodeType
9096:       | nIntegerType, nEnumType : .tAssignI
9099:       | nBooleanType, nByteType, nCharType :  .tAssignB
9103:       | nFileType :   #eNotImplemented
9107:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9111:       | nArrayType, nRecordType, nShortStringType :
9113:           int size = oNodeGetInt( oTypeSTop, qSize )
9125:           .tCopy  oEmitInt( size )    % multi-word copy
9133:    ]
9159:    oTypeSPop
9161:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
9161: LValueExpr( boolean writeable ):
         % Al lvalue expressions start with a variable name,
         % or a type name (for an lvalue typecast).
9163:    pIdent
9165:    Node decl = oScopeFindRequire
9170:    @ResolveUnitRef( decl )
9177:    @LValueFromDecl( decl, writeable )
9188:    ;
      
      
      % Parse an lvalue expression, starting with the decl of the just accepted identifier.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
9188: LValueFromDecl( Node decl, boolean writeable ):
9190:    [ oNodeType( decl )
9197:       | nGlobalVar, nLocalVar, nParam, nTypedConst :
9198:          @LValueVar( decl, writeable )
      
9208:       | nTypeDecl :
               % lvalue typecast
               % This is only allowed if the provided lvalue we're casting from has the same size.
               % No conversion code occurs, it's just a different interpretation of the same bits.
9210:          oTypeSPush( oNodeGet( decl, qType ) )
9223:          '('
9225:          @LValueExpr( writeable )
9232:          ')'
9234:          @LValueCastType
               % There can be further modifications of the lvalue after the cast.
               % This is taken from LValueVar.  Try to consolidate.
9236:          [ oTypeSNodeType
9238:             | nPointerType :
9239:                [
9239:                   | '[' :
                           % dereference the pointer var first
9241:                      .tFetchP
9243:                      @PointerArraySubscript
9245:                   | * :
9250:                ]
9250:             | * :
9255:          ]
               % additional subscripts, if any
9255:          @LValueIndexes
       
9257:       | * :  #eNotVar
9272:    ]
9273:    ;
      
      
      % An lvalue is on the expression stack.
      % The type of the lvalue is on the type stack.
      % The desired type is under it on the type stack.
      % Perform an lvalue cast to the desired type, leaving just that type.
      %
      % An lvalue cast is allowed only if the data size is the same.
      % No conversion code occurs, it's just a different interpretation of the same bits.
      %
9273: LValueCastType:
9275:    node_type nt = oTypeSNodeType
9280:    oTypeSPop
9281:    [ equal_node_type( nt, oTypeSNodeType )
9290:       | false :
               % Can we cast the value to the desired type?
9291:          [ oTypeSNodeType
9293:             | nIntegerType, nEnumType :
9294:                [ nt
9297:                   | nByteType, nCharType, nBooleanType :  #eSizeMismatch  >>
9301:                   | nIntegerType, nEnumType :   >>
9304:                   | * :
9317:                ]
9317:             | nByteType, nCharType, nBooleanType :
9319:                [ nt
9322:                   | nByteType, nCharType, nBooleanType :   >>
9324:                   | nIntegerType, nEnumType :  #eSizeMismatch  >>
9329:                   | * :
9342:                ]
9342:             | nPointerType :
9344:                [ nt
9347:                   | nUniversalPointerType :  >>
9349:                   | * :
9354:                ]
9354:             | nUniversalPointerType :
9356:                [ nt
9359:                   | nPointerType :  >>
9361:                   | * :
9366:                ]
9366:             | nShortStringType :
9368:                [ nt
9371:                   | nStrLitType :  >>
9373:                   | * :
9378:                ]
9378:             | * :
9397:          ]
9397:          #eTypeMismatch
9399:       | * :
9404:    ];
      
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
9405: LValueVar( Node decl, boolean writeable ):
9407:    [ oNodeType( decl )
9414:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
9424:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
9435:       | nParam :
9437:          [ oNodeGetBoolean( decl, qInOut )
9447:             | true :   % VAR param points to variable.  No dereference.
9448:                        .tPushParamP @EmitValue( decl )
9457:             | * :      .tPushAddrParam @EmitValue( decl )
9471:          ]
9471:       | nTypedConst :
9473:          [ writeable
9476:             | false :  .tPushAddrGlobal @EmitValue( decl )                       
9486:             | * :      #eNotVar
9493:          ]
9493:       | * :            #eNotVar
9506:    ]
      
9506:    oTypeSPush( oNodeGet( decl, qType ) )
      
         % handle subscripts, if any.
         % There is one case that I'm not fitting into the pattern nicely, so need to
         % check for specially here:  if lvalue var is a pointer variable, and is
         % followed by [index], we need to dereference the pointer variable before applying
         % the index.  This is different from handling of [index] on an rvalue expression.
         % Right now I have LValueIndexes working for both lvalue and rvalue (composite types)
         % so can't easily add this behavior in there.
         % TO DO: probably I need separate rules LValueIndexes and RValueIndexes.
         %    This might also explain my confusion about handling of deref operator in LValueIndexes vs rvalue expr,
         %    and having separate rules might clear that up better.
      
9519:    [ oTypeSNodeType
9521:       | nPointerType :
9522:          [
9522:             | '[' :
                     % dereference the pointer var first
9524:                .tFetchP
9526:                @PointerArraySubscript
9528:             | * :
9533:          ]
9533:       | * :
9538:    ]
         % additional subscripts, if any
9538:    @LValueIndexes
9541:    ;
      
      
9541: IncVar( Node decl ):
9543:    @LValueVar( decl, true )
9553:    @RequireIntPop
9555:    @VarExpr( decl )
9562:    oTypeSPop
9563:    .tIncI
9565:    .tAssignI;
      
9568: DecVar( Node decl ):
9570:    @LValueVar( decl, true )
9580:    @RequireIntPop
9582:    @VarExpr( decl )
9589:    oTypeSPop
9590:    .tDecI
9592:    .tAssignI;
      
      
9595: IfStmt:
9597:    Label falseLabel = labelNull
      
9603:    @BooleanExprControlFlow( falseLabel )
9610:    pThen
9612:    @Statement
9614:    [
9614:       | pElse :
9616:          Label doneLabel = oLabelNew
      
9621:          .tJump  oEmitLabel( doneLabel )
9629:          .tLabel oEmitLabel( falseLabel )
9637:          @Statement
9639:          .tLabel oEmitLabel( doneLabel )
      
9647:       | * :
9652:          .tLabel oEmitLabel( falseLabel )
9660:    ];
      
      
9661: ForStmt:
9663:    pIdent
      
9665:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
9670:    @LValueVar( decl, true )
9680:    @RequireIntPop
      
9682:    ':='
      
9684:    @Expr
9686:    @RequireIntPop
9688:    .tAssignI
      
9690:    Label breakLabel = oLabelNew
      
9695:    Label checkLabel = oLabelNew
9700:    .tJump  oEmitLabel( checkLabel )
      
9708:    Label continueLabel = oLabelNew
9713:    .tLabel  oEmitLabel( continueLabel )
9721:    [
9721:       | pTo :
9723:          @IncVar( decl )
9730:          .tLabel  oEmitLabel( checkLabel )
9738:          @VarExpr( decl )  oTypeSPop
9746:          @Expr
9748:          @RequireIntPop
9750:          .tGreaterI
9752:          .tJumpTrue  oEmitLabel( breakLabel )
9760:       | pDownto :
9762:          @DecVar( decl )
9769:          .tLabel  oEmitLabel( checkLabel )
9777:          @VarExpr( decl )  oTypeSPop
9785:          @Expr
9787:          @RequireIntPop
9789:          .tLessI
9791:          .tJumpTrue  oEmitLabel( breakLabel )
9799:    ]
9807:    oLoopPush( continueLabel, breakLabel )
9816:    pDo
9818:    @Statement
9820:    .tJump  oEmitLabel( continueLabel )
9828:    .tLabel  oEmitLabel( breakLabel )
9836:    oLoopPop;
      
      
9838: RepeatStmt:
9840:    Label continueLabel = oLabelNew
9845:    .tLabel  oEmitLabel( continueLabel )
      
9853:    Label breakLabel = oLabelNew
      
9858:    oLoopPush( continueLabel, breakLabel )
9867:    @Statement
9869:    {[
9869:       | ';' :
9871:          @Statement
9873:       | pUntil :
9875:          Label falseLabel
9875:          @BooleanExprControlFlow( falseLabel )
9882:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
9896:          >
9898:    ]}
9908:    .tLabel  oEmitLabel( breakLabel )
9916:    oLoopPop;
      
      
9918: WhileStmt:
9920:    Label continueLabel = oLabelNew
9925:    .tLabel  oEmitLabel( continueLabel )
      
9933:    Label breakLabel
9933:    @BooleanExprControlFlow( breakLabel )
      
9940:    oLoopPush( continueLabel, breakLabel )
9949:    pDo
9951:    @Statement
9953:    .tJump  oEmitLabel( continueLabel )
9961:    .tLabel  oEmitLabel( breakLabel )
9969:    oLoopPop;
      
      
9971: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
9973:    [ equal_label( oLoopContinueLabel, labelNull )
9982:       | true :
9983:          #eNotInALoop
9985:       | false :
9987:          .tJump  oEmitLabel( oLoopContinueLabel )
9994:    ];
      
      
10003: BreakStmt:
10005:    [ equal_label( oLoopBreakLabel, labelNull )
10014:       | true :
10015:          #eNotInALoop
10017:       | false :
10019:          .tJump  oEmitLabel( oLoopBreakLabel )
10026:    ];
      
      
10035: CaseStmt:
10037:    Code tableCode = oCodeNew
10042:    Label tableLabel = oLabelNew
10047:    Label doneLabel = oLabelNew
10052:    Label otherwiseLabel = doneLabel
10058:    boolean isString = false
      
10064:    @Expr
         % Leave the expr type on the type stack throughout case statement
10066:    [ oTypeSNodeType
10068:       | nBooleanType, nByteType, nCharType :   .tJumpCaseB  oEmitLabel( tableLabel )
10077:       | nIntegerType, nEnumType :              .tJumpCaseI  oEmitLabel( tableLabel )
10087:       | nShortStringType, nStrLitType :        isString = true
10095:                                                .tJumpCaseS  oEmitLabel( tableLabel )
10103:       | * :     #eNotAllowed
10122:    ]
10122:    pOf
      
10124:    {
10124:       [
10124:          | pOtherwise, pElse :
10126:             otherwiseLabel = oLabelNew
10131:             .tLabel  oEmitLabel( otherwiseLabel )
      
                  % A bit tricky:
                  % The otherwise clause allows multiple statements (unlike other cases).
                  % ';' might be separating statements in the otherwise clause,
                  % or might be an optional trailing ; after the last statement.
                  % I have to watch for End to know when the statements stop.
                  % (Note, the otherwise clause is the last part of the case statement.)
10139:             {[
10139:                | pEnd :  >
10143:                | * :
10148:                   @Statement
10150:                   [
10150:                      | ';' :
10152:                      | * :   pEnd  >
10161:                   ]
10161:             ]}
10163:             >
      
10165:          | pEnd :
                  % Reached end with no otherwise clause
10167:             >
      
10169:          | * :
10178:             Label caseLabel = oLabelNew
10183:             oCodePush( tableCode )
10189:             {
10189:                @ConstExpr
10191:                @ConstCoerceType
10193:                int val
10193:                [ isString
10196:                   | true :    val = oStringAllocShortStringLit( oValueTopString )
10206:                   | false :   val = oValueTop
10213:                ]
10221:                oValuePop
10222:                [
10222:                   | '..' :  @ConstExpr
10226:                             @ConstCoerceType
10228:                             int highval
10228:                             [ isString
10231:                                | true :   highval = oStringAllocShortStringLit( oValueTopString )
10241:                                | false :  highval = oValueTop
10248:                             ]
10256:                             oValuePop
10257:                             .tCaseRange  oEmitInt( val )  oEmitInt( highval )  oEmitLabel( caseLabel )
10277:                   | * :     .tCase  oEmitInt( val )  oEmitLabel( caseLabel )
10296:                ]
10296:                [
10296:                   | ',' :
10298:                   | * :  >
10305:                ]
10305:             }
10307:             oCodePop
10308:             ':'
10310:             .tLabel  oEmitLabel( caseLabel )
10318:             @Statement
10320:             .tJump  oEmitLabel( doneLabel )
                  % Swallow optional trailing ';'
10328:             [
10328:                | ';' :
10330:                | * :
10335:             ]
                  
10335:       ]
         
10335:    }
      
10337:    .tLabel  oEmitLabel( tableLabel )
10345:    oEmitCode( tableCode )
10351:    .tCaseEnd  oEmitLabel( otherwiseLabel )
10359:    .tLabel  oEmitLabel( doneLabel )
10367:    oTypeSPop
10369:    ;
      
      
10369: GotoStmt:
10371:    [
10371:       | pIdent :
10373:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
10375:          oChangeIntLitToLabelIdent
10376:    ]
      
         % Some pascals have rules about where you can jump (to a sibling statement or
         % higher level statement in the block, but not into a lower lower level statement.)
         % fpc just says "jumping into a nested statement can have strange effects."
         % I'm going to follow that and not prohibit any goto, as long as it's in the same block.
      
         % Label must be declared in the same block (same scope) it is used.
         % Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
10384:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
10393:    oNodeSetBoolean( decl, qUsed, true )
10405:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
10421:    ;
      
      
10421: BeginStmt:
10423:    @Statement
10425:    {[
10425:       | ';' :   @Statement
10429:       | pEnd :  >
10433:    ]};
      
      
10444: WritelnStmt:
10446:    @WriteStmt
10448:    .tWriteCR;
      
      
10451: WriteStmt:
10453:    [
10453:       | '(' :
10455:          {
10455:             @Expr
10457:             [ oTypeSNodeType
10459:                | nIntegerType :             .tWriteI
10462:                | nBooleanType :             .tWriteBool
10466:                | nByteType :                .tCastBtoI  .tWriteI
10472:                | nCharType :                .tWriteChar
10476:                | nShortStringType, nStrLitType :   .tWriteShortStr
10480:                | nFileType :                #eNotImplemented
10484:                | nEnumType :
                        % write name via table lookup
10486:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
10500:                   .tWriteEnum
10502:                | nPointerType :
10504:                   [ equal_node( oTypeSTop, PCharType )
10513:                      | true :               .tWritePChar
10516:                      | * :                  .tWriteP
10523:                   ]
10523:                | nUniversalPointerType :    .tWriteP
10527:                | * :                        #eNotAllowed
10552:             ]
10552:             oTypeSPop
10553:             [
10553:                | ')' : >
10557:                | ',' :
10559:             ]
10567:          }
10569:       | * :
10574:    ];
      
      
10575: ReadlnStmt:
10577:    @ReadStmt
10579:    .tReadCR;
      
      
10582: ReadStmt:
10584:    [
10584:       | '(' :
10586:          {
10586:             @LValueExpr( true )
10593:             [ oTypeSNodeType
10595:                | nIntegerType :      .tReadI
10598:                | nCharType :         .tReadChar
10602:                | nShortStringType :  
10604:                    int capacity = subtract( oNodeGetInt( oTypeSTop, qSize ), 1 )
10623:                    .tReadShortStr  oEmitInt( capacity )
10631:                | * :                 #eNotAllowed
10642:             ]
10642:             oTypeSPop
10643:             [
10643:                | ')' : >
10647:                | ',' :
10649:             ]
10657:          }
10659:       | * :
10664:    ];
10665: include 'pascal_str.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ String Operations -----------------------------
      
      
      % Given a ShortString, StrLit, or Char on the expression stack
      % (and type on the type stack).  Move the value into a new temporary ShortString.
      % Leave that temp string and type on the stacks.
      % Also returns the offset of the temp string.
      %
10665: MoveIntoTempShortString >> int:
10667:    int tempOffset = oScopeAllocType( ShortStringType )
         % copy the value
10677:    [ oTypeSNodeType
10679:       | nShortStringType, nStrLitType :
10680:          .tPushAddrLocal  oEmitInt( tempOffset )
               % put temp addr under value addr
10688:          .tSwap
               % TO DO: we could just copy length + 1, but tCopy takes a fixed #bytes
10690:          .tCopy  oEmitInt( oNodeGetInt( ShortStringType, qSize ) )
10705:       | nCharType :
               % temp[0] = 1
10707:          .tPushAddrLocal  oEmitInt( tempOffset )
10715:          .tPushConstI  oEmitInt( 1 )
10723:          .tAssignB
               % temp[1] = value
10725:          .tPushAddrLocal  oEmitInt( add( tempOffset, 1 ) )
10740:          .tSwap
10742:          .tAssignB
10744:       | * :   #eTypeMismatch
10755:    ]
10755:    oTypeSPop
         % Leave the temp ShortString on the expr stack and type stack
10756:    .tPushAddrLocal  oEmitInt( tempOffset )
10764:    oTypeSPush( ShortStringType )
10770:    >> tempOffset;
      
      
      % Top of expr stack / type stack is ShortString B.
      % Under it is ShortString A.
      % Change A to append the contents of B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
10774: ShortStringAppendShortString:
         % TO DO: ideally I would do this directly with tcode.  But I think I need some more
         % enhancements for that to work well.   Meanwhile, generate a call to a method.
         % For the moment, I'll implement the method in Pascal, in the mysystem unit.
10776:    .tAllocActuals  oEmitInt( 16 )
10784:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
10796:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
10808:    .tCall   @EmitValue( System_ShortStringAppendShortString )
         % TO DO: Ideally I would leave A on the expr stack / type stack.
         %  But I can't really do that without dup, which I hesitate to add.
         %  I'll have the caller push A again themselves.
10817:    .tFreeActuals  oEmitInt( 16 )
10825:    oTypeSPop
10826:    oTypeSPop
10828:    ;
      
      % Top of expr stack / type stack is Char B.
      % Under it is ShortString A.
      % Change A to append char B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
10828: ShortStringAppendChar:
         % Note at the moment I don't align params
10830:    .tAllocActuals  oEmitInt( 12 )
10838:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignB
10850:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
10862:    .tCall  @EmitValue( System_ShortStringAppendChar )
10871:    .tFreeActuals  oEmitInt( 12 )
10879:    oTypeSPop
10880:    oTypeSPop
10882:    ;
      
      % Expr stack has ShortString A, and ShortString B above it.
      % Type stack has just the type of ShortString A.
      % Replaces the expr stack with the integer value of string comparison:
      % -1 if A < B,  0 if A = B,  1 if A > B
      % Leaves Integer on the type stack.
      %
      % TO DO: kind of annoying that we need to hardcode the fact that the called method is cdecl extern.
      %   It would be nicer if that was noted only in the label.
      %   Alternatively, use a utility method in SSL to generate the appropriate call,
      %   given the method decl.
      %
10882: ShortStringCmp:
10884:    .tAllocActualsCdecl  oEmitInt( 24 )
10892:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
10904:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
10916:    int tempOffset = oScopeAllocType( IntegerType )
10926:    .tPushAddrActual  oEmitInt( 16 )  .tPushAddrLocal  oEmitInt( tempOffset )  .tAssignP
10944:    .tCallCdecl  @EmitValue( System_ShortStringCmp )
10953:    .tPushLocalI  oEmitInt( tempOffset )
10961:    .tFreeActuals  oEmitInt( 24 )
10969:    oTypeSPop
10970:    oTypeSPush( IntegerType )
10977:    ;
10977: include 'pascal_call.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ Method Calls -----------------------------
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
10977: Call( Node method ):
10979:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
10991:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
11004:    Node resultType
11004:    int tempOffset
      
11004:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
11021:    [ isFunc
11024:       | true :
11025:          resultType = oNodeGet( method, qType )
11038:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
11048:       | * :
11053:    ]
         
      
11053:    Node paramScope = oNodeGet( method, qParams )
11066:    int actualsSize = oNodeGetInt( paramScope, qSize )
11079:    [ cdecl
11082:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
11091:       | false :  .tAllocActuals  oEmitInt( actualsSize )
11101:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
11109:    [ greater( @DeclLevel( method ), 0 )
11124:       | true :
11125:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
11133:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
11152:          .tAssignP
11154:       | * :
11159:    ]
      
      
11159:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
11172:    Node param = oNodeIterValue( paramIter )
11182:    [
11182:       | '(' :
            
11184:          {
11184:             [ oNodeNull( param )
11191:                | true : >
11194:                | * :
11199:             ]
      
11199:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
11212:             .tPushAddrActual oEmitInt( offset )
11220:             oTypeSPush( oNodeGet( param, qType ) )
      
11233:             [ oNodeGetBoolean( param, qInOut )
11243:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
11244:                           @LValueExpr( true )
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
11251:                           @MatchTypes
      
11253:                           .tAssignP
      
11255:                | false :  @Expr
11259:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
11261:                           [ oTypeSNodeType
11263:                              | nIntegerType, nEnumType : .tAssignI
11266:                              | nBooleanType, nByteType, nCharType :  .tAssignB
11270:                              | nFileType :   #eNotImplemented
11274:                              | nPointerType, nUniversalPointerType :  .tAssignP
11278:                              | nArrayType, nRecordType, nShortStringType :
                                       % compound types: copy value into actuals space
11280:                                  int size = oNodeGetInt( oTypeSTop, qSize )
11292:                                  .tCopy  oEmitInt( size )    % multi-word copy
11300:                           ]
11326:             ]
11334:             oTypeSPop
      
11335:             oNodeIterNext( paramIter )
11341:             param = oNodeIterValue( paramIter )
11351:             [ oNodeNull( param )
11358:                | true :  >
11361:                | false :
11363:             ]
      
11371:             ','
11373:          }
      
11375:          ')'
      
11377:       | * :
11382:    ]
      
11382:    [ oNodeNull( param )
11389:       | false :    #eMissingParameter
11392:       | * :
11397:    ]
      
11397:    [ isFunc
11400:       | true :
               % Pass result temp as an additional VAR parameter.
11401:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
11416:          .tPushAddrLocal  oEmitInt( tempOffset )
11424:          .tAssignP
11426:       | * :
11431:    ]
      
11431:    [ cdecl
11434:       | true :
11435:          .tCallCdecl  @EmitValue( method )
11444:       | false :
11446:          .tCall   @EmitValue( method )
11455:    ]
      
11463:    [ isFunc
11466:       | true :
               % push return value from temp
11467:          oTypeSPush( resultType )
      
11473:          [ oTypeSNodeType
11475:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
11484:             | nBooleanType, nByteType, nCharType :   .tPushLocalB  oEmitInt( tempOffset )
11494:             | nFileType :  #eNotImplemented
11498:             | nPointerType, nUniversalPointerType :   .tPushLocalP  oEmitInt( tempOffset )
11508:             | nArrayType, nRecordType, nShortStringType :   % compound type: push address
11510:                                .tPushAddrLocal  oEmitInt( tempOffset )
11518:          ]
11544:       | * :
11549:    ]
         
11549:    .tFreeActuals  oEmitInt( actualsSize )
11558:    ;
      
      
      
      % Called on first use of an extern method
      %
11558: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
11560:    int strAddr
11560:    String externalName = oNodeGetString( method, qExternalName )
11573:    [ equal_string( externalName, stringNull )
11583:       | true :
11584:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
11605:       | false :
11607:          strAddr = oStringAllocLit( externalName )
11617:    ]
11625:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
11641:    ;
      
      
      
      % Parse a call to a built-in function, identified by the just-accepted identifier.
      % This will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
11641: CallBuiltInFunc( Node method ):
      
         % Ord(x)
11643:    [ oNodeEqual( method, BuiltIn_Ord )
11653:       | true :
               % parameter is any scalar type (including boolean, enum, char)
               % result is integer
11654:          '('
11656:          @Expr
11658:          [ oTypeSNodeType
11660:             | nIntegerType, nEnumType :
11661:             | nBooleanType, nByteType, nCharType :  .tCastBtoI
11665:             | * :  #eTypeMismatch
11680:          ]
11680:          oTypeSPop
11681:          oTypeSPush( IntegerType )
11687:          ')'
11689:          >>
11690:       | * :
11695:    ]
      
         % Chr(x)
11695:    [ oNodeEqual( method, BuiltIn_Chr )
11705:       | true :
               % parameter is integer
               % result is char
11706:          '('
11708:          @Expr
11710:          [ oTypeSNodeType
11712:             | nIntegerType :    .tCastItoB
11715:             | nByteType :
11717:             | * :  #eTypeMismatch
11726:          ]
11726:          oTypeSPop
11727:          oTypeSPush( CharType )
11733:          ')'
11735:          >>
11736:       | * :
11741:    ]
      
         % Pred(x)
11741:    [ oNodeEqual( method, BuiltIn_Pred )
11751:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
11752:          '('
11754:          @Expr
11756:          [ oTypeSNodeType
11758:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
11759:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
11768:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
11771:                   | * :
11776:                ]
11776:             | * :  #eTypeMismatch
11783:          ]
11783:          .tDecI
11785:          ')'
11787:          >>
11788:       | * :
11793:    ]
      
         % Succ(x)
11793:    [ oNodeEqual( method, BuiltIn_Succ )
11803:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
11804:          '('
11806:          @Expr
11808:          [ oTypeSNodeType
11810:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
11811:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
11820:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
11823:                   | * :
11828:                ]
11828:             | * :  #eTypeMismatch
11835:          ]
11835:          .tIncI
11837:          ')'
11839:          >>
11840:       | * :
11845:    ]
      
         % Sizeof(x)
11845:    [ oNodeEqual( method, BuiltIn_Sizeof )
11855:       | true :
               % parameter is a type name (cannot be a general type description),
               % or an expression (which is not evaluated).
               %
               % My initial thought was to look at the first token to see if it's a type name,
               % and if not, unaccept it and run @Expr  (with the code stream set to a dummy stream).
               % But that's not completely sufficient.
               % First, the typename might be   unit.name  so unaccepting one token wouldn't be good enough.
               % Also, an expression can start with a typename e.g.  integer(1+2) * 3
               %
               % So, instead of looking for a type name at this level, and going to Expr if not,
               % I'll just go into Expr.  But I'll turn on an option to accept type names in Primary.
               % Since we're discarding the code anyway, I'll have that primary push a bogus value
               % on the expr stack.  The main thing is just to get the type right.
               
11856:          '('
               % Parse expression but don't evaluate its code (so no side effects occur).
               % I'll accomplish that by sending the code to a temp stream that I discard.
11858:          Code dummyCode = oCodeNew
11863:          oCodePush( dummyCode )
11869:          @ExprAllowTypeName
11871:          oCodePop
11872:          oCodeDiscard( dummyCode )
11878:          Node theType = oTypeSTop
11883:          oTypeSPop
11884:          .tPushConstI  oEmitInt( oNodeGetInt( theType, qSize ) )
11899:          oTypeSPush( IntegerType )
11905:          ')'
11907:          >>
      
11908:       | * :
11913:    ]
      
11913:    #eNotImplemented
11916:    ;
      
11916: include 'pascal_type.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ Types -----------------------------
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
11916: newType( node_type nt, int size ) >> Node:
11918:   Node node = oNodeNew( nt )
11928:   oNodeSetInt( node, qSize, size )
11940:   oTypeAdd( node )
11946:   >> node
11950:   ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
11950: TypeRef( out Node resultType ):
11952:    [
11952:       | pIdent :           % previously named type (including intrinsics)
11954:          Node decl = oScopeFindRequire
11959:          @ResolveUnitRef( decl )
11966:          [ oNodeType( decl )
11973:             | nTypeDecl :
11974:                resultType = oNodeGet( decl, qType )
11987:             | * :
11992:                #eNotType
11994:                resultType = IntegerType
12000:          ]
         
12000:       | pArray :
12002:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
12004:          NodeVec dimensions = oNodeVecNew
      
12009:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
12009:             Node subrange = oNodeNew( nSubrangeType )
      
12019:             @ConstExpr
12021:             oNodeSetInt( subrange, qLow, oValueTop )
12032:             oValuePop
12033:             '..'
12035:             @ConstExpr
12037:             oNodeSetInt( subrange, qHigh, oValueTop )
12048:             oValuePop
      
12049:             @ConstMatchTypes
12051:             oNodeSet( subrange, qBaseType, oTypeSTop )
12062:             oNodeSetInt( subrange, qSize, oNodeGetInt( oTypeSTop, qSize ) )
12080:             oTypeSPop
12081:             oTypeAdd( subrange )
      
12087:             Node a = oNodeNew( nArrayType )
12097:             oNodeSet( a, qIndexType, subrange )
      
12109:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
12118:             [
12118:                | ']' : >
12122:                | ',' :
12124:             ]
12132:          }
      
12134:          pOf
12136:          Node baseType
12136:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
12143:          int dim = oNodeVecSize( dimensions )
      
12153:          {
12153:              dec(dim)
      
12159:              Node a = oNodeVecElement( dimensions, dim )
      
12172:              oNodeSet( a, qBaseType, baseType )
12184:              Node subrange = oNodeGet( a, qIndexType )
12197:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
12224:              inc( width )
12230:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
12256:              oTypeAdd( a )
12262:              baseType = a
      
12268:              [ equal_zero(dim)
12275:                  | true:  >
12278:                  | *:
12283:              ]
12283:          }
      
12285:          resultType = oNodeVecElement( dimensions, 0 )
12298:          oNodeVecDelete( dimensions )
      
12304:       | '^' :
12306:          Node theType
12306:          @TypeRef( theType )
12313:          resultType = @PointerTypeTo( theType )
      
12324:       | pRecord :
12326:          resultType = oNodeNew( nRecordType )
12336:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
12345:          @VarDecl( nRecordField )
      
12352:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
12364:          [ equal_zero( size )
12371:             | true : #eRecordEmpty
12374:             | * :
12379:          ]
      
12379:          pEnd
      
12381:          oNodeSet( resultType, qScope, oScopeCurrent )
12392:          oNodeSetInt( resultType, qSize, size )
12404:          oScopeEnd
12405:          oTypeAdd( resultType )
      
      
12411:       | '(' :
               % An enum type declaration.
12413:          @EnumTypeRef( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
12420:       | pSet :
12422:          pOf
12424:          Node theType
12424:          @TypeRef( theType )
12431:          #eNotImplemented
12433:       | * :       % this works for cases except where expr starts with an id
12448:          @ConstExpr '..' @ConstExpr
12454:          @ConstMatchTypes
12456:          #eNotImplemented
12458:    ];
      
      
      % Parse an enum type.
      % We've already accepted the '('
      % Returns the new type.
      %
12459: EnumTypeRef( out Node resultType ):
      
12461:    resultType = oNodeNew( nEnumType )
12471:    int value = 0
12477:    int numValues = 0
12483:    boolean first = true
      
         % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
         % That will let programs use either <val> or <enumType>.<val>
12489:    Node outerScope = oScopeCurrent
12494:    oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
12503:    {
            % TO DO: assert that name not already seen in this scope, i.e. this enum.
            %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
            %  It might be in some other higher/used scope.
12503:       pIdent
12505:       Node decl = @newIdent( nEnumValue, LAST_ID )
12518:       Node decl2 = @newIdent( nEnumValue, LAST_ID )
12531:       oNodeSet( decl, qType, resultType )
12543:       oNodeSet( decl2, qType, resultType )
      
            % build up name table, for i/o
12555:       int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
12568:       oNodeSetInt( decl, qNameOffset, nameOffset )
12580:       oNodeSetInt( decl2, qNameOffset, nameOffset )
12592:       [
12592:          | '=', ':=' :
12594:             oTypeSPush( IntegerType )
12600:             @ConstExpr
12602:             @ConstCoerceType
12604:             oTypeSPop
                  % value must be ascending
                  % this obviously doesn't apply to the first value
12605:             [ equal_zero( numValues )
12612:                | false :
12613:                   [ greater( oValueTop, value )
12622:                      | false :   #eEnumValueNotAscending
12625:                      | * :
12630:                   ]
12630:                | * :
12635:             ]
12635:             [ equal( value, oValueTop )
12644:                | false :
                        % The values differ from 0..N-1.  pred/succ may not be used with this type.
12645:                   oNodeSetBoolean( resultType, qHasGap, true )
12657:                | * :
12662:             ]
12662:             value = oValueTop
12667:             oValuePop
12668:          | * :
12675:       ]
12675:       oNodeSetInt( decl, qValue, value )
12687:       oNodeSetInt( decl2, qValue, value )
12699:       oScopeDeclare( decl )
      
12705:       oScopeEnter( outerScope )
12711:       oScopeDeclare( decl2 )
12717:       oScopeEnd
      
12718:       inc( value )
12724:       inc( numValues )
12730:       [
12730:          | ',' :
12732:          | * :    >
12739:       ]
12739:    }
12741:    ')'
      
12743:    oNodeSet( resultType, qScope, oScopeCurrent )
12754:    oNodeSetInt( resultType, qSize, 4 )   % always integer sized
12766:    oScopeEnd
      
         % Finish creation of the name table
         %    struct {
         %      int    value;
         %      int    padding;
         %      char*  name;
         %    } table[ numValues + 1 ];
         %  final entry will have name == nullptr
         %
         % I'll need to generate init code, to store pointers in global data,
         % since I don't have a relocation mechanism for static data at the moment.
12767:    oCodePush( @GetOrCreateInitCode( globalScope ) )
12778:    oScopeEnter( globalScope )
12784:    int size = multiply( add( numValues, 1 ), 16 )
12804:    int addr = oScopeAlloc( size, 8 )
12817:    oScopeEnd
12818:    oNodeSetInt( resultType, qNameTable, addr )
         % loop over enum values
12830:    NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
12850:    {
12850:       Node enumValue = oNodeIterValue( it )
12860:       [ oNodeNull( enumValue )
12867:          | true :  >
12870:          | * :
12875:       ]
12875:       .tPushAddrGlobal  oEmitInt( addr )
12883:       .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
12898:       .tAssignI
12900:       addr = add( addr, 8 )
12913:       .tPushAddrGlobal  oEmitInt( addr )
12921:       .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
12936:       .tAssignP
12938:       addr = add( addr, 8 )
12951:       oNodeIterNext( it )
12957:    }
         % final table entry
12959:    .tPushAddrGlobal  oEmitInt( addr )
12967:    .tPushConstI  oEmitInt( 0 )
12975:    .tAssignI
12977:    addr = add( addr, 8 )
12990:    .tPushAddrGlobal  oEmitInt( addr )
12998:    .tPushConstI  oEmitInt( 0 )
13006:    .tAssignP
13008:    addr = add( addr, 8 )
13021:    oCodePop
      
13022:    oTypeAdd( resultType )
13029:    ;
      
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
13029: PointerTypeTo( Node theType ) >> Node:
13031:    Node ptrType = oNodeGet( theType, qPointerType )
13044:    [ oNodeNull( ptrType )
13051:       | true :
13052:          ptrType = oNodeNew( nPointerType )
13062:          oNodeSet( ptrType, qBaseType, theType )
13074:          oNodeSetInt( ptrType, qSize, 8 )
13086:          oTypeAdd( ptrType )
13092:          oNodeSet( theType, qPointerType, ptrType )
13104:       | * :
13109:    ]
13109:    >> ptrType;
      
      
      
      % Return the low value of an ordinal type
      %
13113: OrdinalLow( Node theType ) >> int:
13115:    [ oNodeType( theType )
13122:       | nIntegerType :  >> oMININT
13125:       | nBooleanType :  >> 0
13130:       | nCharType :     >> 0
13135:       | nEnumType :
13137:          Node enumScope = oNodeGet( theType, qScope )
13150:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
13167:          >> oNodeGetInt( first, qValue )
13177:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
13189:       | * :             #eNotOrdinalType
13204:                         >> 0
13207:    ];
      
      
      % Return the high value of an ordinal type
      %
13208: OrdinalHigh( Node theType ) >> int:
13210:    [ oNodeType( theType )
13217:       | nIntegerType :  >> oMAXINT
13220:       | nBooleanType :  >> 1
13225:       | nCharType :     >> 255
13230:       | nEnumType :
13232:          Node enumScope = oNodeGet( theType, qScope )
13245:          Node last = oNodeIterValue( oNodeGetIterLast( enumScope, qDecls ) )
13262:          >> oNodeGetInt( last, qValue )
13272:       | nSubrangeType : >> oNodeGetInt( theType, qHigh )
13284:       | * :             #eNotOrdinalType
13299:                         >> 0
13302:    ];
      
      
      
13303: Program:
13305:    Node t
      
13305:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
13310:    oScopeBegin( 0, allocGlobal )
13319:    Node rootScope = oScopeCurrent
      
13324:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
13326:    .tEnter  oEmitInt( 0 )
13334:    Label mainLabel = oLabelNew
      
13339:    .tAllocActuals  oEmitInt( 0 )
13347:    .tCall  oEmitLabel( mainLabel )
13355:    .tFreeActuals  oEmitInt( 0 )
13363:    .tReturn
      
13365:    pProgram
13367:    pIdent
      
13369:    Node program = oNodeNew( nProgram )
13379:    oNodeSetInt( program, qIdent, LAST_ID )
13390:    oNodeSet( workspace, qProgram, program )
      
      
13402:    [
13402:       | '(' :
13404:          pIdent      % input, output files
      
13406:          t = @newIdent( nVar, LAST_ID )
13419:          oNodeSet( t, qType, FileType )
13431:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
13437:          ','
13439:          pIdent
      
13441:          t = @newIdent( nVar, LAST_ID )
13454:          oNodeSet( t, qType, FileType )
13466:          oScopeDeclareAlloc( t )
      
13472:          ')'
13474:       | * :
13479:    ]
13479:    ';'
      
13481:    @UsesMySystem( program )
         % The uses clause may only appear once, immediately after the program declaration.
13488:    [
13488:       | pUses :  @UsesClause( program )
13497:       | * :
13502:    ]
13502:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
13509:    oScopeBegin( 0, allocGlobal )
13518:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
13523:    oScopeBegin( 0, allocDown )
13532:    oNodeSet( oScopeCurrent, qExtends, globalScope )
13543:    initScope = oScopeCurrent
13548:    oNodeSet( program, qMainRoutineScope, initScope )
13560:    oScopeEnd
      
13561:    @BlockDecls( nGlobalVar )
      
      
13568:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
13574:    boolean isMain = true
13580:    @BlockStmt( mainLabel, globalScope, isMain )
      
13593:    oScopeEnd   % main routine scope
      
13594:    '.'
13596:    @CheckForUndefinedLabels
13598:    oScopeEnd   % global scope
13599:    @EndUsedUnits( program )   % used units scopes
13607:    ;
      
      
      
      
13607: Block( node_type varNodeType, Label labelForBody ):
13609:    @BlockDecls( varNodeType )
13616:    @BlockStmt( labelForBody, oScopeCurrent, false )
13628:    @CheckForUndefinedLabels
13631:    ;
      
      
13631: BlockDecls( node_type varNodeType ):
13633:    {[
13633:       | pConst :     @ConstDecl
13637:       | pType :      @TypeDecl
13641:       | pVar :       @VarDecl( varNodeType )
13650:       | pLabel :     @LabelDecl
13654:       | pProcedure : @ProcDecl
13658:       | pFunction :  @FuncDecl
13662:       | * :          >
13679:    ]}
13681:    @CheckForUndefinedMethods
13684:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
13684: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
13687:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
13687: CheckForUndefinedLabels:
13689:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
13701:    {
13701:       Node decl = oNodeIterValue( it )
13711:       [ oNodeNull( decl )
13718:          | false :
13719:          | * :  >
13726:       ]
13726:       [ oNodeType( decl )
13733:          | nLabel :
13734:             [ oNodeGetBoolean( decl, qDefined )
13744:                | false :
13745:                   [ oNodeGetBoolean( decl, qUsed )
13755:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
13758:                      | * :
13763:                   ]
13763:                | * :
13768:             ]
13768:          | * :
13773:       ]
13773:       oNodeIterNext( it )
13779:    }
13782:    ;
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
13782: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
13784:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
13792:    int patchLS
13792:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
13801:    [ isMain
13804:       | true :  @InitializeUnits
13807:       | * :
13812:    ]
      
         % insert any code for initialization of this scope's variables
13812:    Code initCode = oNodeGetCode( varScope, qInitCode )
13825:    oEmitCode( initCode )
13831:    oNodeSetCode( varScope, qInitCode, codeNull )
      
13843:    @Statement
      
13845:    [ isMain
13848:       | true :  @FinalizeUnits
13851:       | * :
13856:    ]
      
13856:    .tReturn
      
13858:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
13870:    oPatch( patchLS, localSpace )
13880:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
13880: GetOrCreateInitCode( Node scope ) >> Code:
13882:    Code initCode = oNodeGetCode( scope, qInitCode )
13895:    [ equal_code( initCode, codeNull )
13905:       | true :
13906:          initCode = oCodeNew
13911:          oNodeSetCode( scope, qInitCode, initCode )
13923:       | * :
13928:    ]
13928:    >> initCode;
      
      
      
      
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
13932: ScopeLevel >> int:
13934:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
13944: DeclLevel( Node decl ) >> int:
13946:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
13964: DeclUpLevels( Node decl ) >> int:
13966:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
13982: newIdent( node_type nt, int id ) >> Node:
13984:   Node t = oNodeNew( nt )
13994:   oNodeSetInt( t, qIdent, id )
14006:   >> t
14010:   ;
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
14010: EmitValue( Node decl ):
14012:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
14026: DeclareBuiltInFunc( int id ) >> Node:
14028:    Node decl = @newIdent( nBuiltInFunc, id )
14042:    oScopeDeclare( decl )
14048:    >> decl;
      
      
14052: installBuiltIns:
      
         % initialize some other globals too
14054:    flagExprAllowTypeName = false
      
         % "mysystem" is the name of a unit that will be available everywhere.
         % Add its name to the id table so we can easily spot the name later.
14060:    mysystemId = oId_mysystem
      
         % install built-in types
14065:    FileType = @newType( nFileType, 4 )
14079:    IntegerType = @newType( nIntegerType, 4 )
14093:    BooleanType = @newType( nBooleanType, 1 )
14107:    BooleanFlowType = @newType( nBooleanFlowType, 1 )
14121:    CharType = @newType( nCharType, 1 )
14135:    PCharType = @PointerTypeTo( CharType )
14146:    ByteType = @newType( nByteType, 1 )
14160:    SingleType = @newType( nSingleType, 4 )
14174:    DoubleType = @newType( nDoubleType, 8 )
         % Universal pointer says base type Byte, but this is only for the sake of
         % pointer arithmetic.  It doesn't matter otherwise, because this type cannot be dereferened.
14188:    UniversalPointerType = @newType( nUniversalPointerType, 8 )
14202:    oNodeSet( UniversalPointerType, qBaseType, ByteType )
         % StrLitType is stored with both a length byte and null termination, so it can be assigned to
         % both a ShortString and a PChar.  StrLits longer than 255 characters appear truncated when
         % referenced as a ShortString, but not when referenced as a PChar.
14214:    StrLitType = @newType( nStrLitType, 256 )
         % ShortString is the original Pascal string type: an array of characters, not null-terminated,
         % with the first byte recording the current length.
         % The default ShortString type has capacity for 255 characters.  The user may define
         % additional ShortString types with smaller capacities.
         % The first character can be accessed as myString[1].
14228:    ShortStringType = @newType( nShortStringType, 256 )
14242:    oNodeSetInt( ShortStringType, qCapacity, 255 )
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oId_File
      
14254:    Node t
      
14254:    t = @newIdent( nTypeDecl, oId_File )
14267:    oNodeSet( t, qType, FileType )
14279:    oScopeDeclare( t )
      
14285:    t = @newIdent( nTypeDecl, oId_Integer )
14298:    oNodeSet( t, qType, IntegerType )
14310:    oScopeDeclare( t )
      
14316:    t = @newIdent( nTypeDecl, oId_Boolean )
14329:    oNodeSet( t, qType, BooleanType )
14341:    oScopeDeclare( t )
      
14347:    t = @newIdent( nTypeDecl, oId_Char )
14360:    oNodeSet( t, qType, CharType )
14372:    oScopeDeclare( t )
      
14378:    t = @newIdent( nTypeDecl, oId_Byte )
14391:    oNodeSet( t, qType, ByteType )
14403:    oScopeDeclare( t )
      
14409:    t = @newIdent( nTypeDecl, oId_Single )
14422:    oNodeSet( t, qType, SingleType )
14434:    oScopeDeclare( t )
      
14440:    t = @newIdent( nTypeDecl, oId_Double )
14453:    oNodeSet( t, qType, DoubleType )
14465:    oScopeDeclare( t )
      
14471:    t = @newIdent( nTypeDecl, oId_Pointer )
14484:    oNodeSet( t, qType, UniversalPointerType )
14496:    oScopeDeclare( t )
      
14502:    t = @newIdent( nTypeDecl, oId_ShortString )
14515:    oNodeSet( t, qType, ShortStringType )
14527:    oScopeDeclare( t )
      
         % Built-in constants
      
14533:    t = @newIdent( nConst, oId_True )
14546:    oNodeSet( t, qType, BooleanType )
14558:    oNodeSetInt( t, qValue, 1 )
14570:    oScopeDeclare( t )
      
14576:    t = @newIdent( nConst, oId_False )
14589:    oNodeSet( t, qType, BooleanType )
14601:    oNodeSetInt( t, qValue, 0 )
14613:    oScopeDeclare( t )
      
14619:    t = @newIdent( nConst, oId_Nil )
14632:    oNodeSet( t, qType, UniversalPointerType )
14644:    oNodeSetInt( t, qValue, 0 )
14656:    oScopeDeclare( t )
      
         % Built-in methods
         % These aren't declared like normal methods, because they may have
         % special rules for parameter types (e.g. any scalar type).
         % Calls to these methods will be handled specially by the compiler.
      
14662:    BuiltIn_Ord = @DeclareBuiltInFunc( oId_Ord )
14672:    BuiltIn_Chr = @DeclareBuiltInFunc( oId_Chr )
14682:    BuiltIn_Pred = @DeclareBuiltInFunc( oId_Pred )
14692:    BuiltIn_Succ = @DeclareBuiltInFunc( oId_Succ )
14702:    BuiltIn_Sizeof = @DeclareBuiltInFunc( oId_Sizeof )
14713:    ;
      
14713: end
      
14713: 

Generated code:

   0: oGlobalSpace 26
   2: oLocalSpace 0
   4: oCall 13303
   6: oReturn
   7: oLocalSpace 0
   9: oInput 0
  11: LAST_ID
  12: oPushResult
  13: oGetParam 1
  15: oPushResult
  16: oCall 148
  18: oPop 2
  20: oInputChoice 24
  22: oJumpForward 29
  24: Choice Lookup Table
          14     22
  27: oJumpForward 31
  29: oJumpBack 9
  31: oInput 6
  33: oReturn
  34: oLocalSpace 0
  36: oGetParam 1
  38: oPushResult
  39: oSetResult 4
  41: oPushResult
  42: oNodeGetInt
  43: oPop 2
  45: oPushResult
  46: oGetGlobal 4
  48: oPushResult
  49: equal
  50: oPop 2
  52: oChoice 57
  54: oReturn
  55: oJumpForward 60
  57: Choice Lookup Table
           1     54
  60: oGetGlobal 4
  62: oPushResult
  63: oGetParam 1
  65: oPushResult
  66: oCall 148
  68: oPop 2
  70: oReturn
  71: oLocalSpace 0
  73: oGetParam 1
  75: oPushResult
  76: oSetResult 4
  78: oPushResult
  79: oNodeGetInt
  80: oPop 2
  82: oPushResult
  83: oGetGlobal 4
  85: oPushResult
  86: equal
  87: oPop 2
  89: oChoice 144
  91: oGetAddrGlobal 22
  93: oPushResult
  94: oScopeCurrent
  95: oPushResult
  96: oSetResult 15
  98: oPushResult
  99: oSetResult 4
 101: oPushResult
 102: oId_ShortStringAppendShortString
 103: oPushResult
 104: oNodeFind
 105: oPop 4
 107: oAssign
 108: oGetAddrGlobal 23
 110: oPushResult
 111: oScopeCurrent
 112: oPushResult
 113: oSetResult 15
 115: oPushResult
 116: oSetResult 4
 118: oPushResult
 119: oId_ShortStringAppendChar
 120: oPushResult
 121: oNodeFind
 122: oPop 4
 124: oAssign
 125: oGetAddrGlobal 24
 127: oPushResult
 128: oScopeCurrent
 129: oPushResult
 130: oSetResult 15
 132: oPushResult
 133: oSetResult 4
 135: oPushResult
 136: oId_ShortStringCmp
 137: oPushResult
 138: oNodeFind
 139: oPop 4
 141: oAssign
 142: oJumpForward 147
 144: Choice Lookup Table
           1     91
 147: oReturn
 148: oLocalSpace 2
 150: oGetAddrLocal 1
 152: oPushResult
 153: oGetParam 2
 155: oPushResult
 156: oCall 428
 158: oPop 1
 160: oAssign
 161: oGetLocal 1
 163: oPushResult
 164: oSetResult 0
 166: oPushResult
 167: equal_node
 168: oPop 2
 170: oChoice 240
 172: oGetParam 1
 174: oPushResult
 175: oSetResult 5
 177: oPushResult
 178: oGetLocal 1
 180: oPushResult
 181: oNodeAddLast
 182: oPop 3
 184: oGetAddrLocal 2
 186: oPushResult
 187: oSetResult 10
 189: oPushResult
 190: oNodeNew
 191: oPop 1
 193: oAssign
 194: oGetLocal 2
 196: oPushResult
 197: oSetResult 4
 199: oPushResult
 200: oGetLocal 1
 202: oPushResult
 203: oSetResult 4
 205: oPushResult
 206: oNodeGetInt
 207: oPop 2
 209: oPushResult
 210: oNodeSetInt
 211: oPop 3
 213: oGetLocal 2
 215: oPushResult
 216: oSetResult 9
 218: oPushResult
 219: oGetLocal 1
 221: oPushResult
 222: oSetResult 9
 224: oPushResult
 225: oNodeGet
 226: oPop 2
 228: oPushResult
 229: oNodeSet
 230: oPop 3
 232: oGetLocal 2
 234: oPushResult
 235: oScopeDeclare
 236: oPop 1
 238: oJumpForward 243
 240: Choice Lookup Table
           0    172
 243: oReturn
 244: oLocalSpace 1
 246: oGetFromParam 1
 248: oPushResult
 249: oNodeType
 250: oPop 1
 252: oChoice 283
 254: oGetAddrLocal 1
 256: oPushResult
 257: oGetFromParam 1
 259: oPushResult
 260: oSetResult 9
 262: oPushResult
 263: oNodeGet
 264: oPop 2
 266: oAssign
 267: oInput 21
 269: oInput 0
 271: oGetParam 1
 273: oPushResult
 274: oGetLocal 1
 276: oPushResult
 277: oScopeFindRequireInScope
 278: oPop 1
 280: oAssign
 281: oJumpForward 286
 283: Choice Lookup Table
          10    254
 286: oReturn
 287: oLocalSpace 2
 289: oGetAddrLocal 1
 291: oPushResult
 292: oGetParam 1
 294: oPushResult
 295: oSetResult 5
 297: oPushResult
 298: oNodeGetIter
 299: oPop 2
 301: oAssign
 302: oGetAddrLocal 2
 304: oPushResult
 305: oGetLocal 1
 307: oPushResult
 308: oNodeIterValue
 309: oPop 1
 311: oAssign
 312: oGetLocal 2
 314: oPushResult
 315: oNodeNull
 316: oPop 1
 318: oChoice 335
 320: oGetLocal 2
 322: oPushResult
 323: oSetResult 9
 325: oPushResult
 326: oNodeGet
 327: oPop 2
 329: oPushResult
 330: oScopeEnter
 331: oPop 1
 333: oJumpForward 340
 335: Choice Lookup Table
           0    320
 338: oJumpForward 348
 340: oGetAddrLocal 1
 342: oPushResult
 343: oNodeIterNext
 344: oPop 1
 346: oJumpBack 302
 348: oReturn
 349: oLocalSpace 2
 351: oGetAddrLocal 1
 353: oPushResult
 354: oGetParam 1
 356: oPushResult
 357: oSetResult 5
 359: oPushResult
 360: oNodeGetIterLast
 361: oPop 2
 363: oAssign
 364: oGetAddrLocal 2
 366: oPushResult
 367: oGetLocal 1
 369: oPushResult
 370: oNodeIterValue
 371: oPop 1
 373: oAssign
 374: oGetLocal 2
 376: oPushResult
 377: oNodeNull
 378: oPop 1
 380: oChoice 414
 382: oScopeCurrent
 383: oPushResult
 384: oGetLocal 2
 386: oPushResult
 387: oSetResult 9
 389: oPushResult
 390: oNodeGet
 391: oPop 2
 393: oPushResult
 394: oNodeEqual
 395: oPop 2
 397: oChoice 405
 399: oJumpForward 411
 401: oError 25
 403: oJumpForward 411
 405: Choice Lookup Table
           0    401
           1    399
 410: oEndChoice
 411: oScopeEnd
 412: oJumpForward 419
 414: Choice Lookup Table
           0    382
 417: oJumpForward 427
 419: oGetAddrLocal 1
 421: oPushResult
 422: oNodeIterPrev
 423: oPop 1
 425: oJumpBack 364
 427: oReturn
 428: oLocalSpace 2
 430: oGetAddrLocal 1
 432: oPushResult
 433: oGetGlobal 1
 435: oPushResult
 436: oSetResult 1
 438: oPushResult
 439: oSetResult 4
 441: oPushResult
 442: oGetParam 1
 444: oPushResult
 445: oNodeFind
 446: oPop 4
 448: oAssign
 449: oGetLocal 1
 451: oPushResult
 452: oSetResult 0
 454: oPushResult
 455: equal_node
 456: oPop 2
 458: oChoice 465
 460: oGetLocal 1
 462: oReturn
 463: oJumpForward 468
 465: Choice Lookup Table
           0    460
 468: oGetAddrLocal 2
 470: oPushResult
 471: oGetParam 1
 473: oPushResult
 474: oIncludeUnitFile
 475: oPop 1
 477: oAssign
 478: oGetLocal 2
 480: oChoice 489
 482: oError 24
 484: oSetResult 0
 486: oReturn
 487: oJumpForward 492
 489: Choice Lookup Table
           0    482
 492: oGetAddrLocal 1
 494: oPushResult
 495: oCall 503
 497: oAssign
 498: oIncludeEnd
 499: oGetLocal 1
 501: oReturn
 502: oReturn
 503: oLocalSpace 2
 505: oInput 61
 507: oInput 0
 509: oGetAddrLocal 1
 511: oPushResult
 512: oSetResult 5
 514: oPushResult
 515: oNodeNew
 516: oPop 1
 518: oAssign
 519: oGetLocal 1
 521: oPushResult
 522: oSetResult 4
 524: oPushResult
 525: LAST_ID
 526: oPushResult
 527: oNodeSetInt
 528: oPop 3
 530: oGetAddrLocal 2
 532: oPushResult
 533: oSetResult 6
 535: oPushResult
 536: oNodeNew
 537: oPop 1
 539: oAssign
 540: oGetLocal 2
 542: oPushResult
 543: oSetResult 4
 545: oPushResult
 546: LAST_ID
 547: oPushResult
 548: oNodeSetInt
 549: oPop 3
 551: oGetLocal 1
 553: oPushResult
 554: oSetResult 8
 556: oPushResult
 557: oGetLocal 2
 559: oPushResult
 560: oNodeSet
 561: oPop 3
 563: oInput 6
 565: oInput 62
 567: oGetLocal 1
 569: oPushResult
 570: oCall 34
 572: oPop 1
 574: oInputChoice 585
 576: oGetLocal 1
 578: oPushResult
 579: oCall 7
 581: oPop 1
 583: oJumpForward 588
 585: Choice Lookup Table
          60    576
 588: oGetLocal 1
 590: oPushResult
 591: oCall 287
 593: oPop 1
 595: oSetResult 0
 597: oPushResult
 598: oSetResult 0
 600: oPushResult
 601: oScopeBegin
 602: oPop 2
 604: oGetLocal 1
 606: oPushResult
 607: oSetResult 9
 609: oPushResult
 610: oScopeCurrent
 611: oPushResult
 612: oNodeSet
 613: oPop 3
 615: oGetAddrGlobal 2
 617: oPushResult
 618: oScopeCurrent
 619: oAssign
 620: oSetResult 0
 622: oPushResult
 623: oSetResult 1
 625: oPushResult
 626: oScopeBegin
 627: oPop 2
 629: oGetAddrGlobal 3
 631: oPushResult
 632: oScopeCurrent
 633: oAssign
 634: oGetLocal 1
 636: oPushResult
 637: oSetResult 13
 639: oPushResult
 640: oGetGlobal 3
 642: oPushResult
 643: oNodeSet
 644: oPop 3
 646: oScopeEnd
 647: oGetLocal 1
 649: oPushResult
 650: oCall 838
 652: oPop 1
 654: oScopeEnd
 655: oInput 63
 657: oGetLocal 2
 659: oPushResult
 660: oCall 34
 662: oPop 1
 664: oInputChoice 675
 666: oGetLocal 2
 668: oPushResult
 669: oCall 7
 671: oPop 1
 673: oJumpForward 678
 675: Choice Lookup Table
          60    666
 678: oGetLocal 2
 680: oPushResult
 681: oCall 287
 683: oPop 1
 685: oGetLocal 1
 687: oPushResult
 688: oSetResult 9
 690: oPushResult
 691: oNodeGet
 692: oPop 2
 694: oPushResult
 695: oScopeEnter
 696: oPop 1
 698: oSetResult 0
 700: oPushResult
 701: oSetResult 0
 703: oPushResult
 704: oScopeBegin
 705: oPop 2
 707: oGetLocal 1
 709: oPushResult
 710: oSetResult 10
 712: oPushResult
 713: oScopeCurrent
 714: oPushResult
 715: oNodeSet
 716: oPop 3
 718: oScopeCurrent
 719: oPushResult
 720: oSetResult 16
 722: oPushResult
 723: oGetLocal 1
 725: oPushResult
 726: oSetResult 9
 728: oPushResult
 729: oNodeGet
 730: oPop 2
 732: oPushResult
 733: oNodeSet
 734: oPop 3
 736: oGetAddrGlobal 2
 738: oPushResult
 739: oScopeCurrent
 740: oAssign
 741: oGetLocal 1
 743: oPushResult
 744: oCall 930
 746: oPop 1
 748: oInputChoice 762
 750: oGetLocal 1
 752: oPushResult
 753: oSetResult 1
 755: oPushResult
 756: oCall 940
 758: oPop 2
 760: oJumpForward 775
 762: Choice Lookup Table
          64    750
 765: oGetLocal 1
 767: oPushResult
 768: oSetResult 0
 770: oPushResult
 771: oCall 940
 773: oPop 2
 775: oInputChoice 789
 777: oGetLocal 1
 779: oPushResult
 780: oSetResult 1
 782: oPushResult
 783: oCall 1126
 785: oPop 2
 787: oJumpForward 802
 789: Choice Lookup Table
          65    777
 792: oGetLocal 1
 794: oPushResult
 795: oSetResult 0
 797: oPushResult
 798: oCall 1126
 800: oPop 2
 802: oInput 37
 804: oInput 21
 806: oScopeEnd
 807: oScopeEnd
 808: oGetLocal 2
 810: oPushResult
 811: oCall 349
 813: oPop 1
 815: oGetLocal 1
 817: oPushResult
 818: oCall 349
 820: oPop 1
 822: oGetGlobal 1
 824: oPushResult
 825: oSetResult 1
 827: oPushResult
 828: oGetLocal 1
 830: oPushResult
 831: oNodeAddLast
 832: oPop 3
 834: oGetLocal 1
 836: oReturn
 837: oReturn
 838: oLocalSpace 2
 840: oInputChoice 907
 842: oCall 2520
 844: oJumpForward 920
 846: oCall 3178
 848: oJumpForward 920
 850: oSetResult 21
 852: oPushResult
 853: oCall 3234
 855: oPop 1
 857: oJumpForward 920
 859: oGetAddrLocal 1
 861: oPushResult
 862: oCall 1487
 864: oAssign
 865: oInputChoice 878
 867: oGetLocal 1
 869: oPushResult
 870: oCall 1418
 872: oPop 1
 874: oInput 6
 876: oJumpForward 881
 878: Choice Lookup Table
          71    867
 881: oJumpForward 920
 883: oGetAddrLocal 2
 885: oPushResult
 886: oCall 1861
 888: oAssign
 889: oInputChoice 902
 891: oGetLocal 2
 893: oPushResult
 894: oCall 1418
 896: oPop 1
 898: oInput 6
 900: oJumpForward 905
 902: Choice Lookup Table
          71    891
 905: oJumpForward 920
 907: Choice Lookup Table
          31    883
          30    859
          34    850
          33    846
          32    842
 918: oJumpForward 922
 920: oJumpBack 840
 922: oGetParam 1
 924: oPushResult
 925: oCall 71
 927: oPop 1
 929: oReturn
 930: oLocalSpace 0
 932: oSetResult 21
 934: oPushResult
 935: oCall 13631
 937: oPop 1
 939: oReturn
 940: oLocalSpace 5
 942: oGetAddrLocal 1
 944: oPushResult
 945: oLabelNew
 946: oAssign
 947: oEmit 77
 949: oGetLocal 1
 951: oPushResult
 952: oEmitLabel
 953: oPop 1
 955: oGetParam 2
 957: oPushResult
 958: oSetResult 11
 960: oPushResult
 961: oGetLocal 1
 963: oPushResult
 964: oNodeSetLabel
 965: oPop 3
 967: oEmit 67
 969: oGetAddrLocal 2
 971: oPushResult
 972: Here
 973: oAssign
 974: oEmit 94
 976: oGetAddrLocal 3
 978: oPushResult
 979: oGetParam 2
 981: oPushResult
 982: oSetResult 9
 984: oPushResult
 985: oNodeGet
 986: oPop 2
 988: oAssign
 989: oGetAddrLocal 4
 991: oPushResult
 992: oGetLocal 3
 994: oPushResult
 995: oSetResult 19
 997: oPushResult
 998: oNodeGetCode
 999: oPop 2
1001: oAssign
1002: oGetLocal 4
1004: oPushResult
1005: oEmitCode
1006: oPop 1
1008: oGetLocal 3
1010: oPushResult
1011: oSetResult 19
1013: oPushResult
1014: oSetResult 0
1016: oPushResult
1017: oNodeSetCode
1018: oPop 3
1020: oGetAddrLocal 3
1022: oPushResult
1023: oGetParam 2
1025: oPushResult
1026: oSetResult 10
1028: oPushResult
1029: oNodeGet
1030: oPop 2
1032: oAssign
1033: oGetAddrLocal 4
1035: oPushResult
1036: oGetLocal 3
1038: oPushResult
1039: oSetResult 19
1041: oPushResult
1042: oNodeGetCode
1043: oPop 2
1045: oAssign
1046: oGetLocal 4
1048: oPushResult
1049: oEmitCode
1050: oPop 1
1052: oGetLocal 3
1054: oPushResult
1055: oSetResult 19
1057: oPushResult
1058: oSetResult 0
1060: oPushResult
1061: oNodeSetCode
1062: oPop 3
1064: oGetParam 2
1066: oPushResult
1067: oSetResult 13
1069: oPushResult
1070: oNodeGet
1071: oPop 2
1073: oPushResult
1074: oScopeEnter
1075: oPop 1
1077: oGetParam 1
1079: oChoice 1098
1081: oCall 8719
1083: oInputChoice 1089
1085: oCall 8719
1087: oJumpForward 1094
1089: Choice Lookup Table
           6   1085
1092: oJumpForward 1096
1094: oJumpBack 1083
1096: oJumpForward 1101
1098: Choice Lookup Table
           1   1081
1101: oEmit 66
1103: oGetAddrLocal 5
1105: oPushResult
1106: oScopeCurrent
1107: oPushResult
1108: oSetResult 17
1110: oPushResult
1111: oNodeGetInt
1112: oPop 2
1114: oAssign
1115: oGetLocal 2
1117: oPushResult
1118: oGetLocal 5
1120: oPushResult
1121: oPatch
1122: oPop 2
1124: oScopeEnd
1125: oReturn
1126: oLocalSpace 3
1128: oGetAddrLocal 1
1130: oPushResult
1131: oLabelNew
1132: oAssign
1133: oEmit 77
1135: oGetLocal 1
1137: oPushResult
1138: oEmitLabel
1139: oPop 1
1141: oGetParam 2
1143: oPushResult
1144: oSetResult 12
1146: oPushResult
1147: oGetLocal 1
1149: oPushResult
1150: oNodeSetLabel
1151: oPop 3
1153: oEmit 67
1155: oGetAddrLocal 2
1157: oPushResult
1158: Here
1159: oAssign
1160: oEmit 94
1162: oSetResult 0
1164: oPushResult
1165: oSetResult 1
1167: oPushResult
1168: oScopeBegin
1169: oPop 2
1171: oGetParam 1
1173: oChoice 1192
1175: oCall 8719
1177: oInputChoice 1183
1179: oCall 8719
1181: oJumpForward 1188
1183: Choice Lookup Table
           6   1179
1186: oJumpForward 1190
1188: oJumpBack 1177
1190: oJumpForward 1195
1192: Choice Lookup Table
           1   1175
1195: oEmit 66
1197: oGetAddrLocal 3
1199: oPushResult
1200: oScopeCurrent
1201: oPushResult
1202: oSetResult 17
1204: oPushResult
1205: oNodeGetInt
1206: oPop 2
1208: oAssign
1209: oGetLocal 2
1211: oPushResult
1212: oGetLocal 3
1214: oPushResult
1215: oPatch
1216: oPop 2
1218: oScopeEnd
1219: oReturn
1220: oLocalSpace 2
1222: oGetAddrLocal 1
1224: oPushResult
1225: oGetGlobal 1
1227: oPushResult
1228: oSetResult 1
1230: oPushResult
1231: oNodeGetIter
1232: oPop 2
1234: oAssign
1235: oGetAddrLocal 2
1237: oPushResult
1238: oGetLocal 1
1240: oPushResult
1241: oNodeIterValue
1242: oPop 1
1244: oAssign
1245: oGetLocal 2
1247: oPushResult
1248: oNodeNull
1249: oPop 1
1251: oChoice 1296
1253: oJumpForward 1304
1255: oJumpForward 1302
1257: oEmit 61
1259: oSetResult 0
1261: oPushResult
1262: oEmitInt
1263: oPop 1
1265: oEmit 64
1267: oGetLocal 2
1269: oPushResult
1270: oSetResult 11
1272: oPushResult
1273: oNodeGetLabel
1274: oPop 2
1276: oPushResult
1277: oEmitLabel
1278: oPop 1
1280: oEmit 63
1282: oSetResult 0
1284: oPushResult
1285: oEmitInt
1286: oPop 1
1288: oGetAddrLocal 1
1290: oPushResult
1291: oNodeIterNext
1292: oPop 1
1294: oJumpForward 1302
1296: Choice Lookup Table
           0   1257
           1   1253
1301: oEndChoice
1302: oJumpBack 1235
1304: oReturn
1305: oLocalSpace 2
1307: oGetAddrLocal 1
1309: oPushResult
1310: oGetGlobal 1
1312: oPushResult
1313: oSetResult 1
1315: oPushResult
1316: oNodeGetIterLast
1317: oPop 2
1319: oAssign
1320: oGetAddrLocal 2
1322: oPushResult
1323: oGetLocal 1
1325: oPushResult
1326: oNodeIterValue
1327: oPop 1
1329: oAssign
1330: oGetLocal 2
1332: oPushResult
1333: oNodeNull
1334: oPop 1
1336: oChoice 1381
1338: oJumpForward 1389
1340: oJumpForward 1387
1342: oEmit 61
1344: oSetResult 0
1346: oPushResult
1347: oEmitInt
1348: oPop 1
1350: oEmit 64
1352: oGetLocal 2
1354: oPushResult
1355: oSetResult 12
1357: oPushResult
1358: oNodeGetLabel
1359: oPop 2
1361: oPushResult
1362: oEmitLabel
1363: oPop 1
1365: oEmit 63
1367: oSetResult 0
1369: oPushResult
1370: oEmitInt
1371: oPop 1
1373: oGetAddrLocal 1
1375: oPushResult
1376: oNodeIterPrev
1377: oPop 1
1379: oJumpForward 1387
1381: Choice Lookup Table
           0   1342
           1   1338
1386: oEndChoice
1387: oJumpBack 1320
1389: oReturn
1390: oLocalSpace 0
1392: oInputChoice 1410
1394: oGetParam 1
1396: oPushResult
1397: oSetResult 27
1399: oPushResult
1400: oSetResult 1
1402: oPushResult
1403: oNodeSetBoolean
1404: oPop 3
1406: oInput 6
1408: oJumpForward 1415
1410: Choice Lookup Table
          73   1394
1413: oJumpForward 1417
1415: oJumpBack 1392
1417: oReturn
1418: oLocalSpace 0
1420: oGetParam 1
1422: oPushResult
1423: oCall 13944
1425: oPop 1
1427: oPushResult
1428: equal_zero
1429: oPop 1
1431: oChoice 1437
1433: oError 23
1435: oJumpForward 1440
1437: Choice Lookup Table
           0   1433
1440: oGetParam 1
1442: oPushResult
1443: oSetResult 25
1445: oPushResult
1446: oSetResult 1
1448: oPushResult
1449: oNodeSetBoolean
1450: oPop 3
1452: oInputChoice 1476
1454: oInputChoice 1471
1456: oInput 3
1458: oGetParam 1
1460: oPushResult
1461: oSetResult 26
1463: oPushResult
1464: CURRENT_STRLIT
1465: oPushResult
1466: oNodeSetString
1467: oPop 3
1469: oJumpForward 1474
1471: Choice Lookup Table
          72   1456
1474: oJumpForward 1479
1476: Choice Lookup Table
           3   1454
1479: oGetParam 1
1481: oPushResult
1482: oCall 11558
1484: oPop 1
1486: oReturn
1487: oLocalSpace 6
1489: oInput 0
1491: oGetAddrLocal 1
1493: oPushResult
1494: oSetResult 0
1496: oAssign
1497: oGetAddrLocal 2
1499: oPushResult
1500: oScopeFindInCurrentScope
1501: oAssign
1502: oGetLocal 2
1504: oPushResult
1505: oNodeNull
1506: oPop 1
1508: oChoice 1626
1510: oGetAddrLocal 2
1512: oPushResult
1513: oSetResult 12
1515: oPushResult
1516: LAST_ID
1517: oPushResult
1518: oCall 13982
1520: oPop 2
1522: oAssign
1523: oGetLocal 2
1525: oPushResult
1526: oSetResult 22
1528: oPushResult
1529: oLabelNew
1530: oPushResult
1531: oNodeSetLabel
1532: oPop 3
1534: oJumpForward 1632
1536: oGetAddrLocal 1
1538: oPushResult
1539: oSetResult 1
1541: oAssign
1542: oGetLocal 2
1544: oPushResult
1545: oSetResult 24
1547: oPushResult
1548: oNodeGetBoolean
1549: oPop 2
1551: oChoice 1557
1553: oError 21
1555: oJumpForward 1560
1557: Choice Lookup Table
           1   1553
1560: oGetLocal 2
1562: oPushResult
1563: oSetResult 25
1565: oPushResult
1566: oNodeGetBoolean
1567: oPop 2
1569: oChoice 1575
1571: oError 21
1573: oJumpForward 1578
1575: Choice Lookup Table
           1   1571
1578: oGetLocal 2
1580: oPushResult
1581: oNodeType
1582: oPop 1
1584: oChoice 1588
1586: oJumpForward 1593
1588: Choice Lookup Table
          12   1586
1591: oError 21
1593: oGetLocal 2
1595: oPushResult
1596: oSetResult 29
1598: oPushResult
1599: oGetLocal 2
1601: oPushResult
1602: oSetResult 23
1604: oPushResult
1605: oNodeGet
1606: oPop 2
1608: oPushResult
1609: oNodeSet
1610: oPop 3
1612: oGetLocal 2
1614: oPushResult
1615: oSetResult 23
1617: oPushResult
1618: oSetResult 0
1620: oPushResult
1621: oNodeSet
1622: oPop 3
1624: oJumpForward 1632
1626: Choice Lookup Table
           0   1536
           1   1510
1631: oEndChoice
1632: oGetAddrLocal 3
1634: oPushResult
1635: oCall 13932
1637: oAssign
1638: oGetAddrLocal 4
1640: oPushResult
1641: oGetLocal 3
1643: oPushResult
1644: oSetResult 0
1646: oPushResult
1647: greater
1648: oPop 2
1650: oAssign
1651: oGetAddrLocal 3
1653: oPushResult
1654: inc
1655: oPop 1
1657: oGetLocal 3
1659: oPushResult
1660: oSetResult 2
1662: oPushResult
1663: oScopeBegin
1664: oPop 2
1666: oGetAddrLocal 5
1668: oPushResult
1669: oScopeCurrent
1670: oAssign
1671: oGetLocal 4
1673: oChoice 1692
1675: oGetAddrLocal 6
1677: oPushResult
1678: oGetGlobal 6
1680: oPushResult
1681: oCall 13029
1683: oPop 1
1685: oPushResult
1686: oScopeAllocType
1687: oPop 1
1689: oAssign
1690: oJumpForward 1695
1692: Choice Lookup Table
           1   1675
1695: oCall 2296
1697: oGetLocal 2
1699: oPushResult
1700: oSetResult 23
1702: oPushResult
1703: oGetLocal 5
1705: oPushResult
1706: oNodeSet
1707: oPop 3
1709: oScopeEnd
1710: oInput 6
1712: oGetLocal 1
1714: oChoice 1726
1716: oGetLocal 2
1718: oPushResult
1719: oScopeDeclare
1720: oPop 1
1722: oJumpForward 1732
1724: oJumpForward 1732
1726: Choice Lookup Table
           1   1724
           0   1716
1731: oEndChoice
1732: oGetLocal 2
1734: oPushResult
1735: oCall 1390
1737: oPop 1
1739: oGetLocal 2
1741: oReturn
1742: oReturn
1743: oLocalSpace 4
1745: oGetAddrLocal 1
1747: oPushResult
1748: oCall 1487
1750: oAssign
1751: oInputChoice 1764
1753: oJumpForward 1858
1755: oGetLocal 1
1757: oPushResult
1758: oCall 1418
1760: oPop 1
1762: oJumpForward 1858
1764: Choice Lookup Table
          71   1755
          70   1753
1769: oGetAddrLocal 2
1771: oPushResult
1772: oGetLocal 1
1774: oPushResult
1775: oSetResult 23
1777: oPushResult
1778: oNodeGet
1779: oPop 2
1781: oAssign
1782: oGetLocal 2
1784: oPushResult
1785: oScopeEnter
1786: oPop 1
1788: oGetAddrLocal 3
1790: oPushResult
1791: oGetLocal 2
1793: oPushResult
1794: oSetResult 14
1796: oPushResult
1797: oNodeGetInt
1798: oPop 2
1800: oAssign
1801: oGetLocal 3
1803: oPushResult
1804: oSetResult 1
1806: oPushResult
1807: oScopeBegin
1808: oPop 2
1810: oGetLocal 1
1812: oPushResult
1813: oSetResult 6
1815: oPushResult
1816: oScopeCurrent
1817: oPushResult
1818: oNodeSet
1819: oPop 3
1821: oGetAddrLocal 4
1823: oPushResult
1824: oGetLocal 1
1826: oPushResult
1827: oSetResult 22
1829: oPushResult
1830: oNodeGetLabel
1831: oPop 2
1833: oAssign
1834: oSetResult 22
1836: oPushResult
1837: oGetLocal 4
1839: oPushResult
1840: oCall 13607
1842: oPop 2
1844: oGetLocal 1
1846: oPushResult
1847: oSetResult 24
1849: oPushResult
1850: oSetResult 1
1852: oPushResult
1853: oNodeSetBoolean
1854: oPop 3
1856: oScopeEnd
1857: oScopeEnd
1858: oInput 6
1860: oReturn
1861: oLocalSpace 8
1863: oInput 0
1865: oGetAddrLocal 1
1867: oPushResult
1868: oSetResult 0
1870: oAssign
1871: oGetAddrLocal 2
1873: oPushResult
1874: oScopeFindInCurrentScope
1875: oAssign
1876: oGetLocal 2
1878: oPushResult
1879: oNodeNull
1880: oPop 1
1882: oChoice 2013
1884: oGetAddrLocal 2
1886: oPushResult
1887: oSetResult 13
1889: oPushResult
1890: LAST_ID
1891: oPushResult
1892: oCall 13982
1894: oPop 2
1896: oAssign
1897: oGetLocal 2
1899: oPushResult
1900: oSetResult 22
1902: oPushResult
1903: oLabelNew
1904: oPushResult
1905: oNodeSetLabel
1906: oPop 3
1908: oJumpForward 2019
1910: oGetAddrLocal 1
1912: oPushResult
1913: oSetResult 1
1915: oAssign
1916: oGetLocal 2
1918: oPushResult
1919: oSetResult 24
1921: oPushResult
1922: oNodeGetBoolean
1923: oPop 2
1925: oChoice 1931
1927: oError 21
1929: oJumpForward 1934
1931: Choice Lookup Table
           1   1927
1934: oGetLocal 2
1936: oPushResult
1937: oNodeType
1938: oPop 1
1940: oChoice 1944
1942: oJumpForward 1949
1944: Choice Lookup Table
          13   1942
1947: oError 21
1949: oGetLocal 2
1951: oPushResult
1952: oSetResult 29
1954: oPushResult
1955: oGetLocal 2
1957: oPushResult
1958: oSetResult 23
1960: oPushResult
1961: oNodeGet
1962: oPop 2
1964: oPushResult
1965: oNodeSet
1966: oPop 3
1968: oGetLocal 2
1970: oPushResult
1971: oSetResult 23
1973: oPushResult
1974: oSetResult 0
1976: oPushResult
1977: oNodeSet
1978: oPop 3
1980: oGetLocal 2
1982: oPushResult
1983: oSetResult 30
1985: oPushResult
1986: oGetLocal 2
1988: oPushResult
1989: oSetResult 21
1991: oPushResult
1992: oNodeGet
1993: oPop 2
1995: oPushResult
1996: oNodeSet
1997: oPop 3
1999: oGetLocal 2
2001: oPushResult
2002: oSetResult 21
2004: oPushResult
2005: oSetResult 0
2007: oPushResult
2008: oNodeSet
2009: oPop 3
2011: oJumpForward 2019
2013: Choice Lookup Table
           0   1910
           1   1884
2018: oEndChoice
2019: oGetAddrLocal 3
2021: oPushResult
2022: oCall 13932
2024: oAssign
2025: oGetAddrLocal 4
2027: oPushResult
2028: oGetLocal 3
2030: oPushResult
2031: oSetResult 0
2033: oPushResult
2034: greater
2035: oPop 2
2037: oAssign
2038: oGetAddrLocal 3
2040: oPushResult
2041: inc
2042: oPop 1
2044: oGetLocal 3
2046: oPushResult
2047: oSetResult 2
2049: oPushResult
2050: oScopeBegin
2051: oPop 2
2053: oGetAddrLocal 5
2055: oPushResult
2056: oScopeCurrent
2057: oAssign
2058: oGetLocal 4
2060: oChoice 2079
2062: oGetAddrLocal 6
2064: oPushResult
2065: oGetGlobal 6
2067: oPushResult
2068: oCall 13029
2070: oPop 1
2072: oPushResult
2073: oScopeAllocType
2074: oPop 1
2076: oAssign
2077: oJumpForward 2082
2079: Choice Lookup Table
           1   2062
2082: oCall 2296
2084: oGetLocal 2
2086: oPushResult
2087: oSetResult 23
2089: oPushResult
2090: oGetLocal 5
2092: oPushResult
2093: oNodeSet
2094: oPop 3
2096: oInput 13
2098: oGetAddrLocal 7
2100: oPushResult
2101: oCall 11950
2103: oPop 1
2105: oGetLocal 2
2107: oPushResult
2108: oSetResult 21
2110: oPushResult
2111: oGetLocal 7
2113: oPushResult
2114: oNodeSet
2115: oPop 3
2117: oGetAddrLocal 8
2119: oPushResult
2120: oGetLocal 7
2122: oPushResult
2123: oCall 13029
2125: oPop 1
2127: oAssign
2128: oGetLocal 2
2130: oPushResult
2131: oSetResult 31
2133: oPushResult
2134: oGetLocal 8
2136: oPushResult
2137: oScopeAllocType
2138: oPop 1
2140: oPushResult
2141: oNodeSetInt
2142: oPop 3
2144: oScopeEnd
2145: oInput 6
2147: oGetLocal 1
2149: oChoice 2161
2151: oGetLocal 2
2153: oPushResult
2154: oScopeDeclare
2155: oPop 1
2157: oJumpForward 2167
2159: oJumpForward 2167
2161: Choice Lookup Table
           1   2159
           0   2151
2166: oEndChoice
2167: oGetLocal 2
2169: oPushResult
2170: oCall 1390
2172: oPop 1
2174: oGetLocal 2
2176: oReturn
2177: oReturn
2178: oLocalSpace 4
2180: oGetAddrLocal 1
2182: oPushResult
2183: oCall 1861
2185: oAssign
2186: oInputChoice 2199
2188: oJumpForward 2293
2190: oGetLocal 1
2192: oPushResult
2193: oCall 1418
2195: oPop 1
2197: oJumpForward 2293
2199: Choice Lookup Table
          71   2190
          70   2188
2204: oGetAddrLocal 2
2206: oPushResult
2207: oGetLocal 1
2209: oPushResult
2210: oSetResult 23
2212: oPushResult
2213: oNodeGet
2214: oPop 2
2216: oAssign
2217: oGetLocal 2
2219: oPushResult
2220: oScopeEnter
2221: oPop 1
2223: oGetAddrLocal 3
2225: oPushResult
2226: oGetLocal 2
2228: oPushResult
2229: oSetResult 14
2231: oPushResult
2232: oNodeGetInt
2233: oPop 2
2235: oAssign
2236: oGetLocal 3
2238: oPushResult
2239: oSetResult 1
2241: oPushResult
2242: oScopeBegin
2243: oPop 2
2245: oGetLocal 1
2247: oPushResult
2248: oSetResult 6
2250: oPushResult
2251: oScopeCurrent
2252: oPushResult
2253: oNodeSet
2254: oPop 3
2256: oGetAddrLocal 4
2258: oPushResult
2259: oGetLocal 1
2261: oPushResult
2262: oSetResult 22
2264: oPushResult
2265: oNodeGetLabel
2266: oPop 2
2268: oAssign
2269: oSetResult 22
2271: oPushResult
2272: oGetLocal 4
2274: oPushResult
2275: oCall 13607
2277: oPop 2
2279: oGetLocal 1
2281: oPushResult
2282: oSetResult 24
2284: oPushResult
2285: oSetResult 1
2287: oPushResult
2288: oNodeSetBoolean
2289: oPop 3
2291: oScopeEnd
2292: oScopeEnd
2293: oInput 6
2295: oReturn
2296: oLocalSpace 6
2298: oInputChoice 2516
2300: oGetAddrLocal 1
2302: oPushResult
2303: oNodeVecNew
2304: oAssign
2305: oGetAddrLocal 3
2307: oPushResult
2308: oSetResult 0
2310: oAssign
2311: oInputChoice 2321
2313: oGetAddrLocal 3
2315: oPushResult
2316: oSetResult 1
2318: oAssign
2319: oJumpForward 2324
2321: Choice Lookup Table
          34   2313
2324: oInput 0
2326: oGetAddrLocal 2
2328: oPushResult
2329: oSetResult 24
2331: oPushResult
2332: LAST_ID
2333: oPushResult
2334: oCall 13982
2336: oPop 2
2338: oAssign
2339: oGetLocal 2
2341: oPushResult
2342: oSetResult 34
2344: oPushResult
2345: oGetLocal 3
2347: oPushResult
2348: oNodeSetBoolean
2349: oPop 3
2351: oGetLocal 1
2353: oPushResult
2354: oGetLocal 2
2356: oPushResult
2357: oNodeVecAppend
2358: oPop 2
2360: oInputChoice 2368
2362: oJumpForward 2376
2364: oJumpForward 2374
2366: oJumpForward 2374
2368: Choice Lookup Table
          14   2366
          13   2362
2373: oEndChoice
2374: oJumpBack 2324
2376: oGetAddrLocal 4
2378: oPushResult
2379: oCall 11950
2381: oPop 1
2383: oGetLocal 3
2385: oChoice 2400
2387: oGetAddrLocal 5
2389: oPushResult
2390: oGetLocal 4
2392: oPushResult
2393: oCall 13029
2395: oPop 1
2397: oAssign
2398: oJumpForward 2409
2400: Choice Lookup Table
           1   2387
2403: oGetAddrLocal 5
2405: oPushResult
2406: oGetLocal 4
2408: oAssign
2409: oGetAddrLocal 6
2411: oPushResult
2412: oSetResult 0
2414: oAssign
2415: oGetLocal 6
2417: oPushResult
2418: oGetLocal 1
2420: oPushResult
2421: oNodeVecSize
2422: oPop 1
2424: oPushResult
2425: equal
2426: oPop 2
2428: oChoice 2485
2430: oGetAddrLocal 2
2432: oPushResult
2433: oGetLocal 1
2435: oPushResult
2436: oGetLocal 6
2438: oPushResult
2439: oNodeVecElement
2440: oPop 2
2442: oAssign
2443: oGetLocal 2
2445: oPushResult
2446: oSetResult 21
2448: oPushResult
2449: oGetLocal 4
2451: oPushResult
2452: oNodeSet
2453: oPop 3
2455: oGetLocal 2
2457: oPushResult
2458: oScopeDeclare
2459: oPop 1
2461: oGetLocal 2
2463: oPushResult
2464: oSetResult 22
2466: oPushResult
2467: oGetLocal 5
2469: oPushResult
2470: oScopeAllocType
2471: oPop 1
2473: oPushResult
2474: oNodeSetInt
2475: oPop 3
2477: oGetAddrLocal 6
2479: oPushResult
2480: inc
2481: oPop 1
2483: oJumpForward 2490
2485: Choice Lookup Table
           0   2430
2488: oJumpForward 2492
2490: oJumpBack 2415
2492: oGetLocal 1
2494: oPushResult
2495: oNodeVecDelete
2496: oPop 1
2498: oInputChoice 2506
2500: oJumpForward 2514
2502: oJumpForward 2512
2504: oJumpForward 2512
2506: Choice Lookup Table
           6   2504
          16   2500
2511: oEndChoice
2512: oJumpBack 2300
2514: oJumpForward 2519
2516: Choice Lookup Table
          15   2300
2519: oReturn
2520: oLocalSpace 0
2522: oInputChoice 2537
2524: oInputChoice 2530
2526: oCall 2654
2528: oJumpForward 2535
2530: Choice Lookup Table
          13   2526
2533: oCall 2545
2535: oJumpForward 2542
2537: Choice Lookup Table
           0   2524
2540: oJumpForward 2544
2542: oJumpBack 2522
2544: oReturn
2545: oLocalSpace 2
2547: oGetAddrLocal 1
2549: oPushResult
2550: LAST_ID
2551: oAssign
2552: oInput 7
2554: oCall 3533
2556: oTypeSNodeType
2557: oChoice 2613
2559: oGetAddrLocal 2
2561: oPushResult
2562: oSetResult 16
2564: oPushResult
2565: oGetLocal 1
2567: oPushResult
2568: oCall 13982
2570: oPop 2
2572: oAssign
2573: oGetLocal 2
2575: oPushResult
2576: oSetResult 22
2578: oPushResult
2579: oValueTop
2580: oPushResult
2581: oNodeSetInt
2582: oPop 3
2584: oJumpForward 2632
2586: oGetAddrLocal 2
2588: oPushResult
2589: oSetResult 18
2591: oPushResult
2592: oGetLocal 1
2594: oPushResult
2595: oCall 13982
2597: oPop 2
2599: oAssign
2600: oGetLocal 2
2602: oPushResult
2603: oSetResult 33
2605: oPushResult
2606: oValueTopString
2607: oPushResult
2608: oNodeSetString
2609: oPop 3
2611: oJumpForward 2632
2613: Choice Lookup Table
          41   2586
          37   2559
          36   2559
          43   2559
          30   2559
          35   2559
          29   2559
          33   2559
2630: oError 17
2632: oValuePop
2633: oGetLocal 2
2635: oPushResult
2636: oSetResult 21
2638: oPushResult
2639: oTypeSTop
2640: oPushResult
2641: oNodeSet
2642: oPop 3
2644: oTypeSPop
2645: oGetLocal 2
2647: oPushResult
2648: oScopeDeclare
2649: oPop 1
2651: oInput 6
2653: oReturn
2654: oLocalSpace 3
2656: oGetAddrLocal 1
2658: oPushResult
2659: oSetResult 25
2661: oPushResult
2662: LAST_ID
2663: oPushResult
2664: oCall 13982
2666: oPop 2
2668: oAssign
2669: oGetAddrLocal 2
2671: oPushResult
2672: oCall 11950
2674: oPop 1
2676: oGetLocal 1
2678: oPushResult
2679: oSetResult 21
2681: oPushResult
2682: oGetLocal 2
2684: oPushResult
2685: oNodeSet
2686: oPop 3
2688: oGetLocal 2
2690: oPushResult
2691: oNodeType
2692: oPop 1
2694: oChoice 2798
2696: oInput 7
2698: oGetLocal 2
2700: oPushResult
2701: oTypeSPush
2702: oPop 1
2704: oCall 3533
2706: oCall 4345
2708: oGetLocal 1
2710: oPushResult
2711: oSetResult 22
2713: oPushResult
2714: oValueTop
2715: oPushResult
2716: oNodeSetInt
2717: oPop 3
2719: oValuePop
2720: oTypeSPop
2721: oGetLocal 1
2723: oPushResult
2724: oScopeDeclare
2725: oPop 1
2727: oInput 6
2729: oJumpForward 2822
2731: oError 16
2733: oJumpForward 2822
2735: oGetGlobal 2
2737: oPushResult
2738: oScopeEnter
2739: oPop 1
2741: oGetAddrLocal 3
2743: oPushResult
2744: oGetLocal 2
2746: oPushResult
2747: oScopeAllocType
2748: oPop 1
2750: oAssign
2751: oScopeEnd
2752: oGetGlobal 2
2754: oPushResult
2755: oCall 13880
2757: oPop 1
2759: oPushResult
2760: oCodePush
2761: oPop 1
2763: oGetLocal 1
2765: oPushResult
2766: oSetResult 22
2768: oPushResult
2769: oGetLocal 3
2771: oPushResult
2772: oNodeSetInt
2773: oPop 3
2775: oInput 7
2777: oGetLocal 2
2779: oPushResult
2780: oGetLocal 3
2782: oPushResult
2783: oCall 2823
2785: oPop 2
2787: oCodePop
2788: oGetLocal 1
2790: oPushResult
2791: oScopeDeclare
2792: oPop 1
2794: oInput 6
2796: oJumpForward 2822
2798: Choice Lookup Table
          40   2735
          38   2735
          28   2731
          42   2731
          37   2696
          36   2696
          43   2696
          30   2696
          35   2696
          29   2696
          33   2696
2821: oEndChoice
2822: oReturn
2823: oLocalSpace 10
2825: oGetParam 2
2827: oPushResult
2828: oNodeType
2829: oPop 1
2831: oChoice 3153
2833: oGetAddrLocal 1
2835: oPushResult
2836: oGetParam 2
2838: oPushResult
2839: oSetResult 37
2841: oPushResult
2842: oNodeGet
2843: oPop 2
2845: oAssign
2846: oGetAddrLocal 2
2848: oPushResult
2849: oGetParam 2
2851: oPushResult
2852: oSetResult 38
2854: oPushResult
2855: oNodeGet
2856: oPop 2
2858: oAssign
2859: oGetAddrLocal 3
2861: oPushResult
2862: oGetLocal 2
2864: oPushResult
2865: oCall 13113
2867: oPop 1
2869: oAssign
2870: oGetAddrLocal 4
2872: oPushResult
2873: oGetLocal 2
2875: oPushResult
2876: oCall 13208
2878: oPop 1
2880: oAssign
2881: oGetAddrLocal 5
2883: oPushResult
2884: oGetLocal 1
2886: oPushResult
2887: oSetResult 17
2889: oPushResult
2890: oNodeGetInt
2891: oPop 2
2893: oAssign
2894: oInput 15
2896: oGetAddrLocal 6
2898: oPushResult
2899: oGetLocal 3
2901: oAssign
2902: oGetLocal 1
2904: oPushResult
2905: oGetParam 1
2907: oPushResult
2908: oCall 2823
2910: oPop 2
2912: oGetLocal 6
2914: oPushResult
2915: oGetLocal 4
2917: oPushResult
2918: equal
2919: oPop 2
2921: oChoice 2929
2923: oJumpForward 2958
2925: oJumpForward 2935
2927: oJumpForward 2935
2929: Choice Lookup Table
           0   2927
           1   2923
2934: oEndChoice
2935: oInput 14
2937: oGetAddrParam 1
2939: oPushResult
2940: oGetParam 1
2942: oPushResult
2943: oGetLocal 5
2945: oPushResult
2946: add
2947: oPop 2
2949: oAssign
2950: oGetAddrLocal 6
2952: oPushResult
2953: inc
2954: oPop 1
2956: oJumpBack 2902
2958: oInput 16
2960: oJumpForward 3177
2962: oInput 15
2964: oGetAddrLocal 7
2966: oPushResult
2967: oGetParam 2
2969: oPushResult
2970: oSetResult 41
2972: oPushResult
2973: oNodeGet
2974: oPop 2
2976: oAssign
2977: oInputChoice 2981
2979: oJumpForward 2986
2981: Choice Lookup Table
           0   2979
2984: oJumpForward 3052
2986: oGetAddrLocal 8
2988: oPushResult
2989: oGetLocal 7
2991: oPushResult
2992: oScopeFindRequireInScope
2993: oPop 1
2995: oAssign
2996: oInput 13
2998: oGetAddrLocal 9
3000: oPushResult
3001: oGetLocal 8
3003: oPushResult
3004: oSetResult 21
3006: oPushResult
3007: oNodeGet
3008: oPop 2
3010: oAssign
3011: oGetAddrLocal 10
3013: oPushResult
3014: oGetParam 1
3016: oPushResult
3017: oGetLocal 8
3019: oPushResult
3020: oSetResult 22
3022: oPushResult
3023: oNodeGetInt
3024: oPop 2
3026: oPushResult
3027: add
3028: oPop 2
3030: oAssign
3031: oGetLocal 9
3033: oPushResult
3034: oGetLocal 10
3036: oPushResult
3037: oCall 2823
3039: oPop 2
3041: oInputChoice 3045
3043: oJumpForward 3050
3045: Choice Lookup Table
           6   3043
3048: oJumpForward 3052
3050: oJumpBack 2977
3052: oInput 16
3054: oJumpForward 3177
3056: oEmit 16
3058: oGetParam 1
3060: oPushResult
3061: oEmitInt
3062: oPop 1
3064: oGetParam 2
3066: oPushResult
3067: oTypeSPush
3068: oPop 1
3070: oCall 3533
3072: oCall 4345
3074: oEmit 15
3076: oValueTop
3077: oPushResult
3078: oEmitInt
3079: oPop 1
3081: oValuePop
3082: oTypeSPop
3083: oEmit 27
3085: oJumpForward 3177
3087: oEmit 16
3089: oGetParam 1
3091: oPushResult
3092: oEmitInt
3093: oPop 1
3095: oGetParam 2
3097: oPushResult
3098: oTypeSPush
3099: oPop 1
3101: oCall 3533
3103: oCall 4345
3105: oEmit 15
3107: oValueTop
3108: oPushResult
3109: oEmitInt
3110: oPop 1
3112: oValuePop
3113: oTypeSPop
3114: oEmit 26
3116: oJumpForward 3177
3118: oEmit 16
3120: oGetParam 1
3122: oPushResult
3123: oEmitInt
3124: oPop 1
3126: oGetParam 2
3128: oPushResult
3129: oTypeSPush
3130: oPop 1
3132: oCall 3533
3134: oCall 4345
3136: oEmit 15
3138: oValueTop
3139: oPushResult
3140: oEmitInt
3141: oPop 1
3143: oValuePop
3144: oTypeSPop
3145: oEmit 28
3147: oJumpForward 3177
3149: oError 16
3151: oJumpForward 3177
3153: Choice Lookup Table
          28   3149
          42   3149
          37   3118
          36   3118
          43   3087
          30   3087
          35   3056
          29   3056
          33   3056
          40   2962
          38   2833
3176: oEndChoice
3177: oReturn
3178: oLocalSpace 2
3180: oInputChoice 3226
3182: oGetAddrLocal 1
3184: oPushResult
3185: oSetResult 19
3187: oPushResult
3188: LAST_ID
3189: oPushResult
3190: oCall 13982
3192: oPop 2
3194: oAssign
3195: oInput 7
3197: oGetAddrLocal 2
3199: oPushResult
3200: oCall 11950
3202: oPop 1
3204: oGetLocal 1
3206: oPushResult
3207: oSetResult 21
3209: oPushResult
3210: oGetLocal 2
3212: oPushResult
3213: oNodeSet
3214: oPop 3
3216: oGetLocal 1
3218: oPushResult
3219: oScopeDeclare
3220: oPop 1
3222: oInput 6
3224: oJumpForward 3231
3226: Choice Lookup Table
           0   3182
3229: oJumpForward 3233
3231: oJumpBack 3180
3233: oReturn
3234: oLocalSpace 6
3236: oInputChoice 3460
3238: oGetAddrLocal 1
3240: oPushResult
3241: oNodeVecNew
3242: oAssign
3243: oGetAddrLocal 2
3245: oPushResult
3246: oGetParam 1
3248: oPushResult
3249: LAST_ID
3250: oPushResult
3251: oCall 13982
3253: oPop 2
3255: oAssign
3256: oGetLocal 1
3258: oPushResult
3259: oGetLocal 2
3261: oPushResult
3262: oNodeVecAppend
3263: oPop 2
3265: oInputChoice 3271
3267: oInput 0
3269: oJumpForward 3276
3271: Choice Lookup Table
          14   3267
3274: oJumpForward 3278
3276: oJumpBack 3243
3278: oInput 13
3280: oGetAddrLocal 3
3282: oPushResult
3283: oCall 11950
3285: oPop 1
3287: oGetAddrLocal 4
3289: oPushResult
3290: oSetResult 0
3292: oAssign
3293: oGetLocal 4
3295: oPushResult
3296: oGetLocal 1
3298: oPushResult
3299: oNodeVecSize
3300: oPop 1
3302: oPushResult
3303: equal
3304: oPop 2
3306: oChoice 3347
3308: oGetAddrLocal 2
3310: oPushResult
3311: oGetLocal 1
3313: oPushResult
3314: oGetLocal 4
3316: oPushResult
3317: oNodeVecElement
3318: oPop 2
3320: oAssign
3321: oGetLocal 2
3323: oPushResult
3324: oSetResult 21
3326: oPushResult
3327: oGetLocal 3
3329: oPushResult
3330: oNodeSet
3331: oPop 3
3333: oGetLocal 2
3335: oPushResult
3336: oScopeDeclareAlloc
3337: oPop 1
3339: oGetAddrLocal 4
3341: oPushResult
3342: inc
3343: oPop 1
3345: oJumpForward 3352
3347: Choice Lookup Table
           0   3308
3350: oJumpForward 3354
3352: oJumpBack 3293
3354: oInputChoice 3447
3356: oGetLocal 1
3358: oPushResult
3359: oNodeVecSize
3360: oPop 1
3362: oChoice 3366
3364: oJumpForward 3371
3366: Choice Lookup Table
           1   3364
3369: oError 22
3371: oGetAddrLocal 5
3373: oPushResult
3374: oScopeCurrent
3375: oPushResult
3376: oCall 13880
3378: oPop 1
3380: oAssign
3381: oGetLocal 5
3383: oPushResult
3384: oCodePush
3385: oPop 1
3387: oGetAddrLocal 6
3389: oPushResult
3390: oSetResult 0
3392: oAssign
3393: oCall 13932
3395: oPushResult
3396: equal_zero
3397: oPop 1
3399: oChoice 3415
3401: oGetGlobal 3
3403: oPushResult
3404: oScopeEnter
3405: oPop 1
3407: oGetAddrLocal 6
3409: oPushResult
3410: oSetResult 1
3412: oAssign
3413: oJumpForward 3418
3415: Choice Lookup Table
           1   3401
3418: oGetLocal 2
3420: oPushResult
3421: oSetResult 1
3423: oPushResult
3424: oCall 9405
3426: oPop 2
3428: oCall 4881
3430: oCall 8204
3432: oCall 8965
3434: oGetLocal 6
3436: oChoice 3441
3438: oScopeEnd
3439: oJumpForward 3444
3441: Choice Lookup Table
           1   3438
3444: oCodePop
3445: oJumpForward 3450
3447: Choice Lookup Table
           7   3356
3450: oGetLocal 1
3452: oPushResult
3453: oNodeVecDelete
3454: oPop 1
3456: oInput 6
3458: oJumpForward 3465
3460: Choice Lookup Table
           0   3238
3463: oJumpForward 3467
3465: oJumpBack 3236
3467: oReturn
3468: oLocalSpace 2
3470: oInputChoice 3477
3472: oJumpForward 3483
3474: oChangeIntLitToLabelIdent
3475: oJumpForward 3483
3477: Choice Lookup Table
           1   3474
           0   3472
3482: oEndChoice
3483: oGetAddrLocal 1
3485: oPushResult
3486: oSetResult 26
3488: oPushResult
3489: LAST_ID
3490: oPushResult
3491: oCall 13982
3493: oPop 2
3495: oAssign
3496: oGetAddrLocal 2
3498: oPushResult
3499: oLabelNew
3500: oAssign
3501: oGetLocal 1
3503: oPushResult
3504: oSetResult 22
3506: oPushResult
3507: oGetLocal 2
3509: oPushResult
3510: oNodeSetLabel
3511: oPop 3
3513: oGetLocal 1
3515: oPushResult
3516: oScopeDeclare
3517: oPop 1
3519: oInputChoice 3523
3521: oJumpForward 3528
3523: Choice Lookup Table
          14   3521
3526: oJumpForward 3530
3528: oJumpBack 3470
3530: oInput 6
3532: oReturn
3533: oLocalSpace 0
3535: oCall 3760
3537: oInputChoice 3719
3539: oCall 3783
3541: oCall 4248
3543: oTypeSNodeType
3544: oChoice 3556
3546: oValueStringCmp
3547: oSetResult 0
3549: oPushResult
3550: oValuePush
3551: oPop 1
3553: oValueEqual
3554: oJumpForward 3560
3556: Choice Lookup Table
          41   3546
3559: oValueEqual
3560: oTypeSPop
3561: oGetGlobal 7
3563: oPushResult
3564: oTypeSPush
3565: oPop 1
3567: oJumpForward 3734
3569: oCall 3760
3571: oCall 4248
3573: oTypeSNodeType
3574: oChoice 3586
3576: oValueStringCmp
3577: oSetResult 0
3579: oPushResult
3580: oValuePush
3581: oPop 1
3583: oValueNotEqual
3584: oJumpForward 3590
3586: Choice Lookup Table
          41   3576
3589: oValueNotEqual
3590: oTypeSPop
3591: oGetGlobal 7
3593: oPushResult
3594: oTypeSPush
3595: oPop 1
3597: oJumpForward 3734
3599: oCall 3760
3601: oCall 4248
3603: oTypeSNodeType
3604: oChoice 3616
3606: oValueStringCmp
3607: oSetResult 0
3609: oPushResult
3610: oValuePush
3611: oPop 1
3613: oValueLess
3614: oJumpForward 3620
3616: Choice Lookup Table
          41   3606
3619: oValueLess
3620: oTypeSPop
3621: oGetGlobal 7
3623: oPushResult
3624: oTypeSPush
3625: oPop 1
3627: oJumpForward 3734
3629: oCall 3760
3631: oCall 4248
3633: oTypeSNodeType
3634: oChoice 3646
3636: oValueStringCmp
3637: oSetResult 0
3639: oPushResult
3640: oValuePush
3641: oPop 1
3643: oValueGreater
3644: oJumpForward 3650
3646: Choice Lookup Table
          41   3636
3649: oValueGreater
3650: oTypeSPop
3651: oGetGlobal 7
3653: oPushResult
3654: oTypeSPush
3655: oPop 1
3657: oJumpForward 3734
3659: oCall 3760
3661: oCall 4248
3663: oTypeSNodeType
3664: oChoice 3676
3666: oValueStringCmp
3667: oSetResult 0
3669: oPushResult
3670: oValuePush
3671: oPop 1
3673: oValueLessEqual
3674: oJumpForward 3680
3676: Choice Lookup Table
          41   3666
3679: oValueLessEqual
3680: oTypeSPop
3681: oGetGlobal 7
3683: oPushResult
3684: oTypeSPush
3685: oPop 1
3687: oJumpForward 3734
3689: oCall 3760
3691: oCall 4248
3693: oTypeSNodeType
3694: oChoice 3706
3696: oValueStringCmp
3697: oSetResult 0
3699: oPushResult
3700: oValuePush
3701: oPop 1
3703: oValueGreaterEqual
3704: oJumpForward 3710
3706: Choice Lookup Table
          41   3696
3709: oValueGreaterEqual
3710: oTypeSPop
3711: oGetGlobal 7
3713: oPushResult
3714: oTypeSPush
3715: oPop 1
3717: oJumpForward 3734
3719: Choice Lookup Table
          12   3689
          11   3659
          10   3629
           9   3599
           8   3569
           7   3539
3732: oJumpForward 3736
3734: oJumpBack 3537
3736: oReturn
3737: oLocalSpace 1
3739: oGetAddrLocal 1
3741: oPushResult
3742: oGetGlobal 25
3744: oAssign
3745: oGetAddrGlobal 25
3747: oPushResult
3748: oSetResult 1
3750: oAssign
3751: oCall 3533
3753: oGetAddrGlobal 25
3755: oPushResult
3756: oGetLocal 1
3758: oAssign
3759: oReturn
3760: oLocalSpace 0
3762: oCall 3783
3764: oInputChoice 3775
3766: oCall 4235
3768: oCall 3783
3770: oCall 4221
3772: oValueOr
3773: oJumpForward 3780
3775: Choice Lookup Table
          58   3766
3778: oJumpForward 3782
3780: oJumpBack 3764
3782: oReturn
3783: oLocalSpace 0
3785: oCall 3806
3787: oInputChoice 3798
3789: oCall 4235
3791: oCall 3806
3793: oCall 4221
3795: oValueAnd
3796: oJumpForward 3803
3798: Choice Lookup Table
          57   3789
3801: oJumpForward 3805
3803: oJumpBack 3787
3805: oReturn
3806: oLocalSpace 0
3808: oInputChoice 3817
3810: oCall 3806
3812: oCall 4235
3814: oValueNot
3815: oJumpForward 3822
3817: Choice Lookup Table
          59   3810
3820: oCall 3823
3822: oReturn
3823: oLocalSpace 0
3825: oCall 3872
3827: oInputChoice 3862
3829: oCall 3872
3831: oCall 4248
3833: oTypeSNodeType
3834: oChoice 3839
3836: oValueStringConcat
3837: oJumpForward 3843
3839: Choice Lookup Table
          41   3836
3842: oValueAdd
3843: oJumpForward 3869
3845: oCall 3872
3847: oCall 4248
3849: oTypeSNodeType
3850: oChoice 3856
3852: oError 17
3854: oJumpForward 3860
3856: Choice Lookup Table
          41   3852
3859: oValueSub
3860: oJumpForward 3869
3862: Choice Lookup Table
          26   3845
          25   3829
3867: oJumpForward 3871
3869: oJumpBack 3827
3871: oReturn
3872: oLocalSpace 0
3874: oCall 3922
3876: oInputChoice 3912
3878: oCall 3922
3880: oCall 4248
3882: oTypeSNodeType
3883: oChoice 3889
3885: oError 17
3887: oJumpForward 3893
3889: Choice Lookup Table
          41   3885
3892: oValueMult
3893: oJumpForward 3919
3895: oCall 3922
3897: oCall 4248
3899: oTypeSNodeType
3900: oChoice 3906
3902: oError 17
3904: oJumpForward 3910
3906: Choice Lookup Table
          41   3902
3909: oValueDiv
3910: oJumpForward 3919
3912: Choice Lookup Table
          24   3895
          23   3878
3917: oJumpForward 3921
3919: oJumpBack 3876
3921: oReturn
3922: oLocalSpace 0
3924: oInputChoice 3935
3926: oCall 3943
3928: oJumpForward 3942
3930: oCall 3943
3932: oValueNegate
3933: oJumpForward 3942
3935: Choice Lookup Table
          26   3930
          25   3926
3940: oCall 3943
3942: oReturn
3943: oLocalSpace 1
3945: oInputChoice 4193
3947: TOKEN_VALUE
3948: oPushResult
3949: oValuePush
3950: oPop 1
3952: oGetGlobal 6
3954: oPushResult
3955: oTypeSPush
3956: oPop 1
3958: oJumpForward 4220
3960: TOKEN_VALUE
3961: oPushResult
3962: oValuePush
3963: oPop 1
3965: oGetGlobal 9
3967: oPushResult
3968: oTypeSPush
3969: oPop 1
3971: oJumpForward 4220
3973: CURRENT_STRLIT
3974: oPushResult
3975: oValuePushString
3976: oPop 1
3978: oGetGlobal 15
3980: oPushResult
3981: oTypeSPush
3982: oPop 1
3984: oJumpForward 4220
3986: oCall 3533
3988: oInput 16
3990: oJumpForward 4220
3992: oGetAddrLocal 1
3994: oPushResult
3995: oScopeFindRequire
3996: oAssign
3997: oGetAddrLocal 1
3999: oPushResult
4000: oCall 244
4002: oPop 1
4004: oGetLocal 1
4006: oPushResult
4007: oNodeType
4008: oPop 1
4010: oChoice 4150
4012: oGetLocal 1
4014: oPushResult
4015: oCall 4615
4017: oPop 1
4019: oJumpForward 4175
4021: oGetLocal 1
4023: oPushResult
4024: oSetResult 22
4026: oPushResult
4027: oNodeGetInt
4028: oPop 2
4030: oPushResult
4031: oValuePush
4032: oPop 1
4034: oGetLocal 1
4036: oPushResult
4037: oSetResult 21
4039: oPushResult
4040: oNodeGet
4041: oPop 2
4043: oPushResult
4044: oTypeSPush
4045: oPop 1
4047: oJumpForward 4175
4049: oGetLocal 1
4051: oPushResult
4052: oSetResult 33
4054: oPushResult
4055: oNodeGetString
4056: oPop 2
4058: oPushResult
4059: oValuePushString
4060: oPop 1
4062: oGetLocal 1
4064: oPushResult
4065: oSetResult 21
4067: oPushResult
4068: oNodeGet
4069: oPop 2
4071: oPushResult
4072: oTypeSPush
4073: oPop 1
4075: oJumpForward 4175
4077: oGetLocal 1
4079: oPushResult
4080: oSetResult 22
4082: oPushResult
4083: oNodeGetInt
4084: oPop 2
4086: oPushResult
4087: oValuePush
4088: oPop 1
4090: oGetLocal 1
4092: oPushResult
4093: oSetResult 21
4095: oPushResult
4096: oNodeGet
4097: oPop 2
4099: oPushResult
4100: oTypeSPush
4101: oPop 1
4103: oJumpForward 4175
4105: oGetLocal 1
4107: oPushResult
4108: oSetResult 21
4110: oPushResult
4111: oNodeGet
4112: oPop 2
4114: oPushResult
4115: oTypeSPush
4116: oPop 1
4118: oInputChoice 4128
4120: oCall 3533
4122: oInput 16
4124: oCall 4466
4126: oJumpForward 4148
4128: Choice Lookup Table
          15   4120
4131: oGetGlobal 25
4133: oChoice 4143
4135: oSetResult 0
4137: oPushResult
4138: oValuePush
4139: oPop 1
4141: oJumpForward 4148
4143: Choice Lookup Table
           1   4135
4146: oError 31
4148: oJumpForward 4175
4150: Choice Lookup Table
          19   4105
          17   4077
          18   4049
          16   4021
          14   4012
4161: oError 1
4163: oSetResult 0
4165: oPushResult
4166: oValuePush
4167: oPop 1
4169: oGetGlobal 6
4171: oPushResult
4172: oTypeSPush
4173: oPop 1
4175: oJumpForward 4220
4177: oError 16
4179: oSetResult 0
4181: oPushResult
4182: oValuePush
4183: oPop 1
4185: oGetGlobal 14
4187: oPushResult
4188: oTypeSPush
4189: oPop 1
4191: oJumpForward 4220
4193: Choice Lookup Table
          20   4177
           0   3992
          15   3986
           3   3973
           4   3960
           1   3947
4206: oError 1
4208: oSetResult 0
4210: oPushResult
4211: oValuePush
4212: oPop 1
4214: oGetGlobal 6
4216: oPushResult
4217: oTypeSPush
4218: oPop 1
4220: oReturn
4221: oLocalSpace 0
4223: oTypeSNodeType
4224: oChoice 4228
4226: oJumpForward 4233
4228: Choice Lookup Table
          33   4226
4231: oError 8
4233: oTypeSPop
4234: oReturn
4235: oLocalSpace 0
4237: oTypeSNodeType
4238: oChoice 4242
4240: oJumpForward 4247
4242: Choice Lookup Table
          33   4240
4245: oError 8
4247: oReturn
4248: oLocalSpace 1
4250: oGetAddrLocal 1
4252: oPushResult
4253: oTypeSNodeType
4254: oAssign
4255: oTypeSPop
4256: oGetLocal 1
4258: oPushResult
4259: oTypeSNodeType
4260: oPushResult
4261: equal_node_type
4262: oPop 2
4264: oChoice 4341
4266: oTypeSNodeType
4267: oChoice 4328
4269: oGetLocal 1
4271: oChoice 4276
4273: oReturn
4274: oJumpForward 4279
4276: Choice Lookup Table
          37   4273
4279: oJumpForward 4337
4281: oGetLocal 1
4283: oChoice 4288
4285: oReturn
4286: oJumpForward 4291
4288: Choice Lookup Table
          36   4285
4291: oJumpForward 4337
4293: oGetLocal 1
4295: oChoice 4301
4297: oValueCharToString
4298: oReturn
4299: oJumpForward 4304
4301: Choice Lookup Table
          35   4297
4304: oJumpForward 4337
4306: oGetLocal 1
4308: oChoice 4323
4310: oValueSwap
4311: oValueCharToString
4312: oValueSwap
4313: oTypeSPop
4314: oGetGlobal 15
4316: oPushResult
4317: oTypeSPush
4318: oPop 1
4320: oReturn
4321: oJumpForward 4326
4323: Choice Lookup Table
          41   4310
4326: oJumpForward 4337
4328: Choice Lookup Table
          35   4306
          41   4293
          37   4281
          36   4269
4337: oError 14
4339: oJumpForward 4344
4341: Choice Lookup Table
           0   4266
4344: oReturn
4345: oLocalSpace 1
4347: oGetAddrLocal 1
4349: oPushResult
4350: oTypeSNodeType
4351: oAssign
4352: oTypeSPop
4353: oGetLocal 1
4355: oPushResult
4356: oTypeSNodeType
4357: oPushResult
4358: equal_node_type
4359: oPop 2
4361: oChoice 4462
4363: oTypeSNodeType
4364: oChoice 4445
4366: oGetLocal 1
4368: oChoice 4373
4370: oReturn
4371: oJumpForward 4376
4373: Choice Lookup Table
          29   4370
4376: oJumpForward 4458
4378: oGetLocal 1
4380: oChoice 4385
4382: oReturn
4383: oJumpForward 4388
4385: Choice Lookup Table
          30   4382
4388: oJumpForward 4458
4390: oGetLocal 1
4392: oChoice 4397
4394: oReturn
4395: oJumpForward 4400
4397: Choice Lookup Table
          37   4394
4400: oJumpForward 4458
4402: oGetLocal 1
4404: oChoice 4409
4406: oReturn
4407: oJumpForward 4412
4409: Choice Lookup Table
          36   4406
4412: oJumpForward 4458
4414: oGetLocal 1
4416: oChoice 4422
4418: oValueCharToString
4419: oReturn
4420: oJumpForward 4425
4422: Choice Lookup Table
          35   4418
4425: oJumpForward 4458
4427: oGetLocal 1
4429: oChoice 4438
4431: oReturn
4432: oJumpForward 4443
4434: oValueCharToString
4435: oReturn
4436: oJumpForward 4443
4438: Choice Lookup Table
          35   4434
          41   4431
4443: oJumpForward 4458
4445: Choice Lookup Table
          42   4427
          41   4414
          37   4402
          36   4390
          29   4378
          30   4366
4458: oError 14
4460: oJumpForward 4465
4462: Choice Lookup Table
           0   4363
4465: oReturn
4466: oLocalSpace 1
4468: oGetAddrLocal 1
4470: oPushResult
4471: oTypeSNodeType
4472: oAssign
4473: oTypeSPop
4474: oGetLocal 1
4476: oPushResult
4477: oTypeSNodeType
4478: oPushResult
4479: equal_node_type
4480: oPop 2
4482: oChoice 4611
4484: oTypeSNodeType
4485: oChoice 4588
4487: oGetLocal 1
4489: oChoice 4497
4491: oReturn
4492: oJumpForward 4508
4494: oReturn
4495: oJumpForward 4508
4497: Choice Lookup Table
          43   4494
          30   4494
          33   4491
          35   4491
          29   4491
4508: oJumpForward 4607
4510: oGetLocal 1
4512: oChoice 4520
4514: oReturn
4515: oJumpForward 4531
4517: oReturn
4518: oJumpForward 4531
4520: Choice Lookup Table
          43   4517
          30   4517
          33   4514
          35   4514
          29   4514
4531: oJumpForward 4607
4533: oGetLocal 1
4535: oChoice 4540
4537: oReturn
4538: oJumpForward 4543
4540: Choice Lookup Table
          37   4537
4543: oJumpForward 4607
4545: oGetLocal 1
4547: oChoice 4552
4549: oReturn
4550: oJumpForward 4555
4552: Choice Lookup Table
          36   4549
4555: oJumpForward 4607
4557: oGetLocal 1
4559: oChoice 4565
4561: oValueCharToString
4562: oReturn
4563: oJumpForward 4568
4565: Choice Lookup Table
          35   4561
4568: oJumpForward 4607
4570: oGetLocal 1
4572: oChoice 4581
4574: oReturn
4575: oJumpForward 4586
4577: oValueCharToString
4578: oReturn
4579: oJumpForward 4586
4581: Choice Lookup Table
          35   4577
          41   4574
4586: oJumpForward 4607
4588: Choice Lookup Table
          42   4570
          41   4557
          37   4545
          36   4533
          33   4510
          35   4510
          29   4510
          43   4487
          30   4487
4607: oError 14
4609: oJumpForward 4614
4611: Choice Lookup Table
           0   4484
4614: oReturn
4615: oLocalSpace 1
4617: oGetParam 1
4619: oPushResult
4620: oGetGlobal 17
4622: oPushResult
4623: oNodeEqual
4624: oPop 2
4626: oChoice 4666
4628: oInput 15
4630: oCall 3533
4632: oInput 16
4634: oTypeSNodeType
4635: oChoice 4641
4637: oJumpForward 4654
4639: oJumpForward 4654
4641: Choice Lookup Table
          35   4639
          29   4639
          33   4639
          43   4637
          30   4637
4652: oError 14
4654: oTypeSPop
4655: oGetGlobal 6
4657: oPushResult
4658: oTypeSPush
4659: oPop 1
4661: oInput 16
4663: oReturn
4664: oJumpForward 4669
4666: Choice Lookup Table
           1   4628
4669: oGetParam 1
4671: oPushResult
4672: oGetGlobal 18
4674: oPushResult
4675: oNodeEqual
4676: oPop 2
4678: oChoice 4712
4680: oInput 15
4682: oCall 3533
4684: oInput 16
4686: oTypeSNodeType
4687: oChoice 4693
4689: oJumpForward 4700
4691: oJumpForward 4700
4693: Choice Lookup Table
          29   4691
          30   4689
4698: oError 14
4700: oTypeSPop
4701: oGetGlobal 9
4703: oPushResult
4704: oTypeSPush
4705: oPop 1
4707: oInput 16
4709: oReturn
4710: oJumpForward 4715
4712: Choice Lookup Table
           1   4680
4715: oGetParam 1
4717: oPushResult
4718: oGetGlobal 19
4720: oPushResult
4721: oNodeEqual
4722: oPop 2
4724: oChoice 4769
4726: oInput 15
4728: oCall 3533
4730: oTypeSNodeType
4731: oChoice 4752
4733: oTypeSTop
4734: oPushResult
4735: oSetResult 44
4737: oPushResult
4738: oNodeGetBoolean
4739: oPop 2
4741: oChoice 4747
4743: oError 28
4745: oJumpForward 4750
4747: Choice Lookup Table
           1   4743
4750: oJumpForward 4757
4752: Choice Lookup Table
          43   4733
4755: oError 14
4757: oSetResult 1
4759: oPushResult
4760: oValuePush
4761: oPop 1
4763: oValueSub
4764: oInput 16
4766: oReturn
4767: oJumpForward 4772
4769: Choice Lookup Table
           1   4726
4772: oGetParam 1
4774: oPushResult
4775: oGetGlobal 20
4777: oPushResult
4778: oNodeEqual
4779: oPop 2
4781: oChoice 4826
4783: oInput 15
4785: oCall 3533
4787: oTypeSNodeType
4788: oChoice 4809
4790: oTypeSTop
4791: oPushResult
4792: oSetResult 44
4794: oPushResult
4795: oNodeGetBoolean
4796: oPop 2
4798: oChoice 4804
4800: oError 28
4802: oJumpForward 4807
4804: Choice Lookup Table
           1   4800
4807: oJumpForward 4814
4809: Choice Lookup Table
          43   4790
4812: oError 14
4814: oSetResult 1
4816: oPushResult
4817: oValuePush
4818: oPop 1
4820: oValueAdd
4821: oInput 16
4823: oReturn
4824: oJumpForward 4829
4826: Choice Lookup Table
           1   4783
4829: oGetParam 1
4831: oPushResult
4832: oGetGlobal 21
4834: oPushResult
4835: oNodeEqual
4836: oPop 2
4838: oChoice 4875
4840: oInput 15
4842: oCall 3737
4844: oValuePop
4845: oGetAddrLocal 1
4847: oPushResult
4848: oTypeSTop
4849: oAssign
4850: oTypeSPop
4851: oGetLocal 1
4853: oPushResult
4854: oSetResult 17
4856: oPushResult
4857: oNodeGetInt
4858: oPop 2
4860: oPushResult
4861: oValuePush
4862: oPop 1
4864: oGetGlobal 6
4866: oPushResult
4867: oTypeSPush
4868: oPop 1
4870: oInput 16
4872: oReturn
4873: oJumpForward 4878
4875: Choice Lookup Table
           1   4840
4878: oError 16
4880: oReturn
4881: oLocalSpace 1
4883: oGetAddrLocal 1
4885: oPushResult
4886: oSetResult 0
4888: oAssign
4889: oGetAddrLocal 1
4891: oPushResult
4892: oCall 5065
4894: oPop 1
4896: oGetAddrLocal 1
4898: oPushResult
4899: oCall 4965
4901: oPop 1
4903: oReturn
4904: oLocalSpace 1
4906: oGetAddrLocal 1
4908: oPushResult
4909: oGetGlobal 25
4911: oAssign
4912: oGetAddrGlobal 25
4914: oPushResult
4915: oSetResult 1
4917: oAssign
4918: oCall 4881
4920: oGetAddrGlobal 25
4922: oPushResult
4923: oGetLocal 1
4925: oAssign
4926: oReturn
4927: oLocalSpace 0
4929: oGetParam 1
4931: oPushResult
4932: oCall 5065
4934: oPop 1
4936: oTypeSNodeType
4937: oChoice 4956
4939: oJumpForward 4963
4941: oGetParam 1
4943: oPushResult
4944: oLabelNew
4945: oAssign
4946: oEmit 70
4948: oGetFromParam 1
4950: oPushResult
4951: oEmitLabel
4952: oPop 1
4954: oJumpForward 4963
4956: Choice Lookup Table
          33   4941
          34   4939
4961: oError 8
4963: oTypeSPop
4964: oReturn
4965: oLocalSpace 1
4967: oTypeSNodeType
4968: oChoice 5030
4970: oGetAddrLocal 1
4972: oPushResult
4973: oLabelNew
4974: oAssign
4975: oEmit 15
4977: oSetResult 1
4979: oPushResult
4980: oEmitInt
4981: oPop 1
4983: oEmit 68
4985: oGetLocal 1
4987: oPushResult
4988: oEmitLabel
4989: oPop 1
4991: oEmit 77
4993: oGetFromParam 1
4995: oPushResult
4996: oEmitLabel
4997: oPop 1
4999: oEmit 15
5001: oSetResult 0
5003: oPushResult
5004: oEmitInt
5005: oPop 1
5007: oEmit 77
5009: oGetLocal 1
5011: oPushResult
5012: oEmitLabel
5013: oPop 1
5015: oTypeSPop
5016: oGetGlobal 7
5018: oPushResult
5019: oTypeSPush
5020: oPop 1
5022: oGetParam 1
5024: oPushResult
5025: oSetResult 0
5027: oAssign
5028: oJumpForward 5033
5030: Choice Lookup Table
          34   4970
5033: oReturn
5034: oLocalSpace 0
5036: oTypeSNodeType
5037: oChoice 5061
5039: oGetParam 1
5041: oPushResult
5042: oLabelNew
5043: oAssign
5044: oEmit 70
5046: oGetFromParam 1
5048: oPushResult
5049: oEmitLabel
5050: oPop 1
5052: oTypeSPop
5053: oGetGlobal 8
5055: oPushResult
5056: oTypeSPush
5057: oPop 1
5059: oJumpForward 5064
5061: Choice Lookup Table
          33   5039
5064: oReturn
5065: oLocalSpace 0
5067: oGetParam 1
5069: oPushResult
5070: oCall 5598
5072: oPop 1
5074: oInputChoice 5580
5076: oGetParam 1
5078: oPushResult
5079: oCall 4965
5081: oPop 1
5083: oCall 8672
5085: oGetParam 1
5087: oPushResult
5088: oCall 5598
5090: oPop 1
5092: oGetParam 1
5094: oPushResult
5095: oCall 4965
5097: oPop 1
5099: oCall 8672
5101: oCall 8541
5103: oTypeSNodeType
5104: oChoice 5132
5106: oEmit 43
5108: oJumpForward 5151
5110: oEmit 49
5112: oJumpForward 5151
5114: oEmit 55
5116: oJumpForward 5151
5118: oCall 10882
5120: oEmit 15
5122: oSetResult 0
5124: oPushResult
5125: oEmitInt
5126: oPop 1
5128: oEmit 49
5130: oJumpForward 5151
5132: Choice Lookup Table
          41   5118
          42   5118
          37   5114
          36   5114
          43   5110
          30   5110
          35   5106
          33   5106
5149: oError 17
5151: oTypeSPop
5152: oGetGlobal 7
5154: oPushResult
5155: oTypeSPush
5156: oPop 1
5158: oJumpForward 5595
5160: oGetParam 1
5162: oPushResult
5163: oCall 4965
5165: oPop 1
5167: oCall 8672
5169: oGetParam 1
5171: oPushResult
5172: oCall 5598
5174: oPop 1
5176: oGetParam 1
5178: oPushResult
5179: oCall 4965
5181: oPop 1
5183: oCall 8672
5185: oCall 8541
5187: oTypeSNodeType
5188: oChoice 5216
5190: oEmit 44
5192: oJumpForward 5235
5194: oEmit 50
5196: oJumpForward 5235
5198: oEmit 56
5200: oJumpForward 5235
5202: oCall 10882
5204: oEmit 15
5206: oSetResult 0
5208: oPushResult
5209: oEmitInt
5210: oPop 1
5212: oEmit 50
5214: oJumpForward 5235
5216: Choice Lookup Table
          41   5202
          42   5202
          37   5198
          36   5198
          43   5194
          30   5194
          35   5190
          33   5190
5233: oError 17
5235: oTypeSPop
5236: oGetGlobal 7
5238: oPushResult
5239: oTypeSPush
5240: oPop 1
5242: oJumpForward 5595
5244: oGetParam 1
5246: oPushResult
5247: oCall 4965
5249: oPop 1
5251: oCall 8672
5253: oGetParam 1
5255: oPushResult
5256: oCall 5598
5258: oPop 1
5260: oGetParam 1
5262: oPushResult
5263: oCall 4965
5265: oPop 1
5267: oCall 8672
5269: oCall 8541
5271: oTypeSNodeType
5272: oChoice 5300
5274: oEmit 46
5276: oJumpForward 5319
5278: oEmit 52
5280: oJumpForward 5319
5282: oEmit 58
5284: oJumpForward 5319
5286: oCall 10882
5288: oEmit 15
5290: oSetResult 0
5292: oPushResult
5293: oEmitInt
5294: oPop 1
5296: oEmit 52
5298: oJumpForward 5319
5300: Choice Lookup Table
          41   5286
          42   5286
          37   5282
          36   5282
          43   5278
          30   5278
          35   5274
          33   5274
5317: oError 17
5319: oTypeSPop
5320: oGetGlobal 7
5322: oPushResult
5323: oTypeSPush
5324: oPop 1
5326: oJumpForward 5595
5328: oGetParam 1
5330: oPushResult
5331: oCall 4965
5333: oPop 1
5335: oCall 8672
5337: oGetParam 1
5339: oPushResult
5340: oCall 5598
5342: oPop 1
5344: oGetParam 1
5346: oPushResult
5347: oCall 4965
5349: oPop 1
5351: oCall 8672
5353: oCall 8541
5355: oTypeSNodeType
5356: oChoice 5384
5358: oEmit 45
5360: oJumpForward 5403
5362: oEmit 51
5364: oJumpForward 5403
5366: oEmit 57
5368: oJumpForward 5403
5370: oCall 10882
5372: oEmit 15
5374: oSetResult 0
5376: oPushResult
5377: oEmitInt
5378: oPop 1
5380: oEmit 51
5382: oJumpForward 5403
5384: Choice Lookup Table
          41   5370
          42   5370
          37   5366
          36   5366
          43   5362
          30   5362
          35   5358
          33   5358
5401: oError 17
5403: oTypeSPop
5404: oGetGlobal 7
5406: oPushResult
5407: oTypeSPush
5408: oPop 1
5410: oJumpForward 5595
5412: oGetParam 1
5414: oPushResult
5415: oCall 4965
5417: oPop 1
5419: oCall 8672
5421: oGetParam 1
5423: oPushResult
5424: oCall 5598
5426: oPop 1
5428: oGetParam 1
5430: oPushResult
5431: oCall 4965
5433: oPop 1
5435: oCall 8672
5437: oCall 8541
5439: oTypeSNodeType
5440: oChoice 5468
5442: oEmit 48
5444: oJumpForward 5487
5446: oEmit 54
5448: oJumpForward 5487
5450: oEmit 60
5452: oJumpForward 5487
5454: oCall 10882
5456: oEmit 15
5458: oSetResult 0
5460: oPushResult
5461: oEmitInt
5462: oPop 1
5464: oEmit 54
5466: oJumpForward 5487
5468: Choice Lookup Table
          41   5454
          42   5454
          37   5450
          36   5450
          43   5446
          30   5446
          35   5442
          33   5442
5485: oError 17
5487: oTypeSPop
5488: oGetGlobal 7
5490: oPushResult
5491: oTypeSPush
5492: oPop 1
5494: oJumpForward 5595
5496: oGetParam 1
5498: oPushResult
5499: oCall 4965
5501: oPop 1
5503: oCall 8672
5505: oGetParam 1
5507: oPushResult
5508: oCall 5598
5510: oPop 1
5512: oGetParam 1
5514: oPushResult
5515: oCall 4965
5517: oPop 1
5519: oCall 8672
5521: oCall 8541
5523: oTypeSNodeType
5524: oChoice 5552
5526: oEmit 47
5528: oJumpForward 5571
5530: oEmit 53
5532: oJumpForward 5571
5534: oEmit 59
5536: oJumpForward 5571
5538: oCall 10882
5540: oEmit 15
5542: oSetResult 0
5544: oPushResult
5545: oEmitInt
5546: oPop 1
5548: oEmit 53
5550: oJumpForward 5571
5552: Choice Lookup Table
          41   5538
          42   5538
          37   5534
          36   5534
          43   5530
          30   5530
          35   5526
          33   5526
5569: oError 17
5571: oTypeSPop
5572: oGetGlobal 7
5574: oPushResult
5575: oTypeSPush
5576: oPop 1
5578: oJumpForward 5595
5580: Choice Lookup Table
          12   5496
          11   5412
          10   5328
           9   5244
           8   5160
           7   5076
5593: oJumpForward 5597
5595: oJumpBack 5074
5597: oReturn
5598: oLocalSpace 1
5600: oGetAddrLocal 1
5602: oPushResult
5603: oSetResult 0
5605: oAssign
5606: oGetParam 1
5608: oPushResult
5609: oCall 5778
5611: oPop 1
5613: oInputChoice 5746
5615: oTypeSNodeType
5616: oChoice 5687
5618: oGetLocal 1
5620: oPushResult
5621: oSetResult 0
5623: oPushResult
5624: equal_label
5625: oPop 2
5627: oChoice 5636
5629: oGetAddrLocal 1
5631: oPushResult
5632: oLabelNew
5633: oAssign
5634: oJumpForward 5639
5636: Choice Lookup Table
           1   5629
5639: oEmit 68
5641: oGetLocal 1
5643: oPushResult
5644: oEmitLabel
5645: oPop 1
5647: oJumpForward 5694
5649: oGetParam 1
5651: oPushResult
5652: oCall 5034
5654: oPop 1
5656: oGetLocal 1
5658: oPushResult
5659: oSetResult 0
5661: oPushResult
5662: equal_label
5663: oPop 2
5665: oChoice 5674
5667: oGetAddrLocal 1
5669: oPushResult
5670: oLabelNew
5671: oAssign
5672: oJumpForward 5677
5674: Choice Lookup Table
           1   5667
5677: oEmit 68
5679: oGetLocal 1
5681: oPushResult
5682: oEmitLabel
5683: oPop 1
5685: oJumpForward 5694
5687: Choice Lookup Table
          33   5649
          34   5618
5692: oError 8
5694: oTypeSPop
5695: oEmit 77
5697: oGetFromParam 1
5699: oPushResult
5700: oEmitLabel
5701: oPop 1
5703: oGetParam 1
5705: oPushResult
5706: oSetResult 0
5708: oAssign
5709: oGetParam 1
5711: oPushResult
5712: oCall 5778
5714: oPop 1
5716: oTypeSNodeType
5717: oChoice 5730
5719: oJumpForward 5737
5721: oGetParam 1
5723: oPushResult
5724: oCall 5034
5726: oPop 1
5728: oJumpForward 5737
5730: Choice Lookup Table
          33   5721
          34   5719
5735: oError 8
5737: oTypeSPop
5738: oGetGlobal 8
5740: oPushResult
5741: oTypeSPush
5742: oPop 1
5744: oJumpForward 5751
5746: Choice Lookup Table
          58   5615
5749: oJumpForward 5753
5751: oJumpBack 5613
5753: oGetLocal 1
5755: oPushResult
5756: oSetResult 0
5758: oPushResult
5759: equal_label
5760: oPop 2
5762: oChoice 5774
5764: oEmit 77
5766: oGetLocal 1
5768: oPushResult
5769: oEmitLabel
5770: oPop 1
5772: oJumpForward 5777
5774: Choice Lookup Table
           0   5764
5777: oReturn
5778: oLocalSpace 2
5780: oGetAddrLocal 1
5782: oPushResult
5783: oSetResult 0
5785: oAssign
5786: oGetParam 1
5788: oPushResult
5789: oCall 5916
5791: oPop 1
5793: oInputChoice 5908
5795: oTypeSNodeType
5796: oChoice 5809
5798: oJumpForward 5816
5800: oGetParam 1
5802: oPushResult
5803: oCall 5034
5805: oPop 1
5807: oJumpForward 5816
5809: Choice Lookup Table
          33   5800
          34   5798
5814: oError 8
5816: oTypeSPop
5817: oGetLocal 1
5819: oPushResult
5820: oSetResult 0
5822: oPushResult
5823: equal_label
5824: oPop 2
5826: oChoice 5855
5828: oGetAddrLocal 1
5830: oPushResult
5831: oLabelNew
5832: oAssign
5833: oEmit 78
5835: oGetFromParam 1
5837: oPushResult
5838: oEmitLabel
5839: oPop 1
5841: oGetLocal 1
5843: oPushResult
5844: oEmitLabel
5845: oPop 1
5847: oGetParam 1
5849: oPushResult
5850: oGetLocal 1
5852: oAssign
5853: oJumpForward 5858
5855: Choice Lookup Table
           1   5828
5858: oGetAddrLocal 2
5860: oPushResult
5861: oSetResult 0
5863: oAssign
5864: oGetAddrLocal 2
5866: oPushResult
5867: oCall 5916
5869: oPop 1
5871: oTypeSNodeType
5872: oChoice 5885
5874: oJumpForward 5892
5876: oGetAddrLocal 2
5878: oPushResult
5879: oCall 5034
5881: oPop 1
5883: oJumpForward 5892
5885: Choice Lookup Table
          33   5876
          34   5874
5890: oError 8
5892: oEmit 78
5894: oGetLocal 2
5896: oPushResult
5897: oEmitLabel
5898: oPop 1
5900: oGetLocal 1
5902: oPushResult
5903: oEmitLabel
5904: oPop 1
5906: oJumpForward 5913
5908: Choice Lookup Table
          57   5795
5911: oJumpForward 5915
5913: oJumpBack 5793
5915: oReturn
5916: oLocalSpace 1
5918: oInputChoice 5972
5920: oGetAddrLocal 1
5922: oPushResult
5923: oSetResult 0
5925: oAssign
5926: oGetAddrLocal 1
5928: oPushResult
5929: oCall 5916
5931: oPop 1
5933: oTypeSNodeType
5934: oChoice 5963
5936: oGetParam 1
5938: oPushResult
5939: oLabelNew
5940: oAssign
5941: oEmit 68
5943: oGetFromParam 1
5945: oPushResult
5946: oEmitLabel
5947: oPop 1
5949: oEmit 77
5951: oGetLocal 1
5953: oPushResult
5954: oEmitLabel
5955: oPop 1
5957: oJumpForward 5970
5959: oEmit 42
5961: oJumpForward 5970
5963: Choice Lookup Table
          33   5959
          34   5936
5968: oError 8
5970: oJumpForward 5982
5972: Choice Lookup Table
          59   5920
5975: oGetParam 1
5977: oPushResult
5978: oCall 5983
5980: oPop 1
5982: oReturn
5983: oLocalSpace 2
5985: oGetAddrLocal 1
5987: oPushResult
5988: oSetResult 1
5990: oAssign
5991: oGetParam 1
5993: oPushResult
5994: oCall 6219
5996: oPop 1
5998: oInputChoice 6209
6000: oTypeSNodeType
6001: oChoice 6124
6003: oCall 8626
6005: oGetParam 1
6007: oPushResult
6008: oCall 6219
6010: oPop 1
6012: oTypeSNodeType
6013: oChoice 6021
6015: oEmit 22
6017: oCall 7989
6019: oJumpForward 6030
6021: Choice Lookup Table
          37   6015
          36   6015
6026: oCall 8646
6028: oEmit 37
6030: oJumpForward 6141
6032: oGetLocal 1
6034: oChoice 6050
6036: oGetAddrLocal 2
6038: oPushResult
6039: oCall 10665
6041: oAssign
6042: oGetAddrLocal 1
6044: oPushResult
6045: oSetResult 0
6047: oAssign
6048: oJumpForward 6053
6050: Choice Lookup Table
           1   6036
6053: oGetParam 1
6055: oPushResult
6056: oCall 6219
6058: oPop 1
6060: oTypeSNodeType
6061: oChoice 6099
6063: oCall 10774
6065: oEmit 17
6067: oGetLocal 2
6069: oPushResult
6070: oEmitInt
6071: oPop 1
6073: oGetGlobal 16
6075: oPushResult
6076: oTypeSPush
6077: oPop 1
6079: oJumpForward 6109
6081: oCall 10828
6083: oEmit 17
6085: oGetLocal 2
6087: oPushResult
6088: oEmitInt
6089: oPop 1
6091: oGetGlobal 16
6093: oPushResult
6094: oTypeSPush
6095: oPop 1
6097: oJumpForward 6109
6099: Choice Lookup Table
          35   6081
          41   6063
          42   6063
6106: oError 14
6108: oTypeSPop
6109: oJumpForward 6141
6111: oGetParam 1
6113: oPushResult
6114: oCall 6219
6116: oPop 1
6118: oCall 8626
6120: oCall 7989
6122: oJumpForward 6141
6124: Choice Lookup Table
          37   6111
          36   6111
          35   6032
          41   6032
          42   6032
          29   6003
          30   6003
6139: oError 17
6141: oJumpForward 6216
6143: oTypeSNodeType
6144: oChoice 6196
6146: oCall 8626
6148: oGetParam 1
6150: oPushResult
6151: oCall 6219
6153: oPop 1
6155: oCall 8646
6157: oEmit 40
6159: oJumpForward 6207
6161: oGetParam 1
6163: oPushResult
6164: oCall 6219
6166: oPop 1
6168: oTypeSNodeType
6169: oChoice 6183
6171: oCall 8626
6173: oCall 8045
6175: oJumpForward 6194
6177: oCall 8541
6179: oCall 8101
6181: oJumpForward 6194
6183: Choice Lookup Table
          37   6177
          36   6177
          29   6171
          30   6171
6192: oError 17
6194: oJumpForward 6207
6196: Choice Lookup Table
          37   6161
          36   6161
          29   6146
          30   6146
6205: oError 17
6207: oJumpForward 6216
6209: Choice Lookup Table
          26   6143
          25   6000
6214: oJumpForward 6218
6216: oJumpBack 5998
6218: oReturn
6219: oLocalSpace 0
6221: oGetParam 1
6223: oPushResult
6224: oCall 6270
6226: oPop 1
6228: oInputChoice 6260
6230: oCall 8626
6232: oGetParam 1
6234: oPushResult
6235: oCall 6270
6237: oPop 1
6239: oCall 8646
6241: oEmit 34
6243: oJumpForward 6267
6245: oCall 8626
6247: oGetParam 1
6249: oPushResult
6250: oCall 6270
6252: oPop 1
6254: oCall 8646
6256: oEmit 35
6258: oJumpForward 6267
6260: Choice Lookup Table
          24   6245
          23   6230
6265: oJumpForward 6269
6267: oJumpBack 6228
6269: oReturn
6270: oLocalSpace 0
6272: oInputChoice 6298
6274: oGetParam 1
6276: oPushResult
6277: oCall 6311
6279: oPop 1
6281: oCall 8646
6283: oJumpForward 6310
6285: oGetParam 1
6287: oPushResult
6288: oCall 6311
6290: oPop 1
6292: oCall 8646
6294: oEmit 41
6296: oJumpForward 6310
6298: Choice Lookup Table
          26   6285
          25   6274
6303: oGetParam 1
6305: oPushResult
6306: oCall 6311
6308: oPop 1
6310: oReturn
6311: oLocalSpace 7
6313: oInputChoice 6754
6315: oEmit 15
6317: TOKEN_VALUE
6318: oPushResult
6319: oEmitInt
6320: oPop 1
6322: oGetGlobal 6
6324: oPushResult
6325: oTypeSPush
6326: oPop 1
6328: oJumpForward 6775
6330: oEmit 15
6332: TOKEN_VALUE
6333: oPushResult
6334: oEmitInt
6335: oPop 1
6337: oGetGlobal 9
6339: oPushResult
6340: oTypeSPush
6341: oPop 1
6343: oJumpForward 6775
6345: oGetParam 1
6347: oPushResult
6348: oCall 5065
6350: oPop 1
6352: oInput 16
6354: oJumpForward 6775
6356: oGetAddrLocal 1
6358: oPushResult
6359: CURRENT_STRLIT
6360: oPushResult
6361: oStringAllocShortStringLit
6362: oPop 1
6364: oAssign
6365: oEmit 16
6367: oGetLocal 1
6369: oPushResult
6370: oEmitInt
6371: oPop 1
6373: oGetGlobal 15
6375: oPushResult
6376: oTypeSPush
6377: oPop 1
6379: oCall 7587
6381: oCall 7533
6383: oJumpForward 6775
6385: oGetAddrLocal 2
6387: oPushResult
6388: oScopeFindRequire
6389: oAssign
6390: oGetAddrLocal 2
6392: oPushResult
6393: oCall 244
6395: oPop 1
6397: oGetLocal 2
6399: oPushResult
6400: oNodeType
6401: oPop 1
6403: oChoice 6674
6405: oGetLocal 2
6407: oPushResult
6408: oCall 10977
6410: oPop 1
6412: oJumpForward 6703
6414: oGetLocal 2
6416: oPushResult
6417: oCall 11641
6419: oPop 1
6421: oJumpForward 6703
6423: oGetAddrLocal 3
6425: oPushResult
6426: oGetLocal 2
6428: oPushResult
6429: oSetResult 21
6431: oPushResult
6432: oNodeGet
6433: oPop 2
6435: oAssign
6436: oGetLocal 3
6438: oPushResult
6439: oTypeSPush
6440: oPop 1
6442: oTypeSNodeType
6443: oChoice 6467
6445: oEmit 15
6447: oGetLocal 2
6449: oPushResult
6450: oCall 14010
6452: oPop 1
6454: oJumpForward 6484
6456: oEmit 15
6458: oGetLocal 2
6460: oPushResult
6461: oCall 14010
6463: oPop 1
6465: oJumpForward 6484
6467: Choice Lookup Table
          37   6456
          36   6456
          29   6445
          35   6445
          33   6445
          43   6445
          30   6445
6482: oError 16
6484: oJumpForward 6703
6486: oGetAddrLocal 4
6488: oPushResult
6489: oGetLocal 2
6491: oPushResult
6492: oSetResult 22
6494: oPushResult
6495: oNodeGetInt
6496: oPop 2
6498: oAssign
6499: oGetLocal 4
6501: oPushResult
6502: equal_zero
6503: oPop 1
6505: oChoice 6538
6507: oGetAddrLocal 4
6509: oPushResult
6510: oGetLocal 2
6512: oPushResult
6513: oSetResult 33
6515: oPushResult
6516: oNodeGetString
6517: oPop 2
6519: oPushResult
6520: oStringAllocShortStringLit
6521: oPop 1
6523: oAssign
6524: oGetLocal 2
6526: oPushResult
6527: oSetResult 22
6529: oPushResult
6530: oGetLocal 4
6532: oPushResult
6533: oNodeSetInt
6534: oPop 3
6536: oJumpForward 6541
6538: Choice Lookup Table
           1   6507
6541: oEmit 16
6543: oGetLocal 4
6545: oPushResult
6546: oEmitInt
6547: oPop 1
6549: oGetGlobal 15
6551: oPushResult
6552: oTypeSPush
6553: oPop 1
6555: oCall 7587
6557: oCall 7533
6559: oJumpForward 6703
6561: oGetLocal 2
6563: oPushResult
6564: oCall 6776
6566: oPop 1
6568: oJumpForward 6703
6570: oGetLocal 2
6572: oPushResult
6573: oSetResult 21
6575: oPushResult
6576: oNodeGet
6577: oPop 2
6579: oPushResult
6580: oTypeSPush
6581: oPop 1
6583: oInputChoice 6650
6585: oCall 4881
6587: oInput 16
6589: oCall 8361
6591: oTypeSNodeType
6592: oChoice 6637
6594: oInputChoice 6624
6596: oTypeSPop
6597: oGetLocal 3
6599: oPushResult
6600: oSetResult 37
6602: oPushResult
6603: oNodeGet
6604: oPop 2
6606: oPushResult
6607: oTypeSPush
6608: oPop 1
6610: oCall 7587
6612: oCall 7533
6614: oJumpForward 6629
6616: oCall 7782
6618: oCall 7587
6620: oCall 7533
6622: oJumpForward 6629
6624: Choice Lookup Table
          17   6616
          19   6596
6629: oJumpForward 6648
6631: oCall 7587
6633: oCall 7533
6635: oJumpForward 6648
6637: Choice Lookup Table
          42   6631
          40   6631
          38   6631
          37   6594
          36   6594
6648: oJumpForward 6672
6650: Choice Lookup Table
          15   6585
6653: oGetGlobal 25
6655: oChoice 6667
6657: oEmit 15
6659: oSetResult 0
6661: oPushResult
6662: oEmitInt
6663: oPop 1
6665: oJumpForward 6672
6667: Choice Lookup Table
           1   6657
6670: oError 31
6672: oJumpForward 6703
6674: Choice Lookup Table
          19   6570
          25   6561
          24   6561
          22   6561
          21   6561
          18   6486
          17   6423
          16   6423
          14   6414
          13   6405
6695: oError 6
6697: oGetGlobal 6
6699: oPushResult
6700: oTypeSPush
6701: oPop 1
6703: oJumpForward 6775
6705: oInput 0
6707: oGetAddrLocal 5
6709: oPushResult
6710: oScopeFindRequire
6711: oAssign
6712: oGetAddrLocal 5
6714: oPushResult
6715: oCall 244
6717: oPop 1
6719: oGetLocal 5
6721: oPushResult
6722: oSetResult 0
6724: oPushResult
6725: oCall 9188
6727: oPop 2
6729: oGetAddrLocal 6
6731: oPushResult
6732: oTypeSTop
6733: oAssign
6734: oTypeSPop
6735: oGetAddrLocal 7
6737: oPushResult
6738: oGetLocal 6
6740: oPushResult
6741: oCall 13029
6743: oPop 1
6745: oAssign
6746: oGetLocal 7
6748: oPushResult
6749: oTypeSPush
6750: oPop 1
6752: oJumpForward 6775
6754: Choice Lookup Table
          20   6705
           0   6385
           3   6356
          15   6345
           4   6330
           1   6315
6767: oError 6
6769: oGetGlobal 6
6771: oPushResult
6772: oTypeSPush
6773: oPop 1
6775: oReturn
6776: oLocalSpace 2
6778: oGetAddrLocal 1
6780: oPushResult
6781: oGetParam 1
6783: oPushResult
6784: oSetResult 21
6786: oPushResult
6787: oNodeGet
6788: oPop 2
6790: oAssign
6791: oGetAddrLocal 2
6793: oPushResult
6794: oGetParam 1
6796: oPushResult
6797: oCall 13964
6799: oPop 1
6801: oAssign
6802: oGetLocal 1
6804: oPushResult
6805: oTypeSPush
6806: oPop 1
6808: oTypeSNodeType
6809: oChoice 7508
6811: oGetParam 1
6813: oPushResult
6814: oNodeType
6815: oPop 1
6817: oChoice 6963
6819: oEmit 0
6821: oGetParam 1
6823: oPushResult
6824: oCall 14010
6826: oPop 1
6828: oJumpForward 6973
6830: oGetLocal 2
6832: oPushResult
6833: equal_zero
6834: oPop 1
6836: oChoice 6849
6838: oEmit 3
6840: oGetParam 1
6842: oPushResult
6843: oCall 14010
6845: oPop 1
6847: oJumpForward 6867
6849: Choice Lookup Table
           1   6838
6852: oEmit 9
6854: oGetLocal 2
6856: oPushResult
6857: oEmitInt
6858: oPop 1
6860: oGetParam 1
6862: oPushResult
6863: oCall 14010
6865: oPop 1
6867: oJumpForward 6973
6869: oGetParam 1
6871: oPushResult
6872: oSetResult 34
6874: oPushResult
6875: oNodeGetBoolean
6876: oPop 2
6878: oChoice 6921
6880: oGetLocal 2
6882: oPushResult
6883: equal_zero
6884: oPop 1
6886: oChoice 6899
6888: oEmit 8
6890: oGetParam 1
6892: oPushResult
6893: oCall 14010
6895: oPop 1
6897: oJumpForward 6917
6899: Choice Lookup Table
           1   6888
6902: oEmit 14
6904: oGetLocal 2
6906: oPushResult
6907: oEmitInt
6908: oPop 1
6910: oGetParam 1
6912: oPushResult
6913: oCall 14010
6915: oPop 1
6917: oEmit 23
6919: oJumpForward 6961
6921: Choice Lookup Table
           1   6880
6924: oGetLocal 2
6926: oPushResult
6927: equal_zero
6928: oPop 1
6930: oChoice 6943
6932: oEmit 6
6934: oGetParam 1
6936: oPushResult
6937: oCall 14010
6939: oPop 1
6941: oJumpForward 6961
6943: Choice Lookup Table
           1   6932
6946: oEmit 12
6948: oGetLocal 2
6950: oPushResult
6951: oEmitInt
6952: oPop 1
6954: oGetParam 1
6956: oPushResult
6957: oCall 14010
6959: oPop 1
6961: oJumpForward 6973
6963: Choice Lookup Table
          24   6869
          22   6830
          25   6819
          21   6819
6972: oEndChoice
6973: oJumpForward 7532
6975: oGetParam 1
6977: oPushResult
6978: oNodeType
6979: oPop 1
6981: oChoice 7127
6983: oEmit 1
6985: oGetParam 1
6987: oPushResult
6988: oCall 14010
6990: oPop 1
6992: oJumpForward 7137
6994: oGetLocal 2
6996: oPushResult
6997: equal_zero
6998: oPop 1
7000: oChoice 7013
7002: oEmit 4
7004: oGetParam 1
7006: oPushResult
7007: oCall 14010
7009: oPop 1
7011: oJumpForward 7031
7013: Choice Lookup Table
           1   7002
7016: oEmit 10
7018: oGetLocal 2
7020: oPushResult
7021: oEmitInt
7022: oPop 1
7024: oGetParam 1
7026: oPushResult
7027: oCall 14010
7029: oPop 1
7031: oJumpForward 7137
7033: oGetParam 1
7035: oPushResult
7036: oSetResult 34
7038: oPushResult
7039: oNodeGetBoolean
7040: oPop 2
7042: oChoice 7085
7044: oGetLocal 2
7046: oPushResult
7047: equal_zero
7048: oPop 1
7050: oChoice 7063
7052: oEmit 8
7054: oGetParam 1
7056: oPushResult
7057: oCall 14010
7059: oPop 1
7061: oJumpForward 7081
7063: Choice Lookup Table
           1   7052
7066: oEmit 14
7068: oGetLocal 2
7070: oPushResult
7071: oEmitInt
7072: oPop 1
7074: oGetParam 1
7076: oPushResult
7077: oCall 14010
7079: oPop 1
7081: oEmit 24
7083: oJumpForward 7125
7085: Choice Lookup Table
           1   7044
7088: oGetLocal 2
7090: oPushResult
7091: equal_zero
7092: oPop 1
7094: oChoice 7107
7096: oEmit 7
7098: oGetParam 1
7100: oPushResult
7101: oCall 14010
7103: oPop 1
7105: oJumpForward 7125
7107: Choice Lookup Table
           1   7096
7110: oEmit 13
7112: oGetLocal 2
7114: oPushResult
7115: oEmitInt
7116: oPop 1
7118: oGetParam 1
7120: oPushResult
7121: oCall 14010
7123: oPop 1
7125: oJumpForward 7137
7127: Choice Lookup Table
          24   7033
          22   6994
          25   6983
          21   6983
7136: oEndChoice
7137: oJumpForward 7532
7139: oError 16
7141: oJumpForward 7532
7143: oGetParam 1
7145: oPushResult
7146: oNodeType
7147: oPop 1
7149: oChoice 7295
7151: oEmit 2
7153: oGetParam 1
7155: oPushResult
7156: oCall 14010
7158: oPop 1
7160: oJumpForward 7305
7162: oGetLocal 2
7164: oPushResult
7165: equal_zero
7166: oPop 1
7168: oChoice 7181
7170: oEmit 5
7172: oGetParam 1
7174: oPushResult
7175: oCall 14010
7177: oPop 1
7179: oJumpForward 7199
7181: Choice Lookup Table
           1   7170
7184: oEmit 11
7186: oGetLocal 2
7188: oPushResult
7189: oEmitInt
7190: oPop 1
7192: oGetParam 1
7194: oPushResult
7195: oCall 14010
7197: oPop 1
7199: oJumpForward 7305
7201: oGetParam 1
7203: oPushResult
7204: oSetResult 34
7206: oPushResult
7207: oNodeGetBoolean
7208: oPop 2
7210: oChoice 7253
7212: oGetLocal 2
7214: oPushResult
7215: equal_zero
7216: oPop 1
7218: oChoice 7231
7220: oEmit 8
7222: oGetParam 1
7224: oPushResult
7225: oCall 14010
7227: oPop 1
7229: oJumpForward 7249
7231: Choice Lookup Table
           1   7220
7234: oEmit 14
7236: oGetLocal 2
7238: oPushResult
7239: oEmitInt
7240: oPop 1
7242: oGetParam 1
7244: oPushResult
7245: oCall 14010
7247: oPop 1
7249: oEmit 25
7251: oJumpForward 7293
7253: Choice Lookup Table
           1   7212
7256: oGetLocal 2
7258: oPushResult
7259: equal_zero
7260: oPop 1
7262: oChoice 7275
7264: oEmit 8
7266: oGetParam 1
7268: oPushResult
7269: oCall 14010
7271: oPop 1
7273: oJumpForward 7293
7275: Choice Lookup Table
           1   7264
7278: oEmit 14
7280: oGetLocal 2
7282: oPushResult
7283: oEmitInt
7284: oPop 1
7286: oGetParam 1
7288: oPushResult
7289: oCall 14010
7291: oPop 1
7293: oJumpForward 7305
7295: Choice Lookup Table
          24   7201
          22   7162
          25   7151
          21   7151
7304: oEndChoice
7305: oInputChoice 7335
7307: oTypeSPop
7308: oGetLocal 1
7310: oPushResult
7311: oSetResult 37
7313: oPushResult
7314: oNodeGet
7315: oPop 2
7317: oPushResult
7318: oTypeSPush
7319: oPop 1
7321: oCall 7587
7323: oCall 7533
7325: oJumpForward 7340
7327: oCall 7782
7329: oCall 7587
7331: oCall 7533
7333: oJumpForward 7340
7335: Choice Lookup Table
          17   7327
          19   7307
7340: oJumpForward 7532
7342: oGetParam 1
7344: oPushResult
7345: oNodeType
7346: oPop 1
7348: oChoice 7492
7350: oEmit 16
7352: oGetParam 1
7354: oPushResult
7355: oCall 14010
7357: oPop 1
7359: oJumpForward 7502
7361: oGetLocal 2
7363: oPushResult
7364: equal_zero
7365: oPop 1
7367: oChoice 7380
7369: oEmit 17
7371: oGetParam 1
7373: oPushResult
7374: oCall 14010
7376: oPop 1
7378: oJumpForward 7398
7380: Choice Lookup Table
           1   7369
7383: oEmit 20
7385: oGetLocal 2
7387: oPushResult
7388: oEmitInt
7389: oPop 1
7391: oGetParam 1
7393: oPushResult
7394: oCall 14010
7396: oPop 1
7398: oJumpForward 7502
7400: oGetParam 1
7402: oPushResult
7403: oSetResult 34
7405: oPushResult
7406: oNodeGetBoolean
7407: oPop 2
7409: oChoice 7450
7411: oGetLocal 2
7413: oPushResult
7414: equal_zero
7415: oPop 1
7417: oChoice 7430
7419: oEmit 8
7421: oGetParam 1
7423: oPushResult
7424: oCall 14010
7426: oPop 1
7428: oJumpForward 7448
7430: Choice Lookup Table
           1   7419
7433: oEmit 14
7435: oGetLocal 2
7437: oPushResult
7438: oEmitInt
7439: oPop 1
7441: oGetParam 1
7443: oPushResult
7444: oCall 14010
7446: oPop 1
7448: oJumpForward 7490
7450: Choice Lookup Table
           1   7411
7453: oGetLocal 2
7455: oPushResult
7456: equal_zero
7457: oPop 1
7459: oChoice 7472
7461: oEmit 18
7463: oGetParam 1
7465: oPushResult
7466: oCall 14010
7468: oPop 1
7470: oJumpForward 7490
7472: Choice Lookup Table
           1   7461
7475: oEmit 21
7477: oGetLocal 2
7479: oPushResult
7480: oEmitInt
7481: oPop 1
7483: oGetParam 1
7485: oPushResult
7486: oCall 14010
7488: oPop 1
7490: oJumpForward 7502
7492: Choice Lookup Table
          24   7400
          22   7361
          25   7350
          21   7350
7501: oEndChoice
7502: oCall 7587
7504: oCall 7533
7506: oJumpForward 7532
7508: Choice Lookup Table
          42   7342
          40   7342
          38   7342
          37   7143
          36   7143
          28   7139
          35   6975
          29   6975
          33   6975
          43   6811
          30   6811
7531: oEndChoice
7532: oReturn
7533: oLocalSpace 0
7535: oTypeSNodeType
7536: oChoice 7560
7538: oEmit 23
7540: oJumpForward 7586
7542: oEmit 24
7544: oJumpForward 7586
7546: oError 16
7548: oJumpForward 7586
7550: oEmit 25
7552: oJumpForward 7586
7554: oError 29
7556: oJumpForward 7586
7558: oJumpForward 7586
7560: Choice Lookup Table
          42   7558
          41   7558
          40   7558
          38   7558
          37   7554
          36   7550
          28   7546
          35   7542
          29   7542
          33   7542
          43   7538
          30   7538
7585: oEndChoice
7586: oReturn
7587: oLocalSpace 0
7589: oInputChoice 7627
7591: oTypeSNodeType
7592: oChoice 7606
7594: oCall 7639
7596: oJumpForward 7617
7598: oCall 7782
7600: oJumpForward 7617
7602: oCall 7861
7604: oJumpForward 7617
7606: Choice Lookup Table
          42   7602
          41   7602
          36   7598
          38   7594
7615: oError 10
7617: oJumpForward 7636
7619: oCall 7891
7621: oJumpForward 7636
7623: oCall 8164
7625: oJumpForward 7636
7627: Choice Lookup Table
          19   7623
          21   7619
          17   7591
7634: oJumpForward 7638
7636: oJumpBack 7589
7638: oReturn
7639: oLocalSpace 3
7641: oTypeSNodeType
7642: oChoice 7646
7644: oJumpForward 7651
7646: Choice Lookup Table
          38   7644
7649: oError 10
7651: oTypeSNodeType
7652: oChoice 7656
7654: oJumpForward 7661
7656: Choice Lookup Table
          38   7654
7659: oError 13
7661: oGetAddrLocal 1
7663: oPushResult
7664: oTypeSTop
7665: oPushResult
7666: oSetResult 38
7668: oPushResult
7669: oNodeGet
7670: oPop 2
7672: oPushResult
7673: oCall 13113
7675: oPop 1
7677: oAssign
7678: oGetAddrLocal 2
7680: oPushResult
7681: oTypeSTop
7682: oPushResult
7683: oSetResult 37
7685: oPushResult
7686: oNodeGet
7687: oPop 2
7689: oAssign
7690: oTypeSPop
7691: oGetLocal 2
7693: oPushResult
7694: oTypeSPush
7695: oPop 1
7697: oCall 4881
7699: oCall 8599
7701: oGetLocal 1
7703: oPushResult
7704: equal_zero
7705: oPop 1
7707: oChoice 7721
7709: oEmit 15
7711: oGetLocal 1
7713: oPushResult
7714: oEmitInt
7715: oPop 1
7717: oEmit 40
7719: oJumpForward 7724
7721: Choice Lookup Table
           0   7709
7724: oGetAddrLocal 3
7726: oPushResult
7727: oGetLocal 2
7729: oPushResult
7730: oSetResult 17
7732: oPushResult
7733: oNodeGetInt
7734: oPop 2
7736: oAssign
7737: oGetLocal 3
7739: oPushResult
7740: oSetResult 1
7742: oPushResult
7743: equal
7744: oPop 2
7746: oChoice 7760
7748: oEmit 15
7750: oGetLocal 3
7752: oPushResult
7753: oEmitInt
7754: oPop 1
7756: oEmit 34
7758: oJumpForward 7763
7760: Choice Lookup Table
           0   7748
7763: oEmit 36
7765: oInputChoice 7773
7767: oJumpForward 7781
7769: oJumpForward 7779
7771: oJumpForward 7779
7773: Choice Lookup Table
          14   7771
          18   7767
7778: oEndChoice
7779: oJumpBack 7651
7781: oReturn
7782: oLocalSpace 2
7784: oTypeSNodeType
7785: oChoice 7789
7787: oJumpForward 7794
7789: Choice Lookup Table
          36   7787
7792: oError 29
7794: oGetAddrLocal 1
7796: oPushResult
7797: oTypeSTop
7798: oPushResult
7799: oSetResult 37
7801: oPushResult
7802: oNodeGet
7803: oPop 2
7805: oAssign
7806: oTypeSPop
7807: oGetLocal 1
7809: oPushResult
7810: oTypeSPush
7811: oPop 1
7813: oCall 4881
7815: oCall 8599
7817: oGetAddrLocal 2
7819: oPushResult
7820: oGetLocal 1
7822: oPushResult
7823: oSetResult 17
7825: oPushResult
7826: oNodeGetInt
7827: oPop 2
7829: oAssign
7830: oGetLocal 2
7832: oPushResult
7833: oSetResult 1
7835: oPushResult
7836: equal
7837: oPop 2
7839: oChoice 7853
7841: oEmit 15
7843: oGetLocal 2
7845: oPushResult
7846: oEmitInt
7847: oPop 1
7849: oEmit 34
7851: oJumpForward 7856
7853: Choice Lookup Table
           0   7841
7856: oEmit 36
7858: oInput 18
7860: oReturn
7861: oLocalSpace 0
7863: oTypeSNodeType
7864: oChoice 7868
7866: oJumpForward 7875
7868: Choice Lookup Table
          42   7866
          41   7866
7873: oError 29
7875: oTypeSPop
7876: oGetGlobal 9
7878: oPushResult
7879: oTypeSPush
7880: oPop 1
7882: oCall 4881
7884: oCall 8599
7886: oEmit 36
7888: oInput 18
7890: oReturn
7891: oLocalSpace 2
7893: oTypeSNodeType
7894: oChoice 7898
7896: oJumpForward 7903
7898: Choice Lookup Table
          40   7896
7901: oError 11
7903: oTypeSTop
7904: oPushResult
7905: oSetResult 41
7907: oPushResult
7908: oNodeGet
7909: oPop 2
7911: oPushResult
7912: oScopeEnter
7913: oPop 1
7915: oInput 0
7917: oGetAddrLocal 1
7919: oPushResult
7920: oScopeFindRequire
7921: oAssign
7922: oGetLocal 1
7924: oPushResult
7925: oNodeType
7926: oPop 1
7928: oChoice 7932
7930: oJumpForward 7937
7932: Choice Lookup Table
          23   7930
7935: oError 12
7937: oScopeEnd
7938: oGetAddrLocal 2
7940: oPushResult
7941: oGetLocal 1
7943: oPushResult
7944: oSetResult 22
7946: oPushResult
7947: oNodeGetInt
7948: oPop 2
7950: oAssign
7951: oGetLocal 2
7953: oPushResult
7954: equal_zero
7955: oPop 1
7957: oChoice 7971
7959: oEmit 15
7961: oGetLocal 2
7963: oPushResult
7964: oEmitInt
7965: oPop 1
7967: oEmit 36
7969: oJumpForward 7974
7971: Choice Lookup Table
           0   7959
7974: oTypeSPop
7975: oGetLocal 1
7977: oPushResult
7978: oSetResult 21
7980: oPushResult
7981: oNodeGet
7982: oPop 2
7984: oPushResult
7985: oTypeSPush
7986: oPop 1
7988: oReturn
7989: oLocalSpace 2
7991: oGetAddrLocal 1
7993: oPushResult
7994: oTypeSTop
7995: oPushResult
7996: oSetResult 37
7998: oPushResult
7999: oNodeGet
8000: oPop 2
8002: oAssign
8003: oGetAddrLocal 2
8005: oPushResult
8006: oGetLocal 1
8008: oPushResult
8009: oSetResult 17
8011: oPushResult
8012: oNodeGetInt
8013: oPop 2
8015: oAssign
8016: oGetLocal 2
8018: oPushResult
8019: oSetResult 1
8021: oPushResult
8022: equal
8023: oPop 2
8025: oChoice 8039
8027: oEmit 15
8029: oGetLocal 2
8031: oPushResult
8032: oEmitInt
8033: oPop 1
8035: oEmit 34
8037: oJumpForward 8042
8039: Choice Lookup Table
           0   8027
8042: oEmit 36
8044: oReturn
8045: oLocalSpace 2
8047: oGetAddrLocal 1
8049: oPushResult
8050: oTypeSTop
8051: oPushResult
8052: oSetResult 37
8054: oPushResult
8055: oNodeGet
8056: oPop 2
8058: oAssign
8059: oGetAddrLocal 2
8061: oPushResult
8062: oGetLocal 1
8064: oPushResult
8065: oSetResult 17
8067: oPushResult
8068: oNodeGetInt
8069: oPop 2
8071: oAssign
8072: oGetLocal 2
8074: oPushResult
8075: oSetResult 1
8077: oPushResult
8078: equal
8079: oPop 2
8081: oChoice 8095
8083: oEmit 15
8085: oGetLocal 2
8087: oPushResult
8088: oEmitInt
8089: oPop 1
8091: oEmit 34
8093: oJumpForward 8098
8095: Choice Lookup Table
           0   8083
8098: oEmit 39
8100: oReturn
8101: oLocalSpace 2
8103: oEmit 38
8105: oGetAddrLocal 1
8107: oPushResult
8108: oTypeSTop
8109: oPushResult
8110: oSetResult 37
8112: oPushResult
8113: oNodeGet
8114: oPop 2
8116: oAssign
8117: oGetAddrLocal 2
8119: oPushResult
8120: oGetLocal 1
8122: oPushResult
8123: oSetResult 17
8125: oPushResult
8126: oNodeGetInt
8127: oPop 2
8129: oAssign
8130: oGetLocal 2
8132: oPushResult
8133: oSetResult 1
8135: oPushResult
8136: equal
8137: oPop 2
8139: oChoice 8153
8141: oEmit 15
8143: oGetLocal 2
8145: oPushResult
8146: oEmitInt
8147: oPop 1
8149: oEmit 35
8151: oJumpForward 8156
8153: Choice Lookup Table
           0   8141
8156: oTypeSPop
8157: oGetGlobal 6
8159: oPushResult
8160: oTypeSPush
8161: oPop 1
8163: oReturn
8164: oLocalSpace 1
8166: oTypeSNodeType
8167: oChoice 8175
8169: oJumpForward 8182
8171: oError 29
8173: oJumpForward 8182
8175: Choice Lookup Table
          37   8171
          36   8169
8180: oError 9
8182: oEmit 25
8184: oGetAddrLocal 1
8186: oPushResult
8187: oTypeSTop
8188: oAssign
8189: oTypeSPop
8190: oGetLocal 1
8192: oPushResult
8193: oSetResult 37
8195: oPushResult
8196: oNodeGet
8197: oPop 2
8199: oPushResult
8200: oTypeSPush
8201: oPop 1
8203: oReturn
8204: oLocalSpace 3
8206: oGetAddrLocal 1
8208: oPushResult
8209: oTypeSNodeType
8210: oAssign
8211: oGetAddrLocal 2
8213: oPushResult
8214: oTypeSTop
8215: oAssign
8216: oTypeSPop
8217: oGetLocal 1
8219: oPushResult
8220: oTypeSNodeType
8221: oPushResult
8222: equal_node_type
8223: oPop 2
8225: oChoice 8357
8227: oTypeSNodeType
8228: oChoice 8342
8230: oGetLocal 1
8232: oChoice 8239
8234: oEmit 30
8236: oReturn
8237: oJumpForward 8242
8239: Choice Lookup Table
          29   8234
8242: oJumpForward 8353
8244: oGetLocal 1
8246: oChoice 8253
8248: oEmit 31
8250: oReturn
8251: oJumpForward 8256
8253: Choice Lookup Table
          30   8248
8256: oJumpForward 8353
8258: oGetLocal 1
8260: oChoice 8293
8262: oReturn
8263: oJumpForward 8298
8265: oTypeSTop
8266: oPushResult
8267: oGetGlobal 10
8269: oPushResult
8270: equal_node
8271: oPop 2
8273: oChoice 8288
8275: oEmit 15
8277: oSetResult 1
8279: oPushResult
8280: oEmitInt
8281: oPop 1
8283: oEmit 36
8285: oReturn
8286: oJumpForward 8291
8288: Choice Lookup Table
           1   8275
8291: oJumpForward 8298
8293: Choice Lookup Table
          41   8265
          37   8262
8298: oJumpForward 8353
8300: oGetLocal 1
8302: oChoice 8307
8304: oReturn
8305: oJumpForward 8310
8307: Choice Lookup Table
          36   8304
8310: oJumpForward 8353
8312: oGetLocal 1
8314: oChoice 8335
8316: oReturn
8317: oJumpForward 8340
8319: oGetGlobal 9
8321: oPushResult
8322: oTypeSPush
8323: oPop 1
8325: oGetAddrLocal 3
8327: oPushResult
8328: oCall 10665
8330: oAssign
8331: oTypeSPop
8332: oReturn
8333: oJumpForward 8340
8335: Choice Lookup Table
          35   8319
          41   8316
8340: oJumpForward 8353
8342: Choice Lookup Table
          42   8312
          37   8300
          36   8258
          29   8244
          30   8230
8353: oError 14
8355: oJumpForward 8360
8357: Choice Lookup Table
           0   8227
8360: oReturn
8361: oLocalSpace 2
8363: oGetAddrLocal 1
8365: oPushResult
8366: oTypeSNodeType
8367: oAssign
8368: oTypeSPop
8369: oGetLocal 1
8371: oPushResult
8372: oTypeSNodeType
8373: oPushResult
8374: equal_node_type
8375: oPop 2
8377: oChoice 8537
8379: oTypeSNodeType
8380: oChoice 8516
8382: oGetLocal 1
8384: oChoice 8394
8386: oEmit 30
8388: oReturn
8389: oJumpForward 8405
8391: oReturn
8392: oJumpForward 8405
8394: Choice Lookup Table
          43   8391
          30   8391
          33   8386
          35   8386
          29   8386
8405: oJumpForward 8533
8407: oGetLocal 1
8409: oChoice 8419
8411: oReturn
8412: oJumpForward 8430
8414: oEmit 31
8416: oReturn
8417: oJumpForward 8430
8419: Choice Lookup Table
          43   8414
          30   8414
          33   8411
          35   8411
          29   8411
8430: oJumpForward 8533
8432: oGetLocal 1
8434: oChoice 8467
8436: oReturn
8437: oJumpForward 8472
8439: oTypeSTop
8440: oPushResult
8441: oGetGlobal 10
8443: oPushResult
8444: equal_node
8445: oPop 2
8447: oChoice 8462
8449: oEmit 15
8451: oSetResult 1
8453: oPushResult
8454: oEmitInt
8455: oPop 1
8457: oEmit 36
8459: oReturn
8460: oJumpForward 8465
8462: Choice Lookup Table
           1   8449
8465: oJumpForward 8472
8467: Choice Lookup Table
          41   8439
          37   8436
8472: oJumpForward 8533
8474: oGetLocal 1
8476: oChoice 8481
8478: oReturn
8479: oJumpForward 8484
8481: Choice Lookup Table
          36   8478
8484: oJumpForward 8533
8486: oGetLocal 1
8488: oChoice 8509
8490: oReturn
8491: oJumpForward 8514
8493: oGetGlobal 9
8495: oPushResult
8496: oTypeSPush
8497: oPop 1
8499: oGetAddrLocal 2
8501: oPushResult
8502: oCall 10665
8504: oAssign
8505: oTypeSPop
8506: oReturn
8507: oJumpForward 8514
8509: Choice Lookup Table
          35   8493
          41   8490
8514: oJumpForward 8533
8516: Choice Lookup Table
          42   8486
          37   8474
          36   8432
          33   8407
          35   8407
          29   8407
          43   8382
          30   8382
8533: oError 14
8535: oJumpForward 8540
8537: Choice Lookup Table
           0   8379
8540: oReturn
8541: oLocalSpace 1
8543: oGetAddrLocal 1
8545: oPushResult
8546: oTypeSNodeType
8547: oAssign
8548: oTypeSPop
8549: oGetLocal 1
8551: oPushResult
8552: oTypeSNodeType
8553: oPushResult
8554: equal_node_type
8555: oPop 2
8557: oChoice 8595
8559: oTypeSNodeType
8560: oChoice 8586
8562: oGetLocal 1
8564: oChoice 8569
8566: oReturn
8567: oJumpForward 8572
8569: Choice Lookup Table
          37   8566
8572: oJumpForward 8591
8574: oGetLocal 1
8576: oChoice 8581
8578: oReturn
8579: oJumpForward 8584
8581: Choice Lookup Table
          36   8578
8584: oJumpForward 8591
8586: Choice Lookup Table
          37   8574
          36   8562
8591: oError 14
8593: oJumpForward 8598
8595: Choice Lookup Table
           0   8559
8598: oReturn
8599: oLocalSpace 0
8601: oTypeSNodeType
8602: oChoice 8606
8604: oJumpForward 8611
8606: Choice Lookup Table
          30   8604
8609: oError 7
8611: oTypeSPop
8612: oReturn
8613: oLocalSpace 0
8615: oTypeSNodeType
8616: oChoice 8620
8618: oJumpForward 8625
8620: Choice Lookup Table
          30   8618
8623: oError 7
8625: oReturn
8626: oLocalSpace 0
8628: oTypeSNodeType
8629: oChoice 8637
8631: oJumpForward 8644
8633: oEmit 30
8635: oJumpForward 8644
8637: Choice Lookup Table
          29   8633
          30   8631
8642: oError 7
8644: oTypeSPop
8645: oReturn
8646: oLocalSpace 0
8648: oTypeSNodeType
8649: oChoice 8664
8651: oJumpForward 8671
8653: oEmit 30
8655: oTypeSPop
8656: oGetGlobal 6
8658: oPushResult
8659: oTypeSPush
8660: oPop 1
8662: oJumpForward 8671
8664: Choice Lookup Table
          29   8653
          30   8651
8669: oError 7
8671: oReturn
8672: oLocalSpace 0
8674: oTypeSNodeType
8675: oChoice 8688
8677: oEmit 30
8679: oTypeSPop
8680: oGetGlobal 6
8682: oPushResult
8683: oTypeSPush
8684: oPop 1
8686: oJumpForward 8691
8688: Choice Lookup Table
          29   8677
8691: oReturn
8692: oLocalSpace 0
8694: oTypeSNodeType
8695: oChoice 8699
8697: oJumpForward 8704
8699: Choice Lookup Table
          33   8697
8702: oError 8
8704: oTypeSPop
8705: oReturn
8706: oLocalSpace 0
8708: oTypeSNodeType
8709: oChoice 8713
8711: oJumpForward 8718
8713: Choice Lookup Table
          33   8711
8716: oError 8
8718: oReturn
8719: oLocalSpace 0
8721: oInputChoice 8784
8723: oCall 10444
8725: oJumpForward 8815
8727: oCall 10451
8729: oJumpForward 8815
8731: oCall 10575
8733: oJumpForward 8815
8735: oCall 10582
8737: oJumpForward 8815
8739: oCall 9595
8741: oJumpForward 8815
8743: oCall 9918
8745: oJumpForward 8815
8747: oCall 9661
8749: oJumpForward 8815
8751: oCall 9838
8753: oJumpForward 8815
8755: oCall 10003
8757: oJumpForward 8815
8759: oCall 9971
8761: oJumpForward 8815
8763: oCall 10421
8765: oJumpForward 8815
8767: oCall 8816
8769: oJumpForward 8815
8771: oCall 10035
8773: oJumpForward 8815
8775: oCall 10369
8777: oJumpForward 8815
8779: oChangeIntLitToLabelIdent
8780: oCall 8816
8782: oJumpForward 8815
8784: Choice Lookup Table
           1   8779
          56   8775
          54   8771
           0   8767
          36   8763
          52   8759
          53   8755
          50   8751
          45   8747
          49   8743
          42   8739
          69   8735
          68   8731
          67   8727
          66   8723
8815: oReturn
8816: oLocalSpace 1
8818: oGetAddrLocal 1
8820: oPushResult
8821: oScopeFindRequire
8822: oAssign
8823: oGetAddrLocal 1
8825: oPushResult
8826: oCall 244
8828: oPop 1
8830: oGetLocal 1
8832: oPushResult
8833: oNodeType
8834: oPop 1
8836: oChoice 8876
8838: oGetLocal 1
8840: oPushResult
8841: oCall 8894
8843: oPop 1
8845: oCall 8719
8847: oJumpForward 8893
8849: oGetLocal 1
8851: oPushResult
8852: oCall 10977
8854: oPop 1
8856: oJumpForward 8893
8858: oGetLocal 1
8860: oPushResult
8861: oCall 8944
8863: oPop 1
8865: oJumpForward 8893
8867: oGetLocal 1
8869: oPushResult
8870: oCall 9034
8872: oPop 1
8874: oJumpForward 8893
8876: Choice Lookup Table
          13   8867
          19   8858
          24   8858
          22   8858
          21   8858
          12   8849
          26   8838
8891: oError 0
8893: oReturn
8894: oLocalSpace 0
8896: oGetParam 1
8898: oPushResult
8899: oSetResult 35
8901: oPushResult
8902: oNodeGetBoolean
8903: oPop 2
8905: oChoice 8911
8907: oError 21
8909: oJumpForward 8914
8911: Choice Lookup Table
           1   8907
8914: oEmit 77
8916: oGetParam 1
8918: oPushResult
8919: oSetResult 22
8921: oPushResult
8922: oNodeGetLabel
8923: oPop 2
8925: oPushResult
8926: oEmitLabel
8927: oPop 1
8929: oGetParam 1
8931: oPushResult
8932: oSetResult 35
8934: oPushResult
8935: oSetResult 1
8937: oPushResult
8938: oNodeSetBoolean
8939: oPop 3
8941: oInput 13
8943: oReturn
8944: oLocalSpace 0
8946: oGetParam 1
8948: oPushResult
8949: oSetResult 1
8951: oPushResult
8952: oCall 9188
8954: oPop 2
8956: oInput 5
8958: oCall 4881
8960: oCall 8204
8962: oCall 8965
8964: oReturn
8965: oLocalSpace 1
8967: oTypeSNodeType
8968: oChoice 9008
8970: oEmit 26
8972: oJumpForward 9032
8974: oEmit 27
8976: oJumpForward 9032
8978: oError 16
8980: oJumpForward 9032
8982: oEmit 28
8984: oJumpForward 9032
8986: oGetAddrLocal 1
8988: oPushResult
8989: oTypeSTop
8990: oPushResult
8991: oSetResult 17
8993: oPushResult
8994: oNodeGetInt
8995: oPop 2
8997: oAssign
8998: oEmit 29
9000: oGetLocal 1
9002: oPushResult
9003: oEmitInt
9004: oPop 1
9006: oJumpForward 9032
9008: Choice Lookup Table
          42   8986
          40   8986
          38   8986
          37   8982
          36   8982
          28   8978
          35   8974
          29   8974
          33   8974
          43   8970
          30   8970
9031: oEndChoice
9032: oTypeSPop
9033: oReturn
9034: oLocalSpace 1
9036: oGetParam 1
9038: oPushResult
9039: oSetResult 6
9041: oPushResult
9042: oNodeGet
9043: oPop 2
9045: oPushResult
9046: oScopeCurrent
9047: oPushResult
9048: oNodeEqual
9049: oPop 2
9051: oChoice 9057
9053: oError 20
9055: oJumpForward 9060
9057: Choice Lookup Table
           0   9053
9060: oEmit 8
9062: oGetParam 1
9064: oPushResult
9065: oSetResult 31
9067: oPushResult
9068: oNodeGetInt
9069: oPop 2
9071: oPushResult
9072: oEmitInt
9073: oPop 1
9075: oGetParam 1
9077: oPushResult
9078: oSetResult 21
9080: oPushResult
9081: oNodeGet
9082: oPop 2
9084: oPushResult
9085: oTypeSPush
9086: oPop 1
9088: oInput 5
9090: oCall 4881
9092: oCall 8204
9094: oTypeSNodeType
9095: oChoice 9135
9097: oEmit 26
9099: oJumpForward 9159
9101: oEmit 27
9103: oJumpForward 9159
9105: oError 16
9107: oJumpForward 9159
9109: oEmit 28
9111: oJumpForward 9159
9113: oGetAddrLocal 1
9115: oPushResult
9116: oTypeSTop
9117: oPushResult
9118: oSetResult 17
9120: oPushResult
9121: oNodeGetInt
9122: oPop 2
9124: oAssign
9125: oEmit 29
9127: oGetLocal 1
9129: oPushResult
9130: oEmitInt
9131: oPop 1
9133: oJumpForward 9159
9135: Choice Lookup Table
          42   9113
          40   9113
          38   9113
          37   9109
          36   9109
          28   9105
          35   9101
          29   9101
          33   9101
          43   9097
          30   9097
9158: oEndChoice
9159: oTypeSPop
9160: oReturn
9161: oLocalSpace 1
9163: oInput 0
9165: oGetAddrLocal 1
9167: oPushResult
9168: oScopeFindRequire
9169: oAssign
9170: oGetAddrLocal 1
9172: oPushResult
9173: oCall 244
9175: oPop 1
9177: oGetLocal 1
9179: oPushResult
9180: oGetParam 1
9182: oPushResult
9183: oCall 9188
9185: oPop 2
9187: oReturn
9188: oLocalSpace 0
9190: oGetParam 2
9192: oPushResult
9193: oNodeType
9194: oPop 1
9196: oChoice 9259
9198: oGetParam 2
9200: oPushResult
9201: oGetParam 1
9203: oPushResult
9204: oCall 9405
9206: oPop 2
9208: oJumpForward 9272
9210: oGetParam 2
9212: oPushResult
9213: oSetResult 21
9215: oPushResult
9216: oNodeGet
9217: oPop 2
9219: oPushResult
9220: oTypeSPush
9221: oPop 1
9223: oInput 15
9225: oGetParam 1
9227: oPushResult
9228: oCall 9161
9230: oPop 1
9232: oInput 16
9234: oCall 9273
9236: oTypeSNodeType
9237: oChoice 9252
9239: oInputChoice 9247
9241: oEmit 25
9243: oCall 7782
9245: oJumpForward 9250
9247: Choice Lookup Table
          17   9241
9250: oJumpForward 9255
9252: Choice Lookup Table
          36   9239
9255: oCall 7587
9257: oJumpForward 9272
9259: Choice Lookup Table
          19   9210
          25   9198
          24   9198
          22   9198
          21   9198
9270: oError 4
9272: oReturn
9273: oLocalSpace 1
9275: oGetAddrLocal 1
9277: oPushResult
9278: oTypeSNodeType
9279: oAssign
9280: oTypeSPop
9281: oGetLocal 1
9283: oPushResult
9284: oTypeSNodeType
9285: oPushResult
9286: equal_node_type
9287: oPop 2
9289: oChoice 9401
9291: oTypeSNodeType
9292: oChoice 9380
9294: oGetLocal 1
9296: oChoice 9306
9298: oError 30
9300: oReturn
9301: oJumpForward 9317
9303: oReturn
9304: oJumpForward 9317
9306: Choice Lookup Table
          43   9303
          30   9303
          33   9298
          35   9298
          29   9298
9317: oJumpForward 9397
9319: oGetLocal 1
9321: oChoice 9331
9323: oReturn
9324: oJumpForward 9342
9326: oError 30
9328: oReturn
9329: oJumpForward 9342
9331: Choice Lookup Table
          43   9326
          30   9326
          33   9323
          35   9323
          29   9323
9342: oJumpForward 9397
9344: oGetLocal 1
9346: oChoice 9351
9348: oReturn
9349: oJumpForward 9354
9351: Choice Lookup Table
          37   9348
9354: oJumpForward 9397
9356: oGetLocal 1
9358: oChoice 9363
9360: oReturn
9361: oJumpForward 9366
9363: Choice Lookup Table
          36   9360
9366: oJumpForward 9397
9368: oGetLocal 1
9370: oChoice 9375
9372: oReturn
9373: oJumpForward 9378
9375: Choice Lookup Table
          41   9372
9378: oJumpForward 9397
9380: Choice Lookup Table
          42   9368
          37   9356
          36   9344
          33   9319
          35   9319
          29   9319
          43   9294
          30   9294
9397: oError 14
9399: oJumpForward 9404
9401: Choice Lookup Table
           0   9291
9404: oReturn
9405: oLocalSpace 0
9407: oGetParam 2
9409: oPushResult
9410: oNodeType
9411: oPop 1
9413: oChoice 9495
9415: oEmit 16
9417: oGetParam 2
9419: oPushResult
9420: oCall 14010
9422: oPop 1
9424: oJumpForward 9506
9426: oEmit 17
9428: oGetParam 2
9430: oPushResult
9431: oCall 14010
9433: oPop 1
9435: oJumpForward 9506
9437: oGetParam 2
9439: oPushResult
9440: oSetResult 34
9442: oPushResult
9443: oNodeGetBoolean
9444: oPop 2
9446: oChoice 9459
9448: oEmit 8
9450: oGetParam 2
9452: oPushResult
9453: oCall 14010
9455: oPop 1
9457: oJumpForward 9471
9459: Choice Lookup Table
           1   9448
9462: oEmit 18
9464: oGetParam 2
9466: oPushResult
9467: oCall 14010
9469: oPop 1
9471: oJumpForward 9506
9473: oGetParam 1
9475: oChoice 9488
9477: oEmit 16
9479: oGetParam 2
9481: oPushResult
9482: oCall 14010
9484: oPop 1
9486: oJumpForward 9493
9488: Choice Lookup Table
           0   9477
9491: oError 4
9493: oJumpForward 9506
9495: Choice Lookup Table
          25   9473
          24   9437
          22   9426
          21   9415
9504: oError 4
9506: oGetParam 2
9508: oPushResult
9509: oSetResult 21
9511: oPushResult
9512: oNodeGet
9513: oPop 2
9515: oPushResult
9516: oTypeSPush
9517: oPop 1
9519: oTypeSNodeType
9520: oChoice 9535
9522: oInputChoice 9530
9524: oEmit 25
9526: oCall 7782
9528: oJumpForward 9533
9530: Choice Lookup Table
          17   9524
9533: oJumpForward 9538
9535: Choice Lookup Table
          36   9522
9538: oCall 7587
9540: oReturn
9541: oLocalSpace 0
9543: oGetParam 1
9545: oPushResult
9546: oSetResult 1
9548: oPushResult
9549: oCall 9405
9551: oPop 2
9553: oCall 8599
9555: oGetParam 1
9557: oPushResult
9558: oCall 6776
9560: oPop 1
9562: oTypeSPop
9563: oEmit 32
9565: oEmit 26
9567: oReturn
9568: oLocalSpace 0
9570: oGetParam 1
9572: oPushResult
9573: oSetResult 1
9575: oPushResult
9576: oCall 9405
9578: oPop 2
9580: oCall 8599
9582: oGetParam 1
9584: oPushResult
9585: oCall 6776
9587: oPop 1
9589: oTypeSPop
9590: oEmit 33
9592: oEmit 26
9594: oReturn
9595: oLocalSpace 2
9597: oGetAddrLocal 1
9599: oPushResult
9600: oSetResult 0
9602: oAssign
9603: oGetAddrLocal 1
9605: oPushResult
9606: oCall 4927
9608: oPop 1
9610: oInput 43
9612: oCall 8719
9614: oInputChoice 9649
9616: oGetAddrLocal 2
9618: oPushResult
9619: oLabelNew
9620: oAssign
9621: oEmit 68
9623: oGetLocal 2
9625: oPushResult
9626: oEmitLabel
9627: oPop 1
9629: oEmit 77
9631: oGetLocal 1
9633: oPushResult
9634: oEmitLabel
9635: oPop 1
9637: oCall 8719
9639: oEmit 77
9641: oGetLocal 2
9643: oPushResult
9644: oEmitLabel
9645: oPop 1
9647: oJumpForward 9660
9649: Choice Lookup Table
          44   9616
9652: oEmit 77
9654: oGetLocal 1
9656: oPushResult
9657: oEmitLabel
9658: oPop 1
9660: oReturn
9661: oLocalSpace 4
9663: oInput 0
9665: oGetAddrLocal 1
9667: oPushResult
9668: oScopeFindRequire
9669: oAssign
9670: oGetLocal 1
9672: oPushResult
9673: oSetResult 1
9675: oPushResult
9676: oCall 9405
9678: oPop 2
9680: oCall 8599
9682: oInput 5
9684: oCall 4881
9686: oCall 8599
9688: oEmit 26
9690: oGetAddrLocal 2
9692: oPushResult
9693: oLabelNew
9694: oAssign
9695: oGetAddrLocal 3
9697: oPushResult
9698: oLabelNew
9699: oAssign
9700: oEmit 68
9702: oGetLocal 3
9704: oPushResult
9705: oEmitLabel
9706: oPop 1
9708: oGetAddrLocal 4
9710: oPushResult
9711: oLabelNew
9712: oAssign
9713: oEmit 77
9715: oGetLocal 4
9717: oPushResult
9718: oEmitLabel
9719: oPop 1
9721: oInputChoice 9801
9723: oGetLocal 1
9725: oPushResult
9726: oCall 9541
9728: oPop 1
9730: oEmit 77
9732: oGetLocal 3
9734: oPushResult
9735: oEmitLabel
9736: oPop 1
9738: oGetLocal 1
9740: oPushResult
9741: oCall 6776
9743: oPop 1
9745: oTypeSPop
9746: oCall 4881
9748: oCall 8599
9750: oEmit 51
9752: oEmit 69
9754: oGetLocal 2
9756: oPushResult
9757: oEmitLabel
9758: oPop 1
9760: oJumpForward 9807
9762: oGetLocal 1
9764: oPushResult
9765: oCall 9568
9767: oPop 1
9769: oEmit 77
9771: oGetLocal 3
9773: oPushResult
9774: oEmitLabel
9775: oPop 1
9777: oGetLocal 1
9779: oPushResult
9780: oCall 6776
9782: oPop 1
9784: oTypeSPop
9785: oCall 4881
9787: oCall 8599
9789: oEmit 52
9791: oEmit 69
9793: oGetLocal 2
9795: oPushResult
9796: oEmitLabel
9797: oPop 1
9799: oJumpForward 9807
9801: Choice Lookup Table
          47   9762
          46   9723
9806: oEndChoice
9807: oGetLocal 4
9809: oPushResult
9810: oGetLocal 2
9812: oPushResult
9813: oLoopPush
9814: oPop 2
9816: oInput 48
9818: oCall 8719
9820: oEmit 68
9822: oGetLocal 4
9824: oPushResult
9825: oEmitLabel
9826: oPop 1
9828: oEmit 77
9830: oGetLocal 2
9832: oPushResult
9833: oEmitLabel
9834: oPop 1
9836: oLoopPop
9837: oReturn
9838: oLocalSpace 3
9840: oGetAddrLocal 1
9842: oPushResult
9843: oLabelNew
9844: oAssign
9845: oEmit 77
9847: oGetLocal 1
9849: oPushResult
9850: oEmitLabel
9851: oPop 1
9853: oGetAddrLocal 2
9855: oPushResult
9856: oLabelNew
9857: oAssign
9858: oGetLocal 1
9860: oPushResult
9861: oGetLocal 2
9863: oPushResult
9864: oLoopPush
9865: oPop 2
9867: oCall 8719
9869: oInputChoice 9900
9871: oCall 8719
9873: oJumpForward 9906
9875: oGetAddrLocal 3
9877: oPushResult
9878: oCall 4927
9880: oPop 1
9882: oEmit 78
9884: oGetLocal 3
9886: oPushResult
9887: oEmitLabel
9888: oPop 1
9890: oGetLocal 1
9892: oPushResult
9893: oEmitLabel
9894: oPop 1
9896: oJumpForward 9908
9898: oJumpForward 9906
9900: Choice Lookup Table
          51   9875
           6   9871
9905: oEndChoice
9906: oJumpBack 9869
9908: oEmit 77
9910: oGetLocal 2
9912: oPushResult
9913: oEmitLabel
9914: oPop 1
9916: oLoopPop
9917: oReturn
9918: oLocalSpace 2
9920: oGetAddrLocal 1
9922: oPushResult
9923: oLabelNew
9924: oAssign
9925: oEmit 77
9927: oGetLocal 1
9929: oPushResult
9930: oEmitLabel
9931: oPop 1
9933: oGetAddrLocal 2
9935: oPushResult
9936: oCall 4927
9938: oPop 1
9940: oGetLocal 1
9942: oPushResult
9943: oGetLocal 2
9945: oPushResult
9946: oLoopPush
9947: oPop 2
9949: oInput 48
9951: oCall 8719
9953: oEmit 68
9955: oGetLocal 1
9957: oPushResult
9958: oEmitLabel
9959: oPop 1
9961: oEmit 77
9963: oGetLocal 2
9965: oPushResult
9966: oEmitLabel
9967: oPop 1
9969: oLoopPop
9970: oReturn
9971: oLocalSpace 0
9973: oLoopContinueLabel
9974: oPushResult
9975: oSetResult 0
9977: oPushResult
9978: equal_label
9979: oPop 2
9981: oChoice 9996
9983: oError 18
9985: oJumpForward 10002
9987: oEmit 68
9989: oLoopContinueLabel
9990: oPushResult
9991: oEmitLabel
9992: oPop 1
9994: oJumpForward 10002
9996: Choice Lookup Table
           0   9987
           1   9983
10001: oEndChoice
10002: oReturn
10003: oLocalSpace 0
10005: oLoopBreakLabel
10006: oPushResult
10007: oSetResult 0
10009: oPushResult
10010: equal_label
10011: oPop 2
10013: oChoice 10028
10015: oError 18
10017: oJumpForward 10034
10019: oEmit 68
10021: oLoopBreakLabel
10022: oPushResult
10023: oEmitLabel
10024: oPop 1
10026: oJumpForward 10034
10028: Choice Lookup Table
           0   10019
           1   10015
10033: oEndChoice
10034: oReturn
10035: oLocalSpace 8
10037: oGetAddrLocal 1
10039: oPushResult
10040: oCodeNew
10041: oAssign
10042: oGetAddrLocal 2
10044: oPushResult
10045: oLabelNew
10046: oAssign
10047: oGetAddrLocal 3
10049: oPushResult
10050: oLabelNew
10051: oAssign
10052: oGetAddrLocal 4
10054: oPushResult
10055: oGetLocal 3
10057: oAssign
10058: oGetAddrLocal 5
10060: oPushResult
10061: oSetResult 0
10063: oAssign
10064: oCall 4881
10066: oTypeSNodeType
10067: oChoice 10105
10069: oEmit 71
10071: oGetLocal 2
10073: oPushResult
10074: oEmitLabel
10075: oPop 1
10077: oJumpForward 10122
10079: oEmit 72
10081: oGetLocal 2
10083: oPushResult
10084: oEmitLabel
10085: oPop 1
10087: oJumpForward 10122
10089: oGetAddrLocal 5
10091: oPushResult
10092: oSetResult 1
10094: oAssign
10095: oEmit 73
10097: oGetLocal 2
10099: oPushResult
10100: oEmitLabel
10101: oPop 1
10103: oJumpForward 10122
10105: Choice Lookup Table
          41   10089
          42   10089
          43   10079
          30   10079
          35   10069
          29   10069
          33   10069
10120: oError 17
10122: oInput 41
10124: oInputChoice 10171
10126: oGetAddrLocal 4
10128: oPushResult
10129: oLabelNew
10130: oAssign
10131: oEmit 77
10133: oGetLocal 4
10135: oPushResult
10136: oEmitLabel
10137: oPop 1
10139: oInputChoice 10145
10141: oJumpForward 10163
10143: oJumpForward 10161
10145: Choice Lookup Table
          37   10141
10148: oCall 8719
10150: oInputChoice 10154
10152: oJumpForward 10161
10154: Choice Lookup Table
           6   10152
10157: oInput 37
10159: oJumpForward 10163
10161: oJumpBack 10139
10163: oJumpForward 10337
10165: oJumpForward 10335
10167: oJumpForward 10337
10169: oJumpForward 10335
10171: Choice Lookup Table
          37   10167
          44   10126
          55   10126
10178: oGetAddrLocal 6
10180: oPushResult
10181: oLabelNew
10182: oAssign
10183: oGetLocal 1
10185: oPushResult
10186: oCodePush
10187: oPop 1
10189: oCall 3533
10191: oCall 4345
10193: oGetLocal 5
10195: oChoice 10215
10197: oGetAddrLocal 7
10199: oPushResult
10200: oValueTopString
10201: oPushResult
10202: oStringAllocShortStringLit
10203: oPop 1
10205: oAssign
10206: oJumpForward 10221
10208: oGetAddrLocal 7
10210: oPushResult
10211: oValueTop
10212: oAssign
10213: oJumpForward 10221
10215: Choice Lookup Table
           0   10208
           1   10197
10220: oEndChoice
10221: oValuePop
10222: oInputChoice 10279
10224: oCall 3533
10226: oCall 4345
10228: oGetLocal 5
10230: oChoice 10250
10232: oGetAddrLocal 8
10234: oPushResult
10235: oValueTopString
10236: oPushResult
10237: oStringAllocShortStringLit
10238: oPop 1
10240: oAssign
10241: oJumpForward 10256
10243: oGetAddrLocal 8
10245: oPushResult
10246: oValueTop
10247: oAssign
10248: oJumpForward 10256
10250: Choice Lookup Table
           0   10243
           1   10232
10255: oEndChoice
10256: oValuePop
10257: oEmit 75
10259: oGetLocal 7
10261: oPushResult
10262: oEmitInt
10263: oPop 1
10265: oGetLocal 8
10267: oPushResult
10268: oEmitInt
10269: oPop 1
10271: oGetLocal 6
10273: oPushResult
10274: oEmitLabel
10275: oPop 1
10277: oJumpForward 10296
10279: Choice Lookup Table
          22   10224
10282: oEmit 74
10284: oGetLocal 7
10286: oPushResult
10287: oEmitInt
10288: oPop 1
10290: oGetLocal 6
10292: oPushResult
10293: oEmitLabel
10294: oPop 1
10296: oInputChoice 10300
10298: oJumpForward 10305
10300: Choice Lookup Table
          14   10298
10303: oJumpForward 10307
10305: oJumpBack 10189
10307: oCodePop
10308: oInput 13
10310: oEmit 77
10312: oGetLocal 6
10314: oPushResult
10315: oEmitLabel
10316: oPop 1
10318: oCall 8719
10320: oEmit 68
10322: oGetLocal 3
10324: oPushResult
10325: oEmitLabel
10326: oPop 1
10328: oInputChoice 10332
10330: oJumpForward 10335
10332: Choice Lookup Table
           6   10330
10335: oJumpBack 10124
10337: oEmit 77
10339: oGetLocal 2
10341: oPushResult
10342: oEmitLabel
10343: oPop 1
10345: oGetLocal 1
10347: oPushResult
10348: oEmitCode
10349: oPop 1
10351: oEmit 76
10353: oGetLocal 4
10355: oPushResult
10356: oEmitLabel
10357: oPop 1
10359: oEmit 77
10361: oGetLocal 3
10363: oPushResult
10364: oEmitLabel
10365: oPop 1
10367: oTypeSPop
10368: oReturn
10369: oLocalSpace 1
10371: oInputChoice 10378
10373: oJumpForward 10384
10375: oChangeIntLitToLabelIdent
10376: oJumpForward 10384
10378: Choice Lookup Table
           1   10375
           0   10373
10383: oEndChoice
10384: oGetAddrLocal 1
10386: oPushResult
10387: oScopeCurrent
10388: oPushResult
10389: oScopeFindRequireInScope
10390: oPop 1
10392: oAssign
10393: oGetLocal 1
10395: oPushResult
10396: oSetResult 28
10398: oPushResult
10399: oSetResult 1
10401: oPushResult
10402: oNodeSetBoolean
10403: oPop 3
10405: oEmit 68
10407: oGetLocal 1
10409: oPushResult
10410: oSetResult 22
10412: oPushResult
10413: oNodeGetLabel
10414: oPop 2
10416: oPushResult
10417: oEmitLabel
10418: oPop 1
10420: oReturn
10421: oLocalSpace 0
10423: oCall 8719
10425: oInputChoice 10435
10427: oCall 8719
10429: oJumpForward 10441
10431: oJumpForward 10443
10433: oJumpForward 10441
10435: Choice Lookup Table
          37   10431
           6   10427
10440: oEndChoice
10441: oJumpBack 10425
10443: oReturn
10444: oLocalSpace 0
10446: oCall 10451
10448: oEmit 87
10450: oReturn
10451: oLocalSpace 0
10453: oInputChoice 10571
10455: oCall 4881
10457: oTypeSNodeType
10458: oChoice 10529
10460: oEmit 80
10462: oJumpForward 10552
10464: oEmit 81
10466: oJumpForward 10552
10468: oEmit 30
10470: oEmit 80
10472: oJumpForward 10552
10474: oEmit 82
10476: oJumpForward 10552
10478: oEmit 83
10480: oJumpForward 10552
10482: oError 16
10484: oJumpForward 10552
10486: oEmit 16
10488: oTypeSTop
10489: oPushResult
10490: oSetResult 43
10492: oPushResult
10493: oNodeGetInt
10494: oPop 2
10496: oPushResult
10497: oEmitInt
10498: oPop 1
10500: oEmit 86
10502: oJumpForward 10552
10504: oTypeSTop
10505: oPushResult
10506: oGetGlobal 10
10508: oPushResult
10509: equal_node
10510: oPop 2
10512: oChoice 10518
10514: oEmit 84
10516: oJumpForward 10523
10518: Choice Lookup Table
           1   10514
10521: oEmit 85
10523: oJumpForward 10552
10525: oEmit 85
10527: oJumpForward 10552
10529: Choice Lookup Table
          37   10525
          36   10504
          43   10486
          28   10482
          41   10478
          42   10478
          35   10474
          29   10468
          33   10464
          30   10460
10550: oError 17
10552: oTypeSPop
10553: oInputChoice 10561
10555: oJumpForward 10569
10557: oJumpForward 10567
10559: oJumpForward 10567
10561: Choice Lookup Table
          14   10559
          16   10555
10566: oEndChoice
10567: oJumpBack 10455
10569: oJumpForward 10574
10571: Choice Lookup Table
          15   10455
10574: oReturn
10575: oLocalSpace 0
10577: oCall 10582
10579: oEmit 91
10581: oReturn
10582: oLocalSpace 1
10584: oInputChoice 10661
10586: oSetResult 1
10588: oPushResult
10589: oCall 9161
10591: oPop 1
10593: oTypeSNodeType
10594: oChoice 10633
10596: oEmit 88
10598: oJumpForward 10642
10600: oEmit 89
10602: oJumpForward 10642
10604: oGetAddrLocal 1
10606: oPushResult
10607: oTypeSTop
10608: oPushResult
10609: oSetResult 17
10611: oPushResult
10612: oNodeGetInt
10613: oPop 2
10615: oPushResult
10616: oSetResult 1
10618: oPushResult
10619: subtract
10620: oPop 2
10622: oAssign
10623: oEmit 90
10625: oGetLocal 1
10627: oPushResult
10628: oEmitInt
10629: oPop 1
10631: oJumpForward 10642
10633: Choice Lookup Table
          42   10604
          35   10600
          30   10596
10640: oError 17
10642: oTypeSPop
10643: oInputChoice 10651
10645: oJumpForward 10659
10647: oJumpForward 10657
10649: oJumpForward 10657
10651: Choice Lookup Table
          14   10649
          16   10645
10656: oEndChoice
10657: oJumpBack 10586
10659: oJumpForward 10664
10661: Choice Lookup Table
          15   10586
10664: oReturn
10665: oLocalSpace 1
10667: oGetAddrLocal 1
10669: oPushResult
10670: oGetGlobal 16
10672: oPushResult
10673: oScopeAllocType
10674: oPop 1
10676: oAssign
10677: oTypeSNodeType
10678: oChoice 10746
10680: oEmit 17
10682: oGetLocal 1
10684: oPushResult
10685: oEmitInt
10686: oPop 1
10688: oEmit 22
10690: oEmit 29
10692: oGetGlobal 16
10694: oPushResult
10695: oSetResult 17
10697: oPushResult
10698: oNodeGetInt
10699: oPop 2
10701: oPushResult
10702: oEmitInt
10703: oPop 1
10705: oJumpForward 10755
10707: oEmit 17
10709: oGetLocal 1
10711: oPushResult
10712: oEmitInt
10713: oPop 1
10715: oEmit 15
10717: oSetResult 1
10719: oPushResult
10720: oEmitInt
10721: oPop 1
10723: oEmit 27
10725: oEmit 17
10727: oGetLocal 1
10729: oPushResult
10730: oSetResult 1
10732: oPushResult
10733: add
10734: oPop 2
10736: oPushResult
10737: oEmitInt
10738: oPop 1
10740: oEmit 22
10742: oEmit 27
10744: oJumpForward 10755
10746: Choice Lookup Table
          35   10707
          41   10680
          42   10680
10753: oError 14
10755: oTypeSPop
10756: oEmit 17
10758: oGetLocal 1
10760: oPushResult
10761: oEmitInt
10762: oPop 1
10764: oGetGlobal 16
10766: oPushResult
10767: oTypeSPush
10768: oPop 1
10770: oGetLocal 1
10772: oReturn
10773: oReturn
10774: oLocalSpace 0
10776: oEmit 61
10778: oSetResult 16
10780: oPushResult
10781: oEmitInt
10782: oPop 1
10784: oEmit 19
10786: oSetResult 8
10788: oPushResult
10789: oEmitInt
10790: oPop 1
10792: oEmit 22
10794: oEmit 28
10796: oEmit 19
10798: oSetResult 0
10800: oPushResult
10801: oEmitInt
10802: oPop 1
10804: oEmit 22
10806: oEmit 28
10808: oEmit 64
10810: oGetGlobal 22
10812: oPushResult
10813: oCall 14010
10815: oPop 1
10817: oEmit 63
10819: oSetResult 16
10821: oPushResult
10822: oEmitInt
10823: oPop 1
10825: oTypeSPop
10826: oTypeSPop
10827: oReturn
10828: oLocalSpace 0
10830: oEmit 61
10832: oSetResult 12
10834: oPushResult
10835: oEmitInt
10836: oPop 1
10838: oEmit 19
10840: oSetResult 8
10842: oPushResult
10843: oEmitInt
10844: oPop 1
10846: oEmit 22
10848: oEmit 27
10850: oEmit 19
10852: oSetResult 0
10854: oPushResult
10855: oEmitInt
10856: oPop 1
10858: oEmit 22
10860: oEmit 28
10862: oEmit 64
10864: oGetGlobal 23
10866: oPushResult
10867: oCall 14010
10869: oPop 1
10871: oEmit 63
10873: oSetResult 12
10875: oPushResult
10876: oEmitInt
10877: oPop 1
10879: oTypeSPop
10880: oTypeSPop
10881: oReturn
10882: oLocalSpace 1
10884: oEmit 62
10886: oSetResult 24
10888: oPushResult
10889: oEmitInt
10890: oPop 1
10892: oEmit 19
10894: oSetResult 8
10896: oPushResult
10897: oEmitInt
10898: oPop 1
10900: oEmit 22
10902: oEmit 28
10904: oEmit 19
10906: oSetResult 0
10908: oPushResult
10909: oEmitInt
10910: oPop 1
10912: oEmit 22
10914: oEmit 28
10916: oGetAddrLocal 1
10918: oPushResult
10919: oGetGlobal 6
10921: oPushResult
10922: oScopeAllocType
10923: oPop 1
10925: oAssign
10926: oEmit 19
10928: oSetResult 16
10930: oPushResult
10931: oEmitInt
10932: oPop 1
10934: oEmit 17
10936: oGetLocal 1
10938: oPushResult
10939: oEmitInt
10940: oPop 1
10942: oEmit 28
10944: oEmit 65
10946: oGetGlobal 24
10948: oPushResult
10949: oCall 14010
10951: oPop 1
10953: oEmit 3
10955: oGetLocal 1
10957: oPushResult
10958: oEmitInt
10959: oPop 1
10961: oEmit 63
10963: oSetResult 24
10965: oPushResult
10966: oEmitInt
10967: oPop 1
10969: oTypeSPop
10970: oGetGlobal 6
10972: oPushResult
10973: oTypeSPush
10974: oPop 1
10976: oReturn
10977: oLocalSpace 10
10979: oGetParam 1
10981: oPushResult
10982: oSetResult 28
10984: oPushResult
10985: oSetResult 1
10987: oPushResult
10988: oNodeSetBoolean
10989: oPop 3
10991: oGetAddrLocal 1
10993: oPushResult
10994: oGetParam 1
10996: oPushResult
10997: oSetResult 27
10999: oPushResult
11000: oNodeGetBoolean
11001: oPop 2
11003: oAssign
11004: oGetAddrLocal 4
11006: oPushResult
11007: oGetParam 1
11009: oPushResult
11010: oNodeType
11011: oPop 1
11013: oPushResult
11014: oSetResult 13
11016: oPushResult
11017: equal_node_type
11018: oPop 2
11020: oAssign
11021: oGetLocal 4
11023: oChoice 11050
11025: oGetAddrLocal 2
11027: oPushResult
11028: oGetParam 1
11030: oPushResult
11031: oSetResult 21
11033: oPushResult
11034: oNodeGet
11035: oPop 2
11037: oAssign
11038: oGetAddrLocal 3
11040: oPushResult
11041: oGetLocal 2
11043: oPushResult
11044: oScopeAllocType
11045: oPop 1
11047: oAssign
11048: oJumpForward 11053
11050: Choice Lookup Table
           1   11025
11053: oGetAddrLocal 5
11055: oPushResult
11056: oGetParam 1
11058: oPushResult
11059: oSetResult 23
11061: oPushResult
11062: oNodeGet
11063: oPop 2
11065: oAssign
11066: oGetAddrLocal 6
11068: oPushResult
11069: oGetLocal 5
11071: oPushResult
11072: oSetResult 17
11074: oPushResult
11075: oNodeGetInt
11076: oPop 2
11078: oAssign
11079: oGetLocal 1
11081: oChoice 11103
11083: oEmit 62
11085: oGetLocal 6
11087: oPushResult
11088: oEmitInt
11089: oPop 1
11091: oJumpForward 11109
11093: oEmit 61
11095: oGetLocal 6
11097: oPushResult
11098: oEmitInt
11099: oPop 1
11101: oJumpForward 11109
11103: Choice Lookup Table
           0   11093
           1   11083
11108: oEndChoice
11109: oGetParam 1
11111: oPushResult
11112: oCall 13944
11114: oPop 1
11116: oPushResult
11117: oSetResult 0
11119: oPushResult
11120: greater
11121: oPop 2
11123: oChoice 11156
11125: oEmit 19
11127: oSetResult 0
11129: oPushResult
11130: oEmitInt
11131: oPop 1
11133: oEmit 20
11135: oGetParam 1
11137: oPushResult
11138: oCall 13964
11140: oPop 1
11142: oPushResult
11143: oEmitInt
11144: oPop 1
11146: oSetResult 0
11148: oPushResult
11149: oEmitInt
11150: oPop 1
11152: oEmit 28
11154: oJumpForward 11159
11156: Choice Lookup Table
           1   11125
11159: oGetAddrLocal 7
11161: oPushResult
11162: oGetLocal 5
11164: oPushResult
11165: oSetResult 15
11167: oPushResult
11168: oNodeGetIter
11169: oPop 2
11171: oAssign
11172: oGetAddrLocal 8
11174: oPushResult
11175: oGetLocal 7
11177: oPushResult
11178: oNodeIterValue
11179: oPop 1
11181: oAssign
11182: oInputChoice 11379
11184: oGetLocal 8
11186: oPushResult
11187: oNodeNull
11188: oPop 1
11190: oChoice 11196
11192: oJumpForward 11375
11194: oJumpForward 11199
11196: Choice Lookup Table
           1   11192
11199: oGetAddrLocal 9
11201: oPushResult
11202: oGetLocal 8
11204: oPushResult
11205: oSetResult 22
11207: oPushResult
11208: oNodeGetInt
11209: oPop 2
11211: oAssign
11212: oEmit 19
11214: oGetLocal 9
11216: oPushResult
11217: oEmitInt
11218: oPop 1
11220: oGetLocal 8
11222: oPushResult
11223: oSetResult 21
11225: oPushResult
11226: oNodeGet
11227: oPop 2
11229: oPushResult
11230: oTypeSPush
11231: oPop 1
11233: oGetLocal 8
11235: oPushResult
11236: oSetResult 34
11238: oPushResult
11239: oNodeGetBoolean
11240: oPop 2
11242: oChoice 11328
11244: oSetResult 1
11246: oPushResult
11247: oCall 9161
11249: oPop 1
11251: oCall 8541
11253: oEmit 28
11255: oJumpForward 11334
11257: oCall 4881
11259: oCall 8204
11261: oTypeSNodeType
11262: oChoice 11302
11264: oEmit 26
11266: oJumpForward 11326
11268: oEmit 27
11270: oJumpForward 11326
11272: oError 16
11274: oJumpForward 11326
11276: oEmit 28
11278: oJumpForward 11326
11280: oGetAddrLocal 10
11282: oPushResult
11283: oTypeSTop
11284: oPushResult
11285: oSetResult 17
11287: oPushResult
11288: oNodeGetInt
11289: oPop 2
11291: oAssign
11292: oEmit 29
11294: oGetLocal 10
11296: oPushResult
11297: oEmitInt
11298: oPop 1
11300: oJumpForward 11326
11302: Choice Lookup Table
          42   11280
          40   11280
          38   11280
          37   11276
          36   11276
          28   11272
          35   11268
          29   11268
          33   11268
          43   11264
          30   11264
11325: oEndChoice
11326: oJumpForward 11334
11328: Choice Lookup Table
           0   11257
           1   11244
11333: oEndChoice
11334: oTypeSPop
11335: oGetAddrLocal 7
11337: oPushResult
11338: oNodeIterNext
11339: oPop 1
11341: oGetAddrLocal 8
11343: oPushResult
11344: oGetLocal 7
11346: oPushResult
11347: oNodeIterValue
11348: oPop 1
11350: oAssign
11351: oGetLocal 8
11353: oPushResult
11354: oNodeNull
11355: oPop 1
11357: oChoice 11365
11359: oJumpForward 11375
11361: oJumpForward 11371
11363: oJumpForward 11371
11365: Choice Lookup Table
           0   11363
           1   11359
11370: oEndChoice
11371: oInput 14
11373: oJumpBack 11184
11375: oInput 16
11377: oJumpForward 11382
11379: Choice Lookup Table
          15   11184
11382: oGetLocal 8
11384: oPushResult
11385: oNodeNull
11386: oPop 1
11388: oChoice 11394
11390: oError 15
11392: oJumpForward 11397
11394: Choice Lookup Table
           0   11390
11397: oGetLocal 4
11399: oChoice 11428
11401: oEmit 19
11403: oGetParam 1
11405: oPushResult
11406: oSetResult 31
11408: oPushResult
11409: oNodeGetInt
11410: oPop 2
11412: oPushResult
11413: oEmitInt
11414: oPop 1
11416: oEmit 17
11418: oGetLocal 3
11420: oPushResult
11421: oEmitInt
11422: oPop 1
11424: oEmit 28
11426: oJumpForward 11431
11428: Choice Lookup Table
           1   11401
11431: oGetLocal 1
11433: oChoice 11457
11435: oEmit 65
11437: oGetParam 1
11439: oPushResult
11440: oCall 14010
11442: oPop 1
11444: oJumpForward 11463
11446: oEmit 64
11448: oGetParam 1
11450: oPushResult
11451: oCall 14010
11453: oPop 1
11455: oJumpForward 11463
11457: Choice Lookup Table
           0   11446
           1   11435
11462: oEndChoice
11463: oGetLocal 4
11465: oChoice 11546
11467: oGetLocal 2
11469: oPushResult
11470: oTypeSPush
11471: oPop 1
11473: oTypeSNodeType
11474: oChoice 11520
11476: oEmit 3
11478: oGetLocal 3
11480: oPushResult
11481: oEmitInt
11482: oPop 1
11484: oJumpForward 11544
11486: oEmit 4
11488: oGetLocal 3
11490: oPushResult
11491: oEmitInt
11492: oPop 1
11494: oJumpForward 11544
11496: oError 16
11498: oJumpForward 11544
11500: oEmit 5
11502: oGetLocal 3
11504: oPushResult
11505: oEmitInt
11506: oPop 1
11508: oJumpForward 11544
11510: oEmit 17
11512: oGetLocal 3
11514: oPushResult
11515: oEmitInt
11516: oPop 1
11518: oJumpForward 11544
11520: Choice Lookup Table
          42   11510
          40   11510
          38   11510
          37   11500
          36   11500
          28   11496
          35   11486
          29   11486
          33   11486
          43   11476
          30   11476
11543: oEndChoice
11544: oJumpForward 11549
11546: Choice Lookup Table
           1   11467
11549: oEmit 63
11551: oGetLocal 6
11553: oPushResult
11554: oEmitInt
11555: oPop 1
11557: oReturn
11558: oLocalSpace 2
11560: oGetAddrLocal 2
11562: oPushResult
11563: oGetParam 1
11565: oPushResult
11566: oSetResult 26
11568: oPushResult
11569: oNodeGetString
11570: oPop 2
11572: oAssign
11573: oGetLocal 2
11575: oPushResult
11576: oSetResult 0
11578: oPushResult
11579: equal_string
11580: oPop 2
11582: oChoice 11619
11584: oGetAddrLocal 1
11586: oPushResult
11587: oGetParam 1
11589: oPushResult
11590: oSetResult 4
11592: oPushResult
11593: oNodeGetInt
11594: oPop 2
11596: oPushResult
11597: ID_STRING
11598: oPop 1
11600: oPushResult
11601: oStringAllocLit
11602: oPop 1
11604: oAssign
11605: oJumpForward 11625
11607: oGetAddrLocal 1
11609: oPushResult
11610: oGetLocal 2
11612: oPushResult
11613: oStringAllocLit
11614: oPop 1
11616: oAssign
11617: oJumpForward 11625
11619: Choice Lookup Table
           0   11607
           1   11584
11624: oEndChoice
11625: oEmit 79
11627: oGetParam 1
11629: oPushResult
11630: oCall 14010
11632: oPop 1
11634: oGetLocal 1
11636: oPushResult
11637: oEmitInt
11638: oPop 1
11640: oReturn
11641: oLocalSpace 2
11643: oGetParam 1
11645: oPushResult
11646: oGetGlobal 17
11648: oPushResult
11649: oNodeEqual
11650: oPop 2
11652: oChoice 11692
11654: oInput 15
11656: oCall 4881
11658: oTypeSNodeType
11659: oChoice 11667
11661: oJumpForward 11680
11663: oEmit 30
11665: oJumpForward 11680
11667: Choice Lookup Table
          35   11663
          29   11663
          33   11663
          43   11661
          30   11661
11678: oError 14
11680: oTypeSPop
11681: oGetGlobal 6
11683: oPushResult
11684: oTypeSPush
11685: oPop 1
11687: oInput 16
11689: oReturn
11690: oJumpForward 11695
11692: Choice Lookup Table
           1   11654
11695: oGetParam 1
11697: oPushResult
11698: oGetGlobal 18
11700: oPushResult
11701: oNodeEqual
11702: oPop 2
11704: oChoice 11738
11706: oInput 15
11708: oCall 4881
11710: oTypeSNodeType
11711: oChoice 11719
11713: oEmit 31
11715: oJumpForward 11726
11717: oJumpForward 11726
11719: Choice Lookup Table
          29   11717
          30   11713
11724: oError 14
11726: oTypeSPop
11727: oGetGlobal 9
11729: oPushResult
11730: oTypeSPush
11731: oPop 1
11733: oInput 16
11735: oReturn
11736: oJumpForward 11741
11738: Choice Lookup Table
           1   11706
11741: oGetParam 1
11743: oPushResult
11744: oGetGlobal 19
11746: oPushResult
11747: oNodeEqual
11748: oPop 2
11750: oChoice 11790
11752: oInput 15
11754: oCall 4881
11756: oTypeSNodeType
11757: oChoice 11778
11759: oTypeSTop
11760: oPushResult
11761: oSetResult 44
11763: oPushResult
11764: oNodeGetBoolean
11765: oPop 2
11767: oChoice 11773
11769: oError 28
11771: oJumpForward 11776
11773: Choice Lookup Table
           1   11769
11776: oJumpForward 11783
11778: Choice Lookup Table
          43   11759
11781: oError 14
11783: oEmit 33
11785: oInput 16
11787: oReturn
11788: oJumpForward 11793
11790: Choice Lookup Table
           1   11752
11793: oGetParam 1
11795: oPushResult
11796: oGetGlobal 20
11798: oPushResult
11799: oNodeEqual
11800: oPop 2
11802: oChoice 11842
11804: oInput 15
11806: oCall 4881
11808: oTypeSNodeType
11809: oChoice 11830
11811: oTypeSTop
11812: oPushResult
11813: oSetResult 44
11815: oPushResult
11816: oNodeGetBoolean
11817: oPop 2
11819: oChoice 11825
11821: oError 28
11823: oJumpForward 11828
11825: Choice Lookup Table
           1   11821
11828: oJumpForward 11835
11830: Choice Lookup Table
          43   11811
11833: oError 14
11835: oEmit 32
11837: oInput 16
11839: oReturn
11840: oJumpForward 11845
11842: Choice Lookup Table
           1   11804
11845: oGetParam 1
11847: oPushResult
11848: oGetGlobal 21
11850: oPushResult
11851: oNodeEqual
11852: oPop 2
11854: oChoice 11910
11856: oInput 15
11858: oGetAddrLocal 1
11860: oPushResult
11861: oCodeNew
11862: oAssign
11863: oGetLocal 1
11865: oPushResult
11866: oCodePush
11867: oPop 1
11869: oCall 4904
11871: oCodePop
11872: oGetLocal 1
11874: oPushResult
11875: oCodeDiscard
11876: oPop 1
11878: oGetAddrLocal 2
11880: oPushResult
11881: oTypeSTop
11882: oAssign
11883: oTypeSPop
11884: oEmit 15
11886: oGetLocal 2
11888: oPushResult
11889: oSetResult 17
11891: oPushResult
11892: oNodeGetInt
11893: oPop 2
11895: oPushResult
11896: oEmitInt
11897: oPop 1
11899: oGetGlobal 6
11901: oPushResult
11902: oTypeSPush
11903: oPop 1
11905: oInput 16
11907: oReturn
11908: oJumpForward 11913
11910: Choice Lookup Table
           1   11856
11913: oError 16
11915: oReturn
11916: oLocalSpace 1
11918: oGetAddrLocal 1
11920: oPushResult
11921: oGetParam 2
11923: oPushResult
11924: oNodeNew
11925: oPop 1
11927: oAssign
11928: oGetLocal 1
11930: oPushResult
11931: oSetResult 17
11933: oPushResult
11934: oGetParam 1
11936: oPushResult
11937: oNodeSetInt
11938: oPop 3
11940: oGetLocal 1
11942: oPushResult
11943: oTypeAdd
11944: oPop 1
11946: oGetLocal 1
11948: oReturn
11949: oReturn
11950: oLocalSpace 12
11952: oInputChoice 12435
11954: oGetAddrLocal 1
11956: oPushResult
11957: oScopeFindRequire
11958: oAssign
11959: oGetAddrLocal 1
11961: oPushResult
11962: oCall 244
11964: oPop 1
11966: oGetLocal 1
11968: oPushResult
11969: oNodeType
11970: oPop 1
11972: oChoice 11989
11974: oGetParam 1
11976: oPushResult
11977: oGetLocal 1
11979: oPushResult
11980: oSetResult 21
11982: oPushResult
11983: oNodeGet
11984: oPop 2
11986: oAssign
11987: oJumpForward 12000
11989: Choice Lookup Table
          19   11974
11992: oError 2
11994: oGetParam 1
11996: oPushResult
11997: oGetGlobal 6
11999: oAssign
12000: oJumpForward 12458
12002: oInput 17
12004: oGetAddrLocal 2
12006: oPushResult
12007: oNodeVecNew
12008: oAssign
12009: oGetAddrLocal 3
12011: oPushResult
12012: oSetResult 39
12014: oPushResult
12015: oNodeNew
12016: oPop 1
12018: oAssign
12019: oCall 3533
12021: oGetLocal 3
12023: oPushResult
12024: oSetResult 39
12026: oPushResult
12027: oValueTop
12028: oPushResult
12029: oNodeSetInt
12030: oPop 3
12032: oValuePop
12033: oInput 22
12035: oCall 3533
12037: oGetLocal 3
12039: oPushResult
12040: oSetResult 40
12042: oPushResult
12043: oValueTop
12044: oPushResult
12045: oNodeSetInt
12046: oPop 3
12048: oValuePop
12049: oCall 4248
12051: oGetLocal 3
12053: oPushResult
12054: oSetResult 37
12056: oPushResult
12057: oTypeSTop
12058: oPushResult
12059: oNodeSet
12060: oPop 3
12062: oGetLocal 3
12064: oPushResult
12065: oSetResult 17
12067: oPushResult
12068: oTypeSTop
12069: oPushResult
12070: oSetResult 17
12072: oPushResult
12073: oNodeGetInt
12074: oPop 2
12076: oPushResult
12077: oNodeSetInt
12078: oPop 3
12080: oTypeSPop
12081: oGetLocal 3
12083: oPushResult
12084: oTypeAdd
12085: oPop 1
12087: oGetAddrLocal 4
12089: oPushResult
12090: oSetResult 38
12092: oPushResult
12093: oNodeNew
12094: oPop 1
12096: oAssign
12097: oGetLocal 4
12099: oPushResult
12100: oSetResult 38
12102: oPushResult
12103: oGetLocal 3
12105: oPushResult
12106: oNodeSet
12107: oPop 3
12109: oGetLocal 2
12111: oPushResult
12112: oGetLocal 4
12114: oPushResult
12115: oNodeVecAppend
12116: oPop 2
12118: oInputChoice 12126
12120: oJumpForward 12134
12122: oJumpForward 12132
12124: oJumpForward 12132
12126: Choice Lookup Table
          14   12124
          18   12120
12131: oEndChoice
12132: oJumpBack 12009
12134: oInput 41
12136: oGetAddrLocal 5
12138: oPushResult
12139: oCall 11950
12141: oPop 1
12143: oGetAddrLocal 6
12145: oPushResult
12146: oGetLocal 2
12148: oPushResult
12149: oNodeVecSize
12150: oPop 1
12152: oAssign
12153: oGetAddrLocal 6
12155: oPushResult
12156: dec
12157: oPop 1
12159: oGetAddrLocal 7
12161: oPushResult
12162: oGetLocal 2
12164: oPushResult
12165: oGetLocal 6
12167: oPushResult
12168: oNodeVecElement
12169: oPop 2
12171: oAssign
12172: oGetLocal 7
12174: oPushResult
12175: oSetResult 37
12177: oPushResult
12178: oGetLocal 5
12180: oPushResult
12181: oNodeSet
12182: oPop 3
12184: oGetAddrLocal 8
12186: oPushResult
12187: oGetLocal 7
12189: oPushResult
12190: oSetResult 38
12192: oPushResult
12193: oNodeGet
12194: oPop 2
12196: oAssign
12197: oGetAddrLocal 9
12199: oPushResult
12200: oGetLocal 8
12202: oPushResult
12203: oSetResult 40
12205: oPushResult
12206: oNodeGetInt
12207: oPop 2
12209: oPushResult
12210: oGetLocal 8
12212: oPushResult
12213: oSetResult 39
12215: oPushResult
12216: oNodeGetInt
12217: oPop 2
12219: oPushResult
12220: subtract
12221: oPop 2
12223: oAssign
12224: oGetAddrLocal 9
12226: oPushResult
12227: inc
12228: oPop 1
12230: oGetLocal 7
12232: oPushResult
12233: oSetResult 17
12235: oPushResult
12236: oGetLocal 9
12238: oPushResult
12239: oGetLocal 5
12241: oPushResult
12242: oSetResult 17
12244: oPushResult
12245: oNodeGetInt
12246: oPop 2
12248: oPushResult
12249: multiply
12250: oPop 2
12252: oPushResult
12253: oNodeSetInt
12254: oPop 3
12256: oGetLocal 7
12258: oPushResult
12259: oTypeAdd
12260: oPop 1
12262: oGetAddrLocal 5
12264: oPushResult
12265: oGetLocal 7
12267: oAssign
12268: oGetLocal 6
12270: oPushResult
12271: equal_zero
12272: oPop 1
12274: oChoice 12280
12276: oJumpForward 12285
12278: oJumpForward 12283
12280: Choice Lookup Table
           1   12276
12283: oJumpBack 12153
12285: oGetParam 1
12287: oPushResult
12288: oGetLocal 2
12290: oPushResult
12291: oSetResult 0
12293: oPushResult
12294: oNodeVecElement
12295: oPop 2
12297: oAssign
12298: oGetLocal 2
12300: oPushResult
12301: oNodeVecDelete
12302: oPop 1
12304: oJumpForward 12458
12306: oGetAddrLocal 10
12308: oPushResult
12309: oCall 11950
12311: oPop 1
12313: oGetParam 1
12315: oPushResult
12316: oGetLocal 10
12318: oPushResult
12319: oCall 13029
12321: oPop 1
12323: oAssign
12324: oJumpForward 12458
12326: oGetParam 1
12328: oPushResult
12329: oSetResult 40
12331: oPushResult
12332: oNodeNew
12333: oPop 1
12335: oAssign
12336: oSetResult -1
12338: oPushResult
12339: oSetResult 2
12341: oPushResult
12342: oScopeBegin
12343: oPop 2
12345: oSetResult 23
12347: oPushResult
12348: oCall 3234
12350: oPop 1
12352: oGetAddrLocal 11
12354: oPushResult
12355: oScopeCurrent
12356: oPushResult
12357: oSetResult 17
12359: oPushResult
12360: oNodeGetInt
12361: oPop 2
12363: oAssign
12364: oGetLocal 11
12366: oPushResult
12367: equal_zero
12368: oPop 1
12370: oChoice 12376
12372: oError 19
12374: oJumpForward 12379
12376: Choice Lookup Table
           1   12372
12379: oInput 37
12381: oGetFromParam 1
12383: oPushResult
12384: oSetResult 41
12386: oPushResult
12387: oScopeCurrent
12388: oPushResult
12389: oNodeSet
12390: oPop 3
12392: oGetFromParam 1
12394: oPushResult
12395: oSetResult 17
12397: oPushResult
12398: oGetLocal 11
12400: oPushResult
12401: oNodeSetInt
12402: oPop 3
12404: oScopeEnd
12405: oGetFromParam 1
12407: oPushResult
12408: oTypeAdd
12409: oPop 1
12411: oJumpForward 12458
12413: oGetParam 1
12415: oPushResult
12416: oCall 12459
12418: oPop 1
12420: oJumpForward 12458
12422: oInput 41
12424: oGetAddrLocal 12
12426: oPushResult
12427: oCall 11950
12429: oPop 1
12431: oError 16
12433: oJumpForward 12458
12435: Choice Lookup Table
          40   12422
          15   12413
          39   12326
          19   12306
          38   12002
           0   11954
12448: oCall 3533
12450: oInput 22
12452: oCall 3533
12454: oCall 4248
12456: oError 16
12458: oReturn
12459: oLocalSpace 11
12461: oGetParam 1
12463: oPushResult
12464: oSetResult 43
12466: oPushResult
12467: oNodeNew
12468: oPop 1
12470: oAssign
12471: oGetAddrLocal 1
12473: oPushResult
12474: oSetResult 0
12476: oAssign
12477: oGetAddrLocal 2
12479: oPushResult
12480: oSetResult 0
12482: oAssign
12483: oGetAddrLocal 3
12485: oPushResult
12486: oSetResult 1
12488: oAssign
12489: oGetAddrLocal 4
12491: oPushResult
12492: oScopeCurrent
12493: oAssign
12494: oSetResult -1
12496: oPushResult
12497: oSetResult 2
12499: oPushResult
12500: oScopeBegin
12501: oPop 2
12503: oInput 0
12505: oGetAddrLocal 5
12507: oPushResult
12508: oSetResult 17
12510: oPushResult
12511: LAST_ID
12512: oPushResult
12513: oCall 13982
12515: oPop 2
12517: oAssign
12518: oGetAddrLocal 6
12520: oPushResult
12521: oSetResult 17
12523: oPushResult
12524: LAST_ID
12525: oPushResult
12526: oCall 13982
12528: oPop 2
12530: oAssign
12531: oGetLocal 5
12533: oPushResult
12534: oSetResult 21
12536: oPushResult
12537: oGetFromParam 1
12539: oPushResult
12540: oNodeSet
12541: oPop 3
12543: oGetLocal 6
12545: oPushResult
12546: oSetResult 21
12548: oPushResult
12549: oGetFromParam 1
12551: oPushResult
12552: oNodeSet
12553: oPop 3
12555: oGetAddrLocal 7
12557: oPushResult
12558: LAST_ID
12559: oPushResult
12560: ID_STRING
12561: oPop 1
12563: oPushResult
12564: oStringAllocLit
12565: oPop 1
12567: oAssign
12568: oGetLocal 5
12570: oPushResult
12571: oSetResult 32
12573: oPushResult
12574: oGetLocal 7
12576: oPushResult
12577: oNodeSetInt
12578: oPop 3
12580: oGetLocal 6
12582: oPushResult
12583: oSetResult 32
12585: oPushResult
12586: oGetLocal 7
12588: oPushResult
12589: oNodeSetInt
12590: oPop 3
12592: oInputChoice 12670
12594: oGetGlobal 6
12596: oPushResult
12597: oTypeSPush
12598: oPop 1
12600: oCall 3533
12602: oCall 4345
12604: oTypeSPop
12605: oGetLocal 2
12607: oPushResult
12608: equal_zero
12609: oPop 1
12611: oChoice 12632
12613: oValueTop
12614: oPushResult
12615: oGetLocal 1
12617: oPushResult
12618: greater
12619: oPop 2
12621: oChoice 12627
12623: oError 26
12625: oJumpForward 12630
12627: Choice Lookup Table
           0   12623
12630: oJumpForward 12635
12632: Choice Lookup Table
           0   12613
12635: oGetLocal 1
12637: oPushResult
12638: oValueTop
12639: oPushResult
12640: equal
12641: oPop 2
12643: oChoice 12659
12645: oGetFromParam 1
12647: oPushResult
12648: oSetResult 44
12650: oPushResult
12651: oSetResult 1
12653: oPushResult
12654: oNodeSetBoolean
12655: oPop 3
12657: oJumpForward 12662
12659: Choice Lookup Table
           0   12645
12662: oGetAddrLocal 1
12664: oPushResult
12665: oValueTop
12666: oAssign
12667: oValuePop
12668: oJumpForward 12675
12670: Choice Lookup Table
           5   12594
           7   12594
12675: oGetLocal 5
12677: oPushResult
12678: oSetResult 22
12680: oPushResult
12681: oGetLocal 1
12683: oPushResult
12684: oNodeSetInt
12685: oPop 3
12687: oGetLocal 6
12689: oPushResult
12690: oSetResult 22
12692: oPushResult
12693: oGetLocal 1
12695: oPushResult
12696: oNodeSetInt
12697: oPop 3
12699: oGetLocal 5
12701: oPushResult
12702: oScopeDeclare
12703: oPop 1
12705: oGetLocal 4
12707: oPushResult
12708: oScopeEnter
12709: oPop 1
12711: oGetLocal 6
12713: oPushResult
12714: oScopeDeclare
12715: oPop 1
12717: oScopeEnd
12718: oGetAddrLocal 1
12720: oPushResult
12721: inc
12722: oPop 1
12724: oGetAddrLocal 2
12726: oPushResult
12727: inc
12728: oPop 1
12730: oInputChoice 12734
12732: oJumpForward 12739
12734: Choice Lookup Table
          14   12732
12737: oJumpForward 12741
12739: oJumpBack 12503
12741: oInput 16
12743: oGetFromParam 1
12745: oPushResult
12746: oSetResult 41
12748: oPushResult
12749: oScopeCurrent
12750: oPushResult
12751: oNodeSet
12752: oPop 3
12754: oGetFromParam 1
12756: oPushResult
12757: oSetResult 17
12759: oPushResult
12760: oSetResult 4
12762: oPushResult
12763: oNodeSetInt
12764: oPop 3
12766: oScopeEnd
12767: oGetGlobal 2
12769: oPushResult
12770: oCall 13880
12772: oPop 1
12774: oPushResult
12775: oCodePush
12776: oPop 1
12778: oGetGlobal 2
12780: oPushResult
12781: oScopeEnter
12782: oPop 1
12784: oGetAddrLocal 8
12786: oPushResult
12787: oGetLocal 2
12789: oPushResult
12790: oSetResult 1
12792: oPushResult
12793: add
12794: oPop 2
12796: oPushResult
12797: oSetResult 16
12799: oPushResult
12800: multiply
12801: oPop 2
12803: oAssign
12804: oGetAddrLocal 9
12806: oPushResult
12807: oGetLocal 8
12809: oPushResult
12810: oSetResult 8
12812: oPushResult
12813: oScopeAlloc
12814: oPop 2
12816: oAssign
12817: oScopeEnd
12818: oGetFromParam 1
12820: oPushResult
12821: oSetResult 43
12823: oPushResult
12824: oGetLocal 9
12826: oPushResult
12827: oNodeSetInt
12828: oPop 3
12830: oGetAddrLocal 10
12832: oPushResult
12833: oGetFromParam 1
12835: oPushResult
12836: oSetResult 41
12838: oPushResult
12839: oNodeGet
12840: oPop 2
12842: oPushResult
12843: oSetResult 15
12845: oPushResult
12846: oNodeGetIter
12847: oPop 2
12849: oAssign
12850: oGetAddrLocal 11
12852: oPushResult
12853: oGetLocal 10
12855: oPushResult
12856: oNodeIterValue
12857: oPop 1
12859: oAssign
12860: oGetLocal 11
12862: oPushResult
12863: oNodeNull
12864: oPop 1
12866: oChoice 12872
12868: oJumpForward 12959
12870: oJumpForward 12875
12872: Choice Lookup Table
           1   12868
12875: oEmit 16
12877: oGetLocal 9
12879: oPushResult
12880: oEmitInt
12881: oPop 1
12883: oEmit 15
12885: oGetLocal 11
12887: oPushResult
12888: oSetResult 22
12890: oPushResult
12891: oNodeGetInt
12892: oPop 2
12894: oPushResult
12895: oEmitInt
12896: oPop 1
12898: oEmit 26
12900: oGetAddrLocal 9
12902: oPushResult
12903: oGetLocal 9
12905: oPushResult
12906: oSetResult 8
12908: oPushResult
12909: add
12910: oPop 2
12912: oAssign
12913: oEmit 16
12915: oGetLocal 9
12917: oPushResult
12918: oEmitInt
12919: oPop 1
12921: oEmit 16
12923: oGetLocal 11
12925: oPushResult
12926: oSetResult 32
12928: oPushResult
12929: oNodeGetInt
12930: oPop 2
12932: oPushResult
12933: oEmitInt
12934: oPop 1
12936: oEmit 28
12938: oGetAddrLocal 9
12940: oPushResult
12941: oGetLocal 9
12943: oPushResult
12944: oSetResult 8
12946: oPushResult
12947: add
12948: oPop 2
12950: oAssign
12951: oGetAddrLocal 10
12953: oPushResult
12954: oNodeIterNext
12955: oPop 1
12957: oJumpBack 12850
12959: oEmit 16
12961: oGetLocal 9
12963: oPushResult
12964: oEmitInt
12965: oPop 1
12967: oEmit 15
12969: oSetResult 0
12971: oPushResult
12972: oEmitInt
12973: oPop 1
12975: oEmit 26
12977: oGetAddrLocal 9
12979: oPushResult
12980: oGetLocal 9
12982: oPushResult
12983: oSetResult 8
12985: oPushResult
12986: add
12987: oPop 2
12989: oAssign
12990: oEmit 16
12992: oGetLocal 9
12994: oPushResult
12995: oEmitInt
12996: oPop 1
12998: oEmit 15
13000: oSetResult 0
13002: oPushResult
13003: oEmitInt
13004: oPop 1
13006: oEmit 28
13008: oGetAddrLocal 9
13010: oPushResult
13011: oGetLocal 9
13013: oPushResult
13014: oSetResult 8
13016: oPushResult
13017: add
13018: oPop 2
13020: oAssign
13021: oCodePop
13022: oGetFromParam 1
13024: oPushResult
13025: oTypeAdd
13026: oPop 1
13028: oReturn
13029: oLocalSpace 1
13031: oGetAddrLocal 1
13033: oPushResult
13034: oGetParam 1
13036: oPushResult
13037: oSetResult 36
13039: oPushResult
13040: oNodeGet
13041: oPop 2
13043: oAssign
13044: oGetLocal 1
13046: oPushResult
13047: oNodeNull
13048: oPop 1
13050: oChoice 13106
13052: oGetAddrLocal 1
13054: oPushResult
13055: oSetResult 36
13057: oPushResult
13058: oNodeNew
13059: oPop 1
13061: oAssign
13062: oGetLocal 1
13064: oPushResult
13065: oSetResult 37
13067: oPushResult
13068: oGetParam 1
13070: oPushResult
13071: oNodeSet
13072: oPop 3
13074: oGetLocal 1
13076: oPushResult
13077: oSetResult 17
13079: oPushResult
13080: oSetResult 8
13082: oPushResult
13083: oNodeSetInt
13084: oPop 3
13086: oGetLocal 1
13088: oPushResult
13089: oTypeAdd
13090: oPop 1
13092: oGetParam 1
13094: oPushResult
13095: oSetResult 36
13097: oPushResult
13098: oGetLocal 1
13100: oPushResult
13101: oNodeSet
13102: oPop 3
13104: oJumpForward 13109
13106: Choice Lookup Table
           1   13052
13109: oGetLocal 1
13111: oReturn
13112: oReturn
13113: oLocalSpace 2
13115: oGetParam 1
13117: oPushResult
13118: oNodeType
13119: oPop 1
13121: oChoice 13191
13123: oMININT
13124: oReturn
13125: oJumpForward 13207
13127: oSetResult 0
13129: oReturn
13130: oJumpForward 13207
13132: oSetResult 0
13134: oReturn
13135: oJumpForward 13207
13137: oGetAddrLocal 1
13139: oPushResult
13140: oGetParam 1
13142: oPushResult
13143: oSetResult 41
13145: oPushResult
13146: oNodeGet
13147: oPop 2
13149: oAssign
13150: oGetAddrLocal 2
13152: oPushResult
13153: oGetLocal 1
13155: oPushResult
13156: oSetResult 15
13158: oPushResult
13159: oNodeGetIter
13160: oPop 2
13162: oPushResult
13163: oNodeIterValue
13164: oPop 1
13166: oAssign
13167: oGetLocal 2
13169: oPushResult
13170: oSetResult 22
13172: oPushResult
13173: oNodeGetInt
13174: oPop 2
13176: oReturn
13177: oJumpForward 13207
13179: oGetParam 1
13181: oPushResult
13182: oSetResult 39
13184: oPushResult
13185: oNodeGetInt
13186: oPop 2
13188: oReturn
13189: oJumpForward 13207
13191: Choice Lookup Table
          39   13179
          43   13137
          35   13132
          33   13127
          30   13123
13202: oError 3
13204: oSetResult 0
13206: oReturn
13207: oReturn
13208: oLocalSpace 2
13210: oGetParam 1
13212: oPushResult
13213: oNodeType
13214: oPop 1
13216: oChoice 13286
13218: oMAXINT
13219: oReturn
13220: oJumpForward 13302
13222: oSetResult 1
13224: oReturn
13225: oJumpForward 13302
13227: oSetResult 255
13229: oReturn
13230: oJumpForward 13302
13232: oGetAddrLocal 1
13234: oPushResult
13235: oGetParam 1
13237: oPushResult
13238: oSetResult 41
13240: oPushResult
13241: oNodeGet
13242: oPop 2
13244: oAssign
13245: oGetAddrLocal 2
13247: oPushResult
13248: oGetLocal 1
13250: oPushResult
13251: oSetResult 15
13253: oPushResult
13254: oNodeGetIterLast
13255: oPop 2
13257: oPushResult
13258: oNodeIterValue
13259: oPop 1
13261: oAssign
13262: oGetLocal 2
13264: oPushResult
13265: oSetResult 22
13267: oPushResult
13268: oNodeGetInt
13269: oPop 2
13271: oReturn
13272: oJumpForward 13302
13274: oGetParam 1
13276: oPushResult
13277: oSetResult 40
13279: oPushResult
13280: oNodeGetInt
13281: oPop 2
13283: oReturn
13284: oJumpForward 13302
13286: Choice Lookup Table
          39   13274
          43   13232
          35   13227
          33   13222
          30   13218
13297: oError 3
13299: oSetResult 0
13301: oReturn
13302: oReturn
13303: oLocalSpace 5
13305: oGetAddrGlobal 1
13307: oPushResult
13308: oWorkspaceNew
13309: oAssign
13310: oSetResult 0
13312: oPushResult
13313: oSetResult 0
13315: oPushResult
13316: oScopeBegin
13317: oPop 2
13319: oGetAddrLocal 2
13321: oPushResult
13322: oScopeCurrent
13323: oAssign
13324: oCall 14052
13326: oEmit 67
13328: oSetResult 0
13330: oPushResult
13331: oEmitInt
13332: oPop 1
13334: oGetAddrLocal 3
13336: oPushResult
13337: oLabelNew
13338: oAssign
13339: oEmit 61
13341: oSetResult 0
13343: oPushResult
13344: oEmitInt
13345: oPop 1
13347: oEmit 64
13349: oGetLocal 3
13351: oPushResult
13352: oEmitLabel
13353: oPop 1
13355: oEmit 63
13357: oSetResult 0
13359: oPushResult
13360: oEmitInt
13361: oPop 1
13363: oEmit 66
13365: oInput 29
13367: oInput 0
13369: oGetAddrLocal 4
13371: oPushResult
13372: oSetResult 4
13374: oPushResult
13375: oNodeNew
13376: oPop 1
13378: oAssign
13379: oGetLocal 4
13381: oPushResult
13382: oSetResult 4
13384: oPushResult
13385: LAST_ID
13386: oPushResult
13387: oNodeSetInt
13388: oPop 3
13390: oGetGlobal 1
13392: oPushResult
13393: oSetResult 2
13395: oPushResult
13396: oGetLocal 4
13398: oPushResult
13399: oNodeSet
13400: oPop 3
13402: oInputChoice 13476
13404: oInput 0
13406: oGetAddrLocal 1
13408: oPushResult
13409: oSetResult 20
13411: oPushResult
13412: LAST_ID
13413: oPushResult
13414: oCall 13982
13416: oPop 2
13418: oAssign
13419: oGetLocal 1
13421: oPushResult
13422: oSetResult 21
13424: oPushResult
13425: oGetGlobal 5
13427: oPushResult
13428: oNodeSet
13429: oPop 3
13431: oGetLocal 1
13433: oPushResult
13434: oScopeDeclareAlloc
13435: oPop 1
13437: oInput 14
13439: oInput 0
13441: oGetAddrLocal 1
13443: oPushResult
13444: oSetResult 20
13446: oPushResult
13447: LAST_ID
13448: oPushResult
13449: oCall 13982
13451: oPop 2
13453: oAssign
13454: oGetLocal 1
13456: oPushResult
13457: oSetResult 21
13459: oPushResult
13460: oGetGlobal 5
13462: oPushResult
13463: oNodeSet
13464: oPop 3
13466: oGetLocal 1
13468: oPushResult
13469: oScopeDeclareAlloc
13470: oPop 1
13472: oInput 16
13474: oJumpForward 13479
13476: Choice Lookup Table
          15   13404
13479: oInput 6
13481: oGetLocal 4
13483: oPushResult
13484: oCall 34
13486: oPop 1
13488: oInputChoice 13499
13490: oGetLocal 4
13492: oPushResult
13493: oCall 7
13495: oPop 1
13497: oJumpForward 13502
13499: Choice Lookup Table
          60   13490
13502: oGetLocal 4
13504: oPushResult
13505: oCall 287
13507: oPop 1
13509: oSetResult 0
13511: oPushResult
13512: oSetResult 0
13514: oPushResult
13515: oScopeBegin
13516: oPop 2
13518: oGetAddrGlobal 2
13520: oPushResult
13521: oScopeCurrent
13522: oAssign
13523: oSetResult 0
13525: oPushResult
13526: oSetResult 1
13528: oPushResult
13529: oScopeBegin
13530: oPop 2
13532: oScopeCurrent
13533: oPushResult
13534: oSetResult 16
13536: oPushResult
13537: oGetGlobal 2
13539: oPushResult
13540: oNodeSet
13541: oPop 3
13543: oGetAddrGlobal 3
13545: oPushResult
13546: oScopeCurrent
13547: oAssign
13548: oGetLocal 4
13550: oPushResult
13551: oSetResult 7
13553: oPushResult
13554: oGetGlobal 3
13556: oPushResult
13557: oNodeSet
13558: oPop 3
13560: oScopeEnd
13561: oSetResult 21
13563: oPushResult
13564: oCall 13631
13566: oPop 1
13568: oGetGlobal 3
13570: oPushResult
13571: oScopeEnter
13572: oPop 1
13574: oGetAddrLocal 5
13576: oPushResult
13577: oSetResult 1
13579: oAssign
13580: oGetLocal 3
13582: oPushResult
13583: oGetGlobal 2
13585: oPushResult
13586: oGetLocal 5
13588: oPushResult
13589: oCall 13782
13591: oPop 3
13593: oScopeEnd
13594: oInput 21
13596: oCall 13687
13598: oScopeEnd
13599: oGetLocal 4
13601: oPushResult
13602: oCall 349
13604: oPop 1
13606: oReturn
13607: oLocalSpace 0
13609: oGetParam 2
13611: oPushResult
13612: oCall 13631
13614: oPop 1
13616: oGetParam 1
13618: oPushResult
13619: oScopeCurrent
13620: oPushResult
13621: oSetResult 0
13623: oPushResult
13624: oCall 13782
13626: oPop 3
13628: oCall 13687
13630: oReturn
13631: oLocalSpace 0
13633: oInputChoice 13664
13635: oCall 2520
13637: oJumpForward 13679
13639: oCall 3178
13641: oJumpForward 13679
13643: oGetParam 1
13645: oPushResult
13646: oCall 3234
13648: oPop 1
13650: oJumpForward 13679
13652: oCall 3468
13654: oJumpForward 13679
13656: oCall 1743
13658: oJumpForward 13679
13660: oCall 2178
13662: oJumpForward 13679
13664: Choice Lookup Table
          31   13660
          30   13656
          35   13652
          34   13643
          33   13639
          32   13635
13677: oJumpForward 13681
13679: oJumpBack 13633
13681: oCall 13684
13683: oReturn
13684: oLocalSpace 0
13686: oReturn
13687: oLocalSpace 2
13689: oGetAddrLocal 1
13691: oPushResult
13692: oScopeCurrent
13693: oPushResult
13694: oSetResult 15
13696: oPushResult
13697: oNodeGetIter
13698: oPop 2
13700: oAssign
13701: oGetAddrLocal 2
13703: oPushResult
13704: oGetLocal 1
13706: oPushResult
13707: oNodeIterValue
13708: oPop 1
13710: oAssign
13711: oGetLocal 2
13713: oPushResult
13714: oNodeNull
13715: oPop 1
13717: oChoice 13721
13719: oJumpForward 13726
13721: Choice Lookup Table
           0   13719
13724: oJumpForward 13781
13726: oGetLocal 2
13728: oPushResult
13729: oNodeType
13730: oPop 1
13732: oChoice 13770
13734: oGetLocal 2
13736: oPushResult
13737: oSetResult 35
13739: oPushResult
13740: oNodeGetBoolean
13741: oPop 2
13743: oChoice 13765
13745: oGetLocal 2
13747: oPushResult
13748: oSetResult 28
13750: oPushResult
13751: oNodeGetBoolean
13752: oPop 2
13754: oChoice 13760
13756: oError 27
13758: oJumpForward 13763
13760: Choice Lookup Table
           1   13756
13763: oJumpForward 13768
13765: Choice Lookup Table
           0   13745
13768: oJumpForward 13773
13770: Choice Lookup Table
          26   13734
13773: oGetAddrLocal 1
13775: oPushResult
13776: oNodeIterNext
13777: oPop 1
13779: oJumpBack 13701
13781: oReturn
13782: oLocalSpace 3
13784: oEmit 77
13786: oGetParam 3
13788: oPushResult
13789: oEmitLabel
13790: oPop 1
13792: oEmit 67
13794: oGetAddrLocal 1
13796: oPushResult
13797: Here
13798: oAssign
13799: oEmit 94
13801: oGetParam 1
13803: oChoice 13809
13805: oCall 1220
13807: oJumpForward 13812
13809: Choice Lookup Table
           1   13805
13812: oGetAddrLocal 2
13814: oPushResult
13815: oGetParam 2
13817: oPushResult
13818: oSetResult 19
13820: oPushResult
13821: oNodeGetCode
13822: oPop 2
13824: oAssign
13825: oGetLocal 2
13827: oPushResult
13828: oEmitCode
13829: oPop 1
13831: oGetParam 2
13833: oPushResult
13834: oSetResult 19
13836: oPushResult
13837: oSetResult 0
13839: oPushResult
13840: oNodeSetCode
13841: oPop 3
13843: oCall 8719
13845: oGetParam 1
13847: oChoice 13853
13849: oCall 1305
13851: oJumpForward 13856
13853: Choice Lookup Table
           1   13849
13856: oEmit 66
13858: oGetAddrLocal 3
13860: oPushResult
13861: oScopeCurrent
13862: oPushResult
13863: oSetResult 17
13865: oPushResult
13866: oNodeGetInt
13867: oPop 2
13869: oAssign
13870: oGetLocal 1
13872: oPushResult
13873: oGetLocal 3
13875: oPushResult
13876: oPatch
13877: oPop 2
13879: oReturn
13880: oLocalSpace 1
13882: oGetAddrLocal 1
13884: oPushResult
13885: oGetParam 1
13887: oPushResult
13888: oSetResult 19
13890: oPushResult
13891: oNodeGetCode
13892: oPop 2
13894: oAssign
13895: oGetLocal 1
13897: oPushResult
13898: oSetResult 0
13900: oPushResult
13901: equal_code
13902: oPop 2
13904: oChoice 13925
13906: oGetAddrLocal 1
13908: oPushResult
13909: oCodeNew
13910: oAssign
13911: oGetParam 1
13913: oPushResult
13914: oSetResult 19
13916: oPushResult
13917: oGetLocal 1
13919: oPushResult
13920: oNodeSetCode
13921: oPop 3
13923: oJumpForward 13928
13925: Choice Lookup Table
           1   13906
13928: oGetLocal 1
13930: oReturn
13931: oReturn
13932: oLocalSpace 0
13934: oScopeCurrent
13935: oPushResult
13936: oSetResult 14
13938: oPushResult
13939: oNodeGetInt
13940: oPop 2
13942: oReturn
13943: oReturn
13944: oLocalSpace 0
13946: oGetParam 1
13948: oPushResult
13949: oSetResult 20
13951: oPushResult
13952: oNodeGet
13953: oPop 2
13955: oPushResult
13956: oSetResult 14
13958: oPushResult
13959: oNodeGetInt
13960: oPop 2
13962: oReturn
13963: oReturn
13964: oLocalSpace 0
13966: oCall 13932
13968: oPushResult
13969: oGetParam 1
13971: oPushResult
13972: oCall 13944
13974: oPop 1
13976: oPushResult
13977: subtract
13978: oPop 2
13980: oReturn
13981: oReturn
13982: oLocalSpace 1
13984: oGetAddrLocal 1
13986: oPushResult
13987: oGetParam 2
13989: oPushResult
13990: oNodeNew
13991: oPop 1
13993: oAssign
13994: oGetLocal 1
13996: oPushResult
13997: oSetResult 4
13999: oPushResult
14000: oGetParam 1
14002: oPushResult
14003: oNodeSetInt
14004: oPop 3
14006: oGetLocal 1
14008: oReturn
14009: oReturn
14010: oLocalSpace 0
14012: oGetParam 1
14014: oPushResult
14015: oSetResult 22
14017: oPushResult
14018: oNodeGetInt
14019: oPop 2
14021: oPushResult
14022: oEmitInt
14023: oPop 1
14025: oReturn
14026: oLocalSpace 1
14028: oGetAddrLocal 1
14030: oPushResult
14031: oSetResult 14
14033: oPushResult
14034: oGetParam 1
14036: oPushResult
14037: oCall 13982
14039: oPop 2
14041: oAssign
14042: oGetLocal 1
14044: oPushResult
14045: oScopeDeclare
14046: oPop 1
14048: oGetLocal 1
14050: oReturn
14051: oReturn
14052: oLocalSpace 1
14054: oGetAddrGlobal 25
14056: oPushResult
14057: oSetResult 0
14059: oAssign
14060: oGetAddrGlobal 4
14062: oPushResult
14063: oId_mysystem
14064: oAssign
14065: oGetAddrGlobal 5
14067: oPushResult
14068: oSetResult 28
14070: oPushResult
14071: oSetResult 4
14073: oPushResult
14074: oCall 11916
14076: oPop 2
14078: oAssign
14079: oGetAddrGlobal 6
14081: oPushResult
14082: oSetResult 30
14084: oPushResult
14085: oSetResult 4
14087: oPushResult
14088: oCall 11916
14090: oPop 2
14092: oAssign
14093: oGetAddrGlobal 7
14095: oPushResult
14096: oSetResult 33
14098: oPushResult
14099: oSetResult 1
14101: oPushResult
14102: oCall 11916
14104: oPop 2
14106: oAssign
14107: oGetAddrGlobal 8
14109: oPushResult
14110: oSetResult 34
14112: oPushResult
14113: oSetResult 1
14115: oPushResult
14116: oCall 11916
14118: oPop 2
14120: oAssign
14121: oGetAddrGlobal 9
14123: oPushResult
14124: oSetResult 35
14126: oPushResult
14127: oSetResult 1
14129: oPushResult
14130: oCall 11916
14132: oPop 2
14134: oAssign
14135: oGetAddrGlobal 10
14137: oPushResult
14138: oGetGlobal 9
14140: oPushResult
14141: oCall 13029
14143: oPop 1
14145: oAssign
14146: oGetAddrGlobal 11
14148: oPushResult
14149: oSetResult 29
14151: oPushResult
14152: oSetResult 1
14154: oPushResult
14155: oCall 11916
14157: oPop 2
14159: oAssign
14160: oGetAddrGlobal 12
14162: oPushResult
14163: oSetResult 31
14165: oPushResult
14166: oSetResult 4
14168: oPushResult
14169: oCall 11916
14171: oPop 2
14173: oAssign
14174: oGetAddrGlobal 13
14176: oPushResult
14177: oSetResult 32
14179: oPushResult
14180: oSetResult 8
14182: oPushResult
14183: oCall 11916
14185: oPop 2
14187: oAssign
14188: oGetAddrGlobal 14
14190: oPushResult
14191: oSetResult 37
14193: oPushResult
14194: oSetResult 8
14196: oPushResult
14197: oCall 11916
14199: oPop 2
14201: oAssign
14202: oGetGlobal 14
14204: oPushResult
14205: oSetResult 37
14207: oPushResult
14208: oGetGlobal 11
14210: oPushResult
14211: oNodeSet
14212: oPop 3
14214: oGetAddrGlobal 15
14216: oPushResult
14217: oSetResult 41
14219: oPushResult
14220: oSetResult 256
14222: oPushResult
14223: oCall 11916
14225: oPop 2
14227: oAssign
14228: oGetAddrGlobal 16
14230: oPushResult
14231: oSetResult 42
14233: oPushResult
14234: oSetResult 256
14236: oPushResult
14237: oCall 11916
14239: oPop 2
14241: oAssign
14242: oGetGlobal 16
14244: oPushResult
14245: oSetResult 42
14247: oPushResult
14248: oSetResult 255
14250: oPushResult
14251: oNodeSetInt
14252: oPop 3
14254: oGetAddrLocal 1
14256: oPushResult
14257: oSetResult 19
14259: oPushResult
14260: oId_File
14261: oPushResult
14262: oCall 13982
14264: oPop 2
14266: oAssign
14267: oGetLocal 1
14269: oPushResult
14270: oSetResult 21
14272: oPushResult
14273: oGetGlobal 5
14275: oPushResult
14276: oNodeSet
14277: oPop 3
14279: oGetLocal 1
14281: oPushResult
14282: oScopeDeclare
14283: oPop 1
14285: oGetAddrLocal 1
14287: oPushResult
14288: oSetResult 19
14290: oPushResult
14291: oId_Integer
14292: oPushResult
14293: oCall 13982
14295: oPop 2
14297: oAssign
14298: oGetLocal 1
14300: oPushResult
14301: oSetResult 21
14303: oPushResult
14304: oGetGlobal 6
14306: oPushResult
14307: oNodeSet
14308: oPop 3
14310: oGetLocal 1
14312: oPushResult
14313: oScopeDeclare
14314: oPop 1
14316: oGetAddrLocal 1
14318: oPushResult
14319: oSetResult 19
14321: oPushResult
14322: oId_Boolean
14323: oPushResult
14324: oCall 13982
14326: oPop 2
14328: oAssign
14329: oGetLocal 1
14331: oPushResult
14332: oSetResult 21
14334: oPushResult
14335: oGetGlobal 7
14337: oPushResult
14338: oNodeSet
14339: oPop 3
14341: oGetLocal 1
14343: oPushResult
14344: oScopeDeclare
14345: oPop 1
14347: oGetAddrLocal 1
14349: oPushResult
14350: oSetResult 19
14352: oPushResult
14353: oId_Char
14354: oPushResult
14355: oCall 13982
14357: oPop 2
14359: oAssign
14360: oGetLocal 1
14362: oPushResult
14363: oSetResult 21
14365: oPushResult
14366: oGetGlobal 9
14368: oPushResult
14369: oNodeSet
14370: oPop 3
14372: oGetLocal 1
14374: oPushResult
14375: oScopeDeclare
14376: oPop 1
14378: oGetAddrLocal 1
14380: oPushResult
14381: oSetResult 19
14383: oPushResult
14384: oId_Byte
14385: oPushResult
14386: oCall 13982
14388: oPop 2
14390: oAssign
14391: oGetLocal 1
14393: oPushResult
14394: oSetResult 21
14396: oPushResult
14397: oGetGlobal 11
14399: oPushResult
14400: oNodeSet
14401: oPop 3
14403: oGetLocal 1
14405: oPushResult
14406: oScopeDeclare
14407: oPop 1
14409: oGetAddrLocal 1
14411: oPushResult
14412: oSetResult 19
14414: oPushResult
14415: oId_Single
14416: oPushResult
14417: oCall 13982
14419: oPop 2
14421: oAssign
14422: oGetLocal 1
14424: oPushResult
14425: oSetResult 21
14427: oPushResult
14428: oGetGlobal 12
14430: oPushResult
14431: oNodeSet
14432: oPop 3
14434: oGetLocal 1
14436: oPushResult
14437: oScopeDeclare
14438: oPop 1
14440: oGetAddrLocal 1
14442: oPushResult
14443: oSetResult 19
14445: oPushResult
14446: oId_Double
14447: oPushResult
14448: oCall 13982
14450: oPop 2
14452: oAssign
14453: oGetLocal 1
14455: oPushResult
14456: oSetResult 21
14458: oPushResult
14459: oGetGlobal 13
14461: oPushResult
14462: oNodeSet
14463: oPop 3
14465: oGetLocal 1
14467: oPushResult
14468: oScopeDeclare
14469: oPop 1
14471: oGetAddrLocal 1
14473: oPushResult
14474: oSetResult 19
14476: oPushResult
14477: oId_Pointer
14478: oPushResult
14479: oCall 13982
14481: oPop 2
14483: oAssign
14484: oGetLocal 1
14486: oPushResult
14487: oSetResult 21
14489: oPushResult
14490: oGetGlobal 14
14492: oPushResult
14493: oNodeSet
14494: oPop 3
14496: oGetLocal 1
14498: oPushResult
14499: oScopeDeclare
14500: oPop 1
14502: oGetAddrLocal 1
14504: oPushResult
14505: oSetResult 19
14507: oPushResult
14508: oId_ShortString
14509: oPushResult
14510: oCall 13982
14512: oPop 2
14514: oAssign
14515: oGetLocal 1
14517: oPushResult
14518: oSetResult 21
14520: oPushResult
14521: oGetGlobal 16
14523: oPushResult
14524: oNodeSet
14525: oPop 3
14527: oGetLocal 1
14529: oPushResult
14530: oScopeDeclare
14531: oPop 1
14533: oGetAddrLocal 1
14535: oPushResult
14536: oSetResult 16
14538: oPushResult
14539: oId_True
14540: oPushResult
14541: oCall 13982
14543: oPop 2
14545: oAssign
14546: oGetLocal 1
14548: oPushResult
14549: oSetResult 21
14551: oPushResult
14552: oGetGlobal 7
14554: oPushResult
14555: oNodeSet
14556: oPop 3
14558: oGetLocal 1
14560: oPushResult
14561: oSetResult 22
14563: oPushResult
14564: oSetResult 1
14566: oPushResult
14567: oNodeSetInt
14568: oPop 3
14570: oGetLocal 1
14572: oPushResult
14573: oScopeDeclare
14574: oPop 1
14576: oGetAddrLocal 1
14578: oPushResult
14579: oSetResult 16
14581: oPushResult
14582: oId_False
14583: oPushResult
14584: oCall 13982
14586: oPop 2
14588: oAssign
14589: oGetLocal 1
14591: oPushResult
14592: oSetResult 21
14594: oPushResult
14595: oGetGlobal 7
14597: oPushResult
14598: oNodeSet
14599: oPop 3
14601: oGetLocal 1
14603: oPushResult
14604: oSetResult 22
14606: oPushResult
14607: oSetResult 0
14609: oPushResult
14610: oNodeSetInt
14611: oPop 3
14613: oGetLocal 1
14615: oPushResult
14616: oScopeDeclare
14617: oPop 1
14619: oGetAddrLocal 1
14621: oPushResult
14622: oSetResult 16
14624: oPushResult
14625: oId_Nil
14626: oPushResult
14627: oCall 13982
14629: oPop 2
14631: oAssign
14632: oGetLocal 1
14634: oPushResult
14635: oSetResult 21
14637: oPushResult
14638: oGetGlobal 14
14640: oPushResult
14641: oNodeSet
14642: oPop 3
14644: oGetLocal 1
14646: oPushResult
14647: oSetResult 22
14649: oPushResult
14650: oSetResult 0
14652: oPushResult
14653: oNodeSetInt
14654: oPop 3
14656: oGetLocal 1
14658: oPushResult
14659: oScopeDeclare
14660: oPop 1
14662: oGetAddrGlobal 17
14664: oPushResult
14665: oId_Ord
14666: oPushResult
14667: oCall 14026
14669: oPop 1
14671: oAssign
14672: oGetAddrGlobal 18
14674: oPushResult
14675: oId_Chr
14676: oPushResult
14677: oCall 14026
14679: oPop 1
14681: oAssign
14682: oGetAddrGlobal 19
14684: oPushResult
14685: oId_Pred
14686: oPushResult
14687: oCall 14026
14689: oPop 1
14691: oAssign
14692: oGetAddrGlobal 20
14694: oPushResult
14695: oId_Succ
14696: oPushResult
14697: oCall 14026
14699: oPop 1
14701: oAssign
14702: oGetAddrGlobal 21
14704: oPushResult
14705: oId_Sizeof
14706: oPushResult
14707: oCall 14026
14709: oPop 1
14711: oAssign
14712: oReturn
