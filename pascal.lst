   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pStrLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushAddrGlobal   % <offset> - push ptr to global var (same as tPushConstP)
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tNot              % negate top boolean
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteStr         %  "     "    : write string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteCR          %  "     "    : write cr
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nConst
   2: 	nEnumValue
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nIntegerType
   2: 	nBooleanType
   2: 	nBooleanCFType
   2: 	nCharType
   2: 	nStringType
   2: 	nPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qNameTable
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
      % intrinsic types & type constructs
      
   2: type typ:
   2:    tyNone     = 0    % in ptrTyp field of TT, means no ptr to type defined
   2:    tyInteger
   2:    tyBoolean
   2:    tyChar
   2:    tyString
   2:    tyFile            % tyInteger..tyFile are scalars (types on their own)
   2:    tyPointer         % following are type constructor classes...
   2:    tyArray           %   (they are not type#'s)
   2:    tyRecord
   2:    tyParams          % like record; a collection of proc/func params
   2:    tySet;
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % adds a predefined id to the scanner's id table, and returns the id code
   2:     oIdAdd_File >> int
   2:     oIdAdd_Integer >> int
   2:     oIdAdd_Boolean >> int
   2:     oIdAdd_Char >> int
   2:     oIdAdd_String >> int
   2:     oIdAdd_True >> int
   2:     oIdAdd_False >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValueNegate                % negate top value
   2:    oValueTop >> int            % get top value on value stack
   2:    oValuePop;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanCFType
   2: Node    CharType
   2: Node    StringType
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowCF( out Label falseLabel );
   2: BoolExprAllowCF( out Label falseLabel );
   2: BoolTermAllowCF( out Label falseLabel );
   2: BoolFactorAllowCF( out Label falseLabel );
   2: ArithExprAllowCF( out Label falseLabel );
   2: TermAllowCF( out Label falseLabel );
   2: FactorAllowCF( out Label falseLabel );
   2: PrimaryAllowCF( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueVar( Node decl );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: CFToVal( inout Label falseLabel );
   2: ValToCF( out Label falseLabel );
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Declarations ----------------------------
      
   2: Program:
   4:    Node t
      
   4:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
   9:    oScopeBegin( 0, allocGlobal )
  18:    Node rootScope = oScopeCurrent
      
  23:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
  25:    .tEnter  oEmitInt( 0 )
  33:    Label mainLabel = oLabelNew
      
  38:    .tAllocActuals  oEmitInt( 0 )
  46:    .tCall  oEmitLabel( mainLabel )
  54:    .tFreeActuals  oEmitInt( 0 )
  62:    .tReturn
      
  64:    pProgram
  66:    pIdent
      
  68:    Node program = oNodeNew( nProgram )
  78:    oNodeSetInt( program, qIdent, LAST_ID )
  89:    oNodeSet( workspace, qProgram, program )
      
      
 101:    [
 101:       | '(' :
 103:          pIdent      % input, output files
      
 105:          t = @newIdent( nVar, LAST_ID )
 118:          oNodeSet( t, qType, FileType )
 130:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
 136:          ','
 138:          pIdent
      
 140:          t = @newIdent( nVar, LAST_ID )
 153:          oNodeSet( t, qType, FileType )
 165:          oScopeDeclareAlloc( t )
      
 171:          ')'
 173:       | * :
 178:    ]
 178:    ';'
      
         % The uses clause may only appear once, immediately after the program declaration.
 180:    [
 180:       | pUses :  @UsesClause( program )
 189:       | * :
 194:    ]
 194:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
 201:    oScopeBegin( 0, allocGlobal )
 210:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
 215:    oScopeBegin( 0, allocDown )
 224:    oNodeSet( oScopeCurrent, qExtends, globalScope )
 235:    initScope = oScopeCurrent
 240:    oNodeSet( program, qMainRoutineScope, initScope )
 252:    oScopeEnd
      
 253:    @BlockDecls( nGlobalVar )
      
      
 260:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
 266:    boolean isMain = true
 272:    @BlockStmt( mainLabel, globalScope, isMain )
      
 285:    oScopeEnd   % main routine scope
      
 286:    '.'
 288:    @CheckForUndefinedLabels
 290:    oScopeEnd   % global scope
 291:    @EndUsedUnits( program )   % used units scopes
 299:    ;
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
 299: UsesClause( Node user ):
 301:    {
 301:       pIdent
 303:       Node unit = @FindOrCompileUnit( LAST_ID )
 313:       [ equal_node( unit, Null )
 323:          | false :
 324:             oNodeAddLast( user, qUsedUnits, unit )
      
                  % Put a declaration in the current scope, naming the unit and pointing to it.
                  % This is to allow references to  <unit>.<identifier_in_unit>
 336:             Node unitRef = oNodeNew( nUnitRef )
 346:             oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 365:             oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 384:             oScopeDeclare( unitRef )
 390:          | * :
 395:       ]
 395:       [
 395:          | ',' :
 397:          | * :  >
 404:       ]
 404:    }   
 406:    ';'
 409:    ;
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 409: ResolveUnitRef( inout Node decl ):
 411:    [ oNodeType( decl )
 418:       | nUnitRef :
 419:          Node scope = oNodeGet( decl, qPublicScope )
 432:          '.'
 434:          pIdent
 436:          decl = oScopeFindRequireInScope( scope )
 446:       | * :
 451:    ];
      
      
 452: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 454:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 467:    {
 467:       Node unit = oNodeIterValue( unitIt )
 477:       [ oNodeNull( unit )
 484:          | false :
 485:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 498:          | * :
 503:             >
 505:       ]
 505:       oNodeIterNext( unitIt )
 511:    }
 514:    ;
      
 514: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 516:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 529:    {
 529:       Node unit = oNodeIterValue( unitIt )
 539:       [ oNodeNull( unit )
 546:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 547:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 563:                | true :
 564:                | false :  #eInternalScopeMismatch
 568:             ]
 576:             oScopeEnd
 577:          | * :
 582:             >
 584:       ]
 584:       oNodeIterPrev( unitIt )
 590:    }
 593:    ;
      
      
 593: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 595:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 614:    [ equal_node( unit, Null )
 624:       | false :  >> unit
 628:       | * :
 633:    ]
      
         % If not, search for the source file on disk
 633:    boolean ok = oIncludeUnitFile( id )
 643:    [ ok
 646:       | false :  #eCantFindUnitFile  >> Null
 652:       | * :
 657:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 657:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 663:    oIncludeEnd
 664:    >> unit;
      
      
      
 668: Unit >> Node:
 670:    pUnit
 672:    pIdent
 674:    Node unit = oNodeNew( nUnit )
 684:    oNodeSetInt( unit, qIdent, LAST_ID )
 695:    Node unitImpl = oNodeNew( nUnitImpl )
 705:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 716:    oNodeSet( unit, qImpl, unitImpl )
 728:    ';'
      
         % mandatory sections
      
 730:    pInterface
 732:    [
 732:       | pUses :   @UsesClause( unit )
 741:       | * :
 746:    ]
 746:    @EnterUsedUnits( unit )
      
 753:    oScopeBegin( 0, allocGlobal )
 762:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 773:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 778:    oScopeBegin( 0, allocDown )
 787:    initScope = oScopeCurrent
 792:    oNodeSet( unit, qInitRoutineScope, initScope )
 804:    oScopeEnd
      
 805:    @UnitInterface( unit )
 812:    oScopeEnd  % interface scope
      
 813:    pImplementation
 815:    [
 815:       | pUses :   @UsesClause( unitImpl )
 824:       | * :
 829:    ]
 829:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 836:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 849:    oScopeBegin( 0, allocGlobal )
 858:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
 869:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
 887:    globalScope = oScopeCurrent
 892:    @UnitImplementation( unit )
      
 899:    [
 899:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
 911:       | * :                @UnitInitialization( unit, false )  % implicit init routine
 926:    ]
 926:    [
 926:       | pFinalization :  @UnitFinalization( unit, true )
 938:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
 953:    ]
 953:    pEnd  '.'
      
 957:    oScopeEnd  % impl scope
 958:    oScopeEnd  % interface scope
 959:    @EndUsedUnits( unitImpl )  % used units scopes
 966:    @EndUsedUnits( unit )
 973:    oNodeAddLast( workspace, qUnits, unit )
 985:    >> unit;
      
      
 989: UnitInterface( Node unit ):
 991:    {[
 991:       | pConst :     @ConstDecl
 995:       | pType :      @TypeDecl
 999:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
1008:       | pProcedure :
1010:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
1016:          [
1016:             | pExternal :
1018:                @ExternalDecl( decl )
1025:                ';'
1027:             | * :
1032:          ]
      
1032:       | pFunction :
1034:          Node decl = @FuncHeaderDecl
1040:          [
1040:             | pExternal :
1042:                @ExternalDecl( decl )
1049:                ';'
1051:             | * :
1056:          ]
      
1056:       | * :          >
1071:    ]}
1074:    ;
      
1074: UnitImplementation( Node unit ):
1076:    @BlockDecls( nGlobalVar )
1084:    ;
      
      
1084: UnitInitialization( Node unit, boolean hasStmts ):
1086:    Label label = oLabelNew
1091:    .tLabel  oEmitLabel( label )
1099:    oNodeSetLabel( unit, qInitLabel, label )
      
1111:    int patchLS
1111:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
1120:    Node scope
1120:    Code initCode
      
1120:    scope = oNodeGet( unit, qPublicScope )
1133:    initCode = oNodeGetCode( scope, qInitCode )
1146:    oEmitCode( initCode )
1152:    oNodeSetCode( scope, qInitCode, codeNull )
      
1164:    scope = oNodeGet( unit, qPrivateScope )
1177:    initCode = oNodeGetCode( scope, qInitCode )
1190:    oEmitCode( initCode )
1196:    oNodeSetCode( scope, qInitCode, codeNull )
      
1208:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1221:    [ hasStmts
1224:       | true :     
1225:          @Statement
1227:          {[
1227:             | ';' :  @Statement
1231:             | * :    >
1238:          ]}
1240:       | * :
1245:    ]
      
1245:    .tReturn
      
1247:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1259:    oPatch( patchLS, localSpace )
1268:    oScopeEnd   % init routine scope, for temporaries
1270:    ;
      
      
1270: UnitFinalization( Node unit, boolean hasStmts ):
1272:    Label label = oLabelNew
1277:    .tLabel  oEmitLabel( label )
1285:    oNodeSetLabel( unit, qFinalLabel, label )
      
1297:    int patchLS
1297:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1306:    oScopeBegin( 0, allocDown )
      
1315:    [ hasStmts
1318:       | true :     
1319:          @Statement
1321:          {[
1321:             | ';' :  @Statement
1325:             | * :    >
1332:          ]}
1334:       | * :
1339:    ]
      
1339:    .tReturn
      
1341:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1353:    oPatch( patchLS, localSpace )
1362:    oScopeEnd   % final routine scope, for temporaries
1364:    ;
      
      
1364: Block( node_type varNodeType, Label labelForBody ):
1366:    @BlockDecls( varNodeType )
1373:    @BlockStmt( labelForBody, oScopeCurrent, false )
1385:    @CheckForUndefinedLabels
1388:    ;
      
      
1388: BlockDecls( node_type varNodeType ):
1390:    {[
1390:       | pConst :     @ConstDecl
1394:       | pType :      @TypeDecl
1398:       | pVar :       @VarDecl( varNodeType )
1407:       | pLabel :     @LabelDecl
1411:       | pProcedure : @ProcDecl
1415:       | pFunction :  @FuncDecl
1419:       | * :          >
1436:    ]}
1438:    @CheckForUndefinedMethods
1441:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
1441: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
1444:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
1444: CheckForUndefinedLabels:
1446:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
1458:    {
1458:       Node decl = oNodeIterValue( it )
1468:       [ oNodeNull( decl )
1475:          | false :
1476:          | * :  >
1483:       ]
1483:       [ oNodeType( decl )
1490:          | nLabel :
1491:             [ oNodeGetBoolean( decl, qDefined )
1501:                | false :
1502:                   [ oNodeGetBoolean( decl, qUsed )
1512:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
1515:                      | * :
1520:                   ]
1520:                | * :
1525:             ]
1525:          | * :
1530:       ]
1530:       oNodeIterNext( it )
1536:    }
1539:    ;
      
      
1539: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1541:    NodeIter it = oNodeGetIter( workspace, qUnits )
1554:    {
1554:       Node unit = oNodeIterValue( it )
1564:       [ oNodeNull( unit )
1571:          | true :  >
1574:          | false :
1576:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1584:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1599:             .tFreeActuals  oEmitInt( 0 )
1607:             oNodeIterNext( it )
1613:       ]
1621:    };
      
      
1624: FinalizeUnits:
1626:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1639:    {
1639:       Node unit = oNodeIterValue( it )
1649:       [ oNodeNull( unit )
1656:          | true :  >
1659:          | false :
1661:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1669:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1684:             .tFreeActuals  oEmitInt( 0 )
1692:             oNodeIterPrev( it )
1698:       ]
1706:    };
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
1709: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
1711:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
1719:    int patchLS
1719:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
1728:    [ isMain
1731:       | true :  @InitializeUnits
1734:       | * :
1739:    ]
      
         % insert any code for initialization of this scope's variables
1739:    Code initCode = oNodeGetCode( varScope, qInitCode )
1752:    oEmitCode( initCode )
1758:    oNodeSetCode( varScope, qInitCode, codeNull )
      
1770:    @Statement
      
1772:    [ isMain
1775:       | true :  @FinalizeUnits
1778:       | * :
1783:    ]
      
1783:    .tReturn
      
1785:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1797:    oPatch( patchLS, localSpace )
1807:    ;
      
      
      % modifers that may appear on a proc/function declaration.
      %
1807: MethodModifiers( Node decl ):
1809:    {[
1809:       | pCdecl :
1811:          oNodeSetBoolean( decl, qCdecl, true )
1823:          ';'
      
1825:       | * : >
1832:    ]}
1835:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
1835: GetOrCreateInitCode( Node scope ) >> Code:
1837:    Code initCode = oNodeGetCode( scope, qInitCode )
1850:    [ equal_code( initCode, codeNull )
1860:       | true :
1861:          initCode = oCodeNew
1866:          oNodeSetCode( scope, qInitCode, initCode )
1878:       | * :
1883:    ]
1883:    >> initCode;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note, I'll hold off on issuing the .tLabelExtern until we see that
      % the external method is actually called.  Otherwise we'd fill each output file
      % with all the external method names in my included libraries, which seems dumb.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
1887: ExternalDecl( Node decl ):
1889:    [ equal_zero( @DeclLevel( decl ) )
1901:       | false :  #eExternalMethodCannotBeNested
1904:       | * :
1909:    ]
1909:    oNodeSetBoolean( decl, qExternal, true )
1921:    [
1921:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
1923:          [
1923:             | pName :
1925:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
1927:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
1938:             | * :
1943:          ]
1943:       | * :
1948:    ]
1949:    ;
      
      
1949: ProcHeaderDecl >> Node:
1951:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1953:    boolean redeclaring = false
1959:    Node decl = oScopeFindInCurrentScope
      
1964:    [ oNodeNull( decl )
1971:       | true :
               % first declaration
1972:          decl = @newIdent( nProc, LAST_ID )
1985:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1996:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1998:          redeclaring = true
2004:          [ oNodeGetBoolean( decl, qBodyDefined )
2014:             | true : #eAlreadyDefined
2017:             | * :
2022:          ]
2022:          [ oNodeGetBoolean( decl, qExternal )
2032:             | true : #eAlreadyDefined
2035:             | * :
2040:          ]
2040:          [ oNodeType( decl )
2047:             | nProc :
2048:             | * : #eAlreadyDefined   % wrong kind
2055:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2055:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2074:          oNodeSet( decl, qParams, Null )
2086:    ]
      
2094:    int level = @ScopeLevel
2100:    boolean nested = greater( level, 0 )
2113:    inc( level )
2119:    oScopeBegin( level, allocUp )
2128:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2133:    [ nested
2136:       | true :
2137:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2152:       | * :
2157:    ]
      
2157:    @FormalArgDecl
2159:    oNodeSet( decl, qParams, paramScope )
2171:    oScopeEnd
2172:    ';'
      
2174:    [ redeclaring
2177:       | false : oScopeDeclare( decl )
2184:       | true :  % TO DO: check that qParams is consistent with qOldParams
2186:    ]
      
2194:    @MethodModifiers( decl )
2201:    >> decl;
      
      
2205: ProcDecl:
2207:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
2213:    [
2213:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2215:       | pExternal : @ExternalDecl( decl )
      
2224:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2231:          Node paramScope = oNodeGet( decl, qParams )
2244:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
2250:          int level = oNodeGetInt( paramScope, qLevel )
2263:          oScopeBegin( level, allocDown )
2272:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2283:          Label label = oNodeGetLabel( decl, qValue )
2296:          @Block( nLocalVar, label )
2306:          oNodeSetBoolean( decl, qBodyDefined, true )
2318:          oScopeEnd
      
2319:          oScopeEnd  % paramScope
2320:    ]
2320:    ';';
      
      
      
2323: FuncHeaderDecl >> Node:
2325:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2327:    boolean redeclaring = false
2333:    Node decl = oScopeFindInCurrentScope
      
2338:    [ oNodeNull( decl )
2345:       | true :
               % first declaration
2346:          decl = @newIdent( nFunc, LAST_ID )
2359:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2370:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2372:          redeclaring = true
2378:          [ oNodeGetBoolean( decl, qBodyDefined )
2388:             | true : #eAlreadyDefined
2391:             | * :
2396:          ]
2396:          [ oNodeType( decl )
2403:             | nFunc :
2404:             | * : #eAlreadyDefined   % wrong kind
2411:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2411:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2430:          oNodeSet( decl, qParams, Null )
2442:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
2461:          oNodeSet( decl, qType, Null )
2473:    ]
      
2481:    int level = @ScopeLevel
2487:    boolean nested = greater( level, 0 )
2500:    inc( level )
2506:    oScopeBegin( level, allocUp )
2515:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2520:    [ nested
2523:       | true :
2524:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2539:       | * :
2544:    ]
      
2544:    @FormalArgDecl
2546:    oNodeSet( decl, qParams, paramScope )
      
2558:    ':'
      
2560:    Node theType
2560:    @TypeRef( theType )
2567:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2579:    Node ptrType = @PointerTypeTo( theType )
2590:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2606:    oScopeEnd
2607:    ';'
      
2609:    [ redeclaring
2612:       | false : oScopeDeclare( decl )
2619:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2621:    ]
      
2629:    @MethodModifiers( decl )
      
2636:    >> decl;
      
      
2640: FuncDecl:
2642:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2648:    [
2648:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2650:       | pExternal : @ExternalDecl( decl )
      
2659:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2666:          Node paramScope = oNodeGet( decl, qParams )
2679:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2685:          int level = oNodeGetInt( paramScope, qLevel )
2698:          oScopeBegin( level, allocDown )
2707:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2718:          Label label = oNodeGetLabel( decl, qValue )
2731:          @Block( nLocalVar, label )
2741:          oNodeSetBoolean( decl, qBodyDefined, true )
2753:          oScopeEnd
      
2754:          oScopeEnd  % paramScope
2755:    ]
2755:    ';';
      
      
2758: FormalArgDecl:
2760:    [
2760:       | '(' :
2762:          {
2762:             NodeVec decls = oNodeVecNew
2767:             Node decl
2767:             boolean isInOut = false
      
2773:             [
2773:                | pVar : isInOut = true
2781:                | * :
2786:             ]
      
2786:             {  pIdent
      
2788:                decl = @newIdent( nParam, LAST_ID )
2801:                oNodeSetBoolean( decl, qInOut, isInOut )
2813:                oNodeVecAppend( decls, decl )
      
2822:                [
2822:                   | ':' : >
2826:                   | ',' :
2828:                ]
2836:             }
      
2838:             Node theType
2838:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
2845:             Node allocType
2845:             [ isInOut
2848:                | true :   allocType = @PointerTypeTo( theType )
2860:                | * :      allocType = theType
2871:             ]
      
2871:             int i = 0
2877:             {[ equal( i, oNodeVecSize( decls ) )
2891:                | false :
2892:                   decl = oNodeVecElement( decls, i )
      
2905:                   oNodeSet( decl, qType, theType )
2917:                   oScopeDeclare( decl )
2923:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
2939:                   inc( i )
2945:                | * :
2950:                   >
2952:             ]}
      
2954:             oNodeVecDelete( decls )
      
2960:             [
2960:                | ')' : >
2964:                | ';' :
2966:             ]
2974:          }
2976:       | * :
2981:    ];
      
2982: ConstDecl:
2984:    {[
2984:       | pIdent :
2986:          Node decl = @newIdent( nConst, LAST_ID )
2999:          '='
      
3001:          @ConstExpr
               % TO DO: currently ConstExpr leaves int result on oValue stack
3003:          int val = oValueTop
3008:          oValuePop
3009:          oNodeSetInt( decl, qValue, val )
      
               % TO DO: different types.  Currently assumes int!
3021:          oNodeSet( decl, qType, IntegerType )
      
3033:          oScopeDeclare( decl )
3039:          ';'
3041:       | * :
3046:          >
3048:    ]};
      
3051: TypeDecl:
3053:    {[
3053:       | pIdent :
3055:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3068:          '='
3070:          Node theType
3070:          @TypeRef( theType )
3077:          oNodeSet( decl, qType, theType )
3089:          oScopeDeclare( decl )
3095:          ';'
3097:       | * :
3102:          >
3104:    ]};
      
3107: VarDecl( node_type varNodeType ):
3109:    {[
3109:       | pIdent :
3111:          NodeVec decls = oNodeVecNew
3116:          Node decl
3116:          {
3116:             decl = @newIdent( varNodeType, LAST_ID )
3129:             oNodeVecAppend( decls, decl )
3138:             [
3138:                | ',' :
3140:                   pIdent
3142:                | * :
3147:                   >
3149:             ]
3149:          }
3151:          ':'
3153:          Node theType
3153:          @TypeRef( theType )
      
3160:          int i = 0
3166:          {[ equal( i, oNodeVecSize( decls ) )
3180:             | false :
3181:                decl = oNodeVecElement( decls, i )
3194:                oNodeSet( decl, qType, theType )
3206:                oScopeDeclareAlloc( decl )
3212:                inc( i )
3218:             | * :
3223:               >
3225:          ]}
      
               % optional initialization
3227:          [
3227:             | '=' :
3229:                [ oNodeVecSize( decls )
3236:                   | 1 :
3237:                   | * :  #eOnlyOneVarCanBeInitialized
3244:                ]
      
                     % we need an initCode stream for this scope
3244:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3254:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3260:                boolean changedScope = false
3266:                [ equal_zero( @ScopeLevel )
3273:                   | true : oScopeEnter( initScope )
3280:                            changedScope = true
3286:                   | * :
3291:                ]
                     % generate assignment in initCode stream
3291:                @LValueVar( decl )
3298:                @Expr
3300:                @MatchTypes
3302:                @Assign
3304:                [ changedScope
3307:                   | true : oScopeEnd
3309:                   | * :
3314:                ]
3314:                oCodePop
                   
3315:             | * :
3320:          ]
      
3320:          oNodeVecDelete( decls )
3326:          ';'
3328:       | * :
3333:          >
3335:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3338: LabelDecl:
3340:    {
3340:       Node decl
3340:       [
3340:          | pIdent :
3342:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3344:             oChangeIntLitToLabelIdent
3345:       ]
3353:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
3366:       Label label = oLabelNew
3371:       oNodeSetLabel( decl, qValue, label )
3383:       oScopeDeclare( decl )
3389:       [
3389:          | ',' :
3391:          | * :
3396:             >
3398:       ]
3398:    }
3400:    ';'
3403:    ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
3403: TypeRef( out Node resultType ):
3405:    [
3405:       | pIdent :           % previously named type (including intrinsics)
3407:          Node decl = oScopeFindRequire
3412:          @ResolveUnitRef( decl )
3419:          [ oNodeType( decl )
3426:             | nTypeDecl :
3427:                resultType = oNodeGet( decl, qType )
3440:             | * :
3445:                #eNotType
3447:                resultType = IntegerType
3453:          ]
         
3453:       | pArray :
3455:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
3457:          NodeVec dimensions = oNodeVecNew
      
3462:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
3462:             Node subrange = oNodeNew( nSubrangeType )
                  % TO DO: currently assuming subrange of integer
3472:             oNodeSet( subrange, qBaseType, IntegerType )
      
                  % TO DO: currently ConstExpr leaves int result on oValue stack
3484:             @ConstExpr
3486:             oNodeSetInt( subrange, qLow, oValueTop )
3497:             oValuePop
3498:             '..'
3500:             @ConstExpr
3502:             oNodeSetInt( subrange, qHigh, oValueTop )
3513:             oValuePop
3514:             oNodeSetInt( subrange, qSize, 4 )   % maybe don't need
      
3526:             oTypeAdd( subrange )
      
3532:             Node a = oNodeNew( nArrayType )
3542:             oNodeSet( a, qIndexType, subrange )
      
3554:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
3563:             [
3563:                | ']' : >
3567:                | ',' :
3569:             ]
3577:          }
      
3579:          pOf
3581:          Node baseType
3581:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
3588:          int dim = oNodeVecSize( dimensions )
      
3598:          {
3598:              dec(dim)
      
3604:              Node a = oNodeVecElement( dimensions, dim )
      
3617:              oNodeSet( a, qBaseType, baseType )
3629:              Node subrange = oNodeGet( a, qIndexType )
3642:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
3669:              inc( width )
3675:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
3701:              oTypeAdd( a )
3707:              baseType = a
      
3713:              [ equal_zero(dim)
3720:                  | true:  >
3723:                  | *:
3728:              ]
3728:          }
      
3730:          resultType = oNodeVecElement( dimensions, 0 )
3743:          oNodeVecDelete( dimensions )
      
3749:       | '^' :
3751:          Node theType
3751:          @TypeRef( theType )
3758:          resultType = @PointerTypeTo( theType )
      
3769:       | pRecord :
3771:          resultType = oNodeNew( nRecordType )
3781:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
3790:          @VarDecl( nRecordField )
      
3797:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
3809:          [ equal_zero( size )
3816:             | true : #eRecordEmpty
3819:             | * :
3824:          ]
      
3824:          pEnd
      
3826:          oNodeSet( resultType, qScope, oScopeCurrent )
3837:          oNodeSetInt( resultType, qSize, size )
3849:          oScopeEnd
3850:          oTypeAdd( resultType )
      
      
3856:       | '(' :
               % An enum type declaration.
3858:          resultType = oNodeNew( nEnumType )
3868:          int value = 0
3874:          int numValues = 0
3880:          boolean first = true
      
               % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
               % That will let programs use either <val> or <enumType>.<val>
3886:          Node outerScope = oScopeCurrent
3891:          oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
3900:          {
                  % TO DO: assert that name not already seen in this scope, i.e. this enum.
                  %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
                  %  It might be in some other higher/used scope.
3900:             pIdent
3902:             Node decl = @newIdent( nEnumValue, LAST_ID )
3915:             Node decl2 = @newIdent( nEnumValue, LAST_ID )
3928:             oNodeSet( decl, qType, resultType )
3940:             oNodeSet( decl2, qType, resultType )
      
                  % build up name table, for i/o
3952:             int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
3965:             oNodeSetInt( decl, qNameOffset, nameOffset )
3977:             oNodeSetInt( decl2, qNameOffset, nameOffset )
3989:             [
3989:                | '=', ':=' :
3991:                   @ConstExpr
                        % value must be ascending
                        % this obviously doesn't apply to the first value
3993:                   [ equal_zero( numValues )
4000:                      | false :
4001:                         [ greater( oValueTop, value )
4010:                            | false :   #eEnumValueNotAscending
4013:                            | * :
4018:                         ]
4018:                      | * :
4023:                   ]
4023:                   value = oValueTop
4028:                   oValuePop
4029:                | * :
4036:             ]
4036:             oNodeSetInt( decl, qValue, value )
4048:             oNodeSetInt( decl2, qValue, value )
4060:             oScopeDeclare( decl )
      
4066:             oScopeEnter( outerScope )
4072:             oScopeDeclare( decl2 )
4078:             oScopeEnd
      
4079:             inc( value )
4085:             inc( numValues )
4091:             [
4091:                | ',' :
4093:                | * :    >
4100:             ]
4100:          }
4102:          ')'
      
4104:          oNodeSet( resultType, qScope, oScopeCurrent )
4115:          oNodeSetInt( resultType, qSize, 4 )   % always integer sized
4127:          oScopeEnd
      
               % Finish creation of the name table
               %    struct {
               %      int    value;
               %      int    padding;
               %      char*  name;
               %    } table[ numValues + 1 ];
               %  final entry will have name == nullptr
               %
               % I'll need to generate init code, to store pointers in global data,
               % since I don't have a relocation mechanism for static data at the moment.
4128:          oCodePush( @GetOrCreateInitCode( globalScope ) )
4139:          oScopeEnter( globalScope )
4145:          int size = multiply( add( numValues, 1 ), 16 )
4165:          int addr = oScopeAlloc( size, 8 )
4178:          oScopeEnd
4179:          oNodeSetInt( resultType, qNameTable, addr )
               % loop over enum values
4191:          NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
4211:          {
4211:             Node enumValue = oNodeIterValue( it )
4221:             [ oNodeNull( enumValue )
4228:                | true :  >
4231:                | * :
4236:             ]
4236:             .tPushAddrGlobal  oEmitInt( addr )
4244:             .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
4259:             .tAssignI
4261:             addr = add( addr, 8 )
4274:             .tPushAddrGlobal  oEmitInt( addr )
4282:             .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
4297:             .tAssignP
4299:             addr = add( addr, 8 )
4312:             oNodeIterNext( it )
4318:          }
               % final table entry
4320:          .tPushAddrGlobal  oEmitInt( addr )
4328:          .tPushConstI  oEmitInt( 0 )
4336:          .tAssignI
4338:          addr = add( addr, 8 )
4351:          .tPushAddrGlobal  oEmitInt( addr )
4359:          .tPushConstI  oEmitInt( 0 )
4367:          .tAssignP
4369:          addr = add( addr, 8 )
4382:          oCodePop
      
4383:          oTypeAdd( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
4389:       | pSet :
4391:          pOf
4393:          Node theType
4393:          @TypeRef( theType )
4400:       | * :       % this works for cases except where expr starts with an id
4415:          @ConstExpr '..' @ConstExpr
4421:    ];
      
      
      % --------------------------- Const Expressions --------------------------
      
      % Constant expressions: currently, only literal integers or previously
      % named constant integers are supported, possibly with a negation.
      % Constant expressions are evaluated at compile time.
      
4422: ConstExpr:
4424:    [
4424:       | pIntLit :
4426:          oValuePush( TOKEN_VALUE )
4431:       | pIdent :
4433:          Node decl = oScopeFindRequire
4438:          @ResolveUnitRef( decl )
4445:          [ oNodeType( decl )
4452:             | nConst :
4453:                oValuePush( oNodeGetInt( decl, qValue ) )
4466:             | * :
4471:                #eNotConst
4473:                oValuePush( 0 )
4479:          ]
4479:       | pMinus :
4481:          @ConstExpr
4483:          oValueNegate
4484:    ];
      
      
      
      % ------------------------------ Expressions -----------------------------
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanCFType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
4495: Expr:
4497:    Label falseLabel = labelNull
      
4503:    @ExprAllowCF( falseLabel )
4510:    @CFToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
4518: BooleanExprControlFlow( out Label falseLabel ):
4520:    @ExprAllowCF( falseLabel )
4527:    [ oTypeSNodeType
4529:       | nBooleanCFType :
4530:       | nBooleanType :
               % convert value to control flow
4532:          falseLabel = oLabelNew
4537:          .tJumpFalse  oEmitLabel( falseLabel )
4545:       | * :
4552:          #eNotBoolean
4554:    ]
4554:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
4556: CFToVal( inout Label falseLabel ):
4558:    [ oTypeSNodeType
4560:       | nBooleanCFType :
4561:          Label doneLabel = oLabelNew
4566:          .tPushConstI  oEmitInt( 1 )
4574:          .tJump  oEmitLabel( doneLabel )
4582:          .tLabel  oEmitLabel( falseLabel )
4590:          .tPushConstI  oEmitInt( 0 )
4598:          .tLabel  oEmitLabel( doneLabel )
4606:          oTypeSPop
4607:          oTypeSPush( BooleanType )
4613:          falseLabel = labelNull
4619:       | * :
4624:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
4625: ValToCF( out Label falseLabel ):
4627:    [ oTypeSNodeType
4629:       | nBooleanType :
4630:          falseLabel = oLabelNew
4635:          .tJumpFalse  oEmitLabel( falseLabel )
4643:          oTypeSPop
4644:          oTypeSPush( BooleanCFType )
4650:       | * :
4655:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanCFType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanCFType.
      % In this case, falseLabel is ignored.
      %
4656: ExprAllowCF( out Label falseLabel ):
4658:    @BoolExprAllowCF( falseLabel )
4665:    {[
4665:       | '=' :
4667:          @CFToVal( falseLabel )
4674:          @BoolExprAllowCF( falseLabel )
4681:          @CFToVal( falseLabel )
4688:          @MatchTypes
4690:          [ oTypeSNodeType
4692:             | nIntegerType, nEnumType, nBooleanType :  .tEqualI
4695:             | nPointerType :                .tEqualP
4699:             | nCharType, nStringType :      #eNotImplemented
4703:             | * :                           #eNotAllowed
4720:          ]
4720:          oTypeSPop
4721:          oTypeSPush( BooleanType )
      
4727:       | '<>' :
4729:          @CFToVal( falseLabel )
4736:          @BoolExprAllowCF( falseLabel )
4743:          @CFToVal( falseLabel )
4750:          @MatchTypes
4752:          [ oTypeSNodeType
4754:             | nIntegerType, nEnumType, nBooleanType :  .tNotEqualI
4757:             | nPointerType :                .tNotEqualP
4761:             | nCharType, nStringType :      #eNotImplemented
4765:             | * :                           #eNotAllowed
4782:          ]
4782:          oTypeSPop
4783:          oTypeSPush( BooleanType )
      
4789:       | '<' :
4791:          @CFToVal( falseLabel )
4798:          @BoolExprAllowCF( falseLabel )
4805:          @CFToVal( falseLabel )
4812:          @MatchTypes
4814:          [ oTypeSNodeType
4816:             | nIntegerType, nEnumType, nBooleanType :  .tLessI
4819:             | nCharType, nStringType :      #eNotImplemented
4823:             | * :                           #eNotAllowed
4838:          ]
4838:          oTypeSPop
4839:          oTypeSPush( BooleanType )
      
4845:       | '>' :
4847:          @CFToVal( falseLabel )
4854:          @BoolExprAllowCF( falseLabel )
4861:          @CFToVal( falseLabel )
4868:          @MatchTypes
4870:          [ oTypeSNodeType
4872:             | nIntegerType, nEnumType, nBooleanType :  .tGreaterI
4875:             | nCharType, nStringType :      #eNotImplemented
4879:             | * :                           #eNotAllowed
4894:          ]
4894:          oTypeSPop
4895:          oTypeSPush( BooleanType )
      
4901:       | '<=' :
4903:          @CFToVal( falseLabel )
4910:          @BoolExprAllowCF( falseLabel )
4917:          @CFToVal( falseLabel )
4924:          @MatchTypes
4926:          [ oTypeSNodeType
4928:             | nIntegerType, nEnumType, nBooleanType :  .tLessEqualI
4931:             | nCharType, nStringType :      #eNotImplemented
4935:             | * :                           #eNotAllowed
4950:          ]
4950:          oTypeSPop
4951:          oTypeSPush( BooleanType )
      
4957:       | '>=' :
4959:          @CFToVal( falseLabel )
4966:          @BoolExprAllowCF( falseLabel )
4973:          @CFToVal( falseLabel )
4980:          @MatchTypes
4982:          [ oTypeSNodeType
4984:             | nIntegerType, nEnumType, nBooleanType :  .tGreaterEqualI
4987:             | nCharType, nStringType :      #eNotImplemented
4991:             | * :                           #eNotAllowed
5006:          ]
5006:          oTypeSPop
5007:          oTypeSPush( BooleanType )
      
5013:       | * :
5028:          >
5030:    ]};
      
      
5033: BoolExprAllowCF( out Label falseLabel ):
5035:    Label trueLabel = labelNull
      
5041:    @BoolTermAllowCF( falseLabel )
5048:    {[
5048:       | pOr :
5050:          [ oTypeSNodeType
5052:             | nBooleanCFType :
                     % We are true here. Jump ahead to done
5053:                [ equal_label( trueLabel, labelNull )
5063:                   | true :  trueLabel = oLabelNew
5069:                   | * :
5074:                ]
5074:                .tJump  oEmitLabel( trueLabel )
5082:             | nBooleanType :
5084:                @ValToCF( falseLabel )
                     % We are true here. Jump ahead to done
5091:                [ equal_label( trueLabel, labelNull )
5101:                   | true :  trueLabel = oLabelNew
5107:                   | * :
5112:                ]
5112:                .tJump  oEmitLabel( trueLabel )
5120:             | * : #eNotBoolean
5129:          ]
5129:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5130:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5138:          falseLabel = labelNull
5144:          @BoolTermAllowCF( falseLabel )
      
5151:          [ oTypeSNodeType
5153:             | nBooleanCFType :
5154:             | nBooleanType :
5156:                @ValToCF( falseLabel )
5163:             | * : #eNotBoolean
5172:          ]
      
5172:          oTypeSPop
5173:          oTypeSPush( BooleanCFType )
      
5179:       | * :
5184:          >
5186:    ]}
      
         % any short-circuit trues jump here to the end
5188:    [ equal_label( trueLabel, labelNull )
5198:       | false :
5199:          .tLabel  oEmitLabel( trueLabel )
5207:       | * :
5212:    ]
5213:    ;
      
      
5213: BoolTermAllowCF( out Label falseLabel ):
5215:    Label overallFalseLabel = labelNull
      
5221:    @BoolFactorAllowCF( falseLabel )
5228:    {[
5228:       | pAnd :
5230:          [ oTypeSNodeType
5232:             | nBooleanCFType :
5233:             | nBooleanType :
5235:                @ValToCF( falseLabel )
5242:             | * :
5249:                #eNotBoolean
5251:          ]
5251:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
5252:          [ equal_label( overallFalseLabel, labelNull )
5262:             | true :
5263:                overallFalseLabel = oLabelNew
5268:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
5282:                falseLabel = overallFalseLabel
5288:             | * :
5293:          ]
      
5293:          Label factorFalseLabel = labelNull
5299:          @BoolFactorAllowCF( factorFalseLabel )
      
5306:          [ oTypeSNodeType
5308:             | nBooleanCFType :
5309:             | nBooleanType :
5311:                @ValToCF( factorFalseLabel )
5318:             | * : #eNotBoolean
5327:          ]
5327:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
5341:       | * :
5346:          >
5348:    ]};
      
5351: BoolFactorAllowCF( out Label falseLabel ):
5353:    [
5353:       | pNot :
5355:          Label factorFalseLabel = labelNull
      
5361:          @BoolFactorAllowCF( factorFalseLabel )
5368:          [ oTypeSNodeType
5370:             | nBooleanCFType :
                     % We have control flow, and are sitting at the point that has value false.
5371:                falseLabel = oLabelNew
5376:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
5384:                .tLabel  oEmitLabel( factorFalseLabel )
      
5392:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
5394:                .tNot
      
5396:             | * : #eNotBoolean
5405:          ]
      
5405:       | * :
5410:          @ArithExprAllowCF( falseLabel )
5417:    ];
      
5418: ArithExprAllowCF( out Label falseLabel ):
5420:    @TermAllowCF( falseLabel )
5427:    {[
5427:       | pPlus :
5429:          @RequireIntPop
5431:          @TermAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
5438:          @RequireInt
5440:          .tAddI
5442:       | pMinus :
5444:          @RequireIntPop
5446:          @TermAllowCF( falseLabel )
5453:          @RequireInt
5455:          .tSubI
5457:       | * :
5464:          >
5466:    ]};
      
5469: TermAllowCF( out Label falseLabel ):
5471:    @FactorAllowCF( falseLabel )
5478:    {[
5478:       | pTimes :
5480:          @RequireIntPop
5482:          @FactorAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
5489:          @RequireInt
5491:          .tMultI
5493:       | pDivide :
5495:          @RequireIntPop
5497:          @FactorAllowCF( falseLabel )
5504:          @RequireInt
5506:          .tDivI
5508:       | * :
5515:          >
5517:    ]};
      
5520: FactorAllowCF( out Label falseLabel ):
5522:    [
5522:       | pPlus :
5524:          @PrimaryAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
5531:          @RequireInt
5533:       | pMinus :
5535:          @PrimaryAllowCF( falseLabel )
5542:          @RequireInt
5544:          .tNegI
5546:       | * :
5553:          @PrimaryAllowCF( falseLabel )
5560:    ];
      
5561: PrimaryAllowCF( out Label falseLabel ):
5563:    [
5563:       | pIntLit :
5565:          .tPushConstI  oEmitInt( TOKEN_VALUE )
5572:          oTypeSPush( IntegerType )
      
5578:       | '(' :
5580:          @ExprAllowCF( falseLabel )
5587:          ')'
      
5589:       | pStrLit :
5591:          int addr = oStringAllocLit( CURRENT_STRLIT )     % store in global data
5600:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: do we need to create a type with the literal's length?
5608:          oTypeSPush( StringType )
      
5614:       | pIdent :
5616:          Node decl = oScopeFindRequire
5621:          @ResolveUnitRef( decl )
5628:          Node theType
      
5628:          [ oNodeType( decl )
5635:             | nFunc :
      
5636:                @Call( decl )
      
5643:             | nConst, nEnumValue :
5645:                theType = oNodeGet( decl, qType )
5658:                oTypeSPush( theType )
5664:                [ oTypeSNodeType
5666:                   | nIntegerType, nEnumType, nBooleanType :
5667:                      .tPushConstI @EmitValue( decl )
5676:                   | * :
5685:                      #eNotImplemented
5687:                ]
      
5687:             | nGlobalVar, nLocalVar, nParam :
5689:                @VarExpr( decl )
      
5696:             | * :
5711:                #eNotValue
5713:                oTypeSPush( IntegerType )
5719:          ]
      
5719:       | '@' :        % @var -- pointer to var
5721:          pIdent
      
5723:          Node decl = oScopeFindRequire
5728:          @ResolveUnitRef( decl )
5735:          Node theType
      
5735:          @LValueVar( decl )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
5742:          theType = oTypeSTop
5747:          oTypeSPop
5748:          Node ptrType = @PointerTypeTo( theType )
5759:          oTypeSPush( ptrType )
      
5765:       | * :
5778:          #eNotValue
5780:          oTypeSPush( IntegerType )
5786:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
5787: VarExpr( Node decl ):
5789:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
5802:    int uplevels = @DeclUpLevels( decl )
      
5813:    oTypeSPush( theType )
5819:    [ oTypeSNodeType
5821:       | nIntegerType, nEnumType :
5822:          [ oNodeType( decl )
5829:             | nGlobalVar :   .tPushGlobalI  @EmitValue( decl )
5839:             | nLocalVar :
5841:                [ equal_zero( uplevels )
5848:                   | true :  .tPushLocalI  @EmitValue( decl )
5858:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
5878:                ]
5878:             | nParam :
5880:                [ oNodeGetBoolean( decl, qInOut )
5890:                   | true :    % VAR param points to the var.  Auto dereference.
5891:                      [ equal_zero( uplevels )
5898:                         | true :  .tPushParamP  @EmitValue( decl )
5908:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
5928:                      ]
5928:                      .tFetchI
5930:                   | * :
5935:                      [ equal_zero( uplevels )
5942:                         | true :  .tPushParamI  @EmitValue( decl )
5952:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
5972:                      ]
5972:                ]
5972:          ]
      
5982:       | nBooleanType :
5984:          [ oNodeType( decl )
5991:             | nGlobalVar :   .tPushGlobalB  @EmitValue( decl )
6001:             | nLocalVar :
6003:                [ equal_zero( uplevels )
6010:                   | true :  .tPushLocalB  @EmitValue( decl )
6020:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
6040:                ]
6040:             | nParam :
6042:                [ oNodeGetBoolean( decl, qInOut )
6052:                   | true :    % VAR param points to the var.  Auto dereference.
6053:                      [ equal_zero( uplevels )
6060:                         | true :  .tPushParamP  @EmitValue( decl )
6070:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6090:                      ]
6090:                      .tFetchB
6092:                   | * :
6097:                      [ equal_zero( uplevels )
6104:                         | true :  .tPushParamB  @EmitValue( decl )
6114:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
6134:                      ]
6134:                ]
6134:          ]
      
6144:       | nCharType, nStringType, nFileType :
6146:          #eNotImplemented
      
6148:       | nPointerType :
6150:          [ oNodeType( decl )
6157:             | nGlobalVar :   .tPushGlobalP @EmitValue( decl )
6167:             | nLocalVar :
6169:                [ equal_zero( uplevels )
6176:                   | true :  .tPushLocalP  @EmitValue( decl )
6186:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
6206:                ]
6206:             | nParam :
6208:                [ oNodeGetBoolean( decl, qInOut )
6218:                   | true :    % VAR param points to the var.  Auto dereference.
6219:                      [ equal_zero( uplevels )
6226:                         | true :  .tPushParamP  @EmitValue( decl )
6236:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6256:                      ]
6256:                      .tFetchP
6258:                   | * :
6263:                      [ equal_zero( uplevels )
6270:                         | true :  .tPushParamP  @EmitValue( decl )
6280:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6300:                      ]
6300:                ]
6300:          ]
6310:          [
6310:             | '^' :             % dereferenced
6312:                oTypeSPop
6313:                oTypeSPush( oNodeGet( theType, qBaseType ) )
6326:                @LValueIndexes
6328:                @FetchVar
6330:             | * :               % just ptr value alone
6335:          ]
      
6335:       | * :
               % compound type
               % first, push addr of start of var
6352:          [ oNodeType( decl )
6359:             | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
6369:             | nLocalVar :
6371:                [ equal_zero( uplevels )
6378:                   | true :  .tPushAddrLocal  @EmitValue( decl )
6388:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
6408:                ]
6408:             | nParam :
6410:                [ oNodeGetBoolean( decl, qInOut )
6420:                   | true :    % VAR param points to the var.  Auto dereference.
6421:                      [ equal_zero( uplevels )
6428:                         | true :  .tPushParamP  @EmitValue( decl )
6438:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6458:                      ]
6458:                   | * :
6463:                      [ equal_zero( uplevels )
6470:                         | true :  .tPushAddrParam  @EmitValue( decl )
6480:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
6500:                      ]
6500:                ]
6500:          ]
               % modify addr for subscripts, field references, etc
6510:          @LValueIndexes
               % get final value
6512:          @FetchVar
6514:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
6515: FetchVar:
6517:    [ oTypeSNodeType
6519:       | nIntegerType, nEnumType :   .tFetchI
6522:       | nBooleanType :   .tFetchB
6526:       | nCharType, nStringType, nFileType : #eNotImplemented
6530:       | nPointerType :   .tFetchP
6534:       | * :              % compound type; leave as addr
6551:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
6552: LValueIndexes:
6554:    {[
6554:       | '[' :       @ArraySubscripts
6558:       | '.' :       @RecordFieldRef
6562:       | '^' :       @PointerDeref
6566:       | * :         >
6577:    ]};
      
6580: ArraySubscripts:
6582:    [ oTypeSNodeType
6584:       | nArrayType :
6585:       | * :       #eNotArray
6592:    ]
6592:    {
6592:       [ oTypeSNodeType
6594:          | nArrayType :
6595:          | * :    #eTooManySubscripts
6602:       ]
      
            % low subscript of this dimension
6602:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
6619:       Node baseType
6619:       baseType = oNodeGet( oTypeSTop, qBaseType )
6631:       oTypeSPop
6632:       oTypeSPush( baseType )
      
6638:       @Expr
6640:       @RequireIntPop
            % adjust for low subscript
6642:       [ equal_zero( low )
6649:          | false :
6650:             .tPushConstI oEmitInt( low ) .tSubI
6660:          | * :
6665:       ]
      
            % multiply by element size
6665:       int size = oNodeGetInt( baseType, qSize )
6678:       [ equal( size, 1 )
6688:          | false :
6689:             .tPushConstI oEmitInt( size ) .tMultI
6699:          | * :
6704:       ]
      
            % update start address
6704:       .tAddPI
6706:       [
6706:          | ']' :  >
6710:          | ',' :
6712:       ]
6720:    };
      
      
6723: RecordFieldRef:
6725:    [ oTypeSNodeType
6727:       | nRecordType :
6728:       | * :    #eNotRecord
6735:    ]
6735:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
6747:    pIdent
6749:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
6754:    [ oNodeType( field )
6761:       | nRecordField :
6762:       | * :   #eNotRecordField
6769:    ]
6769:    oScopeEnd
6770:    int offset = oNodeGetInt( field, qValue )
6783:    [ equal_zero( offset )
6790:       | false :
6791:          .tPushConstI oEmitInt( offset ) .tAddPI
6801:       | * :
6806:    ]
      
         % replace the type on the type stack, with the field type
6806:    oTypeSPop
6807:    oTypeSPush( oNodeGet( field, qType ) )
6821:    ;
      
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
6821: PointerDeref:
6823:    [ oTypeSNodeType
6825:       | nPointerType :
6826:       | * :       #eNotPointer
6833:    ]
6833:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
6835:    Node theType = oTypeSTop
6840:    oTypeSPop
6841:    oTypeSPush( oNodeGet( theType, qBaseType ) )
6855:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
6855: CoerceType:
         % TO DO: not implemented yet.  For now I require exact type match.
6857:    @MatchTypes
6860:    ;
      
      
      % Called on first use of an extern method
      %
6860: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
6862:    int strAddr
6862:    String externalName = oNodeGetString( method, qExternalName )
6875:    [ equal_string( externalName, stringNull )
6885:       | true :
6886:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
6907:       | false :
6909:          strAddr = oStringAllocLit( externalName )
6919:    ]
6927:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
6943:    ;
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
6943: Call( Node method ):
      
         % Prior to first call, issue extern label for a called method.
         % I don't want to issue .tLabelExtern for unused methods, that seems inefficient.
6945:    [ oNodeGetBoolean( method, qExternal )
6955:       | true :
6956:          [ oNodeGetBoolean( method, qUsed )
6966:             | false :
                     % define the extern label on first use
6967:                @DefineExternLabel( method )
6974:             | * :
6979:          ]
6979:      | * :
6984:    ]
6984:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
6996:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
7009:    Node resultType
7009:    int tempOffset
      
7009:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
7026:    [ isFunc
7029:       | true :
7030:          resultType = oNodeGet( method, qType )
7043:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
7053:       | * :
7058:    ]
         
      
7058:    Node paramScope = oNodeGet( method, qParams )
7071:    int actualsSize = oNodeGetInt( paramScope, qSize )
7084:    [ cdecl
7087:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
7096:       | false :  .tAllocActuals  oEmitInt( actualsSize )
7106:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
7114:    [ greater( @DeclLevel( method ), 0 )
7129:       | true :
7130:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
7138:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
7157:          .tAssignP
7159:       | * :
7164:    ]
      
      
7164:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
7177:    Node param = oNodeIterValue( paramIter )
7187:    [
7187:       | '(' :
            
7189:          {
7189:             [ oNodeNull( param )
7196:                | true : >
7199:                | * :
7204:             ]
      
7204:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
7217:             .tPushAddrActual oEmitInt( offset )
7225:             oTypeSPush( oNodeGet( param, qType ) )
      
7238:             [ oNodeGetBoolean( param, qInOut )
7248:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
7249:                           @LValueExpr
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
7251:                           @MatchTypes
      
7253:                           .tAssignP
      
7255:                | false :  @Expr
7259:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
7261:                           [ oTypeSNodeType
7263:                              | nIntegerType, nEnumType : .tAssignI
7266:                              | nBooleanType :            .tAssignB
7270:                              | nCharType, nStringType, nFileType :   #eNotImplemented
7274:                              | nPointerType :            .tAssignP
7278:                              | * :
                                       % compound types: copy value into actuals space
7295:                                  int size = oNodeGetInt( oTypeSTop, qSize )
7307:                                  .tCopy  oEmitInt( size )    % multi-word copy
7315:                           ]
7315:             ]
7323:             oTypeSPop
      
7324:             oNodeIterNext( paramIter )
7330:             param = oNodeIterValue( paramIter )
7340:             [ oNodeNull( param )
7347:                | true :  >
7350:                | false :
7352:             ]
      
7360:             ','
7362:          }
      
7364:          ')'
      
7366:       | * :
7371:    ]
      
7371:    [ oNodeNull( param )
7378:       | false :    #eMissingParameter
7381:       | * :
7386:    ]
      
7386:    [ isFunc
7389:       | true :
               % Pass result temp as an additional VAR parameter.
7390:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
7405:          .tPushAddrLocal  oEmitInt( tempOffset )
7413:          .tAssignP
7415:       | * :
7420:    ]
      
7420:    [ cdecl
7423:       | true :
7424:          .tCallCdecl  @EmitValue( method )
7433:       | false :
7435:          .tCall   @EmitValue( method )
7444:    ]
      
7452:    [ isFunc
7455:       | true :
               % push return value from temp
7456:          oTypeSPush( resultType )
      
7462:          [ oTypeSNodeType
7464:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
7473:             | nBooleanType :   .tPushLocalB  oEmitInt( tempOffset )
7483:             | nCharType, nStringType, nFileType : #eNotImplemented
7487:             | nPointerType :   .tPushLocalP  oEmitInt( tempOffset )
7497:             | * :              % compound type: push address
7514:                                .tPushAddrLocal  oEmitInt( tempOffset )
7522:          ]
7522:       | * :
7527:    ]
         
7527:    .tFreeActuals  oEmitInt( actualsSize )
7536:    ;
      
      
      % ------------------------------ Statements -----------------------------
      
7536: Statement:
7538:    [
7538:       | pWriteln :     @WritelnStmt
7542:       | pWrite :       @WriteStmt
7546:       | pReadln :      @ReadlnStmt
7550:       | pRead :        @ReadStmt
7554:       | pIf :          @IfStmt
7558:       | pWhile :       @WhileStmt
7562:       | pFor :         @ForStmt
7566:       | pRepeat :      @RepeatStmt
7570:       | pBreak :       @BreakStmt
7574:       | pContinue :    @ContinueStmt
7578:       | pBegin :       @BeginStmt
7582:       | pIdent :       @LabelOrAssignOrCallStmt
7586:       | pGoto :        @GotoStmt
7590:       | pIntLit :      % should be an integer label
7592:                        oChangeIntLitToLabelIdent
7593:                        @LabelOrAssignOrCallStmt
7595:       | * :            % null statement : don't accept any tokens
7626:    ];
      
      
7627: LabelOrAssignOrCallStmt:
7629:    Node decl = oScopeFindRequire
7634:    @ResolveUnitRef( decl )
7641:    [ oNodeType( decl )
7648:       | nLabel :                          @LabelDefinition( decl )
7656:                                           @Statement
7658:       | nProc :                           @Call( decl )
7667:       | nGlobalVar, nLocalVar, nParam :   @AssignStmt( decl )
7676:       | nFunc :                           @AssignResultStmt( decl )
7685:       | * :                               #eBadStatement
7702:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
7703: LabelDefinition( Node decl ):
7705:    [ oNodeGetBoolean( decl, qDefined )
7715:       | true :  #eAlreadyDefined
7718:       | * :
7723:    ]
7723:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
7738:    oNodeSetBoolean( decl, qDefined, true )
7750:    ':'
7753:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
7753: AssignStmt( Node decl ):
      
7755:    @LValueVar( decl )
7762:    ':=' 
7764:    @Expr
7766:    @MatchTypes
7768:    @Assign
7771:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack,
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
7771: Assign:
7773:    [ oTypeSNodeType
7775:       | nIntegerType, nEnumType : .tAssignI
7778:       | nBooleanType :            .tAssignB
7782:       | nCharType, nStringType, nFileType :   #eNotImplemented
      
            % compound var assigns; addrs of src, dest on stack
7786:       | nPointerType :            .tAssignP
7790:       | * :
7807:           int size = oNodeGetInt( oTypeSTop, qSize )
7819:           .tCopy  oEmitInt( size )    % multi-word copy
7827:    ]
7827:    oTypeSPop
7829:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
7829: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
7831:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
7847:       | false :   #eNotCurrentFunction
7850:       | * :
7855:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
7855:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
7870:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
7883:    ':='
7885:    @Expr
7887:    @MatchTypes
7889:    [ oTypeSNodeType
7891:       | nIntegerType, nEnumType : .tAssignI
7894:       | nBooleanType :            .tAssignB
7898:       | nCharType, nStringType, nFileType :   #eNotImplemented
      
            % compound var assigns; addrs of src, dest on stack
7902:       | nPointerType :            .tAssignP
7906:       | * :
7923:           int size = oNodeGetInt( oTypeSTop, qSize )
7935:           .tCopy  oEmitInt( size )    % multi-word copy
7943:    ]
7943:    oTypeSPop
7945:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      %
7945: LValueExpr:
         % At the moment, all lvalue expressions start with a variable name.
         % I think there can also be typecasts, not supported yet.  Check standard syntax.
7947:    pIdent
7949:    Node decl = oScopeFindRequire
7954:    @ResolveUnitRef( decl )
7961:    [ oNodeType( decl )
7968:       | nGlobalVar, nLocalVar, nParam :
7969:       | * :  #eNotVar
7980:    ]
7980:    @LValueVar( decl )
7988:    ;
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
7988: LValueVar( Node decl ):
7990:    [ oNodeType( decl )
7997:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
8007:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
8018:       | nParam :
8020:          [ oNodeGetBoolean( decl, qInOut )
8030:             | true :   % VAR param points to variable.  No dereference.
8031:                        .tPushParamP @EmitValue( decl )
8040:             | * :      .tPushAddrParam @EmitValue( decl )
8054:          ]
8054:       | * :            #eNotVar
8065:    ]
      
8065:    oTypeSPush( oNodeGet( decl, qType ) )
8078:    @LValueIndexes        % handle subscripts, if any
8081:    ;
      
      
8081: IncVar( Node decl ):
8083:    @LValueVar( decl )
8090:    @RequireIntPop
8092:    @VarExpr( decl )
8099:    oTypeSPop
8100:    .tIncI
8102:    .tAssignI;
      
8105: DecVar( Node decl ):
8107:    @LValueVar( decl )
8114:    @RequireIntPop
8116:    @VarExpr( decl )
8123:    oTypeSPop
8124:    .tDecI
8126:    .tAssignI;
      
      
8129: IfStmt:
8131:    Label falseLabel = labelNull
      
8137:    @BooleanExprControlFlow( falseLabel )
8144:    pThen
8146:    @Statement
8148:    [
8148:       | pElse :
8150:          Label doneLabel = oLabelNew
      
8155:          .tJump  oEmitLabel( doneLabel )
8163:          .tLabel oEmitLabel( falseLabel )
8171:          @Statement
8173:          .tLabel oEmitLabel( doneLabel )
      
8181:       | * :
8186:          .tLabel oEmitLabel( falseLabel )
8194:    ];
      
      
8195: ForStmt:
8197:    pIdent
      
8199:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
8204:    @LValueVar( decl )
8211:    @RequireIntPop
      
8213:    ':='
      
8215:    @Expr
8217:    @RequireIntPop
8219:    .tAssignI
      
8221:    Label breakLabel = oLabelNew
      
8226:    Label checkLabel = oLabelNew
8231:    .tJump  oEmitLabel( checkLabel )
      
8239:    Label continueLabel = oLabelNew
8244:    .tLabel  oEmitLabel( continueLabel )
8252:    [
8252:       | pTo :
8254:          @IncVar( decl )
8261:          .tLabel  oEmitLabel( checkLabel )
8269:          @VarExpr( decl )  oTypeSPop
8277:          @Expr
8279:          @RequireIntPop
8281:          .tGreaterI
8283:          .tJumpTrue  oEmitLabel( breakLabel )
8291:       | pDownto :
8293:          @DecVar( decl )
8300:          .tLabel  oEmitLabel( checkLabel )
8308:          @VarExpr( decl )  oTypeSPop
8316:          @Expr
8318:          @RequireIntPop
8320:          .tLessI
8322:          .tJumpTrue  oEmitLabel( breakLabel )
8330:    ]
8338:    oLoopPush( continueLabel, breakLabel )
8347:    pDo
8349:    @Statement
8351:    .tJump  oEmitLabel( continueLabel )
8359:    .tLabel  oEmitLabel( breakLabel )
8367:    oLoopPop;
      
      
8369: RepeatStmt:
8371:    Label continueLabel = oLabelNew
8376:    .tLabel  oEmitLabel( continueLabel )
      
8384:    Label breakLabel = oLabelNew
      
8389:    oLoopPush( continueLabel, breakLabel )
8398:    @Statement
8400:    {[
8400:       | ';' :
8402:          @Statement
8404:       | pUntil :
8406:          Label falseLabel
8406:          @BooleanExprControlFlow( falseLabel )
8413:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
8427:          >
8429:    ]}
8439:    .tLabel  oEmitLabel( breakLabel )
8447:    oLoopPop;
      
      
8449: WhileStmt:
8451:    Label continueLabel = oLabelNew
8456:    .tLabel  oEmitLabel( continueLabel )
      
8464:    Label breakLabel
8464:    @BooleanExprControlFlow( breakLabel )
      
8471:    oLoopPush( continueLabel, breakLabel )
8480:    pDo
8482:    @Statement
8484:    .tJump  oEmitLabel( continueLabel )
8492:    .tLabel  oEmitLabel( breakLabel )
8500:    oLoopPop;
      
      
8502: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
8504:    [ equal_label( oLoopContinueLabel, labelNull )
8513:       | true :
8514:          #eNotInALoop
8516:       | false :
8518:          .tJump  oEmitLabel( oLoopContinueLabel )
8525:    ];
      
      
8534: BreakStmt:
8536:    [ equal_label( oLoopBreakLabel, labelNull )
8545:       | true :
8546:          #eNotInALoop
8548:       | false :
8550:          .tJump  oEmitLabel( oLoopBreakLabel )
8557:    ];
      
      
8566: GotoStmt:
8568:    [
8568:       | pIdent :
8570:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
8572:          oChangeIntLitToLabelIdent
8573:    ]
      
         % Label must be declared in the same scope it is used.
         % (Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.)
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
8581:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
8590:    oNodeSetBoolean( decl, qUsed, true )
8602:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
8618:    ;
      
      
8618: BeginStmt:
8620:    @Statement
8622:    {[
8622:       | ';' :   @Statement
8626:       | pEnd :  >
8630:    ]};
      
      
8641: WritelnStmt:
8643:    @WriteStmt
8645:    .tWriteCR;
      
      
8648: WriteStmt:
8650:    [
8650:       | '(' :
8652:          {
8652:             @Expr
8654:             [ oTypeSNodeType
8656:                | nIntegerType :             .tWriteI
8659:                | nBooleanType :             .tWriteBool
8663:                | nStringType :              .tWriteStr
8667:                | nCharType, nFileType :     #eNotImplemented
8671:                | nEnumType :
                        % write name via table lookup
8673:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
8687:                   .tWriteEnum
8689:                | nPointerType :             .tWriteP
8693:                | * :                        #eNotAllowed
8712:             ]
8712:             oTypeSPop
8713:             [
8713:                | ')' : >
8717:                | ',' :
8719:             ]
8727:          }
8729:       | * :
8734:    ];
      
      
8735: ReadlnStmt:      % ***
         % TO DO
8738:    ;
      
8738: ReadStmt:
         % TO DO
8741:    ;
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
8741: ScopeLevel >> int:
8743:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
8753: DeclLevel( Node decl ) >> int:
8755:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
8773: DeclUpLevels( Node decl ) >> int:
8775:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
8791: MatchTypes:
8793:    node_type nt = oTypeSNodeType
8798:    oTypeSPop
8799:    [ equal_node_type( nt, oTypeSNodeType )
8808:       | false :
8809:          #eTypeMismatch
8811:       | * :
8816:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
8817: RequireIntPop:
8819:    [ oTypeSNodeType
8821:       | nIntegerType :
8822:       | * :          #eNotInteger
8829:    ]
8829:    oTypeSPop;
      
8831: RequireInt:
8833:    [ oTypeSNodeType
8835:       | nIntegerType :
8836:       | * :          #eNotInteger
8843:    ];
      
8844: RequireBoolPop:
8846:    [ oTypeSNodeType
8848:       | nBooleanType :
8849:       | * :          #eNotBoolean
8856:    ]
8856:    oTypeSPop;
      
8858: RequireBool:
8860:    [ oTypeSNodeType
8862:       | nBooleanType :
8863:       | * :          #eNotBoolean
8870:    ];
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
8871: newType( node_type nt, int size ) >> Node:
8873:   Node node = oNodeNew( nt )
8883:   oNodeSetInt( node, qSize, size )
8895:   oTypeAdd( node )
8901:   >> node
8905:   ;
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
8905: newIdent( node_type nt, int id ) >> Node:
8907:   Node t = oNodeNew( nt )
8917:   oNodeSetInt( t, qIdent, id )
8929:   >> t
8933:   ;
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
8933: PointerTypeTo( Node theType ) >> Node:
8935:    Node ptrType = oNodeGet( theType, qPointerType )
8948:    [ oNodeNull( ptrType )
8955:       | true :
8956:          ptrType = oNodeNew( nPointerType )
8966:          oNodeSet( ptrType, qBaseType, theType )
8978:          oNodeSetInt( ptrType, qSize, 8 )
8990:          oTypeAdd( ptrType )
8996:          oNodeSet( theType, qPointerType, ptrType )
9008:       | * :
9013:    ]
9013:    >> ptrType;
      
      
      % Return the low value of an ordinal type
      %
9017: OrdinalLow( Node theType ) >> int:
9019:    [ oNodeType( theType )
9026:       | nIntegerType :  >> oMININT
9029:       | nBooleanType :  >> 0
9034:       | nCharType :     >> 0
9039:       | nEnumType :
9041:          Node enumScope = oNodeGet( theType, qScope )
9054:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
9071:          >> oNodeGetInt( first, qValue )
9081:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
9093:       | * :             #eNotOrdinalType
9108:                         >> 0
9111:    ];
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
9112: EmitValue( Node decl ):
9114:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
9128: installBuiltIns:
      
         % install built-in types
9130:    FileType = @newType( nFileType, 4 )
9144:    IntegerType = @newType( nIntegerType, 4 )
9158:    BooleanType = @newType( nBooleanType, 1 )
9172:    BooleanCFType = @newType( nBooleanCFType, 1 )
9186:    CharType = @newType( nCharType, 1 )
9200:    StringType = @newType( nStringType, 256 )    % string with default length 256
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oIdAdd_File
      
9214:    Node t
      
9214:    t = @newIdent( nTypeDecl, oIdAdd_File )
9227:    oNodeSet( t, qType, FileType )
9239:    oScopeDeclare( t )
      
9245:    t = @newIdent( nTypeDecl, oIdAdd_Integer )
9258:    oNodeSet( t, qType, IntegerType )
9270:    oScopeDeclare( t )
      
9276:    t = @newIdent( nTypeDecl, oIdAdd_Boolean )
9289:    oNodeSet( t, qType, BooleanType )
9301:    oScopeDeclare( t )
      
9307:    t = @newIdent( nTypeDecl, oIdAdd_Char )
9320:    oNodeSet( t, qType, CharType )
9332:    oScopeDeclare( t )
      
9338:    t = @newIdent( nTypeDecl, oIdAdd_String )
9351:    oNodeSet( t, qType, StringType )
9363:    oScopeDeclare( t )
      
         % Built-in constants
      
9369:    t = @newIdent( nConst, oIdAdd_True )
9382:    oNodeSet( t, qType, BooleanType )
9394:    oNodeSetInt( t, qValue, 1 )
9406:    oScopeDeclare( t )
      
9412:    t = @newIdent( nConst, oIdAdd_False )
9425:    oNodeSet( t, qType, BooleanType )
9437:    oNodeSetInt( t, qValue, 0 )
9449:    oScopeDeclare( t )
      
9456:    ;
      
9456: end
      
9456: 

Generated code:

   0: oGlobalSpace 10
   2: oLocalSpace 5
   4: oGetAddrGlobal 1
   6: oPushResult
   7: oWorkspaceNew
   8: oAssign
   9: oSetResult 0
  11: oPushResult
  12: oSetResult 0
  14: oPushResult
  15: oScopeBegin
  16: oPop 2
  18: oGetAddrLocal 2
  20: oPushResult
  21: oScopeCurrent
  22: oAssign
  23: oCall 9128
  25: oEmit 52
  27: oSetResult 0
  29: oPushResult
  30: oEmitInt
  31: oPop 1
  33: oGetAddrLocal 3
  35: oPushResult
  36: oLabelNew
  37: oAssign
  38: oEmit 46
  40: oSetResult 0
  42: oPushResult
  43: oEmitInt
  44: oPop 1
  46: oEmit 49
  48: oGetLocal 3
  50: oPushResult
  51: oEmitLabel
  52: oPop 1
  54: oEmit 48
  56: oSetResult 0
  58: oPushResult
  59: oEmitInt
  60: oPop 1
  62: oEmit 51
  64: oInput 27
  66: oInput 0
  68: oGetAddrLocal 4
  70: oPushResult
  71: oSetResult 4
  73: oPushResult
  74: oNodeNew
  75: oPop 1
  77: oAssign
  78: oGetLocal 4
  80: oPushResult
  81: oSetResult 4
  83: oPushResult
  84: LAST_ID
  85: oPushResult
  86: oNodeSetInt
  87: oPop 3
  89: oGetGlobal 1
  91: oPushResult
  92: oSetResult 2
  94: oPushResult
  95: oGetLocal 4
  97: oPushResult
  98: oNodeSet
  99: oPop 3
 101: oInputChoice 175
 103: oInput 0
 105: oGetAddrLocal 1
 107: oPushResult
 108: oSetResult 17
 110: oPushResult
 111: LAST_ID
 112: oPushResult
 113: oCall 8905
 115: oPop 2
 117: oAssign
 118: oGetLocal 1
 120: oPushResult
 121: oSetResult 21
 123: oPushResult
 124: oGetGlobal 4
 126: oPushResult
 127: oNodeSet
 128: oPop 3
 130: oGetLocal 1
 132: oPushResult
 133: oScopeDeclareAlloc
 134: oPop 1
 136: oInput 12
 138: oInput 0
 140: oGetAddrLocal 1
 142: oPushResult
 143: oSetResult 17
 145: oPushResult
 146: LAST_ID
 147: oPushResult
 148: oCall 8905
 150: oPop 2
 152: oAssign
 153: oGetLocal 1
 155: oPushResult
 156: oSetResult 21
 158: oPushResult
 159: oGetGlobal 4
 161: oPushResult
 162: oNodeSet
 163: oPop 3
 165: oGetLocal 1
 167: oPushResult
 168: oScopeDeclareAlloc
 169: oPop 1
 171: oInput 14
 173: oJumpForward 178
 175: Choice Lookup Table
          13    103
 178: oInput 4
 180: oInputChoice 191
 182: oGetLocal 4
 184: oPushResult
 185: oCall 299
 187: oPop 1
 189: oJumpForward 194
 191: Choice Lookup Table
          56    182
 194: oGetLocal 4
 196: oPushResult
 197: oCall 452
 199: oPop 1
 201: oSetResult 0
 203: oPushResult
 204: oSetResult 0
 206: oPushResult
 207: oScopeBegin
 208: oPop 2
 210: oGetAddrGlobal 2
 212: oPushResult
 213: oScopeCurrent
 214: oAssign
 215: oSetResult 0
 217: oPushResult
 218: oSetResult 1
 220: oPushResult
 221: oScopeBegin
 222: oPop 2
 224: oScopeCurrent
 225: oPushResult
 226: oSetResult 16
 228: oPushResult
 229: oGetGlobal 2
 231: oPushResult
 232: oNodeSet
 233: oPop 3
 235: oGetAddrGlobal 3
 237: oPushResult
 238: oScopeCurrent
 239: oAssign
 240: oGetLocal 4
 242: oPushResult
 243: oSetResult 7
 245: oPushResult
 246: oGetGlobal 3
 248: oPushResult
 249: oNodeSet
 250: oPop 3
 252: oScopeEnd
 253: oSetResult 18
 255: oPushResult
 256: oCall 1388
 258: oPop 1
 260: oGetGlobal 3
 262: oPushResult
 263: oScopeEnter
 264: oPop 1
 266: oGetAddrLocal 5
 268: oPushResult
 269: oSetResult 1
 271: oAssign
 272: oGetLocal 3
 274: oPushResult
 275: oGetGlobal 2
 277: oPushResult
 278: oGetLocal 5
 280: oPushResult
 281: oCall 1709
 283: oPop 3
 285: oScopeEnd
 286: oInput 19
 288: oCall 1444
 290: oScopeEnd
 291: oGetLocal 4
 293: oPushResult
 294: oCall 514
 296: oPop 1
 298: oReturn
 299: oLocalSpace 2
 301: oInput 0
 303: oGetAddrLocal 1
 305: oPushResult
 306: LAST_ID
 307: oPushResult
 308: oCall 593
 310: oPop 1
 312: oAssign
 313: oGetLocal 1
 315: oPushResult
 316: oSetResult 0
 318: oPushResult
 319: equal_node
 320: oPop 2
 322: oChoice 392
 324: oGetParam 1
 326: oPushResult
 327: oSetResult 5
 329: oPushResult
 330: oGetLocal 1
 332: oPushResult
 333: oNodeAddLast
 334: oPop 3
 336: oGetAddrLocal 2
 338: oPushResult
 339: oSetResult 10
 341: oPushResult
 342: oNodeNew
 343: oPop 1
 345: oAssign
 346: oGetLocal 2
 348: oPushResult
 349: oSetResult 4
 351: oPushResult
 352: oGetLocal 1
 354: oPushResult
 355: oSetResult 4
 357: oPushResult
 358: oNodeGetInt
 359: oPop 2
 361: oPushResult
 362: oNodeSetInt
 363: oPop 3
 365: oGetLocal 2
 367: oPushResult
 368: oSetResult 9
 370: oPushResult
 371: oGetLocal 1
 373: oPushResult
 374: oSetResult 9
 376: oPushResult
 377: oNodeGet
 378: oPop 2
 380: oPushResult
 381: oNodeSet
 382: oPop 3
 384: oGetLocal 2
 386: oPushResult
 387: oScopeDeclare
 388: oPop 1
 390: oJumpForward 395
 392: Choice Lookup Table
           0    324
 395: oInputChoice 399
 397: oJumpForward 404
 399: Choice Lookup Table
          12    397
 402: oJumpForward 406
 404: oJumpBack 301
 406: oInput 4
 408: oReturn
 409: oLocalSpace 1
 411: oGetFromParam 1
 413: oPushResult
 414: oNodeType
 415: oPop 1
 417: oChoice 448
 419: oGetAddrLocal 1
 421: oPushResult
 422: oGetFromParam 1
 424: oPushResult
 425: oSetResult 9
 427: oPushResult
 428: oNodeGet
 429: oPop 2
 431: oAssign
 432: oInput 19
 434: oInput 0
 436: oGetParam 1
 438: oPushResult
 439: oGetLocal 1
 441: oPushResult
 442: oScopeFindRequireInScope
 443: oPop 1
 445: oAssign
 446: oJumpForward 451
 448: Choice Lookup Table
          10    419
 451: oReturn
 452: oLocalSpace 2
 454: oGetAddrLocal 1
 456: oPushResult
 457: oGetParam 1
 459: oPushResult
 460: oSetResult 5
 462: oPushResult
 463: oNodeGetIter
 464: oPop 2
 466: oAssign
 467: oGetAddrLocal 2
 469: oPushResult
 470: oGetLocal 1
 472: oPushResult
 473: oNodeIterValue
 474: oPop 1
 476: oAssign
 477: oGetLocal 2
 479: oPushResult
 480: oNodeNull
 481: oPop 1
 483: oChoice 500
 485: oGetLocal 2
 487: oPushResult
 488: oSetResult 9
 490: oPushResult
 491: oNodeGet
 492: oPop 2
 494: oPushResult
 495: oScopeEnter
 496: oPop 1
 498: oJumpForward 505
 500: Choice Lookup Table
           0    485
 503: oJumpForward 513
 505: oGetAddrLocal 1
 507: oPushResult
 508: oNodeIterNext
 509: oPop 1
 511: oJumpBack 467
 513: oReturn
 514: oLocalSpace 2
 516: oGetAddrLocal 1
 518: oPushResult
 519: oGetParam 1
 521: oPushResult
 522: oSetResult 5
 524: oPushResult
 525: oNodeGetIterLast
 526: oPop 2
 528: oAssign
 529: oGetAddrLocal 2
 531: oPushResult
 532: oGetLocal 1
 534: oPushResult
 535: oNodeIterValue
 536: oPop 1
 538: oAssign
 539: oGetLocal 2
 541: oPushResult
 542: oNodeNull
 543: oPop 1
 545: oChoice 579
 547: oScopeCurrent
 548: oPushResult
 549: oGetLocal 2
 551: oPushResult
 552: oSetResult 9
 554: oPushResult
 555: oNodeGet
 556: oPop 2
 558: oPushResult
 559: oNodeEqual
 560: oPop 2
 562: oChoice 570
 564: oJumpForward 576
 566: oError 25
 568: oJumpForward 576
 570: Choice Lookup Table
           0    566
           1    564
 575: oEndChoice
 576: oScopeEnd
 577: oJumpForward 584
 579: Choice Lookup Table
           0    547
 582: oJumpForward 592
 584: oGetAddrLocal 1
 586: oPushResult
 587: oNodeIterPrev
 588: oPop 1
 590: oJumpBack 529
 592: oReturn
 593: oLocalSpace 2
 595: oGetAddrLocal 1
 597: oPushResult
 598: oGetGlobal 1
 600: oPushResult
 601: oSetResult 1
 603: oPushResult
 604: oSetResult 4
 606: oPushResult
 607: oGetParam 1
 609: oPushResult
 610: oNodeFind
 611: oPop 4
 613: oAssign
 614: oGetLocal 1
 616: oPushResult
 617: oSetResult 0
 619: oPushResult
 620: equal_node
 621: oPop 2
 623: oChoice 630
 625: oGetLocal 1
 627: oReturn
 628: oJumpForward 633
 630: Choice Lookup Table
           0    625
 633: oGetAddrLocal 2
 635: oPushResult
 636: oGetParam 1
 638: oPushResult
 639: oIncludeUnitFile
 640: oPop 1
 642: oAssign
 643: oGetLocal 2
 645: oChoice 654
 647: oError 24
 649: oSetResult 0
 651: oReturn
 652: oJumpForward 657
 654: Choice Lookup Table
           0    647
 657: oGetAddrLocal 1
 659: oPushResult
 660: oCall 668
 662: oAssign
 663: oIncludeEnd
 664: oGetLocal 1
 666: oReturn
 667: oReturn
 668: oLocalSpace 2
 670: oInput 57
 672: oInput 0
 674: oGetAddrLocal 1
 676: oPushResult
 677: oSetResult 5
 679: oPushResult
 680: oNodeNew
 681: oPop 1
 683: oAssign
 684: oGetLocal 1
 686: oPushResult
 687: oSetResult 4
 689: oPushResult
 690: LAST_ID
 691: oPushResult
 692: oNodeSetInt
 693: oPop 3
 695: oGetAddrLocal 2
 697: oPushResult
 698: oSetResult 6
 700: oPushResult
 701: oNodeNew
 702: oPop 1
 704: oAssign
 705: oGetLocal 2
 707: oPushResult
 708: oSetResult 4
 710: oPushResult
 711: LAST_ID
 712: oPushResult
 713: oNodeSetInt
 714: oPop 3
 716: oGetLocal 1
 718: oPushResult
 719: oSetResult 8
 721: oPushResult
 722: oGetLocal 2
 724: oPushResult
 725: oNodeSet
 726: oPop 3
 728: oInput 4
 730: oInput 58
 732: oInputChoice 743
 734: oGetLocal 1
 736: oPushResult
 737: oCall 299
 739: oPop 1
 741: oJumpForward 746
 743: Choice Lookup Table
          56    734
 746: oGetLocal 1
 748: oPushResult
 749: oCall 452
 751: oPop 1
 753: oSetResult 0
 755: oPushResult
 756: oSetResult 0
 758: oPushResult
 759: oScopeBegin
 760: oPop 2
 762: oGetLocal 1
 764: oPushResult
 765: oSetResult 9
 767: oPushResult
 768: oScopeCurrent
 769: oPushResult
 770: oNodeSet
 771: oPop 3
 773: oGetAddrGlobal 2
 775: oPushResult
 776: oScopeCurrent
 777: oAssign
 778: oSetResult 0
 780: oPushResult
 781: oSetResult 1
 783: oPushResult
 784: oScopeBegin
 785: oPop 2
 787: oGetAddrGlobal 3
 789: oPushResult
 790: oScopeCurrent
 791: oAssign
 792: oGetLocal 1
 794: oPushResult
 795: oSetResult 13
 797: oPushResult
 798: oGetGlobal 3
 800: oPushResult
 801: oNodeSet
 802: oPop 3
 804: oScopeEnd
 805: oGetLocal 1
 807: oPushResult
 808: oCall 989
 810: oPop 1
 812: oScopeEnd
 813: oInput 59
 815: oInputChoice 826
 817: oGetLocal 2
 819: oPushResult
 820: oCall 299
 822: oPop 1
 824: oJumpForward 829
 826: Choice Lookup Table
          56    817
 829: oGetLocal 2
 831: oPushResult
 832: oCall 452
 834: oPop 1
 836: oGetLocal 1
 838: oPushResult
 839: oSetResult 9
 841: oPushResult
 842: oNodeGet
 843: oPop 2
 845: oPushResult
 846: oScopeEnter
 847: oPop 1
 849: oSetResult 0
 851: oPushResult
 852: oSetResult 0
 854: oPushResult
 855: oScopeBegin
 856: oPop 2
 858: oGetLocal 1
 860: oPushResult
 861: oSetResult 10
 863: oPushResult
 864: oScopeCurrent
 865: oPushResult
 866: oNodeSet
 867: oPop 3
 869: oScopeCurrent
 870: oPushResult
 871: oSetResult 16
 873: oPushResult
 874: oGetLocal 1
 876: oPushResult
 877: oSetResult 9
 879: oPushResult
 880: oNodeGet
 881: oPop 2
 883: oPushResult
 884: oNodeSet
 885: oPop 3
 887: oGetAddrGlobal 2
 889: oPushResult
 890: oScopeCurrent
 891: oAssign
 892: oGetLocal 1
 894: oPushResult
 895: oCall 1074
 897: oPop 1
 899: oInputChoice 913
 901: oGetLocal 1
 903: oPushResult
 904: oSetResult 1
 906: oPushResult
 907: oCall 1084
 909: oPop 2
 911: oJumpForward 926
 913: Choice Lookup Table
          60    901
 916: oGetLocal 1
 918: oPushResult
 919: oSetResult 0
 921: oPushResult
 922: oCall 1084
 924: oPop 2
 926: oInputChoice 940
 928: oGetLocal 1
 930: oPushResult
 931: oSetResult 1
 933: oPushResult
 934: oCall 1270
 936: oPop 2
 938: oJumpForward 953
 940: Choice Lookup Table
          61    928
 943: oGetLocal 1
 945: oPushResult
 946: oSetResult 0
 948: oPushResult
 949: oCall 1270
 951: oPop 2
 953: oInput 35
 955: oInput 19
 957: oScopeEnd
 958: oScopeEnd
 959: oGetLocal 2
 961: oPushResult
 962: oCall 514
 964: oPop 1
 966: oGetLocal 1
 968: oPushResult
 969: oCall 514
 971: oPop 1
 973: oGetGlobal 1
 975: oPushResult
 976: oSetResult 1
 978: oPushResult
 979: oGetLocal 1
 981: oPushResult
 982: oNodeAddLast
 983: oPop 3
 985: oGetLocal 1
 987: oReturn
 988: oReturn
 989: oLocalSpace 2
 991: oInputChoice 1058
 993: oCall 2982
 995: oJumpForward 1071
 997: oCall 3051
 999: oJumpForward 1071
1001: oSetResult 18
1003: oPushResult
1004: oCall 3107
1006: oPop 1
1008: oJumpForward 1071
1010: oGetAddrLocal 1
1012: oPushResult
1013: oCall 1949
1015: oAssign
1016: oInputChoice 1029
1018: oGetLocal 1
1020: oPushResult
1021: oCall 1887
1023: oPop 1
1025: oInput 4
1027: oJumpForward 1032
1029: Choice Lookup Table
          67   1018
1032: oJumpForward 1071
1034: oGetAddrLocal 2
1036: oPushResult
1037: oCall 2323
1039: oAssign
1040: oInputChoice 1053
1042: oGetLocal 2
1044: oPushResult
1045: oCall 1887
1047: oPop 1
1049: oInput 4
1051: oJumpForward 1056
1053: Choice Lookup Table
          67   1042
1056: oJumpForward 1071
1058: Choice Lookup Table
          29   1034
          28   1010
          32   1001
          31    997
          30    993
1069: oJumpForward 1073
1071: oJumpBack 991
1073: oReturn
1074: oLocalSpace 0
1076: oSetResult 18
1078: oPushResult
1079: oCall 1388
1081: oPop 1
1083: oReturn
1084: oLocalSpace 5
1086: oGetAddrLocal 1
1088: oPushResult
1089: oLabelNew
1090: oAssign
1091: oEmit 56
1093: oGetLocal 1
1095: oPushResult
1096: oEmitLabel
1097: oPop 1
1099: oGetParam 2
1101: oPushResult
1102: oSetResult 11
1104: oPushResult
1105: oGetLocal 1
1107: oPushResult
1108: oNodeSetLabel
1109: oPop 3
1111: oEmit 52
1113: oGetAddrLocal 2
1115: oPushResult
1116: Here
1117: oAssign
1118: oEmit 65
1120: oGetAddrLocal 3
1122: oPushResult
1123: oGetParam 2
1125: oPushResult
1126: oSetResult 9
1128: oPushResult
1129: oNodeGet
1130: oPop 2
1132: oAssign
1133: oGetAddrLocal 4
1135: oPushResult
1136: oGetLocal 3
1138: oPushResult
1139: oSetResult 19
1141: oPushResult
1142: oNodeGetCode
1143: oPop 2
1145: oAssign
1146: oGetLocal 4
1148: oPushResult
1149: oEmitCode
1150: oPop 1
1152: oGetLocal 3
1154: oPushResult
1155: oSetResult 19
1157: oPushResult
1158: oSetResult 0
1160: oPushResult
1161: oNodeSetCode
1162: oPop 3
1164: oGetAddrLocal 3
1166: oPushResult
1167: oGetParam 2
1169: oPushResult
1170: oSetResult 10
1172: oPushResult
1173: oNodeGet
1174: oPop 2
1176: oAssign
1177: oGetAddrLocal 4
1179: oPushResult
1180: oGetLocal 3
1182: oPushResult
1183: oSetResult 19
1185: oPushResult
1186: oNodeGetCode
1187: oPop 2
1189: oAssign
1190: oGetLocal 4
1192: oPushResult
1193: oEmitCode
1194: oPop 1
1196: oGetLocal 3
1198: oPushResult
1199: oSetResult 19
1201: oPushResult
1202: oSetResult 0
1204: oPushResult
1205: oNodeSetCode
1206: oPop 3
1208: oGetParam 2
1210: oPushResult
1211: oSetResult 13
1213: oPushResult
1214: oNodeGet
1215: oPop 2
1217: oPushResult
1218: oScopeEnter
1219: oPop 1
1221: oGetParam 1
1223: oChoice 1242
1225: oCall 7536
1227: oInputChoice 1233
1229: oCall 7536
1231: oJumpForward 1238
1233: Choice Lookup Table
           4   1229
1236: oJumpForward 1240
1238: oJumpBack 1227
1240: oJumpForward 1245
1242: Choice Lookup Table
           1   1225
1245: oEmit 51
1247: oGetAddrLocal 5
1249: oPushResult
1250: oScopeCurrent
1251: oPushResult
1252: oSetResult 17
1254: oPushResult
1255: oNodeGetInt
1256: oPop 2
1258: oAssign
1259: oGetLocal 2
1261: oPushResult
1262: oGetLocal 5
1264: oPushResult
1265: oPatch
1266: oPop 2
1268: oScopeEnd
1269: oReturn
1270: oLocalSpace 3
1272: oGetAddrLocal 1
1274: oPushResult
1275: oLabelNew
1276: oAssign
1277: oEmit 56
1279: oGetLocal 1
1281: oPushResult
1282: oEmitLabel
1283: oPop 1
1285: oGetParam 2
1287: oPushResult
1288: oSetResult 12
1290: oPushResult
1291: oGetLocal 1
1293: oPushResult
1294: oNodeSetLabel
1295: oPop 3
1297: oEmit 52
1299: oGetAddrLocal 2
1301: oPushResult
1302: Here
1303: oAssign
1304: oEmit 65
1306: oSetResult 0
1308: oPushResult
1309: oSetResult 1
1311: oPushResult
1312: oScopeBegin
1313: oPop 2
1315: oGetParam 1
1317: oChoice 1336
1319: oCall 7536
1321: oInputChoice 1327
1323: oCall 7536
1325: oJumpForward 1332
1327: Choice Lookup Table
           4   1323
1330: oJumpForward 1334
1332: oJumpBack 1321
1334: oJumpForward 1339
1336: Choice Lookup Table
           1   1319
1339: oEmit 51
1341: oGetAddrLocal 3
1343: oPushResult
1344: oScopeCurrent
1345: oPushResult
1346: oSetResult 17
1348: oPushResult
1349: oNodeGetInt
1350: oPop 2
1352: oAssign
1353: oGetLocal 2
1355: oPushResult
1356: oGetLocal 3
1358: oPushResult
1359: oPatch
1360: oPop 2
1362: oScopeEnd
1363: oReturn
1364: oLocalSpace 0
1366: oGetParam 2
1368: oPushResult
1369: oCall 1388
1371: oPop 1
1373: oGetParam 1
1375: oPushResult
1376: oScopeCurrent
1377: oPushResult
1378: oSetResult 0
1380: oPushResult
1381: oCall 1709
1383: oPop 3
1385: oCall 1444
1387: oReturn
1388: oLocalSpace 0
1390: oInputChoice 1421
1392: oCall 2982
1394: oJumpForward 1436
1396: oCall 3051
1398: oJumpForward 1436
1400: oGetParam 1
1402: oPushResult
1403: oCall 3107
1405: oPop 1
1407: oJumpForward 1436
1409: oCall 3338
1411: oJumpForward 1436
1413: oCall 2205
1415: oJumpForward 1436
1417: oCall 2640
1419: oJumpForward 1436
1421: Choice Lookup Table
          29   1417
          28   1413
          33   1409
          32   1400
          31   1396
          30   1392
1434: oJumpForward 1438
1436: oJumpBack 1390
1438: oCall 1441
1440: oReturn
1441: oLocalSpace 0
1443: oReturn
1444: oLocalSpace 2
1446: oGetAddrLocal 1
1448: oPushResult
1449: oScopeCurrent
1450: oPushResult
1451: oSetResult 15
1453: oPushResult
1454: oNodeGetIter
1455: oPop 2
1457: oAssign
1458: oGetAddrLocal 2
1460: oPushResult
1461: oGetLocal 1
1463: oPushResult
1464: oNodeIterValue
1465: oPop 1
1467: oAssign
1468: oGetLocal 2
1470: oPushResult
1471: oNodeNull
1472: oPop 1
1474: oChoice 1478
1476: oJumpForward 1483
1478: Choice Lookup Table
           0   1476
1481: oJumpForward 1538
1483: oGetLocal 2
1485: oPushResult
1486: oNodeType
1487: oPop 1
1489: oChoice 1527
1491: oGetLocal 2
1493: oPushResult
1494: oSetResult 34
1496: oPushResult
1497: oNodeGetBoolean
1498: oPop 2
1500: oChoice 1522
1502: oGetLocal 2
1504: oPushResult
1505: oSetResult 28
1507: oPushResult
1508: oNodeGetBoolean
1509: oPop 2
1511: oChoice 1517
1513: oError 27
1515: oJumpForward 1520
1517: Choice Lookup Table
           1   1513
1520: oJumpForward 1525
1522: Choice Lookup Table
           0   1502
1525: oJumpForward 1530
1527: Choice Lookup Table
          22   1491
1530: oGetAddrLocal 1
1532: oPushResult
1533: oNodeIterNext
1534: oPop 1
1536: oJumpBack 1458
1538: oReturn
1539: oLocalSpace 2
1541: oGetAddrLocal 1
1543: oPushResult
1544: oGetGlobal 1
1546: oPushResult
1547: oSetResult 1
1549: oPushResult
1550: oNodeGetIter
1551: oPop 2
1553: oAssign
1554: oGetAddrLocal 2
1556: oPushResult
1557: oGetLocal 1
1559: oPushResult
1560: oNodeIterValue
1561: oPop 1
1563: oAssign
1564: oGetLocal 2
1566: oPushResult
1567: oNodeNull
1568: oPop 1
1570: oChoice 1615
1572: oJumpForward 1623
1574: oJumpForward 1621
1576: oEmit 46
1578: oSetResult 0
1580: oPushResult
1581: oEmitInt
1582: oPop 1
1584: oEmit 49
1586: oGetLocal 2
1588: oPushResult
1589: oSetResult 11
1591: oPushResult
1592: oNodeGetLabel
1593: oPop 2
1595: oPushResult
1596: oEmitLabel
1597: oPop 1
1599: oEmit 48
1601: oSetResult 0
1603: oPushResult
1604: oEmitInt
1605: oPop 1
1607: oGetAddrLocal 1
1609: oPushResult
1610: oNodeIterNext
1611: oPop 1
1613: oJumpForward 1621
1615: Choice Lookup Table
           0   1576
           1   1572
1620: oEndChoice
1621: oJumpBack 1554
1623: oReturn
1624: oLocalSpace 2
1626: oGetAddrLocal 1
1628: oPushResult
1629: oGetGlobal 1
1631: oPushResult
1632: oSetResult 1
1634: oPushResult
1635: oNodeGetIterLast
1636: oPop 2
1638: oAssign
1639: oGetAddrLocal 2
1641: oPushResult
1642: oGetLocal 1
1644: oPushResult
1645: oNodeIterValue
1646: oPop 1
1648: oAssign
1649: oGetLocal 2
1651: oPushResult
1652: oNodeNull
1653: oPop 1
1655: oChoice 1700
1657: oJumpForward 1708
1659: oJumpForward 1706
1661: oEmit 46
1663: oSetResult 0
1665: oPushResult
1666: oEmitInt
1667: oPop 1
1669: oEmit 49
1671: oGetLocal 2
1673: oPushResult
1674: oSetResult 12
1676: oPushResult
1677: oNodeGetLabel
1678: oPop 2
1680: oPushResult
1681: oEmitLabel
1682: oPop 1
1684: oEmit 48
1686: oSetResult 0
1688: oPushResult
1689: oEmitInt
1690: oPop 1
1692: oGetAddrLocal 1
1694: oPushResult
1695: oNodeIterPrev
1696: oPop 1
1698: oJumpForward 1706
1700: Choice Lookup Table
           0   1661
           1   1657
1705: oEndChoice
1706: oJumpBack 1639
1708: oReturn
1709: oLocalSpace 3
1711: oEmit 56
1713: oGetParam 3
1715: oPushResult
1716: oEmitLabel
1717: oPop 1
1719: oEmit 52
1721: oGetAddrLocal 1
1723: oPushResult
1724: Here
1725: oAssign
1726: oEmit 65
1728: oGetParam 1
1730: oChoice 1736
1732: oCall 1539
1734: oJumpForward 1739
1736: Choice Lookup Table
           1   1732
1739: oGetAddrLocal 2
1741: oPushResult
1742: oGetParam 2
1744: oPushResult
1745: oSetResult 19
1747: oPushResult
1748: oNodeGetCode
1749: oPop 2
1751: oAssign
1752: oGetLocal 2
1754: oPushResult
1755: oEmitCode
1756: oPop 1
1758: oGetParam 2
1760: oPushResult
1761: oSetResult 19
1763: oPushResult
1764: oSetResult 0
1766: oPushResult
1767: oNodeSetCode
1768: oPop 3
1770: oCall 7536
1772: oGetParam 1
1774: oChoice 1780
1776: oCall 1624
1778: oJumpForward 1783
1780: Choice Lookup Table
           1   1776
1783: oEmit 51
1785: oGetAddrLocal 3
1787: oPushResult
1788: oScopeCurrent
1789: oPushResult
1790: oSetResult 17
1792: oPushResult
1793: oNodeGetInt
1794: oPop 2
1796: oAssign
1797: oGetLocal 1
1799: oPushResult
1800: oGetLocal 3
1802: oPushResult
1803: oPatch
1804: oPop 2
1806: oReturn
1807: oLocalSpace 0
1809: oInputChoice 1827
1811: oGetParam 1
1813: oPushResult
1814: oSetResult 27
1816: oPushResult
1817: oSetResult 1
1819: oPushResult
1820: oNodeSetBoolean
1821: oPop 3
1823: oInput 4
1825: oJumpForward 1832
1827: Choice Lookup Table
          69   1811
1830: oJumpForward 1834
1832: oJumpBack 1809
1834: oReturn
1835: oLocalSpace 1
1837: oGetAddrLocal 1
1839: oPushResult
1840: oGetParam 1
1842: oPushResult
1843: oSetResult 19
1845: oPushResult
1846: oNodeGetCode
1847: oPop 2
1849: oAssign
1850: oGetLocal 1
1852: oPushResult
1853: oSetResult 0
1855: oPushResult
1856: equal_code
1857: oPop 2
1859: oChoice 1880
1861: oGetAddrLocal 1
1863: oPushResult
1864: oCodeNew
1865: oAssign
1866: oGetParam 1
1868: oPushResult
1869: oSetResult 19
1871: oPushResult
1872: oGetLocal 1
1874: oPushResult
1875: oNodeSetCode
1876: oPop 3
1878: oJumpForward 1883
1880: Choice Lookup Table
           1   1861
1883: oGetLocal 1
1885: oReturn
1886: oReturn
1887: oLocalSpace 0
1889: oGetParam 1
1891: oPushResult
1892: oCall 8753
1894: oPop 1
1896: oPushResult
1897: equal_zero
1898: oPop 1
1900: oChoice 1906
1902: oError 23
1904: oJumpForward 1909
1906: Choice Lookup Table
           0   1902
1909: oGetParam 1
1911: oPushResult
1912: oSetResult 25
1914: oPushResult
1915: oSetResult 1
1917: oPushResult
1918: oNodeSetBoolean
1919: oPop 3
1921: oInputChoice 1945
1923: oInputChoice 1940
1925: oInput 2
1927: oGetParam 1
1929: oPushResult
1930: oSetResult 26
1932: oPushResult
1933: CURRENT_STRLIT
1934: oPushResult
1935: oNodeSetString
1936: oPop 3
1938: oJumpForward 1943
1940: Choice Lookup Table
          68   1925
1943: oJumpForward 1948
1945: Choice Lookup Table
           2   1923
1948: oReturn
1949: oLocalSpace 6
1951: oInput 0
1953: oGetAddrLocal 1
1955: oPushResult
1956: oSetResult 0
1958: oAssign
1959: oGetAddrLocal 2
1961: oPushResult
1962: oScopeFindInCurrentScope
1963: oAssign
1964: oGetLocal 2
1966: oPushResult
1967: oNodeNull
1968: oPop 1
1970: oChoice 2088
1972: oGetAddrLocal 2
1974: oPushResult
1975: oSetResult 12
1977: oPushResult
1978: LAST_ID
1979: oPushResult
1980: oCall 8905
1982: oPop 2
1984: oAssign
1985: oGetLocal 2
1987: oPushResult
1988: oSetResult 22
1990: oPushResult
1991: oLabelNew
1992: oPushResult
1993: oNodeSetLabel
1994: oPop 3
1996: oJumpForward 2094
1998: oGetAddrLocal 1
2000: oPushResult
2001: oSetResult 1
2003: oAssign
2004: oGetLocal 2
2006: oPushResult
2007: oSetResult 24
2009: oPushResult
2010: oNodeGetBoolean
2011: oPop 2
2013: oChoice 2019
2015: oError 21
2017: oJumpForward 2022
2019: Choice Lookup Table
           1   2015
2022: oGetLocal 2
2024: oPushResult
2025: oSetResult 25
2027: oPushResult
2028: oNodeGetBoolean
2029: oPop 2
2031: oChoice 2037
2033: oError 21
2035: oJumpForward 2040
2037: Choice Lookup Table
           1   2033
2040: oGetLocal 2
2042: oPushResult
2043: oNodeType
2044: oPop 1
2046: oChoice 2050
2048: oJumpForward 2055
2050: Choice Lookup Table
          12   2048
2053: oError 21
2055: oGetLocal 2
2057: oPushResult
2058: oSetResult 29
2060: oPushResult
2061: oGetLocal 2
2063: oPushResult
2064: oSetResult 23
2066: oPushResult
2067: oNodeGet
2068: oPop 2
2070: oPushResult
2071: oNodeSet
2072: oPop 3
2074: oGetLocal 2
2076: oPushResult
2077: oSetResult 23
2079: oPushResult
2080: oSetResult 0
2082: oPushResult
2083: oNodeSet
2084: oPop 3
2086: oJumpForward 2094
2088: Choice Lookup Table
           0   1998
           1   1972
2093: oEndChoice
2094: oGetAddrLocal 3
2096: oPushResult
2097: oCall 8741
2099: oAssign
2100: oGetAddrLocal 4
2102: oPushResult
2103: oGetLocal 3
2105: oPushResult
2106: oSetResult 0
2108: oPushResult
2109: greater
2110: oPop 2
2112: oAssign
2113: oGetAddrLocal 3
2115: oPushResult
2116: inc
2117: oPop 1
2119: oGetLocal 3
2121: oPushResult
2122: oSetResult 2
2124: oPushResult
2125: oScopeBegin
2126: oPop 2
2128: oGetAddrLocal 5
2130: oPushResult
2131: oScopeCurrent
2132: oAssign
2133: oGetLocal 4
2135: oChoice 2154
2137: oGetAddrLocal 6
2139: oPushResult
2140: oGetGlobal 5
2142: oPushResult
2143: oCall 8933
2145: oPop 1
2147: oPushResult
2148: oScopeAllocType
2149: oPop 1
2151: oAssign
2152: oJumpForward 2157
2154: Choice Lookup Table
           1   2137
2157: oCall 2758
2159: oGetLocal 2
2161: oPushResult
2162: oSetResult 23
2164: oPushResult
2165: oGetLocal 5
2167: oPushResult
2168: oNodeSet
2169: oPop 3
2171: oScopeEnd
2172: oInput 4
2174: oGetLocal 1
2176: oChoice 2188
2178: oGetLocal 2
2180: oPushResult
2181: oScopeDeclare
2182: oPop 1
2184: oJumpForward 2194
2186: oJumpForward 2194
2188: Choice Lookup Table
           1   2186
           0   2178
2193: oEndChoice
2194: oGetLocal 2
2196: oPushResult
2197: oCall 1807
2199: oPop 1
2201: oGetLocal 2
2203: oReturn
2204: oReturn
2205: oLocalSpace 4
2207: oGetAddrLocal 1
2209: oPushResult
2210: oCall 1949
2212: oAssign
2213: oInputChoice 2226
2215: oJumpForward 2320
2217: oGetLocal 1
2219: oPushResult
2220: oCall 1887
2222: oPop 1
2224: oJumpForward 2320
2226: Choice Lookup Table
          67   2217
          66   2215
2231: oGetAddrLocal 2
2233: oPushResult
2234: oGetLocal 1
2236: oPushResult
2237: oSetResult 23
2239: oPushResult
2240: oNodeGet
2241: oPop 2
2243: oAssign
2244: oGetLocal 2
2246: oPushResult
2247: oScopeEnter
2248: oPop 1
2250: oGetAddrLocal 3
2252: oPushResult
2253: oGetLocal 2
2255: oPushResult
2256: oSetResult 14
2258: oPushResult
2259: oNodeGetInt
2260: oPop 2
2262: oAssign
2263: oGetLocal 3
2265: oPushResult
2266: oSetResult 1
2268: oPushResult
2269: oScopeBegin
2270: oPop 2
2272: oGetLocal 1
2274: oPushResult
2275: oSetResult 6
2277: oPushResult
2278: oScopeCurrent
2279: oPushResult
2280: oNodeSet
2281: oPop 3
2283: oGetAddrLocal 4
2285: oPushResult
2286: oGetLocal 1
2288: oPushResult
2289: oSetResult 22
2291: oPushResult
2292: oNodeGetLabel
2293: oPop 2
2295: oAssign
2296: oSetResult 19
2298: oPushResult
2299: oGetLocal 4
2301: oPushResult
2302: oCall 1364
2304: oPop 2
2306: oGetLocal 1
2308: oPushResult
2309: oSetResult 24
2311: oPushResult
2312: oSetResult 1
2314: oPushResult
2315: oNodeSetBoolean
2316: oPop 3
2318: oScopeEnd
2319: oScopeEnd
2320: oInput 4
2322: oReturn
2323: oLocalSpace 8
2325: oInput 0
2327: oGetAddrLocal 1
2329: oPushResult
2330: oSetResult 0
2332: oAssign
2333: oGetAddrLocal 2
2335: oPushResult
2336: oScopeFindInCurrentScope
2337: oAssign
2338: oGetLocal 2
2340: oPushResult
2341: oNodeNull
2342: oPop 1
2344: oChoice 2475
2346: oGetAddrLocal 2
2348: oPushResult
2349: oSetResult 13
2351: oPushResult
2352: LAST_ID
2353: oPushResult
2354: oCall 8905
2356: oPop 2
2358: oAssign
2359: oGetLocal 2
2361: oPushResult
2362: oSetResult 22
2364: oPushResult
2365: oLabelNew
2366: oPushResult
2367: oNodeSetLabel
2368: oPop 3
2370: oJumpForward 2481
2372: oGetAddrLocal 1
2374: oPushResult
2375: oSetResult 1
2377: oAssign
2378: oGetLocal 2
2380: oPushResult
2381: oSetResult 24
2383: oPushResult
2384: oNodeGetBoolean
2385: oPop 2
2387: oChoice 2393
2389: oError 21
2391: oJumpForward 2396
2393: Choice Lookup Table
           1   2389
2396: oGetLocal 2
2398: oPushResult
2399: oNodeType
2400: oPop 1
2402: oChoice 2406
2404: oJumpForward 2411
2406: Choice Lookup Table
          13   2404
2409: oError 21
2411: oGetLocal 2
2413: oPushResult
2414: oSetResult 29
2416: oPushResult
2417: oGetLocal 2
2419: oPushResult
2420: oSetResult 23
2422: oPushResult
2423: oNodeGet
2424: oPop 2
2426: oPushResult
2427: oNodeSet
2428: oPop 3
2430: oGetLocal 2
2432: oPushResult
2433: oSetResult 23
2435: oPushResult
2436: oSetResult 0
2438: oPushResult
2439: oNodeSet
2440: oPop 3
2442: oGetLocal 2
2444: oPushResult
2445: oSetResult 30
2447: oPushResult
2448: oGetLocal 2
2450: oPushResult
2451: oSetResult 21
2453: oPushResult
2454: oNodeGet
2455: oPop 2
2457: oPushResult
2458: oNodeSet
2459: oPop 3
2461: oGetLocal 2
2463: oPushResult
2464: oSetResult 21
2466: oPushResult
2467: oSetResult 0
2469: oPushResult
2470: oNodeSet
2471: oPop 3
2473: oJumpForward 2481
2475: Choice Lookup Table
           0   2372
           1   2346
2480: oEndChoice
2481: oGetAddrLocal 3
2483: oPushResult
2484: oCall 8741
2486: oAssign
2487: oGetAddrLocal 4
2489: oPushResult
2490: oGetLocal 3
2492: oPushResult
2493: oSetResult 0
2495: oPushResult
2496: greater
2497: oPop 2
2499: oAssign
2500: oGetAddrLocal 3
2502: oPushResult
2503: inc
2504: oPop 1
2506: oGetLocal 3
2508: oPushResult
2509: oSetResult 2
2511: oPushResult
2512: oScopeBegin
2513: oPop 2
2515: oGetAddrLocal 5
2517: oPushResult
2518: oScopeCurrent
2519: oAssign
2520: oGetLocal 4
2522: oChoice 2541
2524: oGetAddrLocal 6
2526: oPushResult
2527: oGetGlobal 5
2529: oPushResult
2530: oCall 8933
2532: oPop 1
2534: oPushResult
2535: oScopeAllocType
2536: oPop 1
2538: oAssign
2539: oJumpForward 2544
2541: Choice Lookup Table
           1   2524
2544: oCall 2758
2546: oGetLocal 2
2548: oPushResult
2549: oSetResult 23
2551: oPushResult
2552: oGetLocal 5
2554: oPushResult
2555: oNodeSet
2556: oPop 3
2558: oInput 11
2560: oGetAddrLocal 7
2562: oPushResult
2563: oCall 3403
2565: oPop 1
2567: oGetLocal 2
2569: oPushResult
2570: oSetResult 21
2572: oPushResult
2573: oGetLocal 7
2575: oPushResult
2576: oNodeSet
2577: oPop 3
2579: oGetAddrLocal 8
2581: oPushResult
2582: oGetLocal 7
2584: oPushResult
2585: oCall 8933
2587: oPop 1
2589: oAssign
2590: oGetLocal 2
2592: oPushResult
2593: oSetResult 31
2595: oPushResult
2596: oGetLocal 8
2598: oPushResult
2599: oScopeAllocType
2600: oPop 1
2602: oPushResult
2603: oNodeSetInt
2604: oPop 3
2606: oScopeEnd
2607: oInput 4
2609: oGetLocal 1
2611: oChoice 2623
2613: oGetLocal 2
2615: oPushResult
2616: oScopeDeclare
2617: oPop 1
2619: oJumpForward 2629
2621: oJumpForward 2629
2623: Choice Lookup Table
           1   2621
           0   2613
2628: oEndChoice
2629: oGetLocal 2
2631: oPushResult
2632: oCall 1807
2634: oPop 1
2636: oGetLocal 2
2638: oReturn
2639: oReturn
2640: oLocalSpace 4
2642: oGetAddrLocal 1
2644: oPushResult
2645: oCall 2323
2647: oAssign
2648: oInputChoice 2661
2650: oJumpForward 2755
2652: oGetLocal 1
2654: oPushResult
2655: oCall 1887
2657: oPop 1
2659: oJumpForward 2755
2661: Choice Lookup Table
          67   2652
          66   2650
2666: oGetAddrLocal 2
2668: oPushResult
2669: oGetLocal 1
2671: oPushResult
2672: oSetResult 23
2674: oPushResult
2675: oNodeGet
2676: oPop 2
2678: oAssign
2679: oGetLocal 2
2681: oPushResult
2682: oScopeEnter
2683: oPop 1
2685: oGetAddrLocal 3
2687: oPushResult
2688: oGetLocal 2
2690: oPushResult
2691: oSetResult 14
2693: oPushResult
2694: oNodeGetInt
2695: oPop 2
2697: oAssign
2698: oGetLocal 3
2700: oPushResult
2701: oSetResult 1
2703: oPushResult
2704: oScopeBegin
2705: oPop 2
2707: oGetLocal 1
2709: oPushResult
2710: oSetResult 6
2712: oPushResult
2713: oScopeCurrent
2714: oPushResult
2715: oNodeSet
2716: oPop 3
2718: oGetAddrLocal 4
2720: oPushResult
2721: oGetLocal 1
2723: oPushResult
2724: oSetResult 22
2726: oPushResult
2727: oNodeGetLabel
2728: oPop 2
2730: oAssign
2731: oSetResult 19
2733: oPushResult
2734: oGetLocal 4
2736: oPushResult
2737: oCall 1364
2739: oPop 2
2741: oGetLocal 1
2743: oPushResult
2744: oSetResult 24
2746: oPushResult
2747: oSetResult 1
2749: oPushResult
2750: oNodeSetBoolean
2751: oPop 3
2753: oScopeEnd
2754: oScopeEnd
2755: oInput 4
2757: oReturn
2758: oLocalSpace 6
2760: oInputChoice 2978
2762: oGetAddrLocal 1
2764: oPushResult
2765: oNodeVecNew
2766: oAssign
2767: oGetAddrLocal 3
2769: oPushResult
2770: oSetResult 0
2772: oAssign
2773: oInputChoice 2783
2775: oGetAddrLocal 3
2777: oPushResult
2778: oSetResult 1
2780: oAssign
2781: oJumpForward 2786
2783: Choice Lookup Table
          32   2775
2786: oInput 0
2788: oGetAddrLocal 2
2790: oPushResult
2791: oSetResult 21
2793: oPushResult
2794: LAST_ID
2795: oPushResult
2796: oCall 8905
2798: oPop 2
2800: oAssign
2801: oGetLocal 2
2803: oPushResult
2804: oSetResult 33
2806: oPushResult
2807: oGetLocal 3
2809: oPushResult
2810: oNodeSetBoolean
2811: oPop 3
2813: oGetLocal 1
2815: oPushResult
2816: oGetLocal 2
2818: oPushResult
2819: oNodeVecAppend
2820: oPop 2
2822: oInputChoice 2830
2824: oJumpForward 2838
2826: oJumpForward 2836
2828: oJumpForward 2836
2830: Choice Lookup Table
          12   2828
          11   2824
2835: oEndChoice
2836: oJumpBack 2786
2838: oGetAddrLocal 4
2840: oPushResult
2841: oCall 3403
2843: oPop 1
2845: oGetLocal 3
2847: oChoice 2862
2849: oGetAddrLocal 5
2851: oPushResult
2852: oGetLocal 4
2854: oPushResult
2855: oCall 8933
2857: oPop 1
2859: oAssign
2860: oJumpForward 2871
2862: Choice Lookup Table
           1   2849
2865: oGetAddrLocal 5
2867: oPushResult
2868: oGetLocal 4
2870: oAssign
2871: oGetAddrLocal 6
2873: oPushResult
2874: oSetResult 0
2876: oAssign
2877: oGetLocal 6
2879: oPushResult
2880: oGetLocal 1
2882: oPushResult
2883: oNodeVecSize
2884: oPop 1
2886: oPushResult
2887: equal
2888: oPop 2
2890: oChoice 2947
2892: oGetAddrLocal 2
2894: oPushResult
2895: oGetLocal 1
2897: oPushResult
2898: oGetLocal 6
2900: oPushResult
2901: oNodeVecElement
2902: oPop 2
2904: oAssign
2905: oGetLocal 2
2907: oPushResult
2908: oSetResult 21
2910: oPushResult
2911: oGetLocal 4
2913: oPushResult
2914: oNodeSet
2915: oPop 3
2917: oGetLocal 2
2919: oPushResult
2920: oScopeDeclare
2921: oPop 1
2923: oGetLocal 2
2925: oPushResult
2926: oSetResult 22
2928: oPushResult
2929: oGetLocal 5
2931: oPushResult
2932: oScopeAllocType
2933: oPop 1
2935: oPushResult
2936: oNodeSetInt
2937: oPop 3
2939: oGetAddrLocal 6
2941: oPushResult
2942: inc
2943: oPop 1
2945: oJumpForward 2952
2947: Choice Lookup Table
           0   2892
2950: oJumpForward 2954
2952: oJumpBack 2877
2954: oGetLocal 1
2956: oPushResult
2957: oNodeVecDelete
2958: oPop 1
2960: oInputChoice 2968
2962: oJumpForward 2976
2964: oJumpForward 2974
2966: oJumpForward 2974
2968: Choice Lookup Table
           4   2966
          14   2962
2973: oEndChoice
2974: oJumpBack 2762
2976: oJumpForward 2981
2978: Choice Lookup Table
          13   2762
2981: oReturn
2982: oLocalSpace 2
2984: oInputChoice 3043
2986: oGetAddrLocal 1
2988: oPushResult
2989: oSetResult 14
2991: oPushResult
2992: LAST_ID
2993: oPushResult
2994: oCall 8905
2996: oPop 2
2998: oAssign
2999: oInput 5
3001: oCall 4422
3003: oGetAddrLocal 2
3005: oPushResult
3006: oValueTop
3007: oAssign
3008: oValuePop
3009: oGetLocal 1
3011: oPushResult
3012: oSetResult 22
3014: oPushResult
3015: oGetLocal 2
3017: oPushResult
3018: oNodeSetInt
3019: oPop 3
3021: oGetLocal 1
3023: oPushResult
3024: oSetResult 21
3026: oPushResult
3027: oGetGlobal 5
3029: oPushResult
3030: oNodeSet
3031: oPop 3
3033: oGetLocal 1
3035: oPushResult
3036: oScopeDeclare
3037: oPop 1
3039: oInput 4
3041: oJumpForward 3048
3043: Choice Lookup Table
           0   2986
3046: oJumpForward 3050
3048: oJumpBack 2984
3050: oReturn
3051: oLocalSpace 2
3053: oInputChoice 3099
3055: oGetAddrLocal 1
3057: oPushResult
3058: oSetResult 16
3060: oPushResult
3061: LAST_ID
3062: oPushResult
3063: oCall 8905
3065: oPop 2
3067: oAssign
3068: oInput 5
3070: oGetAddrLocal 2
3072: oPushResult
3073: oCall 3403
3075: oPop 1
3077: oGetLocal 1
3079: oPushResult
3080: oSetResult 21
3082: oPushResult
3083: oGetLocal 2
3085: oPushResult
3086: oNodeSet
3087: oPop 3
3089: oGetLocal 1
3091: oPushResult
3092: oScopeDeclare
3093: oPop 1
3095: oInput 4
3097: oJumpForward 3104
3099: Choice Lookup Table
           0   3055
3102: oJumpForward 3106
3104: oJumpBack 3053
3106: oReturn
3107: oLocalSpace 6
3109: oInputChoice 3330
3111: oGetAddrLocal 1
3113: oPushResult
3114: oNodeVecNew
3115: oAssign
3116: oGetAddrLocal 2
3118: oPushResult
3119: oGetParam 1
3121: oPushResult
3122: LAST_ID
3123: oPushResult
3124: oCall 8905
3126: oPop 2
3128: oAssign
3129: oGetLocal 1
3131: oPushResult
3132: oGetLocal 2
3134: oPushResult
3135: oNodeVecAppend
3136: oPop 2
3138: oInputChoice 3144
3140: oInput 0
3142: oJumpForward 3149
3144: Choice Lookup Table
          12   3140
3147: oJumpForward 3151
3149: oJumpBack 3116
3151: oInput 11
3153: oGetAddrLocal 3
3155: oPushResult
3156: oCall 3403
3158: oPop 1
3160: oGetAddrLocal 4
3162: oPushResult
3163: oSetResult 0
3165: oAssign
3166: oGetLocal 4
3168: oPushResult
3169: oGetLocal 1
3171: oPushResult
3172: oNodeVecSize
3173: oPop 1
3175: oPushResult
3176: equal
3177: oPop 2
3179: oChoice 3220
3181: oGetAddrLocal 2
3183: oPushResult
3184: oGetLocal 1
3186: oPushResult
3187: oGetLocal 4
3189: oPushResult
3190: oNodeVecElement
3191: oPop 2
3193: oAssign
3194: oGetLocal 2
3196: oPushResult
3197: oSetResult 21
3199: oPushResult
3200: oGetLocal 3
3202: oPushResult
3203: oNodeSet
3204: oPop 3
3206: oGetLocal 2
3208: oPushResult
3209: oScopeDeclareAlloc
3210: oPop 1
3212: oGetAddrLocal 4
3214: oPushResult
3215: inc
3216: oPop 1
3218: oJumpForward 3225
3220: Choice Lookup Table
           0   3181
3223: oJumpForward 3227
3225: oJumpBack 3166
3227: oInputChoice 3317
3229: oGetLocal 1
3231: oPushResult
3232: oNodeVecSize
3233: oPop 1
3235: oChoice 3239
3237: oJumpForward 3244
3239: Choice Lookup Table
           1   3237
3242: oError 22
3244: oGetAddrLocal 5
3246: oPushResult
3247: oScopeCurrent
3248: oPushResult
3249: oCall 1835
3251: oPop 1
3253: oAssign
3254: oGetLocal 5
3256: oPushResult
3257: oCodePush
3258: oPop 1
3260: oGetAddrLocal 6
3262: oPushResult
3263: oSetResult 0
3265: oAssign
3266: oCall 8741
3268: oPushResult
3269: equal_zero
3270: oPop 1
3272: oChoice 3288
3274: oGetGlobal 3
3276: oPushResult
3277: oScopeEnter
3278: oPop 1
3280: oGetAddrLocal 6
3282: oPushResult
3283: oSetResult 1
3285: oAssign
3286: oJumpForward 3291
3288: Choice Lookup Table
           1   3274
3291: oGetLocal 2
3293: oPushResult
3294: oCall 7988
3296: oPop 1
3298: oCall 4495
3300: oCall 8791
3302: oCall 7771
3304: oGetLocal 6
3306: oChoice 3311
3308: oScopeEnd
3309: oJumpForward 3314
3311: Choice Lookup Table
           1   3308
3314: oCodePop
3315: oJumpForward 3320
3317: Choice Lookup Table
           5   3229
3320: oGetLocal 1
3322: oPushResult
3323: oNodeVecDelete
3324: oPop 1
3326: oInput 4
3328: oJumpForward 3335
3330: Choice Lookup Table
           0   3111
3333: oJumpForward 3337
3335: oJumpBack 3109
3337: oReturn
3338: oLocalSpace 2
3340: oInputChoice 3347
3342: oJumpForward 3353
3344: oChangeIntLitToLabelIdent
3345: oJumpForward 3353
3347: Choice Lookup Table
           1   3344
           0   3342
3352: oEndChoice
3353: oGetAddrLocal 1
3355: oPushResult
3356: oSetResult 22
3358: oPushResult
3359: LAST_ID
3360: oPushResult
3361: oCall 8905
3363: oPop 2
3365: oAssign
3366: oGetAddrLocal 2
3368: oPushResult
3369: oLabelNew
3370: oAssign
3371: oGetLocal 1
3373: oPushResult
3374: oSetResult 22
3376: oPushResult
3377: oGetLocal 2
3379: oPushResult
3380: oNodeSetLabel
3381: oPop 3
3383: oGetLocal 1
3385: oPushResult
3386: oScopeDeclare
3387: oPop 1
3389: oInputChoice 3393
3391: oJumpForward 3398
3393: Choice Lookup Table
          12   3391
3396: oJumpForward 3400
3398: oJumpBack 3340
3400: oInput 4
3402: oReturn
3403: oLocalSpace 23
3405: oInputChoice 4402
3407: oGetAddrLocal 1
3409: oPushResult
3410: oScopeFindRequire
3411: oAssign
3412: oGetAddrLocal 1
3414: oPushResult
3415: oCall 409
3417: oPop 1
3419: oGetLocal 1
3421: oPushResult
3422: oNodeType
3423: oPop 1
3425: oChoice 3442
3427: oGetParam 1
3429: oPushResult
3430: oGetLocal 1
3432: oPushResult
3433: oSetResult 21
3435: oPushResult
3436: oNodeGet
3437: oPop 2
3439: oAssign
3440: oJumpForward 3453
3442: Choice Lookup Table
          16   3427
3445: oError 2
3447: oGetParam 1
3449: oPushResult
3450: oGetGlobal 5
3452: oAssign
3453: oJumpForward 4421
3455: oInput 15
3457: oGetAddrLocal 2
3459: oPushResult
3460: oNodeVecNew
3461: oAssign
3462: oGetAddrLocal 3
3464: oPushResult
3465: oSetResult 32
3467: oPushResult
3468: oNodeNew
3469: oPop 1
3471: oAssign
3472: oGetLocal 3
3474: oPushResult
3475: oSetResult 36
3477: oPushResult
3478: oGetGlobal 5
3480: oPushResult
3481: oNodeSet
3482: oPop 3
3484: oCall 4422
3486: oGetLocal 3
3488: oPushResult
3489: oSetResult 38
3491: oPushResult
3492: oValueTop
3493: oPushResult
3494: oNodeSetInt
3495: oPop 3
3497: oValuePop
3498: oInput 20
3500: oCall 4422
3502: oGetLocal 3
3504: oPushResult
3505: oSetResult 39
3507: oPushResult
3508: oValueTop
3509: oPushResult
3510: oNodeSetInt
3511: oPop 3
3513: oValuePop
3514: oGetLocal 3
3516: oPushResult
3517: oSetResult 17
3519: oPushResult
3520: oSetResult 4
3522: oPushResult
3523: oNodeSetInt
3524: oPop 3
3526: oGetLocal 3
3528: oPushResult
3529: oTypeAdd
3530: oPop 1
3532: oGetAddrLocal 4
3534: oPushResult
3535: oSetResult 31
3537: oPushResult
3538: oNodeNew
3539: oPop 1
3541: oAssign
3542: oGetLocal 4
3544: oPushResult
3545: oSetResult 37
3547: oPushResult
3548: oGetLocal 3
3550: oPushResult
3551: oNodeSet
3552: oPop 3
3554: oGetLocal 2
3556: oPushResult
3557: oGetLocal 4
3559: oPushResult
3560: oNodeVecAppend
3561: oPop 2
3563: oInputChoice 3571
3565: oJumpForward 3579
3567: oJumpForward 3577
3569: oJumpForward 3577
3571: Choice Lookup Table
          12   3569
          16   3565
3576: oEndChoice
3577: oJumpBack 3462
3579: oInput 39
3581: oGetAddrLocal 5
3583: oPushResult
3584: oCall 3403
3586: oPop 1
3588: oGetAddrLocal 6
3590: oPushResult
3591: oGetLocal 2
3593: oPushResult
3594: oNodeVecSize
3595: oPop 1
3597: oAssign
3598: oGetAddrLocal 6
3600: oPushResult
3601: dec
3602: oPop 1
3604: oGetAddrLocal 7
3606: oPushResult
3607: oGetLocal 2
3609: oPushResult
3610: oGetLocal 6
3612: oPushResult
3613: oNodeVecElement
3614: oPop 2
3616: oAssign
3617: oGetLocal 7
3619: oPushResult
3620: oSetResult 36
3622: oPushResult
3623: oGetLocal 5
3625: oPushResult
3626: oNodeSet
3627: oPop 3
3629: oGetAddrLocal 8
3631: oPushResult
3632: oGetLocal 7
3634: oPushResult
3635: oSetResult 37
3637: oPushResult
3638: oNodeGet
3639: oPop 2
3641: oAssign
3642: oGetAddrLocal 9
3644: oPushResult
3645: oGetLocal 8
3647: oPushResult
3648: oSetResult 39
3650: oPushResult
3651: oNodeGetInt
3652: oPop 2
3654: oPushResult
3655: oGetLocal 8
3657: oPushResult
3658: oSetResult 38
3660: oPushResult
3661: oNodeGetInt
3662: oPop 2
3664: oPushResult
3665: subtract
3666: oPop 2
3668: oAssign
3669: oGetAddrLocal 9
3671: oPushResult
3672: inc
3673: oPop 1
3675: oGetLocal 7
3677: oPushResult
3678: oSetResult 17
3680: oPushResult
3681: oGetLocal 9
3683: oPushResult
3684: oGetLocal 5
3686: oPushResult
3687: oSetResult 17
3689: oPushResult
3690: oNodeGetInt
3691: oPop 2
3693: oPushResult
3694: multiply
3695: oPop 2
3697: oPushResult
3698: oNodeSetInt
3699: oPop 3
3701: oGetLocal 7
3703: oPushResult
3704: oTypeAdd
3705: oPop 1
3707: oGetAddrLocal 5
3709: oPushResult
3710: oGetLocal 7
3712: oAssign
3713: oGetLocal 6
3715: oPushResult
3716: equal_zero
3717: oPop 1
3719: oChoice 3725
3721: oJumpForward 3730
3723: oJumpForward 3728
3725: Choice Lookup Table
           1   3721
3728: oJumpBack 3598
3730: oGetParam 1
3732: oPushResult
3733: oGetLocal 2
3735: oPushResult
3736: oSetResult 0
3738: oPushResult
3739: oNodeVecElement
3740: oPop 2
3742: oAssign
3743: oGetLocal 2
3745: oPushResult
3746: oNodeVecDelete
3747: oPop 1
3749: oJumpForward 4421
3751: oGetAddrLocal 10
3753: oPushResult
3754: oCall 3403
3756: oPop 1
3758: oGetParam 1
3760: oPushResult
3761: oGetLocal 10
3763: oPushResult
3764: oCall 8933
3766: oPop 1
3768: oAssign
3769: oJumpForward 4421
3771: oGetParam 1
3773: oPushResult
3774: oSetResult 33
3776: oPushResult
3777: oNodeNew
3778: oPop 1
3780: oAssign
3781: oSetResult -1
3783: oPushResult
3784: oSetResult 2
3786: oPushResult
3787: oScopeBegin
3788: oPop 2
3790: oSetResult 20
3792: oPushResult
3793: oCall 3107
3795: oPop 1
3797: oGetAddrLocal 11
3799: oPushResult
3800: oScopeCurrent
3801: oPushResult
3802: oSetResult 17
3804: oPushResult
3805: oNodeGetInt
3806: oPop 2
3808: oAssign
3809: oGetLocal 11
3811: oPushResult
3812: equal_zero
3813: oPop 1
3815: oChoice 3821
3817: oError 19
3819: oJumpForward 3824
3821: Choice Lookup Table
           1   3817
3824: oInput 35
3826: oGetFromParam 1
3828: oPushResult
3829: oSetResult 40
3831: oPushResult
3832: oScopeCurrent
3833: oPushResult
3834: oNodeSet
3835: oPop 3
3837: oGetFromParam 1
3839: oPushResult
3840: oSetResult 17
3842: oPushResult
3843: oGetLocal 11
3845: oPushResult
3846: oNodeSetInt
3847: oPop 3
3849: oScopeEnd
3850: oGetFromParam 1
3852: oPushResult
3853: oTypeAdd
3854: oPop 1
3856: oJumpForward 4421
3858: oGetParam 1
3860: oPushResult
3861: oSetResult 34
3863: oPushResult
3864: oNodeNew
3865: oPop 1
3867: oAssign
3868: oGetAddrLocal 12
3870: oPushResult
3871: oSetResult 0
3873: oAssign
3874: oGetAddrLocal 13
3876: oPushResult
3877: oSetResult 0
3879: oAssign
3880: oGetAddrLocal 14
3882: oPushResult
3883: oSetResult 1
3885: oAssign
3886: oGetAddrLocal 15
3888: oPushResult
3889: oScopeCurrent
3890: oAssign
3891: oSetResult -1
3893: oPushResult
3894: oSetResult 2
3896: oPushResult
3897: oScopeBegin
3898: oPop 2
3900: oInput 0
3902: oGetAddrLocal 16
3904: oPushResult
3905: oSetResult 15
3907: oPushResult
3908: LAST_ID
3909: oPushResult
3910: oCall 8905
3912: oPop 2
3914: oAssign
3915: oGetAddrLocal 17
3917: oPushResult
3918: oSetResult 15
3920: oPushResult
3921: LAST_ID
3922: oPushResult
3923: oCall 8905
3925: oPop 2
3927: oAssign
3928: oGetLocal 16
3930: oPushResult
3931: oSetResult 21
3933: oPushResult
3934: oGetFromParam 1
3936: oPushResult
3937: oNodeSet
3938: oPop 3
3940: oGetLocal 17
3942: oPushResult
3943: oSetResult 21
3945: oPushResult
3946: oGetFromParam 1
3948: oPushResult
3949: oNodeSet
3950: oPop 3
3952: oGetAddrLocal 18
3954: oPushResult
3955: LAST_ID
3956: oPushResult
3957: ID_STRING
3958: oPop 1
3960: oPushResult
3961: oStringAllocLit
3962: oPop 1
3964: oAssign
3965: oGetLocal 16
3967: oPushResult
3968: oSetResult 32
3970: oPushResult
3971: oGetLocal 18
3973: oPushResult
3974: oNodeSetInt
3975: oPop 3
3977: oGetLocal 17
3979: oPushResult
3980: oSetResult 32
3982: oPushResult
3983: oGetLocal 18
3985: oPushResult
3986: oNodeSetInt
3987: oPop 3
3989: oInputChoice 4031
3991: oCall 4422
3993: oGetLocal 13
3995: oPushResult
3996: equal_zero
3997: oPop 1
3999: oChoice 4020
4001: oValueTop
4002: oPushResult
4003: oGetLocal 12
4005: oPushResult
4006: greater
4007: oPop 2
4009: oChoice 4015
4011: oError 26
4013: oJumpForward 4018
4015: Choice Lookup Table
           0   4011
4018: oJumpForward 4023
4020: Choice Lookup Table
           0   4001
4023: oGetAddrLocal 12
4025: oPushResult
4026: oValueTop
4027: oAssign
4028: oValuePop
4029: oJumpForward 4036
4031: Choice Lookup Table
           3   3991
           5   3991
4036: oGetLocal 16
4038: oPushResult
4039: oSetResult 22
4041: oPushResult
4042: oGetLocal 12
4044: oPushResult
4045: oNodeSetInt
4046: oPop 3
4048: oGetLocal 17
4050: oPushResult
4051: oSetResult 22
4053: oPushResult
4054: oGetLocal 12
4056: oPushResult
4057: oNodeSetInt
4058: oPop 3
4060: oGetLocal 16
4062: oPushResult
4063: oScopeDeclare
4064: oPop 1
4066: oGetLocal 15
4068: oPushResult
4069: oScopeEnter
4070: oPop 1
4072: oGetLocal 17
4074: oPushResult
4075: oScopeDeclare
4076: oPop 1
4078: oScopeEnd
4079: oGetAddrLocal 12
4081: oPushResult
4082: inc
4083: oPop 1
4085: oGetAddrLocal 13
4087: oPushResult
4088: inc
4089: oPop 1
4091: oInputChoice 4095
4093: oJumpForward 4100
4095: Choice Lookup Table
          12   4093
4098: oJumpForward 4102
4100: oJumpBack 3900
4102: oInput 14
4104: oGetFromParam 1
4106: oPushResult
4107: oSetResult 40
4109: oPushResult
4110: oScopeCurrent
4111: oPushResult
4112: oNodeSet
4113: oPop 3
4115: oGetFromParam 1
4117: oPushResult
4118: oSetResult 17
4120: oPushResult
4121: oSetResult 4
4123: oPushResult
4124: oNodeSetInt
4125: oPop 3
4127: oScopeEnd
4128: oGetGlobal 2
4130: oPushResult
4131: oCall 1835
4133: oPop 1
4135: oPushResult
4136: oCodePush
4137: oPop 1
4139: oGetGlobal 2
4141: oPushResult
4142: oScopeEnter
4143: oPop 1
4145: oGetAddrLocal 19
4147: oPushResult
4148: oGetLocal 13
4150: oPushResult
4151: oSetResult 1
4153: oPushResult
4154: add
4155: oPop 2
4157: oPushResult
4158: oSetResult 16
4160: oPushResult
4161: multiply
4162: oPop 2
4164: oAssign
4165: oGetAddrLocal 20
4167: oPushResult
4168: oGetLocal 19
4170: oPushResult
4171: oSetResult 8
4173: oPushResult
4174: oScopeAlloc
4175: oPop 2
4177: oAssign
4178: oScopeEnd
4179: oGetFromParam 1
4181: oPushResult
4182: oSetResult 41
4184: oPushResult
4185: oGetLocal 20
4187: oPushResult
4188: oNodeSetInt
4189: oPop 3
4191: oGetAddrLocal 21
4193: oPushResult
4194: oGetFromParam 1
4196: oPushResult
4197: oSetResult 40
4199: oPushResult
4200: oNodeGet
4201: oPop 2
4203: oPushResult
4204: oSetResult 15
4206: oPushResult
4207: oNodeGetIter
4208: oPop 2
4210: oAssign
4211: oGetAddrLocal 22
4213: oPushResult
4214: oGetLocal 21
4216: oPushResult
4217: oNodeIterValue
4218: oPop 1
4220: oAssign
4221: oGetLocal 22
4223: oPushResult
4224: oNodeNull
4225: oPop 1
4227: oChoice 4233
4229: oJumpForward 4320
4231: oJumpForward 4236
4233: Choice Lookup Table
           1   4229
4236: oEmit 16
4238: oGetLocal 20
4240: oPushResult
4241: oEmitInt
4242: oPop 1
4244: oEmit 15
4246: oGetLocal 22
4248: oPushResult
4249: oSetResult 22
4251: oPushResult
4252: oNodeGetInt
4253: oPop 2
4255: oPushResult
4256: oEmitInt
4257: oPop 1
4259: oEmit 25
4261: oGetAddrLocal 20
4263: oPushResult
4264: oGetLocal 20
4266: oPushResult
4267: oSetResult 8
4269: oPushResult
4270: add
4271: oPop 2
4273: oAssign
4274: oEmit 16
4276: oGetLocal 20
4278: oPushResult
4279: oEmitInt
4280: oPop 1
4282: oEmit 16
4284: oGetLocal 22
4286: oPushResult
4287: oSetResult 32
4289: oPushResult
4290: oNodeGetInt
4291: oPop 2
4293: oPushResult
4294: oEmitInt
4295: oPop 1
4297: oEmit 27
4299: oGetAddrLocal 20
4301: oPushResult
4302: oGetLocal 20
4304: oPushResult
4305: oSetResult 8
4307: oPushResult
4308: add
4309: oPop 2
4311: oAssign
4312: oGetAddrLocal 21
4314: oPushResult
4315: oNodeIterNext
4316: oPop 1
4318: oJumpBack 4211
4320: oEmit 16
4322: oGetLocal 20
4324: oPushResult
4325: oEmitInt
4326: oPop 1
4328: oEmit 15
4330: oSetResult 0
4332: oPushResult
4333: oEmitInt
4334: oPop 1
4336: oEmit 25
4338: oGetAddrLocal 20
4340: oPushResult
4341: oGetLocal 20
4343: oPushResult
4344: oSetResult 8
4346: oPushResult
4347: add
4348: oPop 2
4350: oAssign
4351: oEmit 16
4353: oGetLocal 20
4355: oPushResult
4356: oEmitInt
4357: oPop 1
4359: oEmit 15
4361: oSetResult 0
4363: oPushResult
4364: oEmitInt
4365: oPop 1
4367: oEmit 27
4369: oGetAddrLocal 20
4371: oPushResult
4372: oGetLocal 20
4374: oPushResult
4375: oSetResult 8
4377: oPushResult
4378: add
4379: oPop 2
4381: oAssign
4382: oCodePop
4383: oGetFromParam 1
4385: oPushResult
4386: oTypeAdd
4387: oPop 1
4389: oJumpForward 4421
4391: oInput 39
4393: oGetAddrLocal 23
4395: oPushResult
4396: oCall 3403
4398: oPop 1
4400: oJumpForward 4421
4402: Choice Lookup Table
          38   4391
          13   3858
          37   3771
          17   3751
          36   3455
           0   3407
4415: oCall 4422
4417: oInput 20
4419: oCall 4422
4421: oReturn
4422: oLocalSpace 1
4424: oInputChoice 4486
4426: TOKEN_VALUE
4427: oPushResult
4428: oValuePush
4429: oPop 1
4431: oJumpForward 4494
4433: oGetAddrLocal 1
4435: oPushResult
4436: oScopeFindRequire
4437: oAssign
4438: oGetAddrLocal 1
4440: oPushResult
4441: oCall 409
4443: oPop 1
4445: oGetLocal 1
4447: oPushResult
4448: oNodeType
4449: oPop 1
4451: oChoice 4468
4453: oGetLocal 1
4455: oPushResult
4456: oSetResult 22
4458: oPushResult
4459: oNodeGetInt
4460: oPop 2
4462: oPushResult
4463: oValuePush
4464: oPop 1
4466: oJumpForward 4479
4468: Choice Lookup Table
          14   4453
4471: oError 1
4473: oSetResult 0
4475: oPushResult
4476: oValuePush
4477: oPop 1
4479: oJumpForward 4494
4481: oCall 4422
4483: oValueNegate
4484: oJumpForward 4494
4486: Choice Lookup Table
          24   4481
           0   4433
           1   4426
4493: oEndChoice
4494: oReturn
4495: oLocalSpace 1
4497: oGetAddrLocal 1
4499: oPushResult
4500: oSetResult 0
4502: oAssign
4503: oGetAddrLocal 1
4505: oPushResult
4506: oCall 4656
4508: oPop 1
4510: oGetAddrLocal 1
4512: oPushResult
4513: oCall 4556
4515: oPop 1
4517: oReturn
4518: oLocalSpace 0
4520: oGetParam 1
4522: oPushResult
4523: oCall 4656
4525: oPop 1
4527: oTypeSNodeType
4528: oChoice 4547
4530: oJumpForward 4554
4532: oGetParam 1
4534: oPushResult
4535: oLabelNew
4536: oAssign
4537: oEmit 55
4539: oGetFromParam 1
4541: oPushResult
4542: oEmitLabel
4543: oPop 1
4545: oJumpForward 4554
4547: Choice Lookup Table
          26   4532
          27   4530
4552: oError 8
4554: oTypeSPop
4555: oReturn
4556: oLocalSpace 1
4558: oTypeSNodeType
4559: oChoice 4621
4561: oGetAddrLocal 1
4563: oPushResult
4564: oLabelNew
4565: oAssign
4566: oEmit 15
4568: oSetResult 1
4570: oPushResult
4571: oEmitInt
4572: oPop 1
4574: oEmit 53
4576: oGetLocal 1
4578: oPushResult
4579: oEmitLabel
4580: oPop 1
4582: oEmit 56
4584: oGetFromParam 1
4586: oPushResult
4587: oEmitLabel
4588: oPop 1
4590: oEmit 15
4592: oSetResult 0
4594: oPushResult
4595: oEmitInt
4596: oPop 1
4598: oEmit 56
4600: oGetLocal 1
4602: oPushResult
4603: oEmitLabel
4604: oPop 1
4606: oTypeSPop
4607: oGetGlobal 6
4609: oPushResult
4610: oTypeSPush
4611: oPop 1
4613: oGetParam 1
4615: oPushResult
4616: oSetResult 0
4618: oAssign
4619: oJumpForward 4624
4621: Choice Lookup Table
          27   4561
4624: oReturn
4625: oLocalSpace 0
4627: oTypeSNodeType
4628: oChoice 4652
4630: oGetParam 1
4632: oPushResult
4633: oLabelNew
4634: oAssign
4635: oEmit 55
4637: oGetFromParam 1
4639: oPushResult
4640: oEmitLabel
4641: oPop 1
4643: oTypeSPop
4644: oGetGlobal 7
4646: oPushResult
4647: oTypeSPush
4648: oPop 1
4650: oJumpForward 4655
4652: Choice Lookup Table
          26   4630
4655: oReturn
4656: oLocalSpace 0
4658: oGetParam 1
4660: oPushResult
4661: oCall 5033
4663: oPop 1
4665: oInputChoice 5015
4667: oGetParam 1
4669: oPushResult
4670: oCall 4556
4672: oPop 1
4674: oGetParam 1
4676: oPushResult
4677: oCall 5033
4679: oPop 1
4681: oGetParam 1
4683: oPushResult
4684: oCall 4556
4686: oPop 1
4688: oCall 8791
4690: oTypeSNodeType
4691: oChoice 4705
4693: oEmit 38
4695: oJumpForward 4720
4697: oEmit 44
4699: oJumpForward 4720
4701: oError 16
4703: oJumpForward 4720
4705: Choice Lookup Table
          29   4701
          28   4701
          30   4697
          26   4693
          34   4693
          25   4693
4718: oError 17
4720: oTypeSPop
4721: oGetGlobal 6
4723: oPushResult
4724: oTypeSPush
4725: oPop 1
4727: oJumpForward 5030
4729: oGetParam 1
4731: oPushResult
4732: oCall 4556
4734: oPop 1
4736: oGetParam 1
4738: oPushResult
4739: oCall 5033
4741: oPop 1
4743: oGetParam 1
4745: oPushResult
4746: oCall 4556
4748: oPop 1
4750: oCall 8791
4752: oTypeSNodeType
4753: oChoice 4767
4755: oEmit 39
4757: oJumpForward 4782
4759: oEmit 45
4761: oJumpForward 4782
4763: oError 16
4765: oJumpForward 4782
4767: Choice Lookup Table
          29   4763
          28   4763
          30   4759
          26   4755
          34   4755
          25   4755
4780: oError 17
4782: oTypeSPop
4783: oGetGlobal 6
4785: oPushResult
4786: oTypeSPush
4787: oPop 1
4789: oJumpForward 5030
4791: oGetParam 1
4793: oPushResult
4794: oCall 4556
4796: oPop 1
4798: oGetParam 1
4800: oPushResult
4801: oCall 5033
4803: oPop 1
4805: oGetParam 1
4807: oPushResult
4808: oCall 4556
4810: oPop 1
4812: oCall 8791
4814: oTypeSNodeType
4815: oChoice 4825
4817: oEmit 41
4819: oJumpForward 4838
4821: oError 16
4823: oJumpForward 4838
4825: Choice Lookup Table
          29   4821
          28   4821
          26   4817
          34   4817
          25   4817
4836: oError 17
4838: oTypeSPop
4839: oGetGlobal 6
4841: oPushResult
4842: oTypeSPush
4843: oPop 1
4845: oJumpForward 5030
4847: oGetParam 1
4849: oPushResult
4850: oCall 4556
4852: oPop 1
4854: oGetParam 1
4856: oPushResult
4857: oCall 5033
4859: oPop 1
4861: oGetParam 1
4863: oPushResult
4864: oCall 4556
4866: oPop 1
4868: oCall 8791
4870: oTypeSNodeType
4871: oChoice 4881
4873: oEmit 40
4875: oJumpForward 4894
4877: oError 16
4879: oJumpForward 4894
4881: Choice Lookup Table
          29   4877
          28   4877
          26   4873
          34   4873
          25   4873
4892: oError 17
4894: oTypeSPop
4895: oGetGlobal 6
4897: oPushResult
4898: oTypeSPush
4899: oPop 1
4901: oJumpForward 5030
4903: oGetParam 1
4905: oPushResult
4906: oCall 4556
4908: oPop 1
4910: oGetParam 1
4912: oPushResult
4913: oCall 5033
4915: oPop 1
4917: oGetParam 1
4919: oPushResult
4920: oCall 4556
4922: oPop 1
4924: oCall 8791
4926: oTypeSNodeType
4927: oChoice 4937
4929: oEmit 43
4931: oJumpForward 4950
4933: oError 16
4935: oJumpForward 4950
4937: Choice Lookup Table
          29   4933
          28   4933
          26   4929
          34   4929
          25   4929
4948: oError 17
4950: oTypeSPop
4951: oGetGlobal 6
4953: oPushResult
4954: oTypeSPush
4955: oPop 1
4957: oJumpForward 5030
4959: oGetParam 1
4961: oPushResult
4962: oCall 4556
4964: oPop 1
4966: oGetParam 1
4968: oPushResult
4969: oCall 5033
4971: oPop 1
4973: oGetParam 1
4975: oPushResult
4976: oCall 4556
4978: oPop 1
4980: oCall 8791
4982: oTypeSNodeType
4983: oChoice 4993
4985: oEmit 42
4987: oJumpForward 5006
4989: oError 16
4991: oJumpForward 5006
4993: Choice Lookup Table
          29   4989
          28   4989
          26   4985
          34   4985
          25   4985
5004: oError 17
5006: oTypeSPop
5007: oGetGlobal 6
5009: oPushResult
5010: oTypeSPush
5011: oPop 1
5013: oJumpForward 5030
5015: Choice Lookup Table
          10   4959
           9   4903
           8   4847
           7   4791
           6   4729
           5   4667
5028: oJumpForward 5032
5030: oJumpBack 4665
5032: oReturn
5033: oLocalSpace 1
5035: oGetAddrLocal 1
5037: oPushResult
5038: oSetResult 0
5040: oAssign
5041: oGetParam 1
5043: oPushResult
5044: oCall 5213
5046: oPop 1
5048: oInputChoice 5181
5050: oTypeSNodeType
5051: oChoice 5122
5053: oGetLocal 1
5055: oPushResult
5056: oSetResult 0
5058: oPushResult
5059: equal_label
5060: oPop 2
5062: oChoice 5071
5064: oGetAddrLocal 1
5066: oPushResult
5067: oLabelNew
5068: oAssign
5069: oJumpForward 5074
5071: Choice Lookup Table
           1   5064
5074: oEmit 53
5076: oGetLocal 1
5078: oPushResult
5079: oEmitLabel
5080: oPop 1
5082: oJumpForward 5129
5084: oGetParam 1
5086: oPushResult
5087: oCall 4625
5089: oPop 1
5091: oGetLocal 1
5093: oPushResult
5094: oSetResult 0
5096: oPushResult
5097: equal_label
5098: oPop 2
5100: oChoice 5109
5102: oGetAddrLocal 1
5104: oPushResult
5105: oLabelNew
5106: oAssign
5107: oJumpForward 5112
5109: Choice Lookup Table
           1   5102
5112: oEmit 53
5114: oGetLocal 1
5116: oPushResult
5117: oEmitLabel
5118: oPop 1
5120: oJumpForward 5129
5122: Choice Lookup Table
          26   5084
          27   5053
5127: oError 8
5129: oTypeSPop
5130: oEmit 56
5132: oGetFromParam 1
5134: oPushResult
5135: oEmitLabel
5136: oPop 1
5138: oGetParam 1
5140: oPushResult
5141: oSetResult 0
5143: oAssign
5144: oGetParam 1
5146: oPushResult
5147: oCall 5213
5149: oPop 1
5151: oTypeSNodeType
5152: oChoice 5165
5154: oJumpForward 5172
5156: oGetParam 1
5158: oPushResult
5159: oCall 4625
5161: oPop 1
5163: oJumpForward 5172
5165: Choice Lookup Table
          26   5156
          27   5154
5170: oError 8
5172: oTypeSPop
5173: oGetGlobal 7
5175: oPushResult
5176: oTypeSPush
5177: oPop 1
5179: oJumpForward 5186
5181: Choice Lookup Table
          54   5050
5184: oJumpForward 5188
5186: oJumpBack 5048
5188: oGetLocal 1
5190: oPushResult
5191: oSetResult 0
5193: oPushResult
5194: equal_label
5195: oPop 2
5197: oChoice 5209
5199: oEmit 56
5201: oGetLocal 1
5203: oPushResult
5204: oEmitLabel
5205: oPop 1
5207: oJumpForward 5212
5209: Choice Lookup Table
           0   5199
5212: oReturn
5213: oLocalSpace 2
5215: oGetAddrLocal 1
5217: oPushResult
5218: oSetResult 0
5220: oAssign
5221: oGetParam 1
5223: oPushResult
5224: oCall 5351
5226: oPop 1
5228: oInputChoice 5343
5230: oTypeSNodeType
5231: oChoice 5244
5233: oJumpForward 5251
5235: oGetParam 1
5237: oPushResult
5238: oCall 4625
5240: oPop 1
5242: oJumpForward 5251
5244: Choice Lookup Table
          26   5235
          27   5233
5249: oError 8
5251: oTypeSPop
5252: oGetLocal 1
5254: oPushResult
5255: oSetResult 0
5257: oPushResult
5258: equal_label
5259: oPop 2
5261: oChoice 5290
5263: oGetAddrLocal 1
5265: oPushResult
5266: oLabelNew
5267: oAssign
5268: oEmit 57
5270: oGetFromParam 1
5272: oPushResult
5273: oEmitLabel
5274: oPop 1
5276: oGetLocal 1
5278: oPushResult
5279: oEmitLabel
5280: oPop 1
5282: oGetParam 1
5284: oPushResult
5285: oGetLocal 1
5287: oAssign
5288: oJumpForward 5293
5290: Choice Lookup Table
           1   5263
5293: oGetAddrLocal 2
5295: oPushResult
5296: oSetResult 0
5298: oAssign
5299: oGetAddrLocal 2
5301: oPushResult
5302: oCall 5351
5304: oPop 1
5306: oTypeSNodeType
5307: oChoice 5320
5309: oJumpForward 5327
5311: oGetAddrLocal 2
5313: oPushResult
5314: oCall 4625
5316: oPop 1
5318: oJumpForward 5327
5320: Choice Lookup Table
          26   5311
          27   5309
5325: oError 8
5327: oEmit 57
5329: oGetLocal 2
5331: oPushResult
5332: oEmitLabel
5333: oPop 1
5335: oGetLocal 1
5337: oPushResult
5338: oEmitLabel
5339: oPop 1
5341: oJumpForward 5348
5343: Choice Lookup Table
          53   5230
5346: oJumpForward 5350
5348: oJumpBack 5228
5350: oReturn
5351: oLocalSpace 1
5353: oInputChoice 5407
5355: oGetAddrLocal 1
5357: oPushResult
5358: oSetResult 0
5360: oAssign
5361: oGetAddrLocal 1
5363: oPushResult
5364: oCall 5351
5366: oPop 1
5368: oTypeSNodeType
5369: oChoice 5398
5371: oGetParam 1
5373: oPushResult
5374: oLabelNew
5375: oAssign
5376: oEmit 53
5378: oGetFromParam 1
5380: oPushResult
5381: oEmitLabel
5382: oPop 1
5384: oEmit 56
5386: oGetLocal 1
5388: oPushResult
5389: oEmitLabel
5390: oPop 1
5392: oJumpForward 5405
5394: oEmit 37
5396: oJumpForward 5405
5398: Choice Lookup Table
          26   5394
          27   5371
5403: oError 8
5405: oJumpForward 5417
5407: Choice Lookup Table
          55   5355
5410: oGetParam 1
5412: oPushResult
5413: oCall 5418
5415: oPop 1
5417: oReturn
5418: oLocalSpace 0
5420: oGetParam 1
5422: oPushResult
5423: oCall 5469
5425: oPop 1
5427: oInputChoice 5459
5429: oCall 8817
5431: oGetParam 1
5433: oPushResult
5434: oCall 5469
5436: oPop 1
5438: oCall 8831
5440: oEmit 34
5442: oJumpForward 5466
5444: oCall 8817
5446: oGetParam 1
5448: oPushResult
5449: oCall 5469
5451: oPop 1
5453: oCall 8831
5455: oEmit 35
5457: oJumpForward 5466
5459: Choice Lookup Table
          24   5444
          23   5429
5464: oJumpForward 5468
5466: oJumpBack 5427
5468: oReturn
5469: oLocalSpace 0
5471: oGetParam 1
5473: oPushResult
5474: oCall 5520
5476: oPop 1
5478: oInputChoice 5510
5480: oCall 8817
5482: oGetParam 1
5484: oPushResult
5485: oCall 5520
5487: oPop 1
5489: oCall 8831
5491: oEmit 31
5493: oJumpForward 5517
5495: oCall 8817
5497: oGetParam 1
5499: oPushResult
5500: oCall 5520
5502: oPop 1
5504: oCall 8831
5506: oEmit 32
5508: oJumpForward 5517
5510: Choice Lookup Table
          22   5495
          21   5480
5515: oJumpForward 5519
5517: oJumpBack 5478
5519: oReturn
5520: oLocalSpace 0
5522: oInputChoice 5548
5524: oGetParam 1
5526: oPushResult
5527: oCall 5561
5529: oPop 1
5531: oCall 8831
5533: oJumpForward 5560
5535: oGetParam 1
5537: oPushResult
5538: oCall 5561
5540: oPop 1
5542: oCall 8831
5544: oEmit 36
5546: oJumpForward 5560
5548: Choice Lookup Table
          24   5535
          23   5524
5553: oGetParam 1
5555: oPushResult
5556: oCall 5561
5558: oPop 1
5560: oReturn
5561: oLocalSpace 6
5563: oInputChoice 5767
5565: oEmit 15
5567: TOKEN_VALUE
5568: oPushResult
5569: oEmitInt
5570: oPop 1
5572: oGetGlobal 5
5574: oPushResult
5575: oTypeSPush
5576: oPop 1
5578: oJumpForward 5786
5580: oGetParam 1
5582: oPushResult
5583: oCall 4656
5585: oPop 1
5587: oInput 14
5589: oJumpForward 5786
5591: oGetAddrLocal 1
5593: oPushResult
5594: CURRENT_STRLIT
5595: oPushResult
5596: oStringAllocLit
5597: oPop 1
5599: oAssign
5600: oEmit 16
5602: oGetLocal 1
5604: oPushResult
5605: oEmitInt
5606: oPop 1
5608: oGetGlobal 9
5610: oPushResult
5611: oTypeSPush
5612: oPop 1
5614: oJumpForward 5786
5616: oGetAddrLocal 2
5618: oPushResult
5619: oScopeFindRequire
5620: oAssign
5621: oGetAddrLocal 2
5623: oPushResult
5624: oCall 409
5626: oPop 1
5628: oGetLocal 2
5630: oPushResult
5631: oNodeType
5632: oPop 1
5634: oChoice 5698
5636: oGetLocal 2
5638: oPushResult
5639: oCall 6943
5641: oPop 1
5643: oJumpForward 5719
5645: oGetAddrLocal 3
5647: oPushResult
5648: oGetLocal 2
5650: oPushResult
5651: oSetResult 21
5653: oPushResult
5654: oNodeGet
5655: oPop 2
5657: oAssign
5658: oGetLocal 3
5660: oPushResult
5661: oTypeSPush
5662: oPop 1
5664: oTypeSNodeType
5665: oChoice 5678
5667: oEmit 15
5669: oGetLocal 2
5671: oPushResult
5672: oCall 9112
5674: oPop 1
5676: oJumpForward 5687
5678: Choice Lookup Table
          26   5667
          34   5667
          25   5667
5685: oError 16
5687: oJumpForward 5719
5689: oGetLocal 2
5691: oPushResult
5692: oCall 5787
5694: oPop 1
5696: oJumpForward 5719
5698: Choice Lookup Table
          21   5689
          19   5689
          18   5689
          15   5645
          14   5645
          13   5636
5711: oError 6
5713: oGetGlobal 5
5715: oPushResult
5716: oTypeSPush
5717: oPop 1
5719: oJumpForward 5786
5721: oInput 0
5723: oGetAddrLocal 4
5725: oPushResult
5726: oScopeFindRequire
5727: oAssign
5728: oGetAddrLocal 4
5730: oPushResult
5731: oCall 409
5733: oPop 1
5735: oGetLocal 4
5737: oPushResult
5738: oCall 7988
5740: oPop 1
5742: oGetAddrLocal 5
5744: oPushResult
5745: oTypeSTop
5746: oAssign
5747: oTypeSPop
5748: oGetAddrLocal 6
5750: oPushResult
5751: oGetLocal 5
5753: oPushResult
5754: oCall 8933
5756: oPop 1
5758: oAssign
5759: oGetLocal 6
5761: oPushResult
5762: oTypeSPush
5763: oPop 1
5765: oJumpForward 5786
5767: Choice Lookup Table
          18   5721
           0   5616
           2   5591
          13   5580
           1   5565
5778: oError 6
5780: oGetGlobal 5
5782: oPushResult
5783: oTypeSPush
5784: oPop 1
5786: oReturn
5787: oLocalSpace 2
5789: oGetAddrLocal 1
5791: oPushResult
5792: oGetParam 1
5794: oPushResult
5795: oSetResult 21
5797: oPushResult
5798: oNodeGet
5799: oPop 2
5801: oAssign
5802: oGetAddrLocal 2
5804: oPushResult
5805: oGetParam 1
5807: oPushResult
5808: oCall 8773
5810: oPop 1
5812: oAssign
5813: oGetLocal 1
5815: oPushResult
5816: oTypeSPush
5817: oPop 1
5819: oTypeSNodeType
5820: oChoice 6337
5822: oGetParam 1
5824: oPushResult
5825: oNodeType
5826: oPop 1
5828: oChoice 5974
5830: oEmit 0
5832: oGetParam 1
5834: oPushResult
5835: oCall 9112
5837: oPop 1
5839: oJumpForward 5982
5841: oGetLocal 2
5843: oPushResult
5844: equal_zero
5845: oPop 1
5847: oChoice 5860
5849: oEmit 3
5851: oGetParam 1
5853: oPushResult
5854: oCall 9112
5856: oPop 1
5858: oJumpForward 5878
5860: Choice Lookup Table
           1   5849
5863: oEmit 9
5865: oGetLocal 2
5867: oPushResult
5868: oEmitInt
5869: oPop 1
5871: oGetParam 1
5873: oPushResult
5874: oCall 9112
5876: oPop 1
5878: oJumpForward 5982
5880: oGetParam 1
5882: oPushResult
5883: oSetResult 33
5885: oPushResult
5886: oNodeGetBoolean
5887: oPop 2
5889: oChoice 5932
5891: oGetLocal 2
5893: oPushResult
5894: equal_zero
5895: oPop 1
5897: oChoice 5910
5899: oEmit 8
5901: oGetParam 1
5903: oPushResult
5904: oCall 9112
5906: oPop 1
5908: oJumpForward 5928
5910: Choice Lookup Table
           1   5899
5913: oEmit 14
5915: oGetLocal 2
5917: oPushResult
5918: oEmitInt
5919: oPop 1
5921: oGetParam 1
5923: oPushResult
5924: oCall 9112
5926: oPop 1
5928: oEmit 22
5930: oJumpForward 5972
5932: Choice Lookup Table
           1   5891
5935: oGetLocal 2
5937: oPushResult
5938: equal_zero
5939: oPop 1
5941: oChoice 5954
5943: oEmit 6
5945: oGetParam 1
5947: oPushResult
5948: oCall 9112
5950: oPop 1
5952: oJumpForward 5972
5954: Choice Lookup Table
           1   5943
5957: oEmit 12
5959: oGetLocal 2
5961: oPushResult
5962: oEmitInt
5963: oPop 1
5965: oGetParam 1
5967: oPushResult
5968: oCall 9112
5970: oPop 1
5972: oJumpForward 5982
5974: Choice Lookup Table
          21   5880
          19   5841
          18   5830
5981: oEndChoice
5982: oJumpForward 6514
5984: oGetParam 1
5986: oPushResult
5987: oNodeType
5988: oPop 1
5990: oChoice 6136
5992: oEmit 1
5994: oGetParam 1
5996: oPushResult
5997: oCall 9112
5999: oPop 1
6001: oJumpForward 6144
6003: oGetLocal 2
6005: oPushResult
6006: equal_zero
6007: oPop 1
6009: oChoice 6022
6011: oEmit 4
6013: oGetParam 1
6015: oPushResult
6016: oCall 9112
6018: oPop 1
6020: oJumpForward 6040
6022: Choice Lookup Table
           1   6011
6025: oEmit 10
6027: oGetLocal 2
6029: oPushResult
6030: oEmitInt
6031: oPop 1
6033: oGetParam 1
6035: oPushResult
6036: oCall 9112
6038: oPop 1
6040: oJumpForward 6144
6042: oGetParam 1
6044: oPushResult
6045: oSetResult 33
6047: oPushResult
6048: oNodeGetBoolean
6049: oPop 2
6051: oChoice 6094
6053: oGetLocal 2
6055: oPushResult
6056: equal_zero
6057: oPop 1
6059: oChoice 6072
6061: oEmit 8
6063: oGetParam 1
6065: oPushResult
6066: oCall 9112
6068: oPop 1
6070: oJumpForward 6090
6072: Choice Lookup Table
           1   6061
6075: oEmit 14
6077: oGetLocal 2
6079: oPushResult
6080: oEmitInt
6081: oPop 1
6083: oGetParam 1
6085: oPushResult
6086: oCall 9112
6088: oPop 1
6090: oEmit 23
6092: oJumpForward 6134
6094: Choice Lookup Table
           1   6053
6097: oGetLocal 2
6099: oPushResult
6100: equal_zero
6101: oPop 1
6103: oChoice 6116
6105: oEmit 7
6107: oGetParam 1
6109: oPushResult
6110: oCall 9112
6112: oPop 1
6114: oJumpForward 6134
6116: Choice Lookup Table
           1   6105
6119: oEmit 13
6121: oGetLocal 2
6123: oPushResult
6124: oEmitInt
6125: oPop 1
6127: oGetParam 1
6129: oPushResult
6130: oCall 9112
6132: oPop 1
6134: oJumpForward 6144
6136: Choice Lookup Table
          21   6042
          19   6003
          18   5992
6143: oEndChoice
6144: oJumpForward 6514
6146: oError 16
6148: oJumpForward 6514
6150: oGetParam 1
6152: oPushResult
6153: oNodeType
6154: oPop 1
6156: oChoice 6302
6158: oEmit 2
6160: oGetParam 1
6162: oPushResult
6163: oCall 9112
6165: oPop 1
6167: oJumpForward 6310
6169: oGetLocal 2
6171: oPushResult
6172: equal_zero
6173: oPop 1
6175: oChoice 6188
6177: oEmit 5
6179: oGetParam 1
6181: oPushResult
6182: oCall 9112
6184: oPop 1
6186: oJumpForward 6206
6188: Choice Lookup Table
           1   6177
6191: oEmit 11
6193: oGetLocal 2
6195: oPushResult
6196: oEmitInt
6197: oPop 1
6199: oGetParam 1
6201: oPushResult
6202: oCall 9112
6204: oPop 1
6206: oJumpForward 6310
6208: oGetParam 1
6210: oPushResult
6211: oSetResult 33
6213: oPushResult
6214: oNodeGetBoolean
6215: oPop 2
6217: oChoice 6260
6219: oGetLocal 2
6221: oPushResult
6222: equal_zero
6223: oPop 1
6225: oChoice 6238
6227: oEmit 8
6229: oGetParam 1
6231: oPushResult
6232: oCall 9112
6234: oPop 1
6236: oJumpForward 6256
6238: Choice Lookup Table
           1   6227
6241: oEmit 14
6243: oGetLocal 2
6245: oPushResult
6246: oEmitInt
6247: oPop 1
6249: oGetParam 1
6251: oPushResult
6252: oCall 9112
6254: oPop 1
6256: oEmit 24
6258: oJumpForward 6300
6260: Choice Lookup Table
           1   6219
6263: oGetLocal 2
6265: oPushResult
6266: equal_zero
6267: oPop 1
6269: oChoice 6282
6271: oEmit 8
6273: oGetParam 1
6275: oPushResult
6276: oCall 9112
6278: oPop 1
6280: oJumpForward 6300
6282: Choice Lookup Table
           1   6271
6285: oEmit 14
6287: oGetLocal 2
6289: oPushResult
6290: oEmitInt
6291: oPop 1
6293: oGetParam 1
6295: oPushResult
6296: oCall 9112
6298: oPop 1
6300: oJumpForward 6310
6302: Choice Lookup Table
          21   6208
          19   6169
          18   6158
6309: oEndChoice
6310: oInputChoice 6332
6312: oTypeSPop
6313: oGetLocal 1
6315: oPushResult
6316: oSetResult 36
6318: oPushResult
6319: oNodeGet
6320: oPop 2
6322: oPushResult
6323: oTypeSPush
6324: oPop 1
6326: oCall 6552
6328: oCall 6515
6330: oJumpForward 6335
6332: Choice Lookup Table
          17   6312
6335: oJumpForward 6514
6337: Choice Lookup Table
          30   6150
          24   6146
          29   6146
          28   6146
          26   5984
          34   5822
          25   5822
6352: oGetParam 1
6354: oPushResult
6355: oNodeType
6356: oPop 1
6358: oChoice 6502
6360: oEmit 16
6362: oGetParam 1
6364: oPushResult
6365: oCall 9112
6367: oPop 1
6369: oJumpForward 6510
6371: oGetLocal 2
6373: oPushResult
6374: equal_zero
6375: oPop 1
6377: oChoice 6390
6379: oEmit 17
6381: oGetParam 1
6383: oPushResult
6384: oCall 9112
6386: oPop 1
6388: oJumpForward 6408
6390: Choice Lookup Table
           1   6379
6393: oEmit 20
6395: oGetLocal 2
6397: oPushResult
6398: oEmitInt
6399: oPop 1
6401: oGetParam 1
6403: oPushResult
6404: oCall 9112
6406: oPop 1
6408: oJumpForward 6510
6410: oGetParam 1
6412: oPushResult
6413: oSetResult 33
6415: oPushResult
6416: oNodeGetBoolean
6417: oPop 2
6419: oChoice 6460
6421: oGetLocal 2
6423: oPushResult
6424: equal_zero
6425: oPop 1
6427: oChoice 6440
6429: oEmit 8
6431: oGetParam 1
6433: oPushResult
6434: oCall 9112
6436: oPop 1
6438: oJumpForward 6458
6440: Choice Lookup Table
           1   6429
6443: oEmit 14
6445: oGetLocal 2
6447: oPushResult
6448: oEmitInt
6449: oPop 1
6451: oGetParam 1
6453: oPushResult
6454: oCall 9112
6456: oPop 1
6458: oJumpForward 6500
6460: Choice Lookup Table
           1   6421
6463: oGetLocal 2
6465: oPushResult
6466: equal_zero
6467: oPop 1
6469: oChoice 6482
6471: oEmit 18
6473: oGetParam 1
6475: oPushResult
6476: oCall 9112
6478: oPop 1
6480: oJumpForward 6500
6482: Choice Lookup Table
           1   6471
6485: oEmit 21
6487: oGetLocal 2
6489: oPushResult
6490: oEmitInt
6491: oPop 1
6493: oGetParam 1
6495: oPushResult
6496: oCall 9112
6498: oPop 1
6500: oJumpForward 6510
6502: Choice Lookup Table
          21   6410
          19   6371
          18   6360
6509: oEndChoice
6510: oCall 6552
6512: oCall 6515
6514: oReturn
6515: oLocalSpace 0
6517: oTypeSNodeType
6518: oChoice 6536
6520: oEmit 22
6522: oJumpForward 6551
6524: oEmit 23
6526: oJumpForward 6551
6528: oError 16
6530: oJumpForward 6551
6532: oEmit 24
6534: oJumpForward 6551
6536: Choice Lookup Table
          30   6532
          24   6528
          29   6528
          28   6528
          26   6524
          34   6520
          25   6520
6551: oReturn
6552: oLocalSpace 0
6554: oInputChoice 6568
6556: oCall 6580
6558: oJumpForward 6577
6560: oCall 6723
6562: oJumpForward 6577
6564: oCall 6821
6566: oJumpForward 6577
6568: Choice Lookup Table
          17   6564
          19   6560
          15   6556
6575: oJumpForward 6579
6577: oJumpBack 6554
6579: oReturn
6580: oLocalSpace 3
6582: oTypeSNodeType
6583: oChoice 6587
6585: oJumpForward 6592
6587: Choice Lookup Table
          31   6585
6590: oError 10
6592: oTypeSNodeType
6593: oChoice 6597
6595: oJumpForward 6602
6597: Choice Lookup Table
          31   6595
6600: oError 13
6602: oGetAddrLocal 1
6604: oPushResult
6605: oTypeSTop
6606: oPushResult
6607: oSetResult 37
6609: oPushResult
6610: oNodeGet
6611: oPop 2
6613: oPushResult
6614: oCall 9017
6616: oPop 1
6618: oAssign
6619: oGetAddrLocal 2
6621: oPushResult
6622: oTypeSTop
6623: oPushResult
6624: oSetResult 36
6626: oPushResult
6627: oNodeGet
6628: oPop 2
6630: oAssign
6631: oTypeSPop
6632: oGetLocal 2
6634: oPushResult
6635: oTypeSPush
6636: oPop 1
6638: oCall 4495
6640: oCall 8817
6642: oGetLocal 1
6644: oPushResult
6645: equal_zero
6646: oPop 1
6648: oChoice 6662
6650: oEmit 15
6652: oGetLocal 1
6654: oPushResult
6655: oEmitInt
6656: oPop 1
6658: oEmit 35
6660: oJumpForward 6665
6662: Choice Lookup Table
           0   6650
6665: oGetAddrLocal 3
6667: oPushResult
6668: oGetLocal 2
6670: oPushResult
6671: oSetResult 17
6673: oPushResult
6674: oNodeGetInt
6675: oPop 2
6677: oAssign
6678: oGetLocal 3
6680: oPushResult
6681: oSetResult 1
6683: oPushResult
6684: equal
6685: oPop 2
6687: oChoice 6701
6689: oEmit 15
6691: oGetLocal 3
6693: oPushResult
6694: oEmitInt
6695: oPop 1
6697: oEmit 31
6699: oJumpForward 6704
6701: Choice Lookup Table
           0   6689
6704: oEmit 33
6706: oInputChoice 6714
6708: oJumpForward 6722
6710: oJumpForward 6720
6712: oJumpForward 6720
6714: Choice Lookup Table
          12   6712
          16   6708
6719: oEndChoice
6720: oJumpBack 6592
6722: oReturn
6723: oLocalSpace 2
6725: oTypeSNodeType
6726: oChoice 6730
6728: oJumpForward 6735
6730: Choice Lookup Table
          33   6728
6733: oError 11
6735: oTypeSTop
6736: oPushResult
6737: oSetResult 40
6739: oPushResult
6740: oNodeGet
6741: oPop 2
6743: oPushResult
6744: oScopeEnter
6745: oPop 1
6747: oInput 0
6749: oGetAddrLocal 1
6751: oPushResult
6752: oScopeFindRequire
6753: oAssign
6754: oGetLocal 1
6756: oPushResult
6757: oNodeType
6758: oPop 1
6760: oChoice 6764
6762: oJumpForward 6769
6764: Choice Lookup Table
          20   6762
6767: oError 12
6769: oScopeEnd
6770: oGetAddrLocal 2
6772: oPushResult
6773: oGetLocal 1
6775: oPushResult
6776: oSetResult 22
6778: oPushResult
6779: oNodeGetInt
6780: oPop 2
6782: oAssign
6783: oGetLocal 2
6785: oPushResult
6786: equal_zero
6787: oPop 1
6789: oChoice 6803
6791: oEmit 15
6793: oGetLocal 2
6795: oPushResult
6796: oEmitInt
6797: oPop 1
6799: oEmit 33
6801: oJumpForward 6806
6803: Choice Lookup Table
           0   6791
6806: oTypeSPop
6807: oGetLocal 1
6809: oPushResult
6810: oSetResult 21
6812: oPushResult
6813: oNodeGet
6814: oPop 2
6816: oPushResult
6817: oTypeSPush
6818: oPop 1
6820: oReturn
6821: oLocalSpace 1
6823: oTypeSNodeType
6824: oChoice 6828
6826: oJumpForward 6833
6828: Choice Lookup Table
          30   6826
6831: oError 9
6833: oEmit 24
6835: oGetAddrLocal 1
6837: oPushResult
6838: oTypeSTop
6839: oAssign
6840: oTypeSPop
6841: oGetLocal 1
6843: oPushResult
6844: oSetResult 36
6846: oPushResult
6847: oNodeGet
6848: oPop 2
6850: oPushResult
6851: oTypeSPush
6852: oPop 1
6854: oReturn
6855: oLocalSpace 0
6857: oCall 8791
6859: oReturn
6860: oLocalSpace 2
6862: oGetAddrLocal 2
6864: oPushResult
6865: oGetParam 1
6867: oPushResult
6868: oSetResult 26
6870: oPushResult
6871: oNodeGetString
6872: oPop 2
6874: oAssign
6875: oGetLocal 2
6877: oPushResult
6878: oSetResult 0
6880: oPushResult
6881: equal_string
6882: oPop 2
6884: oChoice 6921
6886: oGetAddrLocal 1
6888: oPushResult
6889: oGetParam 1
6891: oPushResult
6892: oSetResult 4
6894: oPushResult
6895: oNodeGetInt
6896: oPop 2
6898: oPushResult
6899: ID_STRING
6900: oPop 1
6902: oPushResult
6903: oStringAllocLit
6904: oPop 1
6906: oAssign
6907: oJumpForward 6927
6909: oGetAddrLocal 1
6911: oPushResult
6912: oGetLocal 2
6914: oPushResult
6915: oStringAllocLit
6916: oPop 1
6918: oAssign
6919: oJumpForward 6927
6921: Choice Lookup Table
           0   6909
           1   6886
6926: oEndChoice
6927: oEmit 58
6929: oGetParam 1
6931: oPushResult
6932: oCall 9112
6934: oPop 1
6936: oGetLocal 1
6938: oPushResult
6939: oEmitInt
6940: oPop 1
6942: oReturn
6943: oLocalSpace 10
6945: oGetParam 1
6947: oPushResult
6948: oSetResult 25
6950: oPushResult
6951: oNodeGetBoolean
6952: oPop 2
6954: oChoice 6981
6956: oGetParam 1
6958: oPushResult
6959: oSetResult 28
6961: oPushResult
6962: oNodeGetBoolean
6963: oPop 2
6965: oChoice 6976
6967: oGetParam 1
6969: oPushResult
6970: oCall 6860
6972: oPop 1
6974: oJumpForward 6979
6976: Choice Lookup Table
           0   6967
6979: oJumpForward 6984
6981: Choice Lookup Table
           1   6956
6984: oGetParam 1
6986: oPushResult
6987: oSetResult 28
6989: oPushResult
6990: oSetResult 1
6992: oPushResult
6993: oNodeSetBoolean
6994: oPop 3
6996: oGetAddrLocal 1
6998: oPushResult
6999: oGetParam 1
7001: oPushResult
7002: oSetResult 27
7004: oPushResult
7005: oNodeGetBoolean
7006: oPop 2
7008: oAssign
7009: oGetAddrLocal 4
7011: oPushResult
7012: oGetParam 1
7014: oPushResult
7015: oNodeType
7016: oPop 1
7018: oPushResult
7019: oSetResult 13
7021: oPushResult
7022: equal_node_type
7023: oPop 2
7025: oAssign
7026: oGetLocal 4
7028: oChoice 7055
7030: oGetAddrLocal 2
7032: oPushResult
7033: oGetParam 1
7035: oPushResult
7036: oSetResult 21
7038: oPushResult
7039: oNodeGet
7040: oPop 2
7042: oAssign
7043: oGetAddrLocal 3
7045: oPushResult
7046: oGetLocal 2
7048: oPushResult
7049: oScopeAllocType
7050: oPop 1
7052: oAssign
7053: oJumpForward 7058
7055: Choice Lookup Table
           1   7030
7058: oGetAddrLocal 5
7060: oPushResult
7061: oGetParam 1
7063: oPushResult
7064: oSetResult 23
7066: oPushResult
7067: oNodeGet
7068: oPop 2
7070: oAssign
7071: oGetAddrLocal 6
7073: oPushResult
7074: oGetLocal 5
7076: oPushResult
7077: oSetResult 17
7079: oPushResult
7080: oNodeGetInt
7081: oPop 2
7083: oAssign
7084: oGetLocal 1
7086: oChoice 7108
7088: oEmit 47
7090: oGetLocal 6
7092: oPushResult
7093: oEmitInt
7094: oPop 1
7096: oJumpForward 7114
7098: oEmit 46
7100: oGetLocal 6
7102: oPushResult
7103: oEmitInt
7104: oPop 1
7106: oJumpForward 7114
7108: Choice Lookup Table
           0   7098
           1   7088
7113: oEndChoice
7114: oGetParam 1
7116: oPushResult
7117: oCall 8753
7119: oPop 1
7121: oPushResult
7122: oSetResult 0
7124: oPushResult
7125: greater
7126: oPop 2
7128: oChoice 7161
7130: oEmit 19
7132: oSetResult 0
7134: oPushResult
7135: oEmitInt
7136: oPop 1
7138: oEmit 20
7140: oGetParam 1
7142: oPushResult
7143: oCall 8773
7145: oPop 1
7147: oPushResult
7148: oEmitInt
7149: oPop 1
7151: oSetResult 0
7153: oPushResult
7154: oEmitInt
7155: oPop 1
7157: oEmit 27
7159: oJumpForward 7164
7161: Choice Lookup Table
           1   7130
7164: oGetAddrLocal 7
7166: oPushResult
7167: oGetLocal 5
7169: oPushResult
7170: oSetResult 15
7172: oPushResult
7173: oNodeGetIter
7174: oPop 2
7176: oAssign
7177: oGetAddrLocal 8
7179: oPushResult
7180: oGetLocal 7
7182: oPushResult
7183: oNodeIterValue
7184: oPop 1
7186: oAssign
7187: oInputChoice 7368
7189: oGetLocal 8
7191: oPushResult
7192: oNodeNull
7193: oPop 1
7195: oChoice 7201
7197: oJumpForward 7364
7199: oJumpForward 7204
7201: Choice Lookup Table
           1   7197
7204: oGetAddrLocal 9
7206: oPushResult
7207: oGetLocal 8
7209: oPushResult
7210: oSetResult 22
7212: oPushResult
7213: oNodeGetInt
7214: oPop 2
7216: oAssign
7217: oEmit 19
7219: oGetLocal 9
7221: oPushResult
7222: oEmitInt
7223: oPop 1
7225: oGetLocal 8
7227: oPushResult
7228: oSetResult 21
7230: oPushResult
7231: oNodeGet
7232: oPop 2
7234: oPushResult
7235: oTypeSPush
7236: oPop 1
7238: oGetLocal 8
7240: oPushResult
7241: oSetResult 33
7243: oPushResult
7244: oNodeGetBoolean
7245: oPop 2
7247: oChoice 7317
7249: oCall 7945
7251: oCall 8791
7253: oEmit 27
7255: oJumpForward 7323
7257: oCall 4495
7259: oCall 6855
7261: oTypeSNodeType
7262: oChoice 7280
7264: oEmit 25
7266: oJumpForward 7315
7268: oEmit 26
7270: oJumpForward 7315
7272: oError 16
7274: oJumpForward 7315
7276: oEmit 27
7278: oJumpForward 7315
7280: Choice Lookup Table
          30   7276
          24   7272
          29   7272
          28   7272
          26   7268
          34   7264
          25   7264
7295: oGetAddrLocal 10
7297: oPushResult
7298: oTypeSTop
7299: oPushResult
7300: oSetResult 17
7302: oPushResult
7303: oNodeGetInt
7304: oPop 2
7306: oAssign
7307: oEmit 28
7309: oGetLocal 10
7311: oPushResult
7312: oEmitInt
7313: oPop 1
7315: oJumpForward 7323
7317: Choice Lookup Table
           0   7257
           1   7249
7322: oEndChoice
7323: oTypeSPop
7324: oGetAddrLocal 7
7326: oPushResult
7327: oNodeIterNext
7328: oPop 1
7330: oGetAddrLocal 8
7332: oPushResult
7333: oGetLocal 7
7335: oPushResult
7336: oNodeIterValue
7337: oPop 1
7339: oAssign
7340: oGetLocal 8
7342: oPushResult
7343: oNodeNull
7344: oPop 1
7346: oChoice 7354
7348: oJumpForward 7364
7350: oJumpForward 7360
7352: oJumpForward 7360
7354: Choice Lookup Table
           0   7352
           1   7348
7359: oEndChoice
7360: oInput 12
7362: oJumpBack 7189
7364: oInput 14
7366: oJumpForward 7371
7368: Choice Lookup Table
          13   7189
7371: oGetLocal 8
7373: oPushResult
7374: oNodeNull
7375: oPop 1
7377: oChoice 7383
7379: oError 15
7381: oJumpForward 7386
7383: Choice Lookup Table
           0   7379
7386: oGetLocal 4
7388: oChoice 7417
7390: oEmit 19
7392: oGetParam 1
7394: oPushResult
7395: oSetResult 31
7397: oPushResult
7398: oNodeGetInt
7399: oPop 2
7401: oPushResult
7402: oEmitInt
7403: oPop 1
7405: oEmit 17
7407: oGetLocal 3
7409: oPushResult
7410: oEmitInt
7411: oPop 1
7413: oEmit 27
7415: oJumpForward 7420
7417: Choice Lookup Table
           1   7390
7420: oGetLocal 1
7422: oChoice 7446
7424: oEmit 50
7426: oGetParam 1
7428: oPushResult
7429: oCall 9112
7431: oPop 1
7433: oJumpForward 7452
7435: oEmit 49
7437: oGetParam 1
7439: oPushResult
7440: oCall 9112
7442: oPop 1
7444: oJumpForward 7452
7446: Choice Lookup Table
           0   7435
           1   7424
7451: oEndChoice
7452: oGetLocal 4
7454: oChoice 7524
7456: oGetLocal 2
7458: oPushResult
7459: oTypeSPush
7460: oPop 1
7462: oTypeSNodeType
7463: oChoice 7499
7465: oEmit 3
7467: oGetLocal 3
7469: oPushResult
7470: oEmitInt
7471: oPop 1
7473: oJumpForward 7522
7475: oEmit 4
7477: oGetLocal 3
7479: oPushResult
7480: oEmitInt
7481: oPop 1
7483: oJumpForward 7522
7485: oError 16
7487: oJumpForward 7522
7489: oEmit 5
7491: oGetLocal 3
7493: oPushResult
7494: oEmitInt
7495: oPop 1
7497: oJumpForward 7522
7499: Choice Lookup Table
          30   7489
          24   7485
          29   7485
          28   7485
          26   7475
          34   7465
          25   7465
7514: oEmit 17
7516: oGetLocal 3
7518: oPushResult
7519: oEmitInt
7520: oPop 1
7522: oJumpForward 7527
7524: Choice Lookup Table
           1   7456
7527: oEmit 48
7529: oGetLocal 6
7531: oPushResult
7532: oEmitInt
7533: oPop 1
7535: oReturn
7536: oLocalSpace 0
7538: oInputChoice 7597
7540: oCall 8641
7542: oJumpForward 7626
7544: oCall 8648
7546: oJumpForward 7626
7548: oCall 8735
7550: oJumpForward 7626
7552: oCall 8738
7554: oJumpForward 7626
7556: oCall 8129
7558: oJumpForward 7626
7560: oCall 8449
7562: oJumpForward 7626
7564: oCall 8195
7566: oJumpForward 7626
7568: oCall 8369
7570: oJumpForward 7626
7572: oCall 8534
7574: oJumpForward 7626
7576: oCall 8502
7578: oJumpForward 7626
7580: oCall 8618
7582: oJumpForward 7626
7584: oCall 7627
7586: oJumpForward 7626
7588: oCall 8566
7590: oJumpForward 7626
7592: oChangeIntLitToLabelIdent
7593: oCall 7627
7595: oJumpForward 7626
7597: Choice Lookup Table
           1   7592
          52   7588
           0   7584
          34   7580
          50   7576
          51   7572
          48   7568
          43   7564
          47   7560
          40   7556
          65   7552
          64   7548
          63   7544
          62   7540
7626: oReturn
7627: oLocalSpace 1
7629: oGetAddrLocal 1
7631: oPushResult
7632: oScopeFindRequire
7633: oAssign
7634: oGetAddrLocal 1
7636: oPushResult
7637: oCall 409
7639: oPop 1
7641: oGetLocal 1
7643: oPushResult
7644: oNodeType
7645: oPop 1
7647: oChoice 7687
7649: oGetLocal 1
7651: oPushResult
7652: oCall 7703
7654: oPop 1
7656: oCall 7536
7658: oJumpForward 7702
7660: oGetLocal 1
7662: oPushResult
7663: oCall 6943
7665: oPop 1
7667: oJumpForward 7702
7669: oGetLocal 1
7671: oPushResult
7672: oCall 7753
7674: oPop 1
7676: oJumpForward 7702
7678: oGetLocal 1
7680: oPushResult
7681: oCall 7829
7683: oPop 1
7685: oJumpForward 7702
7687: Choice Lookup Table
          13   7678
          21   7669
          19   7669
          18   7669
          12   7660
          22   7649
7700: oError 0
7702: oReturn
7703: oLocalSpace 0
7705: oGetParam 1
7707: oPushResult
7708: oSetResult 34
7710: oPushResult
7711: oNodeGetBoolean
7712: oPop 2
7714: oChoice 7720
7716: oError 21
7718: oJumpForward 7723
7720: Choice Lookup Table
           1   7716
7723: oEmit 56
7725: oGetParam 1
7727: oPushResult
7728: oSetResult 22
7730: oPushResult
7731: oNodeGetLabel
7732: oPop 2
7734: oPushResult
7735: oEmitLabel
7736: oPop 1
7738: oGetParam 1
7740: oPushResult
7741: oSetResult 34
7743: oPushResult
7744: oSetResult 1
7746: oPushResult
7747: oNodeSetBoolean
7748: oPop 3
7750: oInput 11
7752: oReturn
7753: oLocalSpace 0
7755: oGetParam 1
7757: oPushResult
7758: oCall 7988
7760: oPop 1
7762: oInput 3
7764: oCall 4495
7766: oCall 8791
7768: oCall 7771
7770: oReturn
7771: oLocalSpace 1
7773: oTypeSNodeType
7774: oChoice 7792
7776: oEmit 25
7778: oJumpForward 7827
7780: oEmit 26
7782: oJumpForward 7827
7784: oError 16
7786: oJumpForward 7827
7788: oEmit 27
7790: oJumpForward 7827
7792: Choice Lookup Table
          30   7788
          24   7784
          29   7784
          28   7784
          26   7780
          34   7776
          25   7776
7807: oGetAddrLocal 1
7809: oPushResult
7810: oTypeSTop
7811: oPushResult
7812: oSetResult 17
7814: oPushResult
7815: oNodeGetInt
7816: oPop 2
7818: oAssign
7819: oEmit 28
7821: oGetLocal 1
7823: oPushResult
7824: oEmitInt
7825: oPop 1
7827: oTypeSPop
7828: oReturn
7829: oLocalSpace 1
7831: oGetParam 1
7833: oPushResult
7834: oSetResult 6
7836: oPushResult
7837: oNodeGet
7838: oPop 2
7840: oPushResult
7841: oScopeCurrent
7842: oPushResult
7843: oNodeEqual
7844: oPop 2
7846: oChoice 7852
7848: oError 20
7850: oJumpForward 7855
7852: Choice Lookup Table
           0   7848
7855: oEmit 8
7857: oGetParam 1
7859: oPushResult
7860: oSetResult 31
7862: oPushResult
7863: oNodeGetInt
7864: oPop 2
7866: oPushResult
7867: oEmitInt
7868: oPop 1
7870: oGetParam 1
7872: oPushResult
7873: oSetResult 21
7875: oPushResult
7876: oNodeGet
7877: oPop 2
7879: oPushResult
7880: oTypeSPush
7881: oPop 1
7883: oInput 3
7885: oCall 4495
7887: oCall 8791
7889: oTypeSNodeType
7890: oChoice 7908
7892: oEmit 25
7894: oJumpForward 7943
7896: oEmit 26
7898: oJumpForward 7943
7900: oError 16
7902: oJumpForward 7943
7904: oEmit 27
7906: oJumpForward 7943
7908: Choice Lookup Table
          30   7904
          24   7900
          29   7900
          28   7900
          26   7896
          34   7892
          25   7892
7923: oGetAddrLocal 1
7925: oPushResult
7926: oTypeSTop
7927: oPushResult
7928: oSetResult 17
7930: oPushResult
7931: oNodeGetInt
7932: oPop 2
7934: oAssign
7935: oEmit 28
7937: oGetLocal 1
7939: oPushResult
7940: oEmitInt
7941: oPop 1
7943: oTypeSPop
7944: oReturn
7945: oLocalSpace 1
7947: oInput 0
7949: oGetAddrLocal 1
7951: oPushResult
7952: oScopeFindRequire
7953: oAssign
7954: oGetAddrLocal 1
7956: oPushResult
7957: oCall 409
7959: oPop 1
7961: oGetLocal 1
7963: oPushResult
7964: oNodeType
7965: oPop 1
7967: oChoice 7971
7969: oJumpForward 7980
7971: Choice Lookup Table
          21   7969
          19   7969
          18   7969
7978: oError 4
7980: oGetLocal 1
7982: oPushResult
7983: oCall 7988
7985: oPop 1
7987: oReturn
7988: oLocalSpace 0
7990: oGetParam 1
7992: oPushResult
7993: oNodeType
7994: oPop 1
7996: oChoice 8056
7998: oEmit 16
8000: oGetParam 1
8002: oPushResult
8003: oCall 9112
8005: oPop 1
8007: oJumpForward 8065
8009: oEmit 17
8011: oGetParam 1
8013: oPushResult
8014: oCall 9112
8016: oPop 1
8018: oJumpForward 8065
8020: oGetParam 1
8022: oPushResult
8023: oSetResult 33
8025: oPushResult
8026: oNodeGetBoolean
8027: oPop 2
8029: oChoice 8042
8031: oEmit 8
8033: oGetParam 1
8035: oPushResult
8036: oCall 9112
8038: oPop 1
8040: oJumpForward 8054
8042: Choice Lookup Table
           1   8031
8045: oEmit 18
8047: oGetParam 1
8049: oPushResult
8050: oCall 9112
8052: oPop 1
8054: oJumpForward 8065
8056: Choice Lookup Table
          21   8020
          19   8009
          18   7998
8063: oError 4
8065: oGetParam 1
8067: oPushResult
8068: oSetResult 21
8070: oPushResult
8071: oNodeGet
8072: oPop 2
8074: oPushResult
8075: oTypeSPush
8076: oPop 1
8078: oCall 6552
8080: oReturn
8081: oLocalSpace 0
8083: oGetParam 1
8085: oPushResult
8086: oCall 7988
8088: oPop 1
8090: oCall 8817
8092: oGetParam 1
8094: oPushResult
8095: oCall 5787
8097: oPop 1
8099: oTypeSPop
8100: oEmit 29
8102: oEmit 25
8104: oReturn
8105: oLocalSpace 0
8107: oGetParam 1
8109: oPushResult
8110: oCall 7988
8112: oPop 1
8114: oCall 8817
8116: oGetParam 1
8118: oPushResult
8119: oCall 5787
8121: oPop 1
8123: oTypeSPop
8124: oEmit 30
8126: oEmit 25
8128: oReturn
8129: oLocalSpace 2
8131: oGetAddrLocal 1
8133: oPushResult
8134: oSetResult 0
8136: oAssign
8137: oGetAddrLocal 1
8139: oPushResult
8140: oCall 4518
8142: oPop 1
8144: oInput 41
8146: oCall 7536
8148: oInputChoice 8183
8150: oGetAddrLocal 2
8152: oPushResult
8153: oLabelNew
8154: oAssign
8155: oEmit 53
8157: oGetLocal 2
8159: oPushResult
8160: oEmitLabel
8161: oPop 1
8163: oEmit 56
8165: oGetLocal 1
8167: oPushResult
8168: oEmitLabel
8169: oPop 1
8171: oCall 7536
8173: oEmit 56
8175: oGetLocal 2
8177: oPushResult
8178: oEmitLabel
8179: oPop 1
8181: oJumpForward 8194
8183: Choice Lookup Table
          42   8150
8186: oEmit 56
8188: oGetLocal 1
8190: oPushResult
8191: oEmitLabel
8192: oPop 1
8194: oReturn
8195: oLocalSpace 4
8197: oInput 0
8199: oGetAddrLocal 1
8201: oPushResult
8202: oScopeFindRequire
8203: oAssign
8204: oGetLocal 1
8206: oPushResult
8207: oCall 7988
8209: oPop 1
8211: oCall 8817
8213: oInput 3
8215: oCall 4495
8217: oCall 8817
8219: oEmit 25
8221: oGetAddrLocal 2
8223: oPushResult
8224: oLabelNew
8225: oAssign
8226: oGetAddrLocal 3
8228: oPushResult
8229: oLabelNew
8230: oAssign
8231: oEmit 53
8233: oGetLocal 3
8235: oPushResult
8236: oEmitLabel
8237: oPop 1
8239: oGetAddrLocal 4
8241: oPushResult
8242: oLabelNew
8243: oAssign
8244: oEmit 56
8246: oGetLocal 4
8248: oPushResult
8249: oEmitLabel
8250: oPop 1
8252: oInputChoice 8332
8254: oGetLocal 1
8256: oPushResult
8257: oCall 8081
8259: oPop 1
8261: oEmit 56
8263: oGetLocal 3
8265: oPushResult
8266: oEmitLabel
8267: oPop 1
8269: oGetLocal 1
8271: oPushResult
8272: oCall 5787
8274: oPop 1
8276: oTypeSPop
8277: oCall 4495
8279: oCall 8817
8281: oEmit 40
8283: oEmit 54
8285: oGetLocal 2
8287: oPushResult
8288: oEmitLabel
8289: oPop 1
8291: oJumpForward 8338
8293: oGetLocal 1
8295: oPushResult
8296: oCall 8105
8298: oPop 1
8300: oEmit 56
8302: oGetLocal 3
8304: oPushResult
8305: oEmitLabel
8306: oPop 1
8308: oGetLocal 1
8310: oPushResult
8311: oCall 5787
8313: oPop 1
8315: oTypeSPop
8316: oCall 4495
8318: oCall 8817
8320: oEmit 41
8322: oEmit 54
8324: oGetLocal 2
8326: oPushResult
8327: oEmitLabel
8328: oPop 1
8330: oJumpForward 8338
8332: Choice Lookup Table
          45   8293
          44   8254
8337: oEndChoice
8338: oGetLocal 4
8340: oPushResult
8341: oGetLocal 2
8343: oPushResult
8344: oLoopPush
8345: oPop 2
8347: oInput 46
8349: oCall 7536
8351: oEmit 53
8353: oGetLocal 4
8355: oPushResult
8356: oEmitLabel
8357: oPop 1
8359: oEmit 56
8361: oGetLocal 2
8363: oPushResult
8364: oEmitLabel
8365: oPop 1
8367: oLoopPop
8368: oReturn
8369: oLocalSpace 3
8371: oGetAddrLocal 1
8373: oPushResult
8374: oLabelNew
8375: oAssign
8376: oEmit 56
8378: oGetLocal 1
8380: oPushResult
8381: oEmitLabel
8382: oPop 1
8384: oGetAddrLocal 2
8386: oPushResult
8387: oLabelNew
8388: oAssign
8389: oGetLocal 1
8391: oPushResult
8392: oGetLocal 2
8394: oPushResult
8395: oLoopPush
8396: oPop 2
8398: oCall 7536
8400: oInputChoice 8431
8402: oCall 7536
8404: oJumpForward 8437
8406: oGetAddrLocal 3
8408: oPushResult
8409: oCall 4518
8411: oPop 1
8413: oEmit 57
8415: oGetLocal 3
8417: oPushResult
8418: oEmitLabel
8419: oPop 1
8421: oGetLocal 1
8423: oPushResult
8424: oEmitLabel
8425: oPop 1
8427: oJumpForward 8439
8429: oJumpForward 8437
8431: Choice Lookup Table
          49   8406
           4   8402
8436: oEndChoice
8437: oJumpBack 8400
8439: oEmit 56
8441: oGetLocal 2
8443: oPushResult
8444: oEmitLabel
8445: oPop 1
8447: oLoopPop
8448: oReturn
8449: oLocalSpace 2
8451: oGetAddrLocal 1
8453: oPushResult
8454: oLabelNew
8455: oAssign
8456: oEmit 56
8458: oGetLocal 1
8460: oPushResult
8461: oEmitLabel
8462: oPop 1
8464: oGetAddrLocal 2
8466: oPushResult
8467: oCall 4518
8469: oPop 1
8471: oGetLocal 1
8473: oPushResult
8474: oGetLocal 2
8476: oPushResult
8477: oLoopPush
8478: oPop 2
8480: oInput 46
8482: oCall 7536
8484: oEmit 53
8486: oGetLocal 1
8488: oPushResult
8489: oEmitLabel
8490: oPop 1
8492: oEmit 56
8494: oGetLocal 2
8496: oPushResult
8497: oEmitLabel
8498: oPop 1
8500: oLoopPop
8501: oReturn
8502: oLocalSpace 0
8504: oLoopContinueLabel
8505: oPushResult
8506: oSetResult 0
8508: oPushResult
8509: equal_label
8510: oPop 2
8512: oChoice 8527
8514: oError 18
8516: oJumpForward 8533
8518: oEmit 53
8520: oLoopContinueLabel
8521: oPushResult
8522: oEmitLabel
8523: oPop 1
8525: oJumpForward 8533
8527: Choice Lookup Table
           0   8518
           1   8514
8532: oEndChoice
8533: oReturn
8534: oLocalSpace 0
8536: oLoopBreakLabel
8537: oPushResult
8538: oSetResult 0
8540: oPushResult
8541: equal_label
8542: oPop 2
8544: oChoice 8559
8546: oError 18
8548: oJumpForward 8565
8550: oEmit 53
8552: oLoopBreakLabel
8553: oPushResult
8554: oEmitLabel
8555: oPop 1
8557: oJumpForward 8565
8559: Choice Lookup Table
           0   8550
           1   8546
8564: oEndChoice
8565: oReturn
8566: oLocalSpace 1
8568: oInputChoice 8575
8570: oJumpForward 8581
8572: oChangeIntLitToLabelIdent
8573: oJumpForward 8581
8575: Choice Lookup Table
           1   8572
           0   8570
8580: oEndChoice
8581: oGetAddrLocal 1
8583: oPushResult
8584: oScopeCurrent
8585: oPushResult
8586: oScopeFindRequireInScope
8587: oPop 1
8589: oAssign
8590: oGetLocal 1
8592: oPushResult
8593: oSetResult 28
8595: oPushResult
8596: oSetResult 1
8598: oPushResult
8599: oNodeSetBoolean
8600: oPop 3
8602: oEmit 53
8604: oGetLocal 1
8606: oPushResult
8607: oSetResult 22
8609: oPushResult
8610: oNodeGetLabel
8611: oPop 2
8613: oPushResult
8614: oEmitLabel
8615: oPop 1
8617: oReturn
8618: oLocalSpace 0
8620: oCall 7536
8622: oInputChoice 8632
8624: oCall 7536
8626: oJumpForward 8638
8628: oJumpForward 8640
8630: oJumpForward 8638
8632: Choice Lookup Table
          35   8628
           4   8624
8637: oEndChoice
8638: oJumpBack 8622
8640: oReturn
8641: oLocalSpace 0
8643: oCall 8648
8645: oEmit 64
8647: oReturn
8648: oLocalSpace 0
8650: oInputChoice 8731
8652: oCall 4495
8654: oTypeSNodeType
8655: oChoice 8695
8657: oEmit 59
8659: oJumpForward 8712
8661: oEmit 60
8663: oJumpForward 8712
8665: oEmit 61
8667: oJumpForward 8712
8669: oError 16
8671: oJumpForward 8712
8673: oEmit 16
8675: oTypeSTop
8676: oPushResult
8677: oSetResult 41
8679: oPushResult
8680: oNodeGetInt
8681: oPop 2
8683: oPushResult
8684: oEmitInt
8685: oPop 1
8687: oEmit 63
8689: oJumpForward 8712
8691: oEmit 62
8693: oJumpForward 8712
8695: Choice Lookup Table
          30   8691
          34   8673
          24   8669
          28   8669
          29   8665
          26   8661
          25   8657
8710: oError 17
8712: oTypeSPop
8713: oInputChoice 8721
8715: oJumpForward 8729
8717: oJumpForward 8727
8719: oJumpForward 8727
8721: Choice Lookup Table
          12   8719
          14   8715
8726: oEndChoice
8727: oJumpBack 8652
8729: oJumpForward 8734
8731: Choice Lookup Table
          13   8652
8734: oReturn
8735: oLocalSpace 0
8737: oReturn
8738: oLocalSpace 0
8740: oReturn
8741: oLocalSpace 0
8743: oScopeCurrent
8744: oPushResult
8745: oSetResult 14
8747: oPushResult
8748: oNodeGetInt
8749: oPop 2
8751: oReturn
8752: oReturn
8753: oLocalSpace 0
8755: oGetParam 1
8757: oPushResult
8758: oSetResult 20
8760: oPushResult
8761: oNodeGet
8762: oPop 2
8764: oPushResult
8765: oSetResult 14
8767: oPushResult
8768: oNodeGetInt
8769: oPop 2
8771: oReturn
8772: oReturn
8773: oLocalSpace 0
8775: oCall 8741
8777: oPushResult
8778: oGetParam 1
8780: oPushResult
8781: oCall 8753
8783: oPop 1
8785: oPushResult
8786: subtract
8787: oPop 2
8789: oReturn
8790: oReturn
8791: oLocalSpace 1
8793: oGetAddrLocal 1
8795: oPushResult
8796: oTypeSNodeType
8797: oAssign
8798: oTypeSPop
8799: oGetLocal 1
8801: oPushResult
8802: oTypeSNodeType
8803: oPushResult
8804: equal_node_type
8805: oPop 2
8807: oChoice 8813
8809: oError 14
8811: oJumpForward 8816
8813: Choice Lookup Table
           0   8809
8816: oReturn
8817: oLocalSpace 0
8819: oTypeSNodeType
8820: oChoice 8824
8822: oJumpForward 8829
8824: Choice Lookup Table
          25   8822
8827: oError 7
8829: oTypeSPop
8830: oReturn
8831: oLocalSpace 0
8833: oTypeSNodeType
8834: oChoice 8838
8836: oJumpForward 8843
8838: Choice Lookup Table
          25   8836
8841: oError 7
8843: oReturn
8844: oLocalSpace 0
8846: oTypeSNodeType
8847: oChoice 8851
8849: oJumpForward 8856
8851: Choice Lookup Table
          26   8849
8854: oError 8
8856: oTypeSPop
8857: oReturn
8858: oLocalSpace 0
8860: oTypeSNodeType
8861: oChoice 8865
8863: oJumpForward 8870
8865: Choice Lookup Table
          26   8863
8868: oError 8
8870: oReturn
8871: oLocalSpace 1
8873: oGetAddrLocal 1
8875: oPushResult
8876: oGetParam 2
8878: oPushResult
8879: oNodeNew
8880: oPop 1
8882: oAssign
8883: oGetLocal 1
8885: oPushResult
8886: oSetResult 17
8888: oPushResult
8889: oGetParam 1
8891: oPushResult
8892: oNodeSetInt
8893: oPop 3
8895: oGetLocal 1
8897: oPushResult
8898: oTypeAdd
8899: oPop 1
8901: oGetLocal 1
8903: oReturn
8904: oReturn
8905: oLocalSpace 1
8907: oGetAddrLocal 1
8909: oPushResult
8910: oGetParam 2
8912: oPushResult
8913: oNodeNew
8914: oPop 1
8916: oAssign
8917: oGetLocal 1
8919: oPushResult
8920: oSetResult 4
8922: oPushResult
8923: oGetParam 1
8925: oPushResult
8926: oNodeSetInt
8927: oPop 3
8929: oGetLocal 1
8931: oReturn
8932: oReturn
8933: oLocalSpace 1
8935: oGetAddrLocal 1
8937: oPushResult
8938: oGetParam 1
8940: oPushResult
8941: oSetResult 35
8943: oPushResult
8944: oNodeGet
8945: oPop 2
8947: oAssign
8948: oGetLocal 1
8950: oPushResult
8951: oNodeNull
8952: oPop 1
8954: oChoice 9010
8956: oGetAddrLocal 1
8958: oPushResult
8959: oSetResult 30
8961: oPushResult
8962: oNodeNew
8963: oPop 1
8965: oAssign
8966: oGetLocal 1
8968: oPushResult
8969: oSetResult 36
8971: oPushResult
8972: oGetParam 1
8974: oPushResult
8975: oNodeSet
8976: oPop 3
8978: oGetLocal 1
8980: oPushResult
8981: oSetResult 17
8983: oPushResult
8984: oSetResult 8
8986: oPushResult
8987: oNodeSetInt
8988: oPop 3
8990: oGetLocal 1
8992: oPushResult
8993: oTypeAdd
8994: oPop 1
8996: oGetParam 1
8998: oPushResult
8999: oSetResult 35
9001: oPushResult
9002: oGetLocal 1
9004: oPushResult
9005: oNodeSet
9006: oPop 3
9008: oJumpForward 9013
9010: Choice Lookup Table
           1   8956
9013: oGetLocal 1
9015: oReturn
9016: oReturn
9017: oLocalSpace 2
9019: oGetParam 1
9021: oPushResult
9022: oNodeType
9023: oPop 1
9025: oChoice 9095
9027: oMININT
9028: oReturn
9029: oJumpForward 9111
9031: oSetResult 0
9033: oReturn
9034: oJumpForward 9111
9036: oSetResult 0
9038: oReturn
9039: oJumpForward 9111
9041: oGetAddrLocal 1
9043: oPushResult
9044: oGetParam 1
9046: oPushResult
9047: oSetResult 40
9049: oPushResult
9050: oNodeGet
9051: oPop 2
9053: oAssign
9054: oGetAddrLocal 2
9056: oPushResult
9057: oGetLocal 1
9059: oPushResult
9060: oSetResult 15
9062: oPushResult
9063: oNodeGetIter
9064: oPop 2
9066: oPushResult
9067: oNodeIterValue
9068: oPop 1
9070: oAssign
9071: oGetLocal 2
9073: oPushResult
9074: oSetResult 22
9076: oPushResult
9077: oNodeGetInt
9078: oPop 2
9080: oReturn
9081: oJumpForward 9111
9083: oGetParam 1
9085: oPushResult
9086: oSetResult 38
9088: oPushResult
9089: oNodeGetInt
9090: oPop 2
9092: oReturn
9093: oJumpForward 9111
9095: Choice Lookup Table
          32   9083
          34   9041
          28   9036
          26   9031
          25   9027
9106: oError 3
9108: oSetResult 0
9110: oReturn
9111: oReturn
9112: oLocalSpace 0
9114: oGetParam 1
9116: oPushResult
9117: oSetResult 22
9119: oPushResult
9120: oNodeGetInt
9121: oPop 2
9123: oPushResult
9124: oEmitInt
9125: oPop 1
9127: oReturn
9128: oLocalSpace 1
9130: oGetAddrGlobal 4
9132: oPushResult
9133: oSetResult 24
9135: oPushResult
9136: oSetResult 4
9138: oPushResult
9139: oCall 8871
9141: oPop 2
9143: oAssign
9144: oGetAddrGlobal 5
9146: oPushResult
9147: oSetResult 25
9149: oPushResult
9150: oSetResult 4
9152: oPushResult
9153: oCall 8871
9155: oPop 2
9157: oAssign
9158: oGetAddrGlobal 6
9160: oPushResult
9161: oSetResult 26
9163: oPushResult
9164: oSetResult 1
9166: oPushResult
9167: oCall 8871
9169: oPop 2
9171: oAssign
9172: oGetAddrGlobal 7
9174: oPushResult
9175: oSetResult 27
9177: oPushResult
9178: oSetResult 1
9180: oPushResult
9181: oCall 8871
9183: oPop 2
9185: oAssign
9186: oGetAddrGlobal 8
9188: oPushResult
9189: oSetResult 28
9191: oPushResult
9192: oSetResult 1
9194: oPushResult
9195: oCall 8871
9197: oPop 2
9199: oAssign
9200: oGetAddrGlobal 9
9202: oPushResult
9203: oSetResult 29
9205: oPushResult
9206: oSetResult 256
9208: oPushResult
9209: oCall 8871
9211: oPop 2
9213: oAssign
9214: oGetAddrLocal 1
9216: oPushResult
9217: oSetResult 16
9219: oPushResult
9220: oIdAdd_File
9221: oPushResult
9222: oCall 8905
9224: oPop 2
9226: oAssign
9227: oGetLocal 1
9229: oPushResult
9230: oSetResult 21
9232: oPushResult
9233: oGetGlobal 4
9235: oPushResult
9236: oNodeSet
9237: oPop 3
9239: oGetLocal 1
9241: oPushResult
9242: oScopeDeclare
9243: oPop 1
9245: oGetAddrLocal 1
9247: oPushResult
9248: oSetResult 16
9250: oPushResult
9251: oIdAdd_Integer
9252: oPushResult
9253: oCall 8905
9255: oPop 2
9257: oAssign
9258: oGetLocal 1
9260: oPushResult
9261: oSetResult 21
9263: oPushResult
9264: oGetGlobal 5
9266: oPushResult
9267: oNodeSet
9268: oPop 3
9270: oGetLocal 1
9272: oPushResult
9273: oScopeDeclare
9274: oPop 1
9276: oGetAddrLocal 1
9278: oPushResult
9279: oSetResult 16
9281: oPushResult
9282: oIdAdd_Boolean
9283: oPushResult
9284: oCall 8905
9286: oPop 2
9288: oAssign
9289: oGetLocal 1
9291: oPushResult
9292: oSetResult 21
9294: oPushResult
9295: oGetGlobal 6
9297: oPushResult
9298: oNodeSet
9299: oPop 3
9301: oGetLocal 1
9303: oPushResult
9304: oScopeDeclare
9305: oPop 1
9307: oGetAddrLocal 1
9309: oPushResult
9310: oSetResult 16
9312: oPushResult
9313: oIdAdd_Char
9314: oPushResult
9315: oCall 8905
9317: oPop 2
9319: oAssign
9320: oGetLocal 1
9322: oPushResult
9323: oSetResult 21
9325: oPushResult
9326: oGetGlobal 8
9328: oPushResult
9329: oNodeSet
9330: oPop 3
9332: oGetLocal 1
9334: oPushResult
9335: oScopeDeclare
9336: oPop 1
9338: oGetAddrLocal 1
9340: oPushResult
9341: oSetResult 16
9343: oPushResult
9344: oIdAdd_String
9345: oPushResult
9346: oCall 8905
9348: oPop 2
9350: oAssign
9351: oGetLocal 1
9353: oPushResult
9354: oSetResult 21
9356: oPushResult
9357: oGetGlobal 9
9359: oPushResult
9360: oNodeSet
9361: oPop 3
9363: oGetLocal 1
9365: oPushResult
9366: oScopeDeclare
9367: oPop 1
9369: oGetAddrLocal 1
9371: oPushResult
9372: oSetResult 14
9374: oPushResult
9375: oIdAdd_True
9376: oPushResult
9377: oCall 8905
9379: oPop 2
9381: oAssign
9382: oGetLocal 1
9384: oPushResult
9385: oSetResult 21
9387: oPushResult
9388: oGetGlobal 6
9390: oPushResult
9391: oNodeSet
9392: oPop 3
9394: oGetLocal 1
9396: oPushResult
9397: oSetResult 22
9399: oPushResult
9400: oSetResult 1
9402: oPushResult
9403: oNodeSetInt
9404: oPop 3
9406: oGetLocal 1
9408: oPushResult
9409: oScopeDeclare
9410: oPop 1
9412: oGetAddrLocal 1
9414: oPushResult
9415: oSetResult 14
9417: oPushResult
9418: oIdAdd_False
9419: oPushResult
9420: oCall 8905
9422: oPop 2
9424: oAssign
9425: oGetLocal 1
9427: oPushResult
9428: oSetResult 21
9430: oPushResult
9431: oGetGlobal 6
9433: oPushResult
9434: oNodeSet
9435: oPop 3
9437: oGetLocal 1
9439: oPushResult
9440: oSetResult 22
9442: oPushResult
9443: oSetResult 0
9445: oPushResult
9446: oNodeSetInt
9447: oPop 3
9449: oGetLocal 1
9451: oPushResult
9452: oScopeDeclare
9453: oPop 1
9455: oReturn
