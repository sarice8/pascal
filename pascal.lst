   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pStrLit
   2:    pCharLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushAddrGlobal   % <offset> - push ptr to global var (same as tPushConstP)
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tSwap             % swap the top two entries on the stack
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tCastBtoI         % zero-extend uint8_t to int32_t
   2:    tCastItoB         % truncate int32_t to uint8_t
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tNot              % negate top boolean
   2:    tEqualB
   2:    tNotEqualB
   2:    tGreaterB         % B is uint8_t, so these are unsigned comparisons
   2:    tLessB
   2:    tGreaterEqualB
   2:    tLessEqualB
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too, but I'm moving to tEqualB etc for those
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tGreaterP
   2:    tLessP
   2:    tGreaterEqualP
   2:    tLessEqualP
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteChar        %  "     "    : write char, pop
   2:    tWriteShortStr    %  "     "    : write ShortString whose addr is on tos, pop
   2:    tWritePChar       %  "     "    : write a null-terminated string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteCR          %  "     "    : write cr
   2:    tFile             % <file#> - pascal source file id, for debugging.  I haven't decided yet how I will communicate the corresponding filename.
   2:    tLine             % <line#> - pascal source line number, for debugging
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    eCantUsePredSuccOnEnumWithValueGaps
   2:    eCantDereference
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nBuiltInFunc
   2: 	nBuiltInProc
   2: 	nConst
   2: 	nEnumValue
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nTypedConst
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nIntegerType
   2: 	nByteType
   2: 	nBooleanType
   2: 	nBooleanCFType
   2: 	nCharType
   2: 	nPointerType
   2: 	nUniversalPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nStrLitType
   2: 	nShortStringType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qCapacity
   2: 	qNameTable
   2: 	qHasGap
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
      % intrinsic types & type constructs
      
   2: type typ:
   2:    tyNone     = 0    % in ptrTyp field of TT, means no ptr to type defined
   2:    tyInteger
   2:    tyBoolean
   2:    tyChar
   2:    tyString
   2:    tyFile            % tyInteger..tyFile are scalars (types on their own)
   2:    tyPointer         % following are type constructor classes...
   2:    tyArray           %   (they are not type#'s)
   2:    tyRecord
   2:    tyParams          % like record; a collection of proc/func params
   2:    tySet;
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     oMAXINT >> int    % the maximum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % gets/adds a predefined id to the scanner's id table, and returns the id code
   2:     oId_mysystem >> int
   2:     oId_ShortStringAppendShortString >> int
   2:     oId_ShortStringAppendChar >> int
   2:     oId_File >> int
   2:     oId_Integer >> int
   2:     oId_Boolean >> int
   2:     oId_Char >> int
   2:     oId_Byte >> int
   2:     oId_Pointer >> int
   2:     oId_ShortString >> int
   2:     oId_True >> int
   2:     oId_False >> int
   2:     oId_Ord >> int
   2:     oId_Chr >> int
   2:     oId_Pred >> int
   2:     oId_Succ >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValueNegate                % negate top value
   2:    oValueTop >> int            % get top value on value stack
   2:    oValuePop;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    oStringAllocShortStringLit( String ) >> int  % alloc global space for ShortString, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      
   2: int     mysystemId               % id of identifier "mysystem"
      
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanCFType
   2: Node    CharType
   2: Node    PCharType
   2: Node    ByteType
   2: Node    UniversalPointerType
   2: Node    StrLitType
   2: Node    ShortStringType
      
      % nBuiltInFunc
   2: Node    BuiltIn_Ord
   2: Node    BuiltIn_Chr
   2: Node    BuiltIn_Pred
   2: Node    BuiltIn_Succ
      
      % Declarations in unit mysystem that the compiler may refer to directly.
      
   2: Node    System_ShortStringAppendShortString
   2: Node    System_ShortStringAppendChar
      
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: EnumTypeRef( out Node resultType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: OrdinalHigh( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowCF( out Label falseLabel );
   2: BoolExprAllowCF( out Label falseLabel );
   2: BoolTermAllowCF( out Label falseLabel );
   2: BoolFactorAllowCF( out Label falseLabel );
   2: ArithExprAllowCF( out Label falseLabel );
   2: TermAllowCF( out Label falseLabel );
   2: FactorAllowCF( out Label falseLabel );
   2: PrimaryAllowCF( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueVar( Node decl, boolean writeable );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: CFToVal( inout Label falseLabel );
   2: ValToCF( out Label falseLabel );
   2: MoveIntoTempShortString >> int;
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Declarations ----------------------------
      
   2: Program:
   4:    Node t
      
   4:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
   9:    oScopeBegin( 0, allocGlobal )
  18:    Node rootScope = oScopeCurrent
      
  23:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
  25:    .tEnter  oEmitInt( 0 )
  33:    Label mainLabel = oLabelNew
      
  38:    .tAllocActuals  oEmitInt( 0 )
  46:    .tCall  oEmitLabel( mainLabel )
  54:    .tFreeActuals  oEmitInt( 0 )
  62:    .tReturn
      
  64:    pProgram
  66:    pIdent
      
  68:    Node program = oNodeNew( nProgram )
  78:    oNodeSetInt( program, qIdent, LAST_ID )
  89:    oNodeSet( workspace, qProgram, program )
      
      
 101:    [
 101:       | '(' :
 103:          pIdent      % input, output files
      
 105:          t = @newIdent( nVar, LAST_ID )
 118:          oNodeSet( t, qType, FileType )
 130:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
 136:          ','
 138:          pIdent
      
 140:          t = @newIdent( nVar, LAST_ID )
 153:          oNodeSet( t, qType, FileType )
 165:          oScopeDeclareAlloc( t )
      
 171:          ')'
 173:       | * :
 178:    ]
 178:    ';'
      
 180:    @UsesMySystem( program )
         % The uses clause may only appear once, immediately after the program declaration.
 187:    [
 187:       | pUses :  @UsesClause( program )
 196:       | * :
 201:    ]
 201:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
 208:    oScopeBegin( 0, allocGlobal )
 217:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
 222:    oScopeBegin( 0, allocDown )
 231:    oNodeSet( oScopeCurrent, qExtends, globalScope )
 242:    initScope = oScopeCurrent
 247:    oNodeSet( program, qMainRoutineScope, initScope )
 259:    oScopeEnd
      
 260:    @BlockDecls( nGlobalVar )
      
      
 267:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
 273:    boolean isMain = true
 279:    @BlockStmt( mainLabel, globalScope, isMain )
      
 292:    oScopeEnd   % main routine scope
      
 293:    '.'
 295:    @CheckForUndefinedLabels
 297:    oScopeEnd   % global scope
 298:    @EndUsedUnits( program )   % used units scopes
 306:    ;
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
 306: UsesClause( Node user ):
 308:    {
 308:       pIdent
 310:       @Uses( LAST_ID, user )
 319:       [
 319:          | ',' :
 321:          | * :  >
 328:       ]
 328:    }   
 330:    ';'
 333:    ;
      
      
      % Process an implicit "uses mysystem" in every module, except in the mysystem unit itself.
      % (I'm calling the unit mysystem rather than system, so fpc doesn't use it to replace its own system unit.)
      %
 333: UsesMySystem( Node user ):
 335:    [ equal( oNodeGetInt( user, qIdent ), mysystemId )
 352:       | true :  >>
 354:       | * :
 359:    ]
 359:    @Uses( mysystemId, user )
 370:    ;
      
      
      % After processing the mysystem unit interface, grab certain declarations from it
      % that the compiler may want to refer to later.
      %
 370: FindSelectSystemDecls( Node unit ):
 372:    [ equal( oNodeGetInt( unit, qIdent ), mysystemId )
 389:       | true :
 390:          System_ShortStringAppendShortString = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendShortString )
 407:          System_ShortStringAppendChar = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendChar )
 424:       | * :
 429:    ]
 430:    ;
      
      
      % The given user module uses a unit with the given id,
      % which may or may not have been loaded already.
      %
 430: Uses( int id, Node user ):
 432:    Node unit = @FindOrCompileUnit( id )
 443:    [ equal_node( unit, Null )
 453:       | false :
 454:          oNodeAddLast( user, qUsedUnits, unit )
      
               % Put a declaration in the current scope, naming the unit and pointing to it.
               % This is to allow references to  <unit>.<identifier_in_unit>
 466:          Node unitRef = oNodeNew( nUnitRef )
 476:          oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 495:          oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 514:          oScopeDeclare( unitRef )
 520:       | * :
 525:    ];
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 526: ResolveUnitRef( inout Node decl ):
 528:    [ oNodeType( decl )
 535:       | nUnitRef :
 536:          Node scope = oNodeGet( decl, qPublicScope )
 549:          '.'
 551:          pIdent
 553:          decl = oScopeFindRequireInScope( scope )
 563:       | * :
 568:    ];
      
      
 569: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 571:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 584:    {
 584:       Node unit = oNodeIterValue( unitIt )
 594:       [ oNodeNull( unit )
 601:          | false :
 602:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 615:          | * :
 620:             >
 622:       ]
 622:       oNodeIterNext( unitIt )
 628:    }
 631:    ;
      
 631: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 633:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 646:    {
 646:       Node unit = oNodeIterValue( unitIt )
 656:       [ oNodeNull( unit )
 663:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 664:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 680:                | true :
 681:                | false :  #eInternalScopeMismatch
 685:             ]
 693:             oScopeEnd
 694:          | * :
 699:             >
 701:       ]
 701:       oNodeIterPrev( unitIt )
 707:    }
 710:    ;
      
      
 710: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 712:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 731:    [ equal_node( unit, Null )
 741:       | false :  >> unit
 745:       | * :
 750:    ]
      
         % If not, search for the source file on disk
 750:    boolean ok = oIncludeUnitFile( id )
 760:    [ ok
 763:       | false :  #eCantFindUnitFile  >> Null
 769:       | * :
 774:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 774:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 780:    oIncludeEnd
 781:    >> unit;
      
      
      
 785: Unit >> Node:
 787:    pUnit
 789:    pIdent
 791:    Node unit = oNodeNew( nUnit )
 801:    oNodeSetInt( unit, qIdent, LAST_ID )
 812:    Node unitImpl = oNodeNew( nUnitImpl )
 822:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 833:    oNodeSet( unit, qImpl, unitImpl )
 845:    ';'
      
         % mandatory sections
      
 847:    pInterface
 849:    @UsesMySystem( unit )
 856:    [
 856:       | pUses :   @UsesClause( unit )
 865:       | * :
 870:    ]
 870:    @EnterUsedUnits( unit )
      
 877:    oScopeBegin( 0, allocGlobal )
 886:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 897:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 902:    oScopeBegin( 0, allocDown )
 911:    initScope = oScopeCurrent
 916:    oNodeSet( unit, qInitRoutineScope, initScope )
 928:    oScopeEnd
      
 929:    @UnitInterface( unit )
 936:    oScopeEnd  % interface scope
      
 937:    pImplementation
 939:    @UsesMySystem( unitImpl )
 946:    [
 946:       | pUses :   @UsesClause( unitImpl )
 955:       | * :
 960:    ]
 960:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 967:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 980:    oScopeBegin( 0, allocGlobal )
 989:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
1000:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
1018:    globalScope = oScopeCurrent
1023:    @UnitImplementation( unit )
      
1030:    [
1030:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
1042:       | * :                @UnitInitialization( unit, false )  % implicit init routine
1057:    ]
1057:    [
1057:       | pFinalization :  @UnitFinalization( unit, true )
1069:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
1084:    ]
1084:    pEnd  '.'
      
1088:    oScopeEnd  % impl scope
1089:    oScopeEnd  % interface scope
1090:    @EndUsedUnits( unitImpl )  % used units scopes
1097:    @EndUsedUnits( unit )
1104:    oNodeAddLast( workspace, qUnits, unit )
1116:    >> unit;
      
      
1120: UnitInterface( Node unit ):
1122:    {[
1122:       | pConst :     @ConstDecl
1126:       | pType :      @TypeDecl
1130:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
1139:       | pProcedure :
1141:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
1147:          [
1147:             | pExternal :
1149:                @ExternalDecl( decl )
1156:                ';'
1158:             | * :
1163:          ]
      
1163:       | pFunction :
1165:          Node decl = @FuncHeaderDecl
1171:          [
1171:             | pExternal :
1173:                @ExternalDecl( decl )
1180:                ';'
1182:             | * :
1187:          ]
      
1187:       | * :          >
1202:    ]}
1204:    @FindSelectSystemDecls( unit )
1212:    ;
      
1212: UnitImplementation( Node unit ):
1214:    @BlockDecls( nGlobalVar )
1222:    ;
      
      
1222: UnitInitialization( Node unit, boolean hasStmts ):
1224:    Label label = oLabelNew
1229:    .tLabel  oEmitLabel( label )
1237:    oNodeSetLabel( unit, qInitLabel, label )
      
1249:    int patchLS
1249:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
1258:    Node scope
1258:    Code initCode
      
1258:    scope = oNodeGet( unit, qPublicScope )
1271:    initCode = oNodeGetCode( scope, qInitCode )
1284:    oEmitCode( initCode )
1290:    oNodeSetCode( scope, qInitCode, codeNull )
      
1302:    scope = oNodeGet( unit, qPrivateScope )
1315:    initCode = oNodeGetCode( scope, qInitCode )
1328:    oEmitCode( initCode )
1334:    oNodeSetCode( scope, qInitCode, codeNull )
      
1346:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1359:    [ hasStmts
1362:       | true :     
1363:          @Statement
1365:          {[
1365:             | ';' :  @Statement
1369:             | * :    >
1376:          ]}
1378:       | * :
1383:    ]
      
1383:    .tReturn
      
1385:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1397:    oPatch( patchLS, localSpace )
1406:    oScopeEnd   % init routine scope, for temporaries
1408:    ;
      
      
1408: UnitFinalization( Node unit, boolean hasStmts ):
1410:    Label label = oLabelNew
1415:    .tLabel  oEmitLabel( label )
1423:    oNodeSetLabel( unit, qFinalLabel, label )
      
1435:    int patchLS
1435:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1444:    oScopeBegin( 0, allocDown )
      
1453:    [ hasStmts
1456:       | true :     
1457:          @Statement
1459:          {[
1459:             | ';' :  @Statement
1463:             | * :    >
1470:          ]}
1472:       | * :
1477:    ]
      
1477:    .tReturn
      
1479:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1491:    oPatch( patchLS, localSpace )
1500:    oScopeEnd   % final routine scope, for temporaries
1502:    ;
      
      
1502: Block( node_type varNodeType, Label labelForBody ):
1504:    @BlockDecls( varNodeType )
1511:    @BlockStmt( labelForBody, oScopeCurrent, false )
1523:    @CheckForUndefinedLabels
1526:    ;
      
      
1526: BlockDecls( node_type varNodeType ):
1528:    {[
1528:       | pConst :     @ConstDecl
1532:       | pType :      @TypeDecl
1536:       | pVar :       @VarDecl( varNodeType )
1545:       | pLabel :     @LabelDecl
1549:       | pProcedure : @ProcDecl
1553:       | pFunction :  @FuncDecl
1557:       | * :          >
1574:    ]}
1576:    @CheckForUndefinedMethods
1579:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
1579: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
1582:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
1582: CheckForUndefinedLabels:
1584:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
1596:    {
1596:       Node decl = oNodeIterValue( it )
1606:       [ oNodeNull( decl )
1613:          | false :
1614:          | * :  >
1621:       ]
1621:       [ oNodeType( decl )
1628:          | nLabel :
1629:             [ oNodeGetBoolean( decl, qDefined )
1639:                | false :
1640:                   [ oNodeGetBoolean( decl, qUsed )
1650:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
1653:                      | * :
1658:                   ]
1658:                | * :
1663:             ]
1663:          | * :
1668:       ]
1668:       oNodeIterNext( it )
1674:    }
1677:    ;
      
      
1677: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1679:    NodeIter it = oNodeGetIter( workspace, qUnits )
1692:    {
1692:       Node unit = oNodeIterValue( it )
1702:       [ oNodeNull( unit )
1709:          | true :  >
1712:          | false :
1714:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1722:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1737:             .tFreeActuals  oEmitInt( 0 )
1745:             oNodeIterNext( it )
1751:       ]
1759:    };
      
      
1762: FinalizeUnits:
1764:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1777:    {
1777:       Node unit = oNodeIterValue( it )
1787:       [ oNodeNull( unit )
1794:          | true :  >
1797:          | false :
1799:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1807:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1822:             .tFreeActuals  oEmitInt( 0 )
1830:             oNodeIterPrev( it )
1836:       ]
1844:    };
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
1847: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
1849:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
1857:    int patchLS
1857:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
1866:    [ isMain
1869:       | true :  @InitializeUnits
1872:       | * :
1877:    ]
      
         % insert any code for initialization of this scope's variables
1877:    Code initCode = oNodeGetCode( varScope, qInitCode )
1890:    oEmitCode( initCode )
1896:    oNodeSetCode( varScope, qInitCode, codeNull )
      
1908:    @Statement
      
1910:    [ isMain
1913:       | true :  @FinalizeUnits
1916:       | * :
1921:    ]
      
1921:    .tReturn
      
1923:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1935:    oPatch( patchLS, localSpace )
1945:    ;
      
      
      % modifers that may appear on a proc/function declaration.
      %
1945: MethodModifiers( Node decl ):
1947:    {[
1947:       | pCdecl :
1949:          oNodeSetBoolean( decl, qCdecl, true )
1961:          ';'
      
1963:       | * : >
1970:    ]}
1973:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
1973: GetOrCreateInitCode( Node scope ) >> Code:
1975:    Code initCode = oNodeGetCode( scope, qInitCode )
1988:    [ equal_code( initCode, codeNull )
1998:       | true :
1999:          initCode = oCodeNew
2004:          oNodeSetCode( scope, qInitCode, initCode )
2016:       | * :
2021:    ]
2021:    >> initCode;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note, I'll hold off on issuing the .tLabelExtern until we see that
      % the external method is actually called.  Otherwise we'd fill each output file
      % with all the external method names in my included libraries, which seems dumb.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
2025: ExternalDecl( Node decl ):
2027:    [ equal_zero( @DeclLevel( decl ) )
2039:       | false :  #eExternalMethodCannotBeNested
2042:       | * :
2047:    ]
2047:    oNodeSetBoolean( decl, qExternal, true )
2059:    [
2059:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
2061:          [
2061:             | pName :
2063:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
2065:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
2076:             | * :
2081:          ]
2081:       | * :
2086:    ]
2087:    ;
      
      
2087: ProcHeaderDecl >> Node:
2089:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2091:    boolean redeclaring = false
2097:    Node decl = oScopeFindInCurrentScope
      
2102:    [ oNodeNull( decl )
2109:       | true :
               % first declaration
2110:          decl = @newIdent( nProc, LAST_ID )
2123:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2134:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2136:          redeclaring = true
2142:          [ oNodeGetBoolean( decl, qBodyDefined )
2152:             | true : #eAlreadyDefined
2155:             | * :
2160:          ]
2160:          [ oNodeGetBoolean( decl, qExternal )
2170:             | true : #eAlreadyDefined
2173:             | * :
2178:          ]
2178:          [ oNodeType( decl )
2185:             | nProc :
2186:             | * : #eAlreadyDefined   % wrong kind
2193:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2193:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2212:          oNodeSet( decl, qParams, Null )
2224:    ]
      
2232:    int level = @ScopeLevel
2238:    boolean nested = greater( level, 0 )
2251:    inc( level )
2257:    oScopeBegin( level, allocUp )
2266:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2271:    [ nested
2274:       | true :
2275:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2290:       | * :
2295:    ]
      
2295:    @FormalArgDecl
2297:    oNodeSet( decl, qParams, paramScope )
2309:    oScopeEnd
2310:    ';'
      
2312:    [ redeclaring
2315:       | false : oScopeDeclare( decl )
2322:       | true :  % TO DO: check that qParams is consistent with qOldParams
2324:    ]
      
2332:    @MethodModifiers( decl )
2339:    >> decl;
      
      
2343: ProcDecl:
2345:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
2351:    [
2351:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2353:       | pExternal : @ExternalDecl( decl )
      
2362:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2369:          Node paramScope = oNodeGet( decl, qParams )
2382:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
2388:          int level = oNodeGetInt( paramScope, qLevel )
2401:          oScopeBegin( level, allocDown )
2410:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2421:          Label label = oNodeGetLabel( decl, qValue )
2434:          @Block( nLocalVar, label )
2444:          oNodeSetBoolean( decl, qBodyDefined, true )
2456:          oScopeEnd
      
2457:          oScopeEnd  % paramScope
2458:    ]
2458:    ';';
      
      
      
2461: FuncHeaderDecl >> Node:
2463:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2465:    boolean redeclaring = false
2471:    Node decl = oScopeFindInCurrentScope
      
2476:    [ oNodeNull( decl )
2483:       | true :
               % first declaration
2484:          decl = @newIdent( nFunc, LAST_ID )
2497:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2508:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2510:          redeclaring = true
2516:          [ oNodeGetBoolean( decl, qBodyDefined )
2526:             | true : #eAlreadyDefined
2529:             | * :
2534:          ]
2534:          [ oNodeType( decl )
2541:             | nFunc :
2542:             | * : #eAlreadyDefined   % wrong kind
2549:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2549:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2568:          oNodeSet( decl, qParams, Null )
2580:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
2599:          oNodeSet( decl, qType, Null )
2611:    ]
      
2619:    int level = @ScopeLevel
2625:    boolean nested = greater( level, 0 )
2638:    inc( level )
2644:    oScopeBegin( level, allocUp )
2653:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2658:    [ nested
2661:       | true :
2662:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2677:       | * :
2682:    ]
      
2682:    @FormalArgDecl
2684:    oNodeSet( decl, qParams, paramScope )
      
2696:    ':'
      
2698:    Node theType
2698:    @TypeRef( theType )
2705:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2717:    Node ptrType = @PointerTypeTo( theType )
2728:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2744:    oScopeEnd
2745:    ';'
      
2747:    [ redeclaring
2750:       | false : oScopeDeclare( decl )
2757:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2759:    ]
      
2767:    @MethodModifiers( decl )
      
2774:    >> decl;
      
      
2778: FuncDecl:
2780:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2786:    [
2786:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2788:       | pExternal : @ExternalDecl( decl )
      
2797:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2804:          Node paramScope = oNodeGet( decl, qParams )
2817:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2823:          int level = oNodeGetInt( paramScope, qLevel )
2836:          oScopeBegin( level, allocDown )
2845:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2856:          Label label = oNodeGetLabel( decl, qValue )
2869:          @Block( nLocalVar, label )
2879:          oNodeSetBoolean( decl, qBodyDefined, true )
2891:          oScopeEnd
      
2892:          oScopeEnd  % paramScope
2893:    ]
2893:    ';';
      
      
2896: FormalArgDecl:
2898:    [
2898:       | '(' :
2900:          {
2900:             NodeVec decls = oNodeVecNew
2905:             Node decl
2905:             boolean isInOut = false
      
2911:             [
2911:                | pVar : isInOut = true
2919:                | * :
2924:             ]
      
2924:             {  pIdent
      
2926:                decl = @newIdent( nParam, LAST_ID )
2939:                oNodeSetBoolean( decl, qInOut, isInOut )
2951:                oNodeVecAppend( decls, decl )
      
2960:                [
2960:                   | ':' : >
2964:                   | ',' :
2966:                ]
2974:             }
      
2976:             Node theType
2976:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
2983:             Node allocType
2983:             [ isInOut
2986:                | true :   allocType = @PointerTypeTo( theType )
2998:                | * :      allocType = theType
3009:             ]
      
3009:             int i = 0
3015:             {[ equal( i, oNodeVecSize( decls ) )
3029:                | false :
3030:                   decl = oNodeVecElement( decls, i )
      
3043:                   oNodeSet( decl, qType, theType )
3055:                   oScopeDeclare( decl )
3061:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
3077:                   inc( i )
3083:                | * :
3088:                   >
3090:             ]}
      
3092:             oNodeVecDelete( decls )
      
3098:             [
3098:                | ')' : >
3102:                | ';' :
3104:             ]
3112:          }
3114:       | * :
3119:    ];
      
      
3120: ConstDecl:
3122:    {[
3122:       | pIdent :
3124:          [
3124:             | ':' :
3126:                @TypedConstDecl
3128:             | * :
3133:                @UntypedConstDecl
3135:          ]
3135:       | * :
3140:          >
3142:    ]};
      
      
      % Parse an untyped const declaration.
      % We've just accepted the identifier.
      %
3145: UntypedConstDecl:
3147:    Node decl = @newIdent( nConst, LAST_ID )
3160:    '='
      
3162:    @ConstExpr
         % TO DO: currently ConstExpr leaves int result on oValue stack
3164:    int val = oValueTop
3169:    oValuePop
3170:    oNodeSetInt( decl, qValue, val )
      
         % TO DO: different types.  Currently assumes int!
         % Untyped const decl is supposed to allow:
         %   ordinal types, set types, pointer types (but only Nil), real types, char, string.
3182:    oNodeSet( decl, qType, IntegerType )
      
3194:    oScopeDeclare( decl )
3200:    ';'
3203:    ;
      
      
      % Parse a typed const declaration.
      % We've just accepted the identifier and ':'
      %
3203: TypedConstDecl:
3205:    Node decl = @newIdent( nTypedConst, LAST_ID )
      
3218:    Node theType
3218:    @TypeRef( theType )
3225:    oNodeSet( decl, qType, theType )
      
         % TO DO: array and record consts are allocated in global memory,
         % with global offset stored as decl value.
         % Scalar consts are not allocated in memory, and their value is
         % stored directly as the decl value.
      
         % TO DO: skip subranges, similar to oTypeSNodeType.
3237:    [ oNodeType( theType )
3244:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType:
               % Parse expression and store value in decl
3245:          '='
      
3247:          @ConstExpr
               % TO DO: currently ConstExpr leaves int result on oValue stack
3249:          int val = oValueTop
3254:          oValuePop
3255:          oNodeSetInt( decl, qValue, val )
3267:          oScopeDeclare( decl )
3273:          ';'
      
3275:       | nShortStringType, nFileType, nPointerType, nUniversalPointerType :
3277:          #eNotImplemented
      
3279:       | nArrayType, nRecordType :
               % Allocate global space, store address in decl.
               % Push into global scope init code stream (since we'll be issuing code
               % rather than creating static data, at the moment).
               % Parse expression and store in global memory.
3281:          oScopeEnter( globalScope )
3287:          int addr = oScopeAllocType( theType )
3297:          oScopeEnd
3298:          oCodePush( @GetOrCreateInitCode( globalScope ) )
3309:          oNodeSetInt( decl, qValue, addr )
3321:          '='
3323:          @TypedConstInit( theType, addr )
3333:          oCodePop
3334:          oScopeDeclare( decl )
3340:          ';'
3342:    ]
3369:    ;
      
      
      % Parse the initial value of a constant that's being stored in global memory.
      % (An array or record constant, and recursively all its elements.)
      % Given the type, and the address in global memory for the const value.
      % The caller has already pushed into the global init code stream.
      %
3369: TypedConstInit( Node theType, int addr ):
      
         % TO DO: skip subranges, similar to oTypeSNodeTYpe
3371:    [ oNodeType( theType )
3378:       | nArrayType :
3379:          Node baseType = oNodeGet( theType, qBaseType )
3392:          Node indexType = oNodeGet( theType, qIndexType )
3405:          int low = @OrdinalLow( indexType )
3416:          int high = @OrdinalHigh( indexType )
3427:          int elementSize = oNodeGetInt( baseType, qSize )
      
3440:          '('
               % Loop over elements
3442:          int i = low
3448:          {
3448:             @TypedConstInit( baseType, addr )
3458:             [ equal( i, high )
3468:                | true : >
3471:                | false :
3473:             ]
3481:             ','
3483:             addr = add( addr, elementSize )
3496:             inc( i )
3502:          }
3504:          ')'
      
3506:       | nRecordType :
3508:          '('
3510:          Node fieldScope = oNodeGet( theType, qScope )
               % Loop over zero or more named fields.  It's not necessary to name them all.
               % fpc says the names that are given should be in order, but I'm not requiring that.
               % Since this is global memory, uninitialized fields will be left as 0.
3523:          {
3523:             [
3523:                | pIdent :
3525:                | * :  >
3532:             ]
3532:             Node field = oScopeFindRequireInScope( fieldScope )
3542:             ':'
3544:             Node fieldType = oNodeGet( field, qType )
3557:             int fieldAddr = add( addr, oNodeGetInt( field, qValue ) )
3577:             @TypedConstInit( fieldType, fieldAddr )
3587:             [
3587:                | ';' :
3589:                | * :  >
3596:             ]
3596:          }
3598:          ')'
      
3600:       | nBooleanType, nByteType, nCharType:
3602:          .tPushAddrGlobal  oEmitInt( addr )
3610:          @ConstExpr
3612:          .tPushConstI  oEmitInt( oValueTop )
3619:          oValuePop
3620:          .tAssignB
      
3622:       | nIntegerType, nEnumType:
3624:          .tPushAddrGlobal  oEmitInt( addr )
3632:          @ConstExpr
3634:          .tPushConstI  oEmitInt( oValueTop )
3641:          oValuePop
3642:          .tAssignI
      
3644:       | nShortStringType, nFileType, nPointerType, nUniversalPointerType :
3646:          #eNotImplemented
3648:    ]
3675:    ;
      
      
3675: TypeDecl:
3677:    {[
3677:       | pIdent :
3679:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3692:          '='
3694:          Node theType
3694:          @TypeRef( theType )
3701:          oNodeSet( decl, qType, theType )
3713:          oScopeDeclare( decl )
3719:          ';'
3721:       | * :
3726:          >
3728:    ]};
      
3731: VarDecl( node_type varNodeType ):
3733:    {[
3733:       | pIdent :
3735:          NodeVec decls = oNodeVecNew
3740:          Node decl
3740:          {
3740:             decl = @newIdent( varNodeType, LAST_ID )
3753:             oNodeVecAppend( decls, decl )
3762:             [
3762:                | ',' :
3764:                   pIdent
3766:                | * :
3771:                   >
3773:             ]
3773:          }
3775:          ':'
3777:          Node theType
3777:          @TypeRef( theType )
      
3784:          int i = 0
3790:          {[ equal( i, oNodeVecSize( decls ) )
3804:             | false :
3805:                decl = oNodeVecElement( decls, i )
3818:                oNodeSet( decl, qType, theType )
3830:                oScopeDeclareAlloc( decl )
3836:                inc( i )
3842:             | * :
3847:               >
3849:          ]}
      
               % optional initialization
3851:          [
3851:             | '=' :
3853:                [ oNodeVecSize( decls )
3860:                   | 1 :
3861:                   | * :  #eOnlyOneVarCanBeInitialized
3868:                ]
      
                     % we need an initCode stream for this scope
3868:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3878:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3884:                boolean changedScope = false
3890:                [ equal_zero( @ScopeLevel )
3897:                   | true : oScopeEnter( initScope )
3904:                            changedScope = true
3910:                   | * :
3915:                ]
                     % generate assignment in initCode stream
3915:                @LValueVar( decl, true )
3925:                @Expr
3927:                @CoerceType
3929:                @Assign
3931:                [ changedScope
3934:                   | true : oScopeEnd
3936:                   | * :
3941:                ]
3941:                oCodePop
                   
3942:             | * :
3947:          ]
      
3947:          oNodeVecDelete( decls )
3953:          ';'
3955:       | * :
3960:          >
3962:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3965: LabelDecl:
3967:    {
3967:       Node decl
3967:       [
3967:          | pIdent :
3969:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3971:             oChangeIntLitToLabelIdent
3972:       ]
3980:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
3993:       Label label = oLabelNew
3998:       oNodeSetLabel( decl, qValue, label )
4010:       oScopeDeclare( decl )
4016:       [
4016:          | ',' :
4018:          | * :
4023:             >
4025:       ]
4025:    }
4027:    ';'
4030:    ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
4030: TypeRef( out Node resultType ):
4032:    [
4032:       | pIdent :           % previously named type (including intrinsics)
4034:          Node decl = oScopeFindRequire
4039:          @ResolveUnitRef( decl )
4046:          [ oNodeType( decl )
4053:             | nTypeDecl :
4054:                resultType = oNodeGet( decl, qType )
4067:             | * :
4072:                #eNotType
4074:                resultType = IntegerType
4080:          ]
         
4080:       | pArray :
4082:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
4084:          NodeVec dimensions = oNodeVecNew
      
4089:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
4089:             Node subrange = oNodeNew( nSubrangeType )
                  % TO DO: currently assuming subrange of integer
4099:             oNodeSet( subrange, qBaseType, IntegerType )
      
                  % TO DO: currently ConstExpr leaves int result on oValue stack
4111:             @ConstExpr
4113:             oNodeSetInt( subrange, qLow, oValueTop )
4124:             oValuePop
4125:             '..'
4127:             @ConstExpr
4129:             oNodeSetInt( subrange, qHigh, oValueTop )
4140:             oValuePop
4141:             oNodeSetInt( subrange, qSize, 4 )   % maybe don't need
      
4153:             oTypeAdd( subrange )
      
4159:             Node a = oNodeNew( nArrayType )
4169:             oNodeSet( a, qIndexType, subrange )
      
4181:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
4190:             [
4190:                | ']' : >
4194:                | ',' :
4196:             ]
4204:          }
      
4206:          pOf
4208:          Node baseType
4208:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
4215:          int dim = oNodeVecSize( dimensions )
      
4225:          {
4225:              dec(dim)
      
4231:              Node a = oNodeVecElement( dimensions, dim )
      
4244:              oNodeSet( a, qBaseType, baseType )
4256:              Node subrange = oNodeGet( a, qIndexType )
4269:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
4296:              inc( width )
4302:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
4328:              oTypeAdd( a )
4334:              baseType = a
      
4340:              [ equal_zero(dim)
4347:                  | true:  >
4350:                  | *:
4355:              ]
4355:          }
      
4357:          resultType = oNodeVecElement( dimensions, 0 )
4370:          oNodeVecDelete( dimensions )
      
4376:       | '^' :
4378:          Node theType
4378:          @TypeRef( theType )
4385:          resultType = @PointerTypeTo( theType )
      
4396:       | pRecord :
4398:          resultType = oNodeNew( nRecordType )
4408:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
4417:          @VarDecl( nRecordField )
      
4424:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
4436:          [ equal_zero( size )
4443:             | true : #eRecordEmpty
4446:             | * :
4451:          ]
      
4451:          pEnd
      
4453:          oNodeSet( resultType, qScope, oScopeCurrent )
4464:          oNodeSetInt( resultType, qSize, size )
4476:          oScopeEnd
4477:          oTypeAdd( resultType )
      
      
4483:       | '(' :
               % An enum type declaration.
4485:          @EnumTypeRef( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
4492:       | pSet :
4494:          pOf
4496:          Node theType
4496:          @TypeRef( theType )
4503:       | * :       % this works for cases except where expr starts with an id
4518:          @ConstExpr '..' @ConstExpr
4524:    ];
      
      
      % Parse an enum type.
      % We've already accepted the '('
      % Returns the new type.
      %
4525: EnumTypeRef( out Node resultType ):
      
4527:    resultType = oNodeNew( nEnumType )
4537:    int value = 0
4543:    int numValues = 0
4549:    boolean first = true
      
         % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
         % That will let programs use either <val> or <enumType>.<val>
4555:    Node outerScope = oScopeCurrent
4560:    oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
4569:    {
            % TO DO: assert that name not already seen in this scope, i.e. this enum.
            %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
            %  It might be in some other higher/used scope.
4569:       pIdent
4571:       Node decl = @newIdent( nEnumValue, LAST_ID )
4584:       Node decl2 = @newIdent( nEnumValue, LAST_ID )
4597:       oNodeSet( decl, qType, resultType )
4609:       oNodeSet( decl2, qType, resultType )
      
            % build up name table, for i/o
4621:       int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
4634:       oNodeSetInt( decl, qNameOffset, nameOffset )
4646:       oNodeSetInt( decl2, qNameOffset, nameOffset )
4658:       [
4658:          | '=', ':=' :
4660:             @ConstExpr
                  % value must be ascending
                  % this obviously doesn't apply to the first value
4662:             [ equal_zero( numValues )
4669:                | false :
4670:                   [ greater( oValueTop, value )
4679:                      | false :   #eEnumValueNotAscending
4682:                      | * :
4687:                   ]
4687:                | * :
4692:             ]
4692:             [ equal( value, oValueTop )
4701:                | false :
                        % The values differ from 0..N-1.  pred/succ may not be used with this type.
4702:                   oNodeSetBoolean( resultType, qHasGap, true )
4714:                | * :
4719:             ]
4719:             value = oValueTop
4724:             oValuePop
4725:          | * :
4732:       ]
4732:       oNodeSetInt( decl, qValue, value )
4744:       oNodeSetInt( decl2, qValue, value )
4756:       oScopeDeclare( decl )
      
4762:       oScopeEnter( outerScope )
4768:       oScopeDeclare( decl2 )
4774:       oScopeEnd
      
4775:       inc( value )
4781:       inc( numValues )
4787:       [
4787:          | ',' :
4789:          | * :    >
4796:       ]
4796:    }
4798:    ')'
      
4800:    oNodeSet( resultType, qScope, oScopeCurrent )
4811:    oNodeSetInt( resultType, qSize, 4 )   % always integer sized
4823:    oScopeEnd
      
         % Finish creation of the name table
         %    struct {
         %      int    value;
         %      int    padding;
         %      char*  name;
         %    } table[ numValues + 1 ];
         %  final entry will have name == nullptr
         %
         % I'll need to generate init code, to store pointers in global data,
         % since I don't have a relocation mechanism for static data at the moment.
4824:    oCodePush( @GetOrCreateInitCode( globalScope ) )
4835:    oScopeEnter( globalScope )
4841:    int size = multiply( add( numValues, 1 ), 16 )
4861:    int addr = oScopeAlloc( size, 8 )
4874:    oScopeEnd
4875:    oNodeSetInt( resultType, qNameTable, addr )
         % loop over enum values
4887:    NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
4907:    {
4907:       Node enumValue = oNodeIterValue( it )
4917:       [ oNodeNull( enumValue )
4924:          | true :  >
4927:          | * :
4932:       ]
4932:       .tPushAddrGlobal  oEmitInt( addr )
4940:       .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
4955:       .tAssignI
4957:       addr = add( addr, 8 )
4970:       .tPushAddrGlobal  oEmitInt( addr )
4978:       .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
4993:       .tAssignP
4995:       addr = add( addr, 8 )
5008:       oNodeIterNext( it )
5014:    }
         % final table entry
5016:    .tPushAddrGlobal  oEmitInt( addr )
5024:    .tPushConstI  oEmitInt( 0 )
5032:    .tAssignI
5034:    addr = add( addr, 8 )
5047:    .tPushAddrGlobal  oEmitInt( addr )
5055:    .tPushConstI  oEmitInt( 0 )
5063:    .tAssignP
5065:    addr = add( addr, 8 )
5078:    oCodePop
      
5079:    oTypeAdd( resultType )
5086:    ;
      
      
      % --------------------------- Const Expressions --------------------------
      
      % Constant expressions: currently, only literal integers or previously
      % named constant integers are supported, possibly with a negation.
      % Constant expressions are evaluated at compile time.
      
5086: ConstExpr:
5088:    [
5088:       | pIntLit :
5090:          oValuePush( TOKEN_VALUE )
5095:       | pIdent :
5097:          Node decl = oScopeFindRequire
5102:          @ResolveUnitRef( decl )
5109:          [ oNodeType( decl )
5116:             | nConst :
5117:                oValuePush( oNodeGetInt( decl, qValue ) )
5130:             | * :
5135:                #eNotConst
5137:                oValuePush( 0 )
5143:          ]
5143:       | pMinus :
5145:          @ConstExpr
5147:          oValueNegate
5148:    ];
      
      
      
      % ------------------------------ Expressions -----------------------------
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanCFType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
5159: Expr:
5161:    Label falseLabel = labelNull
      
5167:    @ExprAllowCF( falseLabel )
5174:    @CFToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
5182: BooleanExprControlFlow( out Label falseLabel ):
5184:    @ExprAllowCF( falseLabel )
5191:    [ oTypeSNodeType
5193:       | nBooleanCFType :
5194:       | nBooleanType :
               % convert value to control flow
5196:          falseLabel = oLabelNew
5201:          .tJumpFalse  oEmitLabel( falseLabel )
5209:       | * :
5216:          #eNotBoolean
5218:    ]
5218:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
5220: CFToVal( inout Label falseLabel ):
5222:    [ oTypeSNodeType
5224:       | nBooleanCFType :
5225:          Label doneLabel = oLabelNew
5230:          .tPushConstI  oEmitInt( 1 )
5238:          .tJump  oEmitLabel( doneLabel )
5246:          .tLabel  oEmitLabel( falseLabel )
5254:          .tPushConstI  oEmitInt( 0 )
5262:          .tLabel  oEmitLabel( doneLabel )
5270:          oTypeSPop
5271:          oTypeSPush( BooleanType )
5277:          falseLabel = labelNull
5283:       | * :
5288:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
5289: ValToCF( out Label falseLabel ):
5291:    [ oTypeSNodeType
5293:       | nBooleanType :
5294:          falseLabel = oLabelNew
5299:          .tJumpFalse  oEmitLabel( falseLabel )
5307:          oTypeSPop
5308:          oTypeSPush( BooleanCFType )
5314:       | * :
5319:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanCFType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanCFType.
      % In this case, falseLabel is ignored.
      %
5320: ExprAllowCF( out Label falseLabel ):
5322:    @BoolExprAllowCF( falseLabel )
5329:    {[
5329:       | '=' :
5331:          @CFToVal( falseLabel )
5338:          @PromoteToIntOptional
5340:          @BoolExprAllowCF( falseLabel )
5347:          @CFToVal( falseLabel )
5354:          @PromoteToIntOptional
5356:          @MatchTypes
5358:          [ oTypeSNodeType
5360:             | nBooleanType, nCharType :     .tEqualB
5363:             | nIntegerType, nEnumType :     .tEqualI
5367:             | nPointerType, nUniversalPointerType :    .tEqualP
5371:             | nShortStringType, nStrLitType :            #eNotImplemented
5375:             | * :                           #eNotAllowed
5396:          ]
5396:          oTypeSPop
5397:          oTypeSPush( BooleanType )
      
5403:       | '<>' :
5405:          @CFToVal( falseLabel )
5412:          @PromoteToIntOptional
5414:          @BoolExprAllowCF( falseLabel )
5421:          @CFToVal( falseLabel )
5428:          @PromoteToIntOptional
5430:          @MatchTypes
5432:          [ oTypeSNodeType
5434:             | nBooleanType, nCharType :     .tNotEqualB
5437:             | nIntegerType, nEnumType :     .tNotEqualI
5441:             | nPointerType, nUniversalPointerType :    .tNotEqualP
5445:             | nShortStringType, nStrLitType :            #eNotImplemented
5449:             | * :                           #eNotAllowed
5470:          ]
5470:          oTypeSPop
5471:          oTypeSPush( BooleanType )
      
5477:       | '<' :
5479:          @CFToVal( falseLabel )
5486:          @PromoteToIntOptional
5488:          @BoolExprAllowCF( falseLabel )
5495:          @CFToVal( falseLabel )
5502:          @PromoteToIntOptional
5504:          @MatchTypes
5506:          [ oTypeSNodeType
5508:             | nBooleanType, nCharType :     .tLessB
5511:             | nIntegerType, nEnumType :     .tLessI
5515:             | nPointerType, nUniversalPointerType :   .tLessP
5519:             | nShortStringType, nStrLitType :            #eNotImplemented
5523:             | * :                           #eNotAllowed
5544:          ]
5544:          oTypeSPop
5545:          oTypeSPush( BooleanType )
      
5551:       | '>' :
5553:          @CFToVal( falseLabel )
5560:          @PromoteToIntOptional
5562:          @BoolExprAllowCF( falseLabel )
5569:          @CFToVal( falseLabel )
5576:          @PromoteToIntOptional
5578:          @MatchTypes
5580:          [ oTypeSNodeType
5582:             | nBooleanType, nCharType :     .tGreaterB
5585:             | nIntegerType, nEnumType :     .tGreaterI
5589:             | nPointerType, nUniversalPointerType :   .tGreaterP
5593:             | nShortStringType, nStrLitType :            #eNotImplemented
5597:             | * :                           #eNotAllowed
5618:          ]
5618:          oTypeSPop
5619:          oTypeSPush( BooleanType )
      
5625:       | '<=' :
5627:          @CFToVal( falseLabel )
5634:          @PromoteToIntOptional
5636:          @BoolExprAllowCF( falseLabel )
5643:          @CFToVal( falseLabel )
5650:          @PromoteToIntOptional
5652:          @MatchTypes
5654:          [ oTypeSNodeType
5656:             | nBooleanType, nCharType :     .tLessEqualB
5659:             | nIntegerType, nEnumType :     .tLessEqualI
5663:             | nPointerType, nUniversalPointerType :   .tLessEqualP
5667:             | nShortStringType, nStrLitType :            #eNotImplemented
5671:             | * :                           #eNotAllowed
5692:          ]
5692:          oTypeSPop
5693:          oTypeSPush( BooleanType )
      
5699:       | '>=' :
5701:          @CFToVal( falseLabel )
5708:          @PromoteToIntOptional
5710:          @BoolExprAllowCF( falseLabel )
5717:          @CFToVal( falseLabel )
5724:          @PromoteToIntOptional
5726:          @MatchTypes
5728:          [ oTypeSNodeType
5730:             | nBooleanType, nCharType :     .tGreaterEqualB
5733:             | nIntegerType, nEnumType :     .tGreaterEqualI
5737:             | nPointerType, nUniversalPointerType :   .tGreaterEqualP
5741:             | nShortStringType, nStrLitType :            #eNotImplemented
5745:             | * :                           #eNotAllowed
5766:          ]
5766:          oTypeSPop
5767:          oTypeSPush( BooleanType )
      
5773:       | * :
5788:          >
5790:    ]};
      
      
5793: BoolExprAllowCF( out Label falseLabel ):
5795:    Label trueLabel = labelNull
      
5801:    @BoolTermAllowCF( falseLabel )
5808:    {[
5808:       | pOr :
5810:          [ oTypeSNodeType
5812:             | nBooleanCFType :
                     % We are true here. Jump ahead to done
5813:                [ equal_label( trueLabel, labelNull )
5823:                   | true :  trueLabel = oLabelNew
5829:                   | * :
5834:                ]
5834:                .tJump  oEmitLabel( trueLabel )
5842:             | nBooleanType :
5844:                @ValToCF( falseLabel )
                     % We are true here. Jump ahead to done
5851:                [ equal_label( trueLabel, labelNull )
5861:                   | true :  trueLabel = oLabelNew
5867:                   | * :
5872:                ]
5872:                .tJump  oEmitLabel( trueLabel )
5880:             | * : #eNotBoolean
5889:          ]
5889:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5890:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5898:          falseLabel = labelNull
5904:          @BoolTermAllowCF( falseLabel )
      
5911:          [ oTypeSNodeType
5913:             | nBooleanCFType :
5914:             | nBooleanType :
5916:                @ValToCF( falseLabel )
5923:             | * : #eNotBoolean
5932:          ]
      
5932:          oTypeSPop
5933:          oTypeSPush( BooleanCFType )
      
5939:       | * :
5944:          >
5946:    ]}
      
         % any short-circuit trues jump here to the end
5948:    [ equal_label( trueLabel, labelNull )
5958:       | false :
5959:          .tLabel  oEmitLabel( trueLabel )
5967:       | * :
5972:    ]
5973:    ;
      
      
5973: BoolTermAllowCF( out Label falseLabel ):
5975:    Label overallFalseLabel = labelNull
      
5981:    @BoolFactorAllowCF( falseLabel )
5988:    {[
5988:       | pAnd :
5990:          [ oTypeSNodeType
5992:             | nBooleanCFType :
5993:             | nBooleanType :
5995:                @ValToCF( falseLabel )
6002:             | * :
6009:                #eNotBoolean
6011:          ]
6011:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
6012:          [ equal_label( overallFalseLabel, labelNull )
6022:             | true :
6023:                overallFalseLabel = oLabelNew
6028:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
6042:                falseLabel = overallFalseLabel
6048:             | * :
6053:          ]
      
6053:          Label factorFalseLabel = labelNull
6059:          @BoolFactorAllowCF( factorFalseLabel )
      
6066:          [ oTypeSNodeType
6068:             | nBooleanCFType :
6069:             | nBooleanType :
6071:                @ValToCF( factorFalseLabel )
6078:             | * : #eNotBoolean
6087:          ]
6087:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
6101:       | * :
6106:          >
6108:    ]};
      
6111: BoolFactorAllowCF( out Label falseLabel ):
6113:    [
6113:       | pNot :
6115:          Label factorFalseLabel = labelNull
      
6121:          @BoolFactorAllowCF( factorFalseLabel )
6128:          [ oTypeSNodeType
6130:             | nBooleanCFType :
                     % We have control flow, and are sitting at the point that has value false.
6131:                falseLabel = oLabelNew
6136:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
6144:                .tLabel  oEmitLabel( factorFalseLabel )
      
6152:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
6154:                .tNot
      
6156:             | * : #eNotBoolean
6165:          ]
      
6165:       | * :
6170:          @ArithExprAllowCF( falseLabel )
6177:    ];
      
6178: ArithExprAllowCF( out Label falseLabel ):
6180:    boolean first = true
6186:    int tempStrOffset
      
6186:    @TermAllowCF( falseLabel )
6193:    {[
6193:       | '+' :
6195:          [ oTypeSNodeType
6197:             | nIntegerType, nByteType :
6198:                @PromoteToIntPop
6200:                @TermAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
      
6207:                [ oTypeSNodeType
6209:                   | nPointerType, nUniversalPointerType :
                           % int + ptr
6210:                      .tSwap
                           % leave only the ptr type on the type stack (int was already popped above)
6212:                      @PointerAddition
6214:                   | * :
6221:                      @PromoteToInt
6223:                      .tAddI
6225:                ]
      
6225:             | nShortStringType, nStrLitType, nCharType :
                     % String concatenation
6227:                [ first
6230:                   | true :  % move into a temp string, so subsequent term(s) can further modify it.
6231:                             tempStrOffset = @MoveIntoTempShortString
6237:                             first = false
6243:                   | * :
6248:                ]
6248:                @TermAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
6255:                [ oTypeSNodeType
6257:                   | nShortStringType, nStrLitType :
6258:                      @ShortStringAppendShortString
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6260:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6268:                      oTypeSPush( ShortStringType )
6274:                   | nCharType :
6276:                      @ShortStringAppendChar
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6278:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6286:                      oTypeSPush( ShortStringType )
6292:                   | * :
6301:                      #eTypeMismatch
6303:                      oTypeSPop
6304:                ]
      
6304:             | nPointerType, nUniversalPointerType :
6306:                @TermAllowCF( falseLabel )   % actually not allowing CF
6313:                @PromoteToIntPop
6315:                @PointerAddition
      
6317:             | * :
6334:                #eNotAllowed
6336:          ]
      
6336:       | '-' :
               % TO DO: pointer arithmetic, as above
      
6338:          @PromoteToIntPop
6340:          @TermAllowCF( falseLabel )
6347:          @PromoteToInt
6349:          .tSubI
6351:       | * :
6358:          >
6360:    ]};
      
6363: TermAllowCF( out Label falseLabel ):
6365:    @FactorAllowCF( falseLabel )
6372:    {[
6372:       | pTimes :
6374:          @PromoteToIntPop
6376:          @FactorAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
6383:          @PromoteToInt
6385:          .tMultI
6387:       | pDivide :
6389:          @PromoteToIntPop
6391:          @FactorAllowCF( falseLabel )
6398:          @PromoteToInt
6400:          .tDivI
6402:       | * :
6409:          >
6411:    ]};
      
6414: FactorAllowCF( out Label falseLabel ):
6416:    [
6416:       | pPlus :
6418:          @PrimaryAllowCF( falseLabel )  % actually not allowing CF, will be caught by type check
               % TO DO: unary +/- is supposed to leave expression type as-is.
6425:          @PromoteToInt
6427:       | pMinus :
6429:          @PrimaryAllowCF( falseLabel )
               % TO DO: unary +/- is supposed to leave expression type as-is.
6436:          @PromoteToInt
6438:          .tNegI
6440:       | * :
6447:          @PrimaryAllowCF( falseLabel )
6454:    ];
      
6455: PrimaryAllowCF( out Label falseLabel ):
6457:    [
6457:       | pIntLit :
6459:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6466:          oTypeSPush( IntegerType )
      
6472:       | pCharLit :
6474:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6481:          oTypeSPush( CharType )
      
6487:       | '(' :
6489:          @ExprAllowCF( falseLabel )
6496:          ')'
      
6498:       | pStrLit :
6500:          int addr = oStringAllocShortStringLit( CURRENT_STRLIT )     % store in global data
6509:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: consider defining a ShortString type with the exact capacity used.
               % But, I don't think it should matter here, since nobody should be assigning to this string.
6517:          oTypeSPush( StrLitType )
               % This seems unlikely, but the strlit may be followed by
               % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
               % First, advance the pointer by index if any
6523:          @LValueIndexes
               % get final value of dereferencing, if any
6525:          @FetchVar
      
6527:       | pIdent :
6529:          Node decl = oScopeFindRequire
6534:          @ResolveUnitRef( decl )
6541:          Node theType
      
6541:          [ oNodeType( decl )
6548:             | nFunc :
6549:                @Call( decl )
      
6556:             | nBuiltInFunc :
6558:                @CallBuiltInFunc( decl )
      
6565:             | nConst, nEnumValue :
6567:                theType = oNodeGet( decl, qType )
6580:                oTypeSPush( theType )
6586:                [ oTypeSNodeType
6588:                   | nIntegerType, nEnumType, nBooleanType :
6589:                      .tPushConstI @EmitValue( decl )
6598:                   | * :
6607:                      #eNotImplemented
6609:                ]
      
6609:             | nGlobalVar, nLocalVar, nParam, nTypedConst :
6611:                @VarExpr( decl )
      
6618:             | * :
6637:                #eNotValue
6639:                oTypeSPush( IntegerType )
6645:          ]
      
6645:       | '@' :        % @var -- pointer to var
6647:          pIdent
      
6649:          Node decl = oScopeFindRequire
6654:          @ResolveUnitRef( decl )
6661:          Node theType
      
               % writeable is false because we're not on the left hand side of an assignment,
               % or passign into a var parameter.  So it's ok to take the address of a typed const.
6661:          @LValueVar( decl, false )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
6671:          theType = oTypeSTop
6676:          oTypeSPop
6677:          Node ptrType = @PointerTypeTo( theType )
6688:          oTypeSPush( ptrType )
      
6694:       | * :
6709:          #eNotValue
6711:          oTypeSPush( IntegerType )
6717:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
6718: VarExpr( Node decl ):
6720:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
6733:    int uplevels = @DeclUpLevels( decl )
      
6744:    oTypeSPush( theType )
6750:    [ oTypeSNodeType
6752:       | nIntegerType, nEnumType :
6753:          [ oNodeType( decl )
6760:             | nGlobalVar, nTypedConst :   .tPushGlobalI  @EmitValue( decl )
6770:             | nLocalVar :
6772:                [ equal_zero( uplevels )
6779:                   | true :  .tPushLocalI  @EmitValue( decl )
6789:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
6809:                ]
6809:             | nParam :
6811:                [ oNodeGetBoolean( decl, qInOut )
6821:                   | true :    % VAR param points to the var.  Auto dereference.
6822:                      [ equal_zero( uplevels )
6829:                         | true :  .tPushParamP  @EmitValue( decl )
6839:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
6859:                      ]
6859:                      .tFetchI
6861:                   | * :
6866:                      [ equal_zero( uplevels )
6873:                         | true :  .tPushParamI  @EmitValue( decl )
6883:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
6903:                      ]
6903:                ]
6903:          ]
      
6915:       | nBooleanType, nByteType, nCharType :
6917:          [ oNodeType( decl )
6924:             | nGlobalVar, nTypedConst :   .tPushGlobalB  @EmitValue( decl )
6934:             | nLocalVar :
6936:                [ equal_zero( uplevels )
6943:                   | true :  .tPushLocalB  @EmitValue( decl )
6953:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
6973:                ]
6973:             | nParam :
6975:                [ oNodeGetBoolean( decl, qInOut )
6985:                   | true :    % VAR param points to the var.  Auto dereference.
6986:                      [ equal_zero( uplevels )
6993:                         | true :  .tPushParamP  @EmitValue( decl )
7003:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7023:                      ]
7023:                      .tFetchB
7025:                   | * :
7030:                      [ equal_zero( uplevels )
7037:                         | true :  .tPushParamB  @EmitValue( decl )
7047:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
7067:                      ]
7067:                ]
7067:          ]
      
7079:       | nFileType :
7081:          #eNotImplemented
      
7083:       | nPointerType, nUniversalPointerType :
7085:          [ oNodeType( decl )
7092:             | nGlobalVar, nTypedConst :   .tPushGlobalP @EmitValue( decl )
7102:             | nLocalVar :
7104:                [ equal_zero( uplevels )
7111:                   | true :  .tPushLocalP  @EmitValue( decl )
7121:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
7141:                ]
7141:             | nParam :
7143:                [ oNodeGetBoolean( decl, qInOut )
7153:                   | true :    % VAR param points to the var.  Auto dereference.
7154:                      [ equal_zero( uplevels )
7161:                         | true :  .tPushParamP  @EmitValue( decl )
7171:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7191:                      ]
7191:                      .tFetchP
7193:                   | * :
7198:                      [ equal_zero( uplevels )
7205:                         | true :  .tPushParamP  @EmitValue( decl )
7215:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7235:                      ]
7235:                ]               
7235:          ]
7247:          [
7247:             | '^' :             % dereferenced
7249:                oTypeSPop
7250:                oTypeSPush( oNodeGet( theType, qBaseType ) )
7263:                @LValueIndexes
7265:                @FetchVar
7267:             | '[' :             % dereferencing pointer like an array [0..] of baseType
7269:                @PointerArraySubscript
                     % modify addr for any subsequent subscripts, field references, etc
7271:                @LValueIndexes
7273:                @FetchVar
7275:             | * :               % just ptr value alone
7282:          ]
      
7282:       | nArrayType, nRecordType, nShortStringType :
               % compound type
               % first, push addr of start of var
7284:          [ oNodeType( decl )
7291:             | nGlobalVar, nTypedConst :   .tPushAddrGlobal @EmitValue( decl )
7301:             | nLocalVar :
7303:                [ equal_zero( uplevels )
7310:                   | true :  .tPushAddrLocal  @EmitValue( decl )
7320:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
7340:                ]
7340:             | nParam :
7342:                [ oNodeGetBoolean( decl, qInOut )
7352:                   | true :    % VAR param points to the var.  Auto dereference.
7353:                      [ equal_zero( uplevels )
7360:                         | true :  .tPushParamP  @EmitValue( decl )
7370:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7390:                      ]
7390:                   | * :
7395:                      [ equal_zero( uplevels )
7402:                         | true :  .tPushAddrParam  @EmitValue( decl )
7412:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
7432:                      ]
7432:                ]
7432:          ]
               % modify addr for subscripts, field references, etc
7444:          @LValueIndexes
               % get final value
7446:          @FetchVar
7448:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
7475: FetchVar:
7477:    [ oTypeSNodeType
7479:       | nIntegerType, nEnumType :  .tFetchI
7482:       | nBooleanType, nByteType, nCharType :  .tFetchB
7486:       | nFileType :   #eNotImplemented
7490:       | nPointerType :             .tFetchP
7494:       | nUniversalPointerType :    #eCantDereference
7498:       | nArrayType, nRecordType, nStrLitType, nShortStringType :  % compound type; leave as addr
7500:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
7529: LValueIndexes:
7531:    {[
7531:       | '[' :
7533:          [ oTypeSNodeType
7535:             | nArrayType :    @ArraySubscripts
7538:             | nPointerType :  @PointerArraySubscript
7542:             | nStrLitType, nShortStringType :  @ShortStringArraySubscript
7546:             | * :             #eNotArray
7559:          ]
7559:       | '.' :       @RecordFieldRef
7563:       | '^' :       @PointerDeref   % TO DO: I suspect I don't have logic right here
                                          % about precondition and using .tFetchP
                                          % Ideally this should take over for the ^ in VarExpr too.
7567:       | * :         >
7578:    ]};
      
7581: ArraySubscripts:
7583:    [ oTypeSNodeType
7585:       | nArrayType :
7586:       | * :       #eNotArray
7593:    ]
7593:    {
7593:       [ oTypeSNodeType
7595:          | nArrayType :
7596:          | * :    #eTooManySubscripts
7603:       ]
      
            % low subscript of this dimension
7603:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
7620:       Node baseType
7620:       baseType = oNodeGet( oTypeSTop, qBaseType )
7632:       oTypeSPop
7633:       oTypeSPush( baseType )
      
7639:       @Expr
7641:       @RequireIntPop
            % adjust for low subscript
7643:       [ equal_zero( low )
7650:          | false :
7651:             .tPushConstI oEmitInt( low ) .tSubI
7661:          | * :
7666:       ]
      
            % multiply by element size
7666:       int size = oNodeGetInt( baseType, qSize )
7679:       [ equal( size, 1 )
7689:          | false :
7690:             .tPushConstI oEmitInt( size ) .tMultI
7700:          | * :
7705:       ]
      
            % update start address
7705:       .tAddPI
7707:       [
7707:          | ']' :  >
7711:          | ',' :
7713:       ]
7721:    };
      
      
      % pointer[index] - similar to array[index] where index counts from 0.
      % On entry, the pointer value is on the stack, and pointer type is on the type stack.
      % We've already accepted the '['.
      % On exit, the address of the pointed-to element is on the stack,
      % and the element type is on the type stack.
      %
7724: PointerArraySubscript:
7726:    [ oTypeSNodeType
7728:       | nPointerType :
7729:       | * :    #eCantDereference
7736:    ]
         % replace type stack with base type
7736:    Node baseType = oNodeGet( oTypeSTop, qBaseType )
7748:    oTypeSPop
7749:    oTypeSPush( baseType )
         
7755:    @Expr
7757:    @RequireIntPop
         % multiply by element size
7759:    int size = oNodeGetInt( baseType, qSize )
7772:    [ equal( size, 1 )
7782:       | false :
7783:          .tPushConstI  oEmitInt( size )  .tMultI
7793:       | * :
7798:    ]
         % update start address
7798:    .tAddPI
7800:    ']';
      
      
      % Specialization of array indexing for ShortString.
      % We treat the starting index as 0 so that str[1] sees the first string char,
      % past the length byte.
      %
7803: ShortStringArraySubscript:
7805:    [ oTypeSNodeType
7807:       | nStrLitType, nShortStringType :
7808:       | * :    #eCantDereference
7817:    ]
7817:    oTypeSPop
7818:    oTypeSPush( CharType )
7824:    @Expr
7826:    @RequireIntPop
7828:    .tAddPI
7830:    ']';
      
      
7833: RecordFieldRef:
7835:    [ oTypeSNodeType
7837:       | nRecordType :
7838:       | * :    #eNotRecord
7845:    ]
7845:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
7857:    pIdent
7859:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
7864:    [ oNodeType( field )
7871:       | nRecordField :
7872:       | * :   #eNotRecordField
7879:    ]
7879:    oScopeEnd
7880:    int offset = oNodeGetInt( field, qValue )
7893:    [ equal_zero( offset )
7900:       | false :
7901:          .tPushConstI oEmitInt( offset ) .tAddPI
7911:       | * :
7916:    ]
      
         % replace the type on the type stack, with the field type
7916:    oTypeSPop
7917:    oTypeSPush( oNodeGet( field, qType ) )
7931:    ;
      
      
      % On entry, expr stack has ptr, and integer index above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr advanced to that index
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
7931: PointerAddition:
7933:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
7945:    int elementSize = oNodeGetInt( elementType, qSize )
7958:    [ equal( elementSize, 1 )
7968:       | false :
7969:          .tPushConstI  oEmitInt( elementSize )
7977:          .tMultI
7979:       | * :
7984:    ]
7984:    .tAddPI
7987:    ;
      
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
7987: PointerDeref:
7989:    [ oTypeSNodeType
7991:       | nPointerType :
7992:       | nUniversalPointerType :   #eCantDereference
7996:       | * :       #eNotPointer
8005:    ]
8005:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
8007:    Node theType = oTypeSTop
8012:    oTypeSPop
8013:    oTypeSPush( oNodeGet( theType, qBaseType ) )
8027:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
8027: CoerceType:
8029:    node_type nt = oTypeSNodeType
8034:    oTypeSPop
8035:    [ equal_node_type( nt, oTypeSNodeType )
8044:       | false :
               % Can we implicitly convert the value to the desired type?
8045:          [ oTypeSNodeType
8047:             | nIntegerType :
8048:                [ nt
8051:                   | nByteType :   .tCastBtoI  >>
8055:                   | * :
8060:                ]
8060:             | nByteType :
8062:                [ nt
8065:                   | nIntegerType :   .tCastItoB  >>
8069:                   | * :
8074:                ]
8074:             | nPointerType :
8076:                [ nt
8079:                   | nUniversalPointerType :  >>
8081:                   | nStrLitType :
8083:                      [ equal_node( oTypeSTop, PCharType )
8092:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8093:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8104:                         | * :
8109:                      ]
8109:                   | * :
8116:                ]
8116:             | nUniversalPointerType :
8118:                [ nt
8121:                   | nPointerType :  >>
8123:                   | * :
8128:                ]
8128:             | nShortStringType :
8130:                [ nt
8133:                   | nStrLitType :  >>
8135:                   | * :
8140:                ]
8140:             | * :
8153:          ]
8153:          #eTypeMismatch
8155:       | * :
8160:    ];
      
      
      % Given a ShortString, StrLit, or Char on the expression stack
      % (and type on the type stack).  Move the value into a new temporary ShortString.
      % Leave that temp string and type on the stacks.
      % Also returns the offset of the temp string.
      %
8161: MoveIntoTempShortString >> int:
8163:    int tempOffset = oScopeAllocType( ShortStringType )
         % copy the value
8173:    [ oTypeSNodeType
8175:       | nShortStringType, nStrLitType :
8176:          .tPushAddrLocal  oEmitInt( tempOffset )
               % put temp addr under value addr
8184:          .tSwap
               % TO DO: we could just copy length + 1, but tCopy takes a fixed #bytes
8186:          .tCopy  oEmitInt( oNodeGetInt( ShortStringType, qSize ) )
8201:       | nCharType :
               % temp[0] = 1
8203:          .tPushAddrLocal  oEmitInt( tempOffset )
8211:          .tPushConstI  oEmitInt( 1 )
8219:          .tAssignB
               % temp[1] = value
8221:          .tPushAddrLocal  oEmitInt( add( tempOffset, 1 ) )
8236:          .tSwap
8238:          .tAssignB
8240:       | * :   #eTypeMismatch
8251:    ]
8251:    oTypeSPop
         % Leave the temp ShortString on the expr stack and type stack
8252:    .tPushAddrLocal  oEmitInt( tempOffset )
8260:    oTypeSPush( ShortStringType )
8266:    >> tempOffset;
      
      
      % Top of expr stack / type stack is ShortString B.
      % Under it is ShortString A.
      % Change A to append the contents of B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
8270: ShortStringAppendShortString:
         % TO DO: ideally I would do this directly with tcode.  But I think I need some more
         % enhancements for that to work well.   Meanwhile, generate a call to a method.
         % For the moment, I'll implement the method in Pascal, in the mysystem unit.
8272:    .tAllocActuals  oEmitInt( 16 )
8280:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
8292:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
8304:    .tCall   @EmitValue( System_ShortStringAppendShortString )
         % TO DO: Ideally I would leave A on the expr stack / type stack.
         %  But I can't really do that without dup, which I hesitate to add.
         %  I'll have the caller push A again themselves.
8313:    .tFreeActuals  oEmitInt( 16 )
8321:    oTypeSPop
8322:    oTypeSPop
8324:    ;
      
      % Top of expr stack / type stack is Char B.
      % Under it is ShortString A.
      % Change A to append char B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
8324: ShortStringAppendChar:
         % Note at the moment I don't align params
8326:    .tAllocActuals  oEmitInt( 12 )
8334:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignI
8346:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
8358:    .tCall  @EmitValue( System_ShortStringAppendChar )
8367:    .tFreeActuals  oEmitInt( 12 )
8375:    oTypeSPop
8376:    oTypeSPop
8378:    ;
      
      
      % Called on first use of an extern method
      %
8378: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
8380:    int strAddr
8380:    String externalName = oNodeGetString( method, qExternalName )
8393:    [ equal_string( externalName, stringNull )
8403:       | true :
8404:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
8425:       | false :
8427:          strAddr = oStringAllocLit( externalName )
8437:    ]
8445:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
8461:    ;
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
8461: Call( Node method ):
      
         % Prior to first call, issue extern label for a called method.
         % I don't want to issue .tLabelExtern for unused methods, that seems inefficient.
8463:    [ oNodeGetBoolean( method, qExternal )
8473:       | true :
8474:          [ oNodeGetBoolean( method, qUsed )
8484:             | false :
                     % define the extern label on first use
8485:                @DefineExternLabel( method )
8492:             | * :
8497:          ]
8497:      | * :
8502:    ]
8502:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
8514:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
8527:    Node resultType
8527:    int tempOffset
      
8527:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
8544:    [ isFunc
8547:       | true :
8548:          resultType = oNodeGet( method, qType )
8561:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
8571:       | * :
8576:    ]
         
      
8576:    Node paramScope = oNodeGet( method, qParams )
8589:    int actualsSize = oNodeGetInt( paramScope, qSize )
8602:    [ cdecl
8605:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
8614:       | false :  .tAllocActuals  oEmitInt( actualsSize )
8624:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
8632:    [ greater( @DeclLevel( method ), 0 )
8647:       | true :
8648:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
8656:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
8675:          .tAssignP
8677:       | * :
8682:    ]
      
      
8682:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
8695:    Node param = oNodeIterValue( paramIter )
8705:    [
8705:       | '(' :
            
8707:          {
8707:             [ oNodeNull( param )
8714:                | true : >
8717:                | * :
8722:             ]
      
8722:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
8735:             .tPushAddrActual oEmitInt( offset )
8743:             oTypeSPush( oNodeGet( param, qType ) )
      
8756:             [ oNodeGetBoolean( param, qInOut )
8766:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
8767:                           @LValueExpr( true )
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
8774:                           @MatchTypes
      
8776:                           .tAssignP
      
8778:                | false :  @Expr
8782:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
8784:                           [ oTypeSNodeType
8786:                              | nIntegerType, nEnumType : .tAssignI
8789:                              | nBooleanType, nByteType, nCharType :  .tAssignB
8793:                              | nFileType :   #eNotImplemented
8797:                              | nPointerType, nUniversalPointerType :  .tAssignP
8801:                              | nArrayType, nRecordType, nShortStringType :
                                       % compound types: copy value into actuals space
8803:                                  int size = oNodeGetInt( oTypeSTop, qSize )
8815:                                  .tCopy  oEmitInt( size )    % multi-word copy
8823:                           ]
8849:             ]
8857:             oTypeSPop
      
8858:             oNodeIterNext( paramIter )
8864:             param = oNodeIterValue( paramIter )
8874:             [ oNodeNull( param )
8881:                | true :  >
8884:                | false :
8886:             ]
      
8894:             ','
8896:          }
      
8898:          ')'
      
8900:       | * :
8905:    ]
      
8905:    [ oNodeNull( param )
8912:       | false :    #eMissingParameter
8915:       | * :
8920:    ]
      
8920:    [ isFunc
8923:       | true :
               % Pass result temp as an additional VAR parameter.
8924:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
8939:          .tPushAddrLocal  oEmitInt( tempOffset )
8947:          .tAssignP
8949:       | * :
8954:    ]
      
8954:    [ cdecl
8957:       | true :
8958:          .tCallCdecl  @EmitValue( method )
8967:       | false :
8969:          .tCall   @EmitValue( method )
8978:    ]
      
8986:    [ isFunc
8989:       | true :
               % push return value from temp
8990:          oTypeSPush( resultType )
      
8996:          [ oTypeSNodeType
8998:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
9007:             | nBooleanType, nByteType, nCharType :   .tPushLocalB  oEmitInt( tempOffset )
9017:             | nFileType :  #eNotImplemented
9021:             | nPointerType, nUniversalPointerType :   .tPushLocalP  oEmitInt( tempOffset )
9031:             | nArrayType, nRecordType, nShortStringType :   % compound type: push address
9033:                                .tPushAddrLocal  oEmitInt( tempOffset )
9041:          ]
9067:       | * :
9072:    ]
         
9072:    .tFreeActuals  oEmitInt( actualsSize )
9081:    ;
      
      
      % Parse a call to a built-in function, identified by the just-accepted identifier.
      % This will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
9081: CallBuiltInFunc( Node method ):
      
         % Ord(x)
9083:    [ oNodeEqual( method, BuiltIn_Ord )
9093:       | true :
               % parameter is any scalar type (including boolean, enum, char)
               % result is integer
9094:          '('
9096:          @Expr
9098:          [ oTypeSNodeType
9100:             | nIntegerType, nEnumType :
9101:             | nBooleanType, nByteType, nCharType :  .tCastBtoI
9105:             | * :  #eTypeMismatch
9120:          ]
9120:          oTypeSPop
9121:          oTypeSPush( IntegerType )
9127:          ')'
9129:          >>
9130:       | * :
9135:    ]
      
         % Chr(x)
9135:    [ oNodeEqual( method, BuiltIn_Chr )
9145:       | true :
               % parameter is integer
               % result is char
9146:          '('
9148:          @Expr
9150:          [ oTypeSNodeType
9152:             | nIntegerType :    .tCastItoB
9155:             | nByteType :
9157:             | * :  #eTypeMismatch
9166:          ]
9166:          oTypeSPop
9167:          oTypeSPush( CharType )
9173:          ')'
9175:          >>
9176:       | * :
9181:    ]
      
         % Pred(x)
9181:    [ oNodeEqual( method, BuiltIn_Pred )
9191:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
9192:          '('
9194:          @Expr
9196:          [ oTypeSNodeType
9198:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
9199:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
9208:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
9211:                   | * :
9216:                ]
9216:             | * :  #eTypeMismatch
9223:          ]
9223:          .tDecI
9225:          ')'
9227:          >>
9228:       | * :
9233:    ]
      
         % Succ(x)
9233:    [ oNodeEqual( method, BuiltIn_Succ )
9243:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
9244:          '('
9246:          @Expr
9248:          [ oTypeSNodeType
9250:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
9251:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
9260:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
9263:                   | * :
9268:                ]
9268:             | * :  #eTypeMismatch
9275:          ]
9275:          .tIncI
9277:          ')'
9279:          >>
9280:       | * :
9285:    ]
      
9285:    #eNotImplemented
9288:    ;
      
      
      % ------------------------------ Statements -----------------------------
      
9288: Statement:
9290:    [
9290:       | pWriteln :     @WritelnStmt
9294:       | pWrite :       @WriteStmt
9298:       | pReadln :      @ReadlnStmt
9302:       | pRead :        @ReadStmt
9306:       | pIf :          @IfStmt
9310:       | pWhile :       @WhileStmt
9314:       | pFor :         @ForStmt
9318:       | pRepeat :      @RepeatStmt
9322:       | pBreak :       @BreakStmt
9326:       | pContinue :    @ContinueStmt
9330:       | pBegin :       @BeginStmt
9334:       | pIdent :       @LabelOrAssignOrCallStmt
9338:       | pGoto :        @GotoStmt
9342:       | pIntLit :      % should be an integer label
9344:                        oChangeIntLitToLabelIdent
9345:                        @LabelOrAssignOrCallStmt
9347:       | * :            % null statement : don't accept any tokens
9378:    ];
      
      
9379: LabelOrAssignOrCallStmt:
9381:    Node decl = oScopeFindRequire
9386:    @ResolveUnitRef( decl )
9393:    [ oNodeType( decl )
9400:       | nLabel :                          @LabelDefinition( decl )
9408:                                           @Statement
9410:       | nProc :                           @Call( decl )
9419:       | nGlobalVar, nLocalVar, nParam :   @AssignStmt( decl )
9428:       | nFunc :                           @AssignResultStmt( decl )
9437:       | * :                               #eBadStatement
9454:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
9455: LabelDefinition( Node decl ):
9457:    [ oNodeGetBoolean( decl, qDefined )
9467:       | true :  #eAlreadyDefined
9470:       | * :
9475:    ]
9475:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
9490:    oNodeSetBoolean( decl, qDefined, true )
9502:    ':'
9505:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
9505: AssignStmt( Node decl ):
      
9507:    @LValueVar( decl, true )
9517:    ':=' 
9519:    @Expr
9521:    @CoerceType
9523:    @Assign
9526:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack (already coerced to the lvalue type),
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
9526: Assign:
9528:    [ oTypeSNodeType
9530:       | nIntegerType, nEnumType :  .tAssignI
9533:       | nBooleanType, nByteType, nCharType :  .tAssignB
9537:       | nFileType :   #eNotImplemented
9541:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9545:       | nArrayType, nRecordType, nShortStringType :
                % TO DO: for ShortString, allow destination to be smaller capacity,
                % and truncate the copied value/length.
9547:           int size = oNodeGetInt( oTypeSTop, qSize )
9559:           .tCopy  oEmitInt( size )    % multi-word copy
9567:    ]
9593:    oTypeSPop
9595:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
9595: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
9597:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
9613:       | false :   #eNotCurrentFunction
9616:       | * :
9621:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
9621:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
9636:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
9649:    ':='
9651:    @Expr
9653:    @CoerceType
9655:    [ oTypeSNodeType
9657:       | nIntegerType, nEnumType : .tAssignI
9660:       | nBooleanType, nByteType, nCharType :  .tAssignB
9664:       | nFileType :   #eNotImplemented
9668:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9672:       | nArrayType, nRecordType, nShortStringType :
9674:           int size = oNodeGetInt( oTypeSTop, qSize )
9686:           .tCopy  oEmitInt( size )    % multi-word copy
9694:    ]
9720:    oTypeSPop
9722:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
9722: LValueExpr( boolean writeable ):
         % At the moment, all lvalue expressions start with a variable name.
         % I think there can also be typecasts, not supported yet.  Check standard syntax.
9724:    pIdent
9726:    Node decl = oScopeFindRequire
9731:    @ResolveUnitRef( decl )
9738:    [ oNodeType( decl )
9745:       | nGlobalVar, nLocalVar, nParam, nTypedConst :
9746:       | * :  #eNotVar
9759:    ]
9759:    @LValueVar( decl, writeable )
9770:    ;
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
9770: LValueVar( Node decl, boolean writeable ):
9772:    [ oNodeType( decl )
9779:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
9789:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
9800:       | nParam :
9802:          [ oNodeGetBoolean( decl, qInOut )
9812:             | true :   % VAR param points to variable.  No dereference.
9813:                        .tPushParamP @EmitValue( decl )
9822:             | * :      .tPushAddrParam @EmitValue( decl )
9836:          ]
9836:       | nTypedConst :
9838:          [ writeable
9841:             | false :  .tPushAddrGlobal @EmitValue( decl )                       
9851:             | * :      #eNotVar
9858:          ]
9858:       | * :            #eNotVar
9871:    ]
      
9871:    oTypeSPush( oNodeGet( decl, qType ) )
      
         % handle subscripts, if any.
         % There is one case that I'm not fitting into the pattern nicely, so need to
         % check for specially here:  if lvalue var is a pointer variable, and is
         % followed by [index], we need to dereference the pointer variable before applying
         % the index.  This is different from handling of [index] on an rvalue expression.
         % Right now I have LValueIndexes working for both lvalue and rvalue (composite types)
         % so can't easily add this behavior in there.
         % TO DO: probably I need separate rules LValueIndexes and RValueIndexes.
         %    This might also explain my confusion about handling of deref operator in LValueIndexes vs rvalue expr,
         %    and having separate rules might clear that up better.
      
9884:    [ oTypeSNodeType
9886:       | nPointerType :
9887:          [
9887:             | '[' :
                     % dereference the pointer var first
9889:                .tFetchP
9891:                @PointerArraySubscript
9893:             | * :
9898:          ]
9898:       | * :
9903:    ]
         % additional subscripts, if any
9903:    @LValueIndexes
9906:    ;
      
      
9906: IncVar( Node decl ):
9908:    @LValueVar( decl, true )
9918:    @RequireIntPop
9920:    @VarExpr( decl )
9927:    oTypeSPop
9928:    .tIncI
9930:    .tAssignI;
      
9933: DecVar( Node decl ):
9935:    @LValueVar( decl, true )
9945:    @RequireIntPop
9947:    @VarExpr( decl )
9954:    oTypeSPop
9955:    .tDecI
9957:    .tAssignI;
      
      
9960: IfStmt:
9962:    Label falseLabel = labelNull
      
9968:    @BooleanExprControlFlow( falseLabel )
9975:    pThen
9977:    @Statement
9979:    [
9979:       | pElse :
9981:          Label doneLabel = oLabelNew
      
9986:          .tJump  oEmitLabel( doneLabel )
9994:          .tLabel oEmitLabel( falseLabel )
10002:          @Statement
10004:          .tLabel oEmitLabel( doneLabel )
      
10012:       | * :
10017:          .tLabel oEmitLabel( falseLabel )
10025:    ];
      
      
10026: ForStmt:
10028:    pIdent
      
10030:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
10035:    @LValueVar( decl, true )
10045:    @RequireIntPop
      
10047:    ':='
      
10049:    @Expr
10051:    @RequireIntPop
10053:    .tAssignI
      
10055:    Label breakLabel = oLabelNew
      
10060:    Label checkLabel = oLabelNew
10065:    .tJump  oEmitLabel( checkLabel )
      
10073:    Label continueLabel = oLabelNew
10078:    .tLabel  oEmitLabel( continueLabel )
10086:    [
10086:       | pTo :
10088:          @IncVar( decl )
10095:          .tLabel  oEmitLabel( checkLabel )
10103:          @VarExpr( decl )  oTypeSPop
10111:          @Expr
10113:          @RequireIntPop
10115:          .tGreaterI
10117:          .tJumpTrue  oEmitLabel( breakLabel )
10125:       | pDownto :
10127:          @DecVar( decl )
10134:          .tLabel  oEmitLabel( checkLabel )
10142:          @VarExpr( decl )  oTypeSPop
10150:          @Expr
10152:          @RequireIntPop
10154:          .tLessI
10156:          .tJumpTrue  oEmitLabel( breakLabel )
10164:    ]
10172:    oLoopPush( continueLabel, breakLabel )
10181:    pDo
10183:    @Statement
10185:    .tJump  oEmitLabel( continueLabel )
10193:    .tLabel  oEmitLabel( breakLabel )
10201:    oLoopPop;
      
      
10203: RepeatStmt:
10205:    Label continueLabel = oLabelNew
10210:    .tLabel  oEmitLabel( continueLabel )
      
10218:    Label breakLabel = oLabelNew
      
10223:    oLoopPush( continueLabel, breakLabel )
10232:    @Statement
10234:    {[
10234:       | ';' :
10236:          @Statement
10238:       | pUntil :
10240:          Label falseLabel
10240:          @BooleanExprControlFlow( falseLabel )
10247:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
10261:          >
10263:    ]}
10273:    .tLabel  oEmitLabel( breakLabel )
10281:    oLoopPop;
      
      
10283: WhileStmt:
10285:    Label continueLabel = oLabelNew
10290:    .tLabel  oEmitLabel( continueLabel )
      
10298:    Label breakLabel
10298:    @BooleanExprControlFlow( breakLabel )
      
10305:    oLoopPush( continueLabel, breakLabel )
10314:    pDo
10316:    @Statement
10318:    .tJump  oEmitLabel( continueLabel )
10326:    .tLabel  oEmitLabel( breakLabel )
10334:    oLoopPop;
      
      
10336: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
10338:    [ equal_label( oLoopContinueLabel, labelNull )
10347:       | true :
10348:          #eNotInALoop
10350:       | false :
10352:          .tJump  oEmitLabel( oLoopContinueLabel )
10359:    ];
      
      
10368: BreakStmt:
10370:    [ equal_label( oLoopBreakLabel, labelNull )
10379:       | true :
10380:          #eNotInALoop
10382:       | false :
10384:          .tJump  oEmitLabel( oLoopBreakLabel )
10391:    ];
      
      
10400: GotoStmt:
10402:    [
10402:       | pIdent :
10404:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
10406:          oChangeIntLitToLabelIdent
10407:    ]
      
         % Some pascals have rules about where you can jump (to a sibling statement or
         % higher level statement in the block, but not into a lower lower level statement.)
         % fpc just says "jumping into a nested statement can have strange effects."
         % I'm going to follow that and not prohibit any goto, as long as it's in the same block.
      
         % Label must be declared in the same block (same scope) it is used.
         % Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
10415:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
10424:    oNodeSetBoolean( decl, qUsed, true )
10436:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
10452:    ;
      
      
10452: BeginStmt:
10454:    @Statement
10456:    {[
10456:       | ';' :   @Statement
10460:       | pEnd :  >
10464:    ]};
      
      
10475: WritelnStmt:
10477:    @WriteStmt
10479:    .tWriteCR;
      
      
10482: WriteStmt:
10484:    [
10484:       | '(' :
10486:          {
10486:             @Expr
10488:             [ oTypeSNodeType
10490:                | nIntegerType :             .tWriteI
10493:                | nBooleanType :             .tWriteBool
10497:                | nByteType :                .tCastBtoI  .tWriteI
10503:                | nCharType :                .tWriteChar
10507:                | nShortStringType, nStrLitType :   .tWriteShortStr
10511:                | nFileType :                #eNotImplemented
10515:                | nEnumType :
                        % write name via table lookup
10517:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
10531:                   .tWriteEnum
10533:                | nPointerType :
10535:                   [ equal_node( oTypeSTop, PCharType )
10544:                      | true :               .tWritePChar
10547:                      | * :                  .tWriteP
10554:                   ]
10554:                | nUniversalPointerType :    .tWriteP
10558:                | * :                        #eNotAllowed
10583:             ]
10583:             oTypeSPop
10584:             [
10584:                | ')' : >
10588:                | ',' :
10590:             ]
10598:          }
10600:       | * :
10605:    ];
      
      
10606: ReadlnStmt:      % ***
         % TO DO
10609:    ;
      
10609: ReadStmt:
         % TO DO
10612:    ;
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
10612: ScopeLevel >> int:
10614:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
10624: DeclLevel( Node decl ) >> int:
10626:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
10644: DeclUpLevels( Node decl ) >> int:
10646:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
10662: MatchTypes:
10664:    node_type nt = oTypeSNodeType
10669:    oTypeSPop
10670:    [ equal_node_type( nt, oTypeSNodeType )
10679:       | false :
               % Some implicit conversion is allowed even here
10680:          [ oTypeSNodeType
10682:             | nPointerType :
10683:                [ nt
10686:                   | nUniversalPointerType :  >>
10688:                   | * :
10693:                ]
10693:             | nUniversalPointerType :
10695:                [ nt
10698:                   | nPointerType :  >>
10700:                   | * :
10705:                ]
10705:             | * :
10712:          ]
10712:          #eTypeMismatch
10714:       | * :
10719:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
10720: RequireIntPop:
10722:    [ oTypeSNodeType
10724:       | nIntegerType :
10725:       | * :          #eNotInteger
10732:    ]
10732:    oTypeSPop;
      
10734: RequireInt:
10736:    [ oTypeSNodeType
10738:       | nIntegerType :
10739:       | * :          #eNotInteger
10746:    ];
      
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Pop the type stack.
      %
10747: PromoteToIntPop:
10749:    [ oTypeSNodeType
10751:       | nIntegerType :
10752:       | nByteType :        .tCastBtoI
10756:       | * :                #eNotInteger
10765:    ]
10765:    oTypeSPop;
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Leave integer on the type stack.
      %
10767: PromoteToInt:
10769:    [ oTypeSNodeType
10771:       | nIntegerType :
10772:       | nByteType :        .tCastBtoI
10776:                            oTypeSPop
10777:                            oTypeSPush( IntegerType )
10783:       | * :                #eNotInteger
10792:    ];
      
      
      % If the top value is implicitly convertable to integer, do so.
      % Otherwise leave it as-is.
      %
10793: PromoteToIntOptional:
10795:    [ oTypeSNodeType
10797:       | nByteType :        .tCastBtoI
10800:                            oTypeSPop
10801:                            oTypeSPush( IntegerType )
10807:       | * :
10812:    ];
      
      
      
      
10813: RequireBoolPop:
10815:    [ oTypeSNodeType
10817:       | nBooleanType :
10818:       | * :          #eNotBoolean
10825:    ]
10825:    oTypeSPop;
      
10827: RequireBool:
10829:    [ oTypeSNodeType
10831:       | nBooleanType :
10832:       | * :          #eNotBoolean
10839:    ];
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
10840: newType( node_type nt, int size ) >> Node:
10842:   Node node = oNodeNew( nt )
10852:   oNodeSetInt( node, qSize, size )
10864:   oTypeAdd( node )
10870:   >> node
10874:   ;
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
10874: newIdent( node_type nt, int id ) >> Node:
10876:   Node t = oNodeNew( nt )
10886:   oNodeSetInt( t, qIdent, id )
10898:   >> t
10902:   ;
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
10902: PointerTypeTo( Node theType ) >> Node:
10904:    Node ptrType = oNodeGet( theType, qPointerType )
10917:    [ oNodeNull( ptrType )
10924:       | true :
10925:          ptrType = oNodeNew( nPointerType )
10935:          oNodeSet( ptrType, qBaseType, theType )
10947:          oNodeSetInt( ptrType, qSize, 8 )
10959:          oTypeAdd( ptrType )
10965:          oNodeSet( theType, qPointerType, ptrType )
10977:       | * :
10982:    ]
10982:    >> ptrType;
      
      
      % Return the low value of an ordinal type
      %
10986: OrdinalLow( Node theType ) >> int:
10988:    [ oNodeType( theType )
10995:       | nIntegerType :  >> oMININT
10998:       | nBooleanType :  >> 0
11003:       | nCharType :     >> 0
11008:       | nEnumType :
11010:          Node enumScope = oNodeGet( theType, qScope )
11023:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
11040:          >> oNodeGetInt( first, qValue )
11050:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
11062:       | * :             #eNotOrdinalType
11077:                         >> 0
11080:    ];
      
      
      % Return the high value of an ordinal type
      %
11081: OrdinalHigh( Node theType ) >> int:
11083:    [ oNodeType( theType )
11090:       | nIntegerType :  >> oMAXINT
11093:       | nBooleanType :  >> 1
11098:       | nCharType :     >> 255
11103:       | nEnumType :
11105:          Node enumScope = oNodeGet( theType, qScope )
11118:          Node last = oNodeIterValue( oNodeGetIterLast( enumScope, qDecls ) )
11135:          >> oNodeGetInt( last, qValue )
11145:       | nSubrangeType : >> oNodeGetInt( theType, qHigh )
11157:       | * :             #eNotOrdinalType
11172:                         >> 0
11175:    ];
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
11176: EmitValue( Node decl ):
11178:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
11192: DeclareBuiltInFunc( int id ) >> Node:
11194:    Node decl = @newIdent( nBuiltInFunc, id )
11208:    oScopeDeclare( decl )
11214:    >> decl;
      
      
11218: installBuiltIns:
      
         % "mysystem" is the name of a unit that will be available everywhere.
         % Add its name to the id table so we can easily spot the name later.
11220:    mysystemId = oId_mysystem
      
         % install built-in types
11225:    FileType = @newType( nFileType, 4 )
11239:    IntegerType = @newType( nIntegerType, 4 )
11253:    BooleanType = @newType( nBooleanType, 1 )
11267:    BooleanCFType = @newType( nBooleanCFType, 1 )
11281:    CharType = @newType( nCharType, 1 )
11295:    PCharType = @PointerTypeTo( CharType )
11306:    ByteType = @newType( nByteType, 1 )
         % Universal pointer says base type Byte, but this is only for the sake of
         % pointer arithmetic.  It doesn't matter otherwise, because this type cannot be dereferened.
11320:    UniversalPointerType = @newType( nUniversalPointerType, 8 )
11334:    oNodeSet( UniversalPointerType, qBaseType, ByteType )
         % StrLitType is stored with both a length byte and null termination, so it can be assigned to
         % both a ShortString and a PChar.  StrLits longer than 255 characters appear truncated when
         % referenced as a ShortString, but not when referenced as a PChar.
11346:    StrLitType = @newType( nStrLitType, 256 )
         % ShortString is the original Pascal string type: an array of characters, not null-terminated,
         % with the first byte recording the current length.
         % The default ShortString type has capacity for 255 characters.  The user may define
         % additional ShortString types with smaller capacities.
         % The first character can be accessed as myString[1].
11360:    ShortStringType = @newType( nShortStringType, 256 )
11374:    oNodeSetInt( ShortStringType, qCapacity, 255 )
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oId_File
      
11386:    Node t
      
11386:    t = @newIdent( nTypeDecl, oId_File )
11399:    oNodeSet( t, qType, FileType )
11411:    oScopeDeclare( t )
      
11417:    t = @newIdent( nTypeDecl, oId_Integer )
11430:    oNodeSet( t, qType, IntegerType )
11442:    oScopeDeclare( t )
      
11448:    t = @newIdent( nTypeDecl, oId_Boolean )
11461:    oNodeSet( t, qType, BooleanType )
11473:    oScopeDeclare( t )
      
11479:    t = @newIdent( nTypeDecl, oId_Char )
11492:    oNodeSet( t, qType, CharType )
11504:    oScopeDeclare( t )
      
11510:    t = @newIdent( nTypeDecl, oId_Byte )
11523:    oNodeSet( t, qType, ByteType )
11535:    oScopeDeclare( t )
      
11541:    t = @newIdent( nTypeDecl, oId_Pointer )
11554:    oNodeSet( t, qType, UniversalPointerType )
11566:    oScopeDeclare( t )
      
11572:    t = @newIdent( nTypeDecl, oId_ShortString )
11585:    oNodeSet( t, qType, ShortStringType )
11597:    oScopeDeclare( t )
      
         % Built-in constants
      
11603:    t = @newIdent( nConst, oId_True )
11616:    oNodeSet( t, qType, BooleanType )
11628:    oNodeSetInt( t, qValue, 1 )
11640:    oScopeDeclare( t )
      
11646:    t = @newIdent( nConst, oId_False )
11659:    oNodeSet( t, qType, BooleanType )
11671:    oNodeSetInt( t, qValue, 0 )
11683:    oScopeDeclare( t )
      
         % Built-in methods
         % These aren't declared like normal methods, because they may have
         % special rules for parameter types (e.g. any scalar type).
         % Calls to these methods will be handled specially by the compiler.
      
11689:    BuiltIn_Ord = @DeclareBuiltInFunc( oId_Ord )
11699:    BuiltIn_Chr = @DeclareBuiltInFunc( oId_Chr )
11709:    BuiltIn_Pred = @DeclareBuiltInFunc( oId_Pred )
11719:    BuiltIn_Succ = @DeclareBuiltInFunc( oId_Succ )
11730:    ;
      
11730: end
      
11730: 

Generated code:

   0: oGlobalSpace 21
   2: oLocalSpace 5
   4: oGetAddrGlobal 1
   6: oPushResult
   7: oWorkspaceNew
   8: oAssign
   9: oSetResult 0
  11: oPushResult
  12: oSetResult 0
  14: oPushResult
  15: oScopeBegin
  16: oPop 2
  18: oGetAddrLocal 2
  20: oPushResult
  21: oScopeCurrent
  22: oAssign
  23: oCall 11218
  25: oEmit 65
  27: oSetResult 0
  29: oPushResult
  30: oEmitInt
  31: oPop 1
  33: oGetAddrLocal 3
  35: oPushResult
  36: oLabelNew
  37: oAssign
  38: oEmit 59
  40: oSetResult 0
  42: oPushResult
  43: oEmitInt
  44: oPop 1
  46: oEmit 62
  48: oGetLocal 3
  50: oPushResult
  51: oEmitLabel
  52: oPop 1
  54: oEmit 61
  56: oSetResult 0
  58: oPushResult
  59: oEmitInt
  60: oPop 1
  62: oEmit 64
  64: oInput 28
  66: oInput 0
  68: oGetAddrLocal 4
  70: oPushResult
  71: oSetResult 4
  73: oPushResult
  74: oNodeNew
  75: oPop 1
  77: oAssign
  78: oGetLocal 4
  80: oPushResult
  81: oSetResult 4
  83: oPushResult
  84: LAST_ID
  85: oPushResult
  86: oNodeSetInt
  87: oPop 3
  89: oGetGlobal 1
  91: oPushResult
  92: oSetResult 2
  94: oPushResult
  95: oGetLocal 4
  97: oPushResult
  98: oNodeSet
  99: oPop 3
 101: oInputChoice 175
 103: oInput 0
 105: oGetAddrLocal 1
 107: oPushResult
 108: oSetResult 19
 110: oPushResult
 111: LAST_ID
 112: oPushResult
 113: oCall 10874
 115: oPop 2
 117: oAssign
 118: oGetLocal 1
 120: oPushResult
 121: oSetResult 21
 123: oPushResult
 124: oGetGlobal 5
 126: oPushResult
 127: oNodeSet
 128: oPop 3
 130: oGetLocal 1
 132: oPushResult
 133: oScopeDeclareAlloc
 134: oPop 1
 136: oInput 13
 138: oInput 0
 140: oGetAddrLocal 1
 142: oPushResult
 143: oSetResult 19
 145: oPushResult
 146: LAST_ID
 147: oPushResult
 148: oCall 10874
 150: oPop 2
 152: oAssign
 153: oGetLocal 1
 155: oPushResult
 156: oSetResult 21
 158: oPushResult
 159: oGetGlobal 5
 161: oPushResult
 162: oNodeSet
 163: oPop 3
 165: oGetLocal 1
 167: oPushResult
 168: oScopeDeclareAlloc
 169: oPop 1
 171: oInput 15
 173: oJumpForward 178
 175: Choice Lookup Table
          14    103
 178: oInput 5
 180: oGetLocal 4
 182: oPushResult
 183: oCall 333
 185: oPop 1
 187: oInputChoice 198
 189: oGetLocal 4
 191: oPushResult
 192: oCall 306
 194: oPop 1
 196: oJumpForward 201
 198: Choice Lookup Table
          57    189
 201: oGetLocal 4
 203: oPushResult
 204: oCall 569
 206: oPop 1
 208: oSetResult 0
 210: oPushResult
 211: oSetResult 0
 213: oPushResult
 214: oScopeBegin
 215: oPop 2
 217: oGetAddrGlobal 2
 219: oPushResult
 220: oScopeCurrent
 221: oAssign
 222: oSetResult 0
 224: oPushResult
 225: oSetResult 1
 227: oPushResult
 228: oScopeBegin
 229: oPop 2
 231: oScopeCurrent
 232: oPushResult
 233: oSetResult 16
 235: oPushResult
 236: oGetGlobal 2
 238: oPushResult
 239: oNodeSet
 240: oPop 3
 242: oGetAddrGlobal 3
 244: oPushResult
 245: oScopeCurrent
 246: oAssign
 247: oGetLocal 4
 249: oPushResult
 250: oSetResult 7
 252: oPushResult
 253: oGetGlobal 3
 255: oPushResult
 256: oNodeSet
 257: oPop 3
 259: oScopeEnd
 260: oSetResult 20
 262: oPushResult
 263: oCall 1526
 265: oPop 1
 267: oGetGlobal 3
 269: oPushResult
 270: oScopeEnter
 271: oPop 1
 273: oGetAddrLocal 5
 275: oPushResult
 276: oSetResult 1
 278: oAssign
 279: oGetLocal 3
 281: oPushResult
 282: oGetGlobal 2
 284: oPushResult
 285: oGetLocal 5
 287: oPushResult
 288: oCall 1847
 290: oPop 3
 292: oScopeEnd
 293: oInput 20
 295: oCall 1582
 297: oScopeEnd
 298: oGetLocal 4
 300: oPushResult
 301: oCall 631
 303: oPop 1
 305: oReturn
 306: oLocalSpace 0
 308: oInput 0
 310: LAST_ID
 311: oPushResult
 312: oGetParam 1
 314: oPushResult
 315: oCall 430
 317: oPop 2
 319: oInputChoice 323
 321: oJumpForward 328
 323: Choice Lookup Table
          13    321
 326: oJumpForward 330
 328: oJumpBack 308
 330: oInput 5
 332: oReturn
 333: oLocalSpace 0
 335: oGetParam 1
 337: oPushResult
 338: oSetResult 4
 340: oPushResult
 341: oNodeGetInt
 342: oPop 2
 344: oPushResult
 345: oGetGlobal 4
 347: oPushResult
 348: equal
 349: oPop 2
 351: oChoice 356
 353: oReturn
 354: oJumpForward 359
 356: Choice Lookup Table
           1    353
 359: oGetGlobal 4
 361: oPushResult
 362: oGetParam 1
 364: oPushResult
 365: oCall 430
 367: oPop 2
 369: oReturn
 370: oLocalSpace 0
 372: oGetParam 1
 374: oPushResult
 375: oSetResult 4
 377: oPushResult
 378: oNodeGetInt
 379: oPop 2
 381: oPushResult
 382: oGetGlobal 4
 384: oPushResult
 385: equal
 386: oPop 2
 388: oChoice 426
 390: oGetAddrGlobal 19
 392: oPushResult
 393: oScopeCurrent
 394: oPushResult
 395: oSetResult 15
 397: oPushResult
 398: oSetResult 4
 400: oPushResult
 401: oId_ShortStringAppendShortString
 402: oPushResult
 403: oNodeFind
 404: oPop 4
 406: oAssign
 407: oGetAddrGlobal 20
 409: oPushResult
 410: oScopeCurrent
 411: oPushResult
 412: oSetResult 15
 414: oPushResult
 415: oSetResult 4
 417: oPushResult
 418: oId_ShortStringAppendChar
 419: oPushResult
 420: oNodeFind
 421: oPop 4
 423: oAssign
 424: oJumpForward 429
 426: Choice Lookup Table
           1    390
 429: oReturn
 430: oLocalSpace 2
 432: oGetAddrLocal 1
 434: oPushResult
 435: oGetParam 2
 437: oPushResult
 438: oCall 710
 440: oPop 1
 442: oAssign
 443: oGetLocal 1
 445: oPushResult
 446: oSetResult 0
 448: oPushResult
 449: equal_node
 450: oPop 2
 452: oChoice 522
 454: oGetParam 1
 456: oPushResult
 457: oSetResult 5
 459: oPushResult
 460: oGetLocal 1
 462: oPushResult
 463: oNodeAddLast
 464: oPop 3
 466: oGetAddrLocal 2
 468: oPushResult
 469: oSetResult 10
 471: oPushResult
 472: oNodeNew
 473: oPop 1
 475: oAssign
 476: oGetLocal 2
 478: oPushResult
 479: oSetResult 4
 481: oPushResult
 482: oGetLocal 1
 484: oPushResult
 485: oSetResult 4
 487: oPushResult
 488: oNodeGetInt
 489: oPop 2
 491: oPushResult
 492: oNodeSetInt
 493: oPop 3
 495: oGetLocal 2
 497: oPushResult
 498: oSetResult 9
 500: oPushResult
 501: oGetLocal 1
 503: oPushResult
 504: oSetResult 9
 506: oPushResult
 507: oNodeGet
 508: oPop 2
 510: oPushResult
 511: oNodeSet
 512: oPop 3
 514: oGetLocal 2
 516: oPushResult
 517: oScopeDeclare
 518: oPop 1
 520: oJumpForward 525
 522: Choice Lookup Table
           0    454
 525: oReturn
 526: oLocalSpace 1
 528: oGetFromParam 1
 530: oPushResult
 531: oNodeType
 532: oPop 1
 534: oChoice 565
 536: oGetAddrLocal 1
 538: oPushResult
 539: oGetFromParam 1
 541: oPushResult
 542: oSetResult 9
 544: oPushResult
 545: oNodeGet
 546: oPop 2
 548: oAssign
 549: oInput 20
 551: oInput 0
 553: oGetParam 1
 555: oPushResult
 556: oGetLocal 1
 558: oPushResult
 559: oScopeFindRequireInScope
 560: oPop 1
 562: oAssign
 563: oJumpForward 568
 565: Choice Lookup Table
          10    536
 568: oReturn
 569: oLocalSpace 2
 571: oGetAddrLocal 1
 573: oPushResult
 574: oGetParam 1
 576: oPushResult
 577: oSetResult 5
 579: oPushResult
 580: oNodeGetIter
 581: oPop 2
 583: oAssign
 584: oGetAddrLocal 2
 586: oPushResult
 587: oGetLocal 1
 589: oPushResult
 590: oNodeIterValue
 591: oPop 1
 593: oAssign
 594: oGetLocal 2
 596: oPushResult
 597: oNodeNull
 598: oPop 1
 600: oChoice 617
 602: oGetLocal 2
 604: oPushResult
 605: oSetResult 9
 607: oPushResult
 608: oNodeGet
 609: oPop 2
 611: oPushResult
 612: oScopeEnter
 613: oPop 1
 615: oJumpForward 622
 617: Choice Lookup Table
           0    602
 620: oJumpForward 630
 622: oGetAddrLocal 1
 624: oPushResult
 625: oNodeIterNext
 626: oPop 1
 628: oJumpBack 584
 630: oReturn
 631: oLocalSpace 2
 633: oGetAddrLocal 1
 635: oPushResult
 636: oGetParam 1
 638: oPushResult
 639: oSetResult 5
 641: oPushResult
 642: oNodeGetIterLast
 643: oPop 2
 645: oAssign
 646: oGetAddrLocal 2
 648: oPushResult
 649: oGetLocal 1
 651: oPushResult
 652: oNodeIterValue
 653: oPop 1
 655: oAssign
 656: oGetLocal 2
 658: oPushResult
 659: oNodeNull
 660: oPop 1
 662: oChoice 696
 664: oScopeCurrent
 665: oPushResult
 666: oGetLocal 2
 668: oPushResult
 669: oSetResult 9
 671: oPushResult
 672: oNodeGet
 673: oPop 2
 675: oPushResult
 676: oNodeEqual
 677: oPop 2
 679: oChoice 687
 681: oJumpForward 693
 683: oError 25
 685: oJumpForward 693
 687: Choice Lookup Table
           0    683
           1    681
 692: oEndChoice
 693: oScopeEnd
 694: oJumpForward 701
 696: Choice Lookup Table
           0    664
 699: oJumpForward 709
 701: oGetAddrLocal 1
 703: oPushResult
 704: oNodeIterPrev
 705: oPop 1
 707: oJumpBack 646
 709: oReturn
 710: oLocalSpace 2
 712: oGetAddrLocal 1
 714: oPushResult
 715: oGetGlobal 1
 717: oPushResult
 718: oSetResult 1
 720: oPushResult
 721: oSetResult 4
 723: oPushResult
 724: oGetParam 1
 726: oPushResult
 727: oNodeFind
 728: oPop 4
 730: oAssign
 731: oGetLocal 1
 733: oPushResult
 734: oSetResult 0
 736: oPushResult
 737: equal_node
 738: oPop 2
 740: oChoice 747
 742: oGetLocal 1
 744: oReturn
 745: oJumpForward 750
 747: Choice Lookup Table
           0    742
 750: oGetAddrLocal 2
 752: oPushResult
 753: oGetParam 1
 755: oPushResult
 756: oIncludeUnitFile
 757: oPop 1
 759: oAssign
 760: oGetLocal 2
 762: oChoice 771
 764: oError 24
 766: oSetResult 0
 768: oReturn
 769: oJumpForward 774
 771: Choice Lookup Table
           0    764
 774: oGetAddrLocal 1
 776: oPushResult
 777: oCall 785
 779: oAssign
 780: oIncludeEnd
 781: oGetLocal 1
 783: oReturn
 784: oReturn
 785: oLocalSpace 2
 787: oInput 58
 789: oInput 0
 791: oGetAddrLocal 1
 793: oPushResult
 794: oSetResult 5
 796: oPushResult
 797: oNodeNew
 798: oPop 1
 800: oAssign
 801: oGetLocal 1
 803: oPushResult
 804: oSetResult 4
 806: oPushResult
 807: LAST_ID
 808: oPushResult
 809: oNodeSetInt
 810: oPop 3
 812: oGetAddrLocal 2
 814: oPushResult
 815: oSetResult 6
 817: oPushResult
 818: oNodeNew
 819: oPop 1
 821: oAssign
 822: oGetLocal 2
 824: oPushResult
 825: oSetResult 4
 827: oPushResult
 828: LAST_ID
 829: oPushResult
 830: oNodeSetInt
 831: oPop 3
 833: oGetLocal 1
 835: oPushResult
 836: oSetResult 8
 838: oPushResult
 839: oGetLocal 2
 841: oPushResult
 842: oNodeSet
 843: oPop 3
 845: oInput 5
 847: oInput 59
 849: oGetLocal 1
 851: oPushResult
 852: oCall 333
 854: oPop 1
 856: oInputChoice 867
 858: oGetLocal 1
 860: oPushResult
 861: oCall 306
 863: oPop 1
 865: oJumpForward 870
 867: Choice Lookup Table
          57    858
 870: oGetLocal 1
 872: oPushResult
 873: oCall 569
 875: oPop 1
 877: oSetResult 0
 879: oPushResult
 880: oSetResult 0
 882: oPushResult
 883: oScopeBegin
 884: oPop 2
 886: oGetLocal 1
 888: oPushResult
 889: oSetResult 9
 891: oPushResult
 892: oScopeCurrent
 893: oPushResult
 894: oNodeSet
 895: oPop 3
 897: oGetAddrGlobal 2
 899: oPushResult
 900: oScopeCurrent
 901: oAssign
 902: oSetResult 0
 904: oPushResult
 905: oSetResult 1
 907: oPushResult
 908: oScopeBegin
 909: oPop 2
 911: oGetAddrGlobal 3
 913: oPushResult
 914: oScopeCurrent
 915: oAssign
 916: oGetLocal 1
 918: oPushResult
 919: oSetResult 13
 921: oPushResult
 922: oGetGlobal 3
 924: oPushResult
 925: oNodeSet
 926: oPop 3
 928: oScopeEnd
 929: oGetLocal 1
 931: oPushResult
 932: oCall 1120
 934: oPop 1
 936: oScopeEnd
 937: oInput 60
 939: oGetLocal 2
 941: oPushResult
 942: oCall 333
 944: oPop 1
 946: oInputChoice 957
 948: oGetLocal 2
 950: oPushResult
 951: oCall 306
 953: oPop 1
 955: oJumpForward 960
 957: Choice Lookup Table
          57    948
 960: oGetLocal 2
 962: oPushResult
 963: oCall 569
 965: oPop 1
 967: oGetLocal 1
 969: oPushResult
 970: oSetResult 9
 972: oPushResult
 973: oNodeGet
 974: oPop 2
 976: oPushResult
 977: oScopeEnter
 978: oPop 1
 980: oSetResult 0
 982: oPushResult
 983: oSetResult 0
 985: oPushResult
 986: oScopeBegin
 987: oPop 2
 989: oGetLocal 1
 991: oPushResult
 992: oSetResult 10
 994: oPushResult
 995: oScopeCurrent
 996: oPushResult
 997: oNodeSet
 998: oPop 3
1000: oScopeCurrent
1001: oPushResult
1002: oSetResult 16
1004: oPushResult
1005: oGetLocal 1
1007: oPushResult
1008: oSetResult 9
1010: oPushResult
1011: oNodeGet
1012: oPop 2
1014: oPushResult
1015: oNodeSet
1016: oPop 3
1018: oGetAddrGlobal 2
1020: oPushResult
1021: oScopeCurrent
1022: oAssign
1023: oGetLocal 1
1025: oPushResult
1026: oCall 1212
1028: oPop 1
1030: oInputChoice 1044
1032: oGetLocal 1
1034: oPushResult
1035: oSetResult 1
1037: oPushResult
1038: oCall 1222
1040: oPop 2
1042: oJumpForward 1057
1044: Choice Lookup Table
          61   1032
1047: oGetLocal 1
1049: oPushResult
1050: oSetResult 0
1052: oPushResult
1053: oCall 1222
1055: oPop 2
1057: oInputChoice 1071
1059: oGetLocal 1
1061: oPushResult
1062: oSetResult 1
1064: oPushResult
1065: oCall 1408
1067: oPop 2
1069: oJumpForward 1084
1071: Choice Lookup Table
          62   1059
1074: oGetLocal 1
1076: oPushResult
1077: oSetResult 0
1079: oPushResult
1080: oCall 1408
1082: oPop 2
1084: oInput 36
1086: oInput 20
1088: oScopeEnd
1089: oScopeEnd
1090: oGetLocal 2
1092: oPushResult
1093: oCall 631
1095: oPop 1
1097: oGetLocal 1
1099: oPushResult
1100: oCall 631
1102: oPop 1
1104: oGetGlobal 1
1106: oPushResult
1107: oSetResult 1
1109: oPushResult
1110: oGetLocal 1
1112: oPushResult
1113: oNodeAddLast
1114: oPop 3
1116: oGetLocal 1
1118: oReturn
1119: oReturn
1120: oLocalSpace 2
1122: oInputChoice 1189
1124: oCall 3120
1126: oJumpForward 1202
1128: oCall 3675
1130: oJumpForward 1202
1132: oSetResult 20
1134: oPushResult
1135: oCall 3731
1137: oPop 1
1139: oJumpForward 1202
1141: oGetAddrLocal 1
1143: oPushResult
1144: oCall 2087
1146: oAssign
1147: oInputChoice 1160
1149: oGetLocal 1
1151: oPushResult
1152: oCall 2025
1154: oPop 1
1156: oInput 5
1158: oJumpForward 1163
1160: Choice Lookup Table
          68   1149
1163: oJumpForward 1202
1165: oGetAddrLocal 2
1167: oPushResult
1168: oCall 2461
1170: oAssign
1171: oInputChoice 1184
1173: oGetLocal 2
1175: oPushResult
1176: oCall 2025
1178: oPop 1
1180: oInput 5
1182: oJumpForward 1187
1184: Choice Lookup Table
          68   1173
1187: oJumpForward 1202
1189: Choice Lookup Table
          30   1165
          29   1141
          33   1132
          32   1128
          31   1124
1200: oJumpForward 1204
1202: oJumpBack 1122
1204: oGetParam 1
1206: oPushResult
1207: oCall 370
1209: oPop 1
1211: oReturn
1212: oLocalSpace 0
1214: oSetResult 20
1216: oPushResult
1217: oCall 1526
1219: oPop 1
1221: oReturn
1222: oLocalSpace 5
1224: oGetAddrLocal 1
1226: oPushResult
1227: oLabelNew
1228: oAssign
1229: oEmit 69
1231: oGetLocal 1
1233: oPushResult
1234: oEmitLabel
1235: oPop 1
1237: oGetParam 2
1239: oPushResult
1240: oSetResult 11
1242: oPushResult
1243: oGetLocal 1
1245: oPushResult
1246: oNodeSetLabel
1247: oPop 3
1249: oEmit 65
1251: oGetAddrLocal 2
1253: oPushResult
1254: Here
1255: oAssign
1256: oEmit 82
1258: oGetAddrLocal 3
1260: oPushResult
1261: oGetParam 2
1263: oPushResult
1264: oSetResult 9
1266: oPushResult
1267: oNodeGet
1268: oPop 2
1270: oAssign
1271: oGetAddrLocal 4
1273: oPushResult
1274: oGetLocal 3
1276: oPushResult
1277: oSetResult 19
1279: oPushResult
1280: oNodeGetCode
1281: oPop 2
1283: oAssign
1284: oGetLocal 4
1286: oPushResult
1287: oEmitCode
1288: oPop 1
1290: oGetLocal 3
1292: oPushResult
1293: oSetResult 19
1295: oPushResult
1296: oSetResult 0
1298: oPushResult
1299: oNodeSetCode
1300: oPop 3
1302: oGetAddrLocal 3
1304: oPushResult
1305: oGetParam 2
1307: oPushResult
1308: oSetResult 10
1310: oPushResult
1311: oNodeGet
1312: oPop 2
1314: oAssign
1315: oGetAddrLocal 4
1317: oPushResult
1318: oGetLocal 3
1320: oPushResult
1321: oSetResult 19
1323: oPushResult
1324: oNodeGetCode
1325: oPop 2
1327: oAssign
1328: oGetLocal 4
1330: oPushResult
1331: oEmitCode
1332: oPop 1
1334: oGetLocal 3
1336: oPushResult
1337: oSetResult 19
1339: oPushResult
1340: oSetResult 0
1342: oPushResult
1343: oNodeSetCode
1344: oPop 3
1346: oGetParam 2
1348: oPushResult
1349: oSetResult 13
1351: oPushResult
1352: oNodeGet
1353: oPop 2
1355: oPushResult
1356: oScopeEnter
1357: oPop 1
1359: oGetParam 1
1361: oChoice 1380
1363: oCall 9288
1365: oInputChoice 1371
1367: oCall 9288
1369: oJumpForward 1376
1371: Choice Lookup Table
           5   1367
1374: oJumpForward 1378
1376: oJumpBack 1365
1378: oJumpForward 1383
1380: Choice Lookup Table
           1   1363
1383: oEmit 64
1385: oGetAddrLocal 5
1387: oPushResult
1388: oScopeCurrent
1389: oPushResult
1390: oSetResult 17
1392: oPushResult
1393: oNodeGetInt
1394: oPop 2
1396: oAssign
1397: oGetLocal 2
1399: oPushResult
1400: oGetLocal 5
1402: oPushResult
1403: oPatch
1404: oPop 2
1406: oScopeEnd
1407: oReturn
1408: oLocalSpace 3
1410: oGetAddrLocal 1
1412: oPushResult
1413: oLabelNew
1414: oAssign
1415: oEmit 69
1417: oGetLocal 1
1419: oPushResult
1420: oEmitLabel
1421: oPop 1
1423: oGetParam 2
1425: oPushResult
1426: oSetResult 12
1428: oPushResult
1429: oGetLocal 1
1431: oPushResult
1432: oNodeSetLabel
1433: oPop 3
1435: oEmit 65
1437: oGetAddrLocal 2
1439: oPushResult
1440: Here
1441: oAssign
1442: oEmit 82
1444: oSetResult 0
1446: oPushResult
1447: oSetResult 1
1449: oPushResult
1450: oScopeBegin
1451: oPop 2
1453: oGetParam 1
1455: oChoice 1474
1457: oCall 9288
1459: oInputChoice 1465
1461: oCall 9288
1463: oJumpForward 1470
1465: Choice Lookup Table
           5   1461
1468: oJumpForward 1472
1470: oJumpBack 1459
1472: oJumpForward 1477
1474: Choice Lookup Table
           1   1457
1477: oEmit 64
1479: oGetAddrLocal 3
1481: oPushResult
1482: oScopeCurrent
1483: oPushResult
1484: oSetResult 17
1486: oPushResult
1487: oNodeGetInt
1488: oPop 2
1490: oAssign
1491: oGetLocal 2
1493: oPushResult
1494: oGetLocal 3
1496: oPushResult
1497: oPatch
1498: oPop 2
1500: oScopeEnd
1501: oReturn
1502: oLocalSpace 0
1504: oGetParam 2
1506: oPushResult
1507: oCall 1526
1509: oPop 1
1511: oGetParam 1
1513: oPushResult
1514: oScopeCurrent
1515: oPushResult
1516: oSetResult 0
1518: oPushResult
1519: oCall 1847
1521: oPop 3
1523: oCall 1582
1525: oReturn
1526: oLocalSpace 0
1528: oInputChoice 1559
1530: oCall 3120
1532: oJumpForward 1574
1534: oCall 3675
1536: oJumpForward 1574
1538: oGetParam 1
1540: oPushResult
1541: oCall 3731
1543: oPop 1
1545: oJumpForward 1574
1547: oCall 3965
1549: oJumpForward 1574
1551: oCall 2343
1553: oJumpForward 1574
1555: oCall 2778
1557: oJumpForward 1574
1559: Choice Lookup Table
          30   1555
          29   1551
          34   1547
          33   1538
          32   1534
          31   1530
1572: oJumpForward 1576
1574: oJumpBack 1528
1576: oCall 1579
1578: oReturn
1579: oLocalSpace 0
1581: oReturn
1582: oLocalSpace 2
1584: oGetAddrLocal 1
1586: oPushResult
1587: oScopeCurrent
1588: oPushResult
1589: oSetResult 15
1591: oPushResult
1592: oNodeGetIter
1593: oPop 2
1595: oAssign
1596: oGetAddrLocal 2
1598: oPushResult
1599: oGetLocal 1
1601: oPushResult
1602: oNodeIterValue
1603: oPop 1
1605: oAssign
1606: oGetLocal 2
1608: oPushResult
1609: oNodeNull
1610: oPop 1
1612: oChoice 1616
1614: oJumpForward 1621
1616: Choice Lookup Table
           0   1614
1619: oJumpForward 1676
1621: oGetLocal 2
1623: oPushResult
1624: oNodeType
1625: oPop 1
1627: oChoice 1665
1629: oGetLocal 2
1631: oPushResult
1632: oSetResult 34
1634: oPushResult
1635: oNodeGetBoolean
1636: oPop 2
1638: oChoice 1660
1640: oGetLocal 2
1642: oPushResult
1643: oSetResult 28
1645: oPushResult
1646: oNodeGetBoolean
1647: oPop 2
1649: oChoice 1655
1651: oError 27
1653: oJumpForward 1658
1655: Choice Lookup Table
           1   1651
1658: oJumpForward 1663
1660: Choice Lookup Table
           0   1640
1663: oJumpForward 1668
1665: Choice Lookup Table
          25   1629
1668: oGetAddrLocal 1
1670: oPushResult
1671: oNodeIterNext
1672: oPop 1
1674: oJumpBack 1596
1676: oReturn
1677: oLocalSpace 2
1679: oGetAddrLocal 1
1681: oPushResult
1682: oGetGlobal 1
1684: oPushResult
1685: oSetResult 1
1687: oPushResult
1688: oNodeGetIter
1689: oPop 2
1691: oAssign
1692: oGetAddrLocal 2
1694: oPushResult
1695: oGetLocal 1
1697: oPushResult
1698: oNodeIterValue
1699: oPop 1
1701: oAssign
1702: oGetLocal 2
1704: oPushResult
1705: oNodeNull
1706: oPop 1
1708: oChoice 1753
1710: oJumpForward 1761
1712: oJumpForward 1759
1714: oEmit 59
1716: oSetResult 0
1718: oPushResult
1719: oEmitInt
1720: oPop 1
1722: oEmit 62
1724: oGetLocal 2
1726: oPushResult
1727: oSetResult 11
1729: oPushResult
1730: oNodeGetLabel
1731: oPop 2
1733: oPushResult
1734: oEmitLabel
1735: oPop 1
1737: oEmit 61
1739: oSetResult 0
1741: oPushResult
1742: oEmitInt
1743: oPop 1
1745: oGetAddrLocal 1
1747: oPushResult
1748: oNodeIterNext
1749: oPop 1
1751: oJumpForward 1759
1753: Choice Lookup Table
           0   1714
           1   1710
1758: oEndChoice
1759: oJumpBack 1692
1761: oReturn
1762: oLocalSpace 2
1764: oGetAddrLocal 1
1766: oPushResult
1767: oGetGlobal 1
1769: oPushResult
1770: oSetResult 1
1772: oPushResult
1773: oNodeGetIterLast
1774: oPop 2
1776: oAssign
1777: oGetAddrLocal 2
1779: oPushResult
1780: oGetLocal 1
1782: oPushResult
1783: oNodeIterValue
1784: oPop 1
1786: oAssign
1787: oGetLocal 2
1789: oPushResult
1790: oNodeNull
1791: oPop 1
1793: oChoice 1838
1795: oJumpForward 1846
1797: oJumpForward 1844
1799: oEmit 59
1801: oSetResult 0
1803: oPushResult
1804: oEmitInt
1805: oPop 1
1807: oEmit 62
1809: oGetLocal 2
1811: oPushResult
1812: oSetResult 12
1814: oPushResult
1815: oNodeGetLabel
1816: oPop 2
1818: oPushResult
1819: oEmitLabel
1820: oPop 1
1822: oEmit 61
1824: oSetResult 0
1826: oPushResult
1827: oEmitInt
1828: oPop 1
1830: oGetAddrLocal 1
1832: oPushResult
1833: oNodeIterPrev
1834: oPop 1
1836: oJumpForward 1844
1838: Choice Lookup Table
           0   1799
           1   1795
1843: oEndChoice
1844: oJumpBack 1777
1846: oReturn
1847: oLocalSpace 3
1849: oEmit 69
1851: oGetParam 3
1853: oPushResult
1854: oEmitLabel
1855: oPop 1
1857: oEmit 65
1859: oGetAddrLocal 1
1861: oPushResult
1862: Here
1863: oAssign
1864: oEmit 82
1866: oGetParam 1
1868: oChoice 1874
1870: oCall 1677
1872: oJumpForward 1877
1874: Choice Lookup Table
           1   1870
1877: oGetAddrLocal 2
1879: oPushResult
1880: oGetParam 2
1882: oPushResult
1883: oSetResult 19
1885: oPushResult
1886: oNodeGetCode
1887: oPop 2
1889: oAssign
1890: oGetLocal 2
1892: oPushResult
1893: oEmitCode
1894: oPop 1
1896: oGetParam 2
1898: oPushResult
1899: oSetResult 19
1901: oPushResult
1902: oSetResult 0
1904: oPushResult
1905: oNodeSetCode
1906: oPop 3
1908: oCall 9288
1910: oGetParam 1
1912: oChoice 1918
1914: oCall 1762
1916: oJumpForward 1921
1918: Choice Lookup Table
           1   1914
1921: oEmit 64
1923: oGetAddrLocal 3
1925: oPushResult
1926: oScopeCurrent
1927: oPushResult
1928: oSetResult 17
1930: oPushResult
1931: oNodeGetInt
1932: oPop 2
1934: oAssign
1935: oGetLocal 1
1937: oPushResult
1938: oGetLocal 3
1940: oPushResult
1941: oPatch
1942: oPop 2
1944: oReturn
1945: oLocalSpace 0
1947: oInputChoice 1965
1949: oGetParam 1
1951: oPushResult
1952: oSetResult 27
1954: oPushResult
1955: oSetResult 1
1957: oPushResult
1958: oNodeSetBoolean
1959: oPop 3
1961: oInput 5
1963: oJumpForward 1970
1965: Choice Lookup Table
          70   1949
1968: oJumpForward 1972
1970: oJumpBack 1947
1972: oReturn
1973: oLocalSpace 1
1975: oGetAddrLocal 1
1977: oPushResult
1978: oGetParam 1
1980: oPushResult
1981: oSetResult 19
1983: oPushResult
1984: oNodeGetCode
1985: oPop 2
1987: oAssign
1988: oGetLocal 1
1990: oPushResult
1991: oSetResult 0
1993: oPushResult
1994: equal_code
1995: oPop 2
1997: oChoice 2018
1999: oGetAddrLocal 1
2001: oPushResult
2002: oCodeNew
2003: oAssign
2004: oGetParam 1
2006: oPushResult
2007: oSetResult 19
2009: oPushResult
2010: oGetLocal 1
2012: oPushResult
2013: oNodeSetCode
2014: oPop 3
2016: oJumpForward 2021
2018: Choice Lookup Table
           1   1999
2021: oGetLocal 1
2023: oReturn
2024: oReturn
2025: oLocalSpace 0
2027: oGetParam 1
2029: oPushResult
2030: oCall 10624
2032: oPop 1
2034: oPushResult
2035: equal_zero
2036: oPop 1
2038: oChoice 2044
2040: oError 23
2042: oJumpForward 2047
2044: Choice Lookup Table
           0   2040
2047: oGetParam 1
2049: oPushResult
2050: oSetResult 25
2052: oPushResult
2053: oSetResult 1
2055: oPushResult
2056: oNodeSetBoolean
2057: oPop 3
2059: oInputChoice 2083
2061: oInputChoice 2078
2063: oInput 2
2065: oGetParam 1
2067: oPushResult
2068: oSetResult 26
2070: oPushResult
2071: CURRENT_STRLIT
2072: oPushResult
2073: oNodeSetString
2074: oPop 3
2076: oJumpForward 2081
2078: Choice Lookup Table
          69   2063
2081: oJumpForward 2086
2083: Choice Lookup Table
           2   2061
2086: oReturn
2087: oLocalSpace 6
2089: oInput 0
2091: oGetAddrLocal 1
2093: oPushResult
2094: oSetResult 0
2096: oAssign
2097: oGetAddrLocal 2
2099: oPushResult
2100: oScopeFindInCurrentScope
2101: oAssign
2102: oGetLocal 2
2104: oPushResult
2105: oNodeNull
2106: oPop 1
2108: oChoice 2226
2110: oGetAddrLocal 2
2112: oPushResult
2113: oSetResult 12
2115: oPushResult
2116: LAST_ID
2117: oPushResult
2118: oCall 10874
2120: oPop 2
2122: oAssign
2123: oGetLocal 2
2125: oPushResult
2126: oSetResult 22
2128: oPushResult
2129: oLabelNew
2130: oPushResult
2131: oNodeSetLabel
2132: oPop 3
2134: oJumpForward 2232
2136: oGetAddrLocal 1
2138: oPushResult
2139: oSetResult 1
2141: oAssign
2142: oGetLocal 2
2144: oPushResult
2145: oSetResult 24
2147: oPushResult
2148: oNodeGetBoolean
2149: oPop 2
2151: oChoice 2157
2153: oError 21
2155: oJumpForward 2160
2157: Choice Lookup Table
           1   2153
2160: oGetLocal 2
2162: oPushResult
2163: oSetResult 25
2165: oPushResult
2166: oNodeGetBoolean
2167: oPop 2
2169: oChoice 2175
2171: oError 21
2173: oJumpForward 2178
2175: Choice Lookup Table
           1   2171
2178: oGetLocal 2
2180: oPushResult
2181: oNodeType
2182: oPop 1
2184: oChoice 2188
2186: oJumpForward 2193
2188: Choice Lookup Table
          12   2186
2191: oError 21
2193: oGetLocal 2
2195: oPushResult
2196: oSetResult 29
2198: oPushResult
2199: oGetLocal 2
2201: oPushResult
2202: oSetResult 23
2204: oPushResult
2205: oNodeGet
2206: oPop 2
2208: oPushResult
2209: oNodeSet
2210: oPop 3
2212: oGetLocal 2
2214: oPushResult
2215: oSetResult 23
2217: oPushResult
2218: oSetResult 0
2220: oPushResult
2221: oNodeSet
2222: oPop 3
2224: oJumpForward 2232
2226: Choice Lookup Table
           0   2136
           1   2110
2231: oEndChoice
2232: oGetAddrLocal 3
2234: oPushResult
2235: oCall 10612
2237: oAssign
2238: oGetAddrLocal 4
2240: oPushResult
2241: oGetLocal 3
2243: oPushResult
2244: oSetResult 0
2246: oPushResult
2247: greater
2248: oPop 2
2250: oAssign
2251: oGetAddrLocal 3
2253: oPushResult
2254: inc
2255: oPop 1
2257: oGetLocal 3
2259: oPushResult
2260: oSetResult 2
2262: oPushResult
2263: oScopeBegin
2264: oPop 2
2266: oGetAddrLocal 5
2268: oPushResult
2269: oScopeCurrent
2270: oAssign
2271: oGetLocal 4
2273: oChoice 2292
2275: oGetAddrLocal 6
2277: oPushResult
2278: oGetGlobal 6
2280: oPushResult
2281: oCall 10902
2283: oPop 1
2285: oPushResult
2286: oScopeAllocType
2287: oPop 1
2289: oAssign
2290: oJumpForward 2295
2292: Choice Lookup Table
           1   2275
2295: oCall 2896
2297: oGetLocal 2
2299: oPushResult
2300: oSetResult 23
2302: oPushResult
2303: oGetLocal 5
2305: oPushResult
2306: oNodeSet
2307: oPop 3
2309: oScopeEnd
2310: oInput 5
2312: oGetLocal 1
2314: oChoice 2326
2316: oGetLocal 2
2318: oPushResult
2319: oScopeDeclare
2320: oPop 1
2322: oJumpForward 2332
2324: oJumpForward 2332
2326: Choice Lookup Table
           1   2324
           0   2316
2331: oEndChoice
2332: oGetLocal 2
2334: oPushResult
2335: oCall 1945
2337: oPop 1
2339: oGetLocal 2
2341: oReturn
2342: oReturn
2343: oLocalSpace 4
2345: oGetAddrLocal 1
2347: oPushResult
2348: oCall 2087
2350: oAssign
2351: oInputChoice 2364
2353: oJumpForward 2458
2355: oGetLocal 1
2357: oPushResult
2358: oCall 2025
2360: oPop 1
2362: oJumpForward 2458
2364: Choice Lookup Table
          68   2355
          67   2353
2369: oGetAddrLocal 2
2371: oPushResult
2372: oGetLocal 1
2374: oPushResult
2375: oSetResult 23
2377: oPushResult
2378: oNodeGet
2379: oPop 2
2381: oAssign
2382: oGetLocal 2
2384: oPushResult
2385: oScopeEnter
2386: oPop 1
2388: oGetAddrLocal 3
2390: oPushResult
2391: oGetLocal 2
2393: oPushResult
2394: oSetResult 14
2396: oPushResult
2397: oNodeGetInt
2398: oPop 2
2400: oAssign
2401: oGetLocal 3
2403: oPushResult
2404: oSetResult 1
2406: oPushResult
2407: oScopeBegin
2408: oPop 2
2410: oGetLocal 1
2412: oPushResult
2413: oSetResult 6
2415: oPushResult
2416: oScopeCurrent
2417: oPushResult
2418: oNodeSet
2419: oPop 3
2421: oGetAddrLocal 4
2423: oPushResult
2424: oGetLocal 1
2426: oPushResult
2427: oSetResult 22
2429: oPushResult
2430: oNodeGetLabel
2431: oPop 2
2433: oAssign
2434: oSetResult 21
2436: oPushResult
2437: oGetLocal 4
2439: oPushResult
2440: oCall 1502
2442: oPop 2
2444: oGetLocal 1
2446: oPushResult
2447: oSetResult 24
2449: oPushResult
2450: oSetResult 1
2452: oPushResult
2453: oNodeSetBoolean
2454: oPop 3
2456: oScopeEnd
2457: oScopeEnd
2458: oInput 5
2460: oReturn
2461: oLocalSpace 8
2463: oInput 0
2465: oGetAddrLocal 1
2467: oPushResult
2468: oSetResult 0
2470: oAssign
2471: oGetAddrLocal 2
2473: oPushResult
2474: oScopeFindInCurrentScope
2475: oAssign
2476: oGetLocal 2
2478: oPushResult
2479: oNodeNull
2480: oPop 1
2482: oChoice 2613
2484: oGetAddrLocal 2
2486: oPushResult
2487: oSetResult 13
2489: oPushResult
2490: LAST_ID
2491: oPushResult
2492: oCall 10874
2494: oPop 2
2496: oAssign
2497: oGetLocal 2
2499: oPushResult
2500: oSetResult 22
2502: oPushResult
2503: oLabelNew
2504: oPushResult
2505: oNodeSetLabel
2506: oPop 3
2508: oJumpForward 2619
2510: oGetAddrLocal 1
2512: oPushResult
2513: oSetResult 1
2515: oAssign
2516: oGetLocal 2
2518: oPushResult
2519: oSetResult 24
2521: oPushResult
2522: oNodeGetBoolean
2523: oPop 2
2525: oChoice 2531
2527: oError 21
2529: oJumpForward 2534
2531: Choice Lookup Table
           1   2527
2534: oGetLocal 2
2536: oPushResult
2537: oNodeType
2538: oPop 1
2540: oChoice 2544
2542: oJumpForward 2549
2544: Choice Lookup Table
          13   2542
2547: oError 21
2549: oGetLocal 2
2551: oPushResult
2552: oSetResult 29
2554: oPushResult
2555: oGetLocal 2
2557: oPushResult
2558: oSetResult 23
2560: oPushResult
2561: oNodeGet
2562: oPop 2
2564: oPushResult
2565: oNodeSet
2566: oPop 3
2568: oGetLocal 2
2570: oPushResult
2571: oSetResult 23
2573: oPushResult
2574: oSetResult 0
2576: oPushResult
2577: oNodeSet
2578: oPop 3
2580: oGetLocal 2
2582: oPushResult
2583: oSetResult 30
2585: oPushResult
2586: oGetLocal 2
2588: oPushResult
2589: oSetResult 21
2591: oPushResult
2592: oNodeGet
2593: oPop 2
2595: oPushResult
2596: oNodeSet
2597: oPop 3
2599: oGetLocal 2
2601: oPushResult
2602: oSetResult 21
2604: oPushResult
2605: oSetResult 0
2607: oPushResult
2608: oNodeSet
2609: oPop 3
2611: oJumpForward 2619
2613: Choice Lookup Table
           0   2510
           1   2484
2618: oEndChoice
2619: oGetAddrLocal 3
2621: oPushResult
2622: oCall 10612
2624: oAssign
2625: oGetAddrLocal 4
2627: oPushResult
2628: oGetLocal 3
2630: oPushResult
2631: oSetResult 0
2633: oPushResult
2634: greater
2635: oPop 2
2637: oAssign
2638: oGetAddrLocal 3
2640: oPushResult
2641: inc
2642: oPop 1
2644: oGetLocal 3
2646: oPushResult
2647: oSetResult 2
2649: oPushResult
2650: oScopeBegin
2651: oPop 2
2653: oGetAddrLocal 5
2655: oPushResult
2656: oScopeCurrent
2657: oAssign
2658: oGetLocal 4
2660: oChoice 2679
2662: oGetAddrLocal 6
2664: oPushResult
2665: oGetGlobal 6
2667: oPushResult
2668: oCall 10902
2670: oPop 1
2672: oPushResult
2673: oScopeAllocType
2674: oPop 1
2676: oAssign
2677: oJumpForward 2682
2679: Choice Lookup Table
           1   2662
2682: oCall 2896
2684: oGetLocal 2
2686: oPushResult
2687: oSetResult 23
2689: oPushResult
2690: oGetLocal 5
2692: oPushResult
2693: oNodeSet
2694: oPop 3
2696: oInput 12
2698: oGetAddrLocal 7
2700: oPushResult
2701: oCall 4030
2703: oPop 1
2705: oGetLocal 2
2707: oPushResult
2708: oSetResult 21
2710: oPushResult
2711: oGetLocal 7
2713: oPushResult
2714: oNodeSet
2715: oPop 3
2717: oGetAddrLocal 8
2719: oPushResult
2720: oGetLocal 7
2722: oPushResult
2723: oCall 10902
2725: oPop 1
2727: oAssign
2728: oGetLocal 2
2730: oPushResult
2731: oSetResult 31
2733: oPushResult
2734: oGetLocal 8
2736: oPushResult
2737: oScopeAllocType
2738: oPop 1
2740: oPushResult
2741: oNodeSetInt
2742: oPop 3
2744: oScopeEnd
2745: oInput 5
2747: oGetLocal 1
2749: oChoice 2761
2751: oGetLocal 2
2753: oPushResult
2754: oScopeDeclare
2755: oPop 1
2757: oJumpForward 2767
2759: oJumpForward 2767
2761: Choice Lookup Table
           1   2759
           0   2751
2766: oEndChoice
2767: oGetLocal 2
2769: oPushResult
2770: oCall 1945
2772: oPop 1
2774: oGetLocal 2
2776: oReturn
2777: oReturn
2778: oLocalSpace 4
2780: oGetAddrLocal 1
2782: oPushResult
2783: oCall 2461
2785: oAssign
2786: oInputChoice 2799
2788: oJumpForward 2893
2790: oGetLocal 1
2792: oPushResult
2793: oCall 2025
2795: oPop 1
2797: oJumpForward 2893
2799: Choice Lookup Table
          68   2790
          67   2788
2804: oGetAddrLocal 2
2806: oPushResult
2807: oGetLocal 1
2809: oPushResult
2810: oSetResult 23
2812: oPushResult
2813: oNodeGet
2814: oPop 2
2816: oAssign
2817: oGetLocal 2
2819: oPushResult
2820: oScopeEnter
2821: oPop 1
2823: oGetAddrLocal 3
2825: oPushResult
2826: oGetLocal 2
2828: oPushResult
2829: oSetResult 14
2831: oPushResult
2832: oNodeGetInt
2833: oPop 2
2835: oAssign
2836: oGetLocal 3
2838: oPushResult
2839: oSetResult 1
2841: oPushResult
2842: oScopeBegin
2843: oPop 2
2845: oGetLocal 1
2847: oPushResult
2848: oSetResult 6
2850: oPushResult
2851: oScopeCurrent
2852: oPushResult
2853: oNodeSet
2854: oPop 3
2856: oGetAddrLocal 4
2858: oPushResult
2859: oGetLocal 1
2861: oPushResult
2862: oSetResult 22
2864: oPushResult
2865: oNodeGetLabel
2866: oPop 2
2868: oAssign
2869: oSetResult 21
2871: oPushResult
2872: oGetLocal 4
2874: oPushResult
2875: oCall 1502
2877: oPop 2
2879: oGetLocal 1
2881: oPushResult
2882: oSetResult 24
2884: oPushResult
2885: oSetResult 1
2887: oPushResult
2888: oNodeSetBoolean
2889: oPop 3
2891: oScopeEnd
2892: oScopeEnd
2893: oInput 5
2895: oReturn
2896: oLocalSpace 6
2898: oInputChoice 3116
2900: oGetAddrLocal 1
2902: oPushResult
2903: oNodeVecNew
2904: oAssign
2905: oGetAddrLocal 3
2907: oPushResult
2908: oSetResult 0
2910: oAssign
2911: oInputChoice 2921
2913: oGetAddrLocal 3
2915: oPushResult
2916: oSetResult 1
2918: oAssign
2919: oJumpForward 2924
2921: Choice Lookup Table
          33   2913
2924: oInput 0
2926: oGetAddrLocal 2
2928: oPushResult
2929: oSetResult 23
2931: oPushResult
2932: LAST_ID
2933: oPushResult
2934: oCall 10874
2936: oPop 2
2938: oAssign
2939: oGetLocal 2
2941: oPushResult
2942: oSetResult 33
2944: oPushResult
2945: oGetLocal 3
2947: oPushResult
2948: oNodeSetBoolean
2949: oPop 3
2951: oGetLocal 1
2953: oPushResult
2954: oGetLocal 2
2956: oPushResult
2957: oNodeVecAppend
2958: oPop 2
2960: oInputChoice 2968
2962: oJumpForward 2976
2964: oJumpForward 2974
2966: oJumpForward 2974
2968: Choice Lookup Table
          13   2966
          12   2962
2973: oEndChoice
2974: oJumpBack 2924
2976: oGetAddrLocal 4
2978: oPushResult
2979: oCall 4030
2981: oPop 1
2983: oGetLocal 3
2985: oChoice 3000
2987: oGetAddrLocal 5
2989: oPushResult
2990: oGetLocal 4
2992: oPushResult
2993: oCall 10902
2995: oPop 1
2997: oAssign
2998: oJumpForward 3009
3000: Choice Lookup Table
           1   2987
3003: oGetAddrLocal 5
3005: oPushResult
3006: oGetLocal 4
3008: oAssign
3009: oGetAddrLocal 6
3011: oPushResult
3012: oSetResult 0
3014: oAssign
3015: oGetLocal 6
3017: oPushResult
3018: oGetLocal 1
3020: oPushResult
3021: oNodeVecSize
3022: oPop 1
3024: oPushResult
3025: equal
3026: oPop 2
3028: oChoice 3085
3030: oGetAddrLocal 2
3032: oPushResult
3033: oGetLocal 1
3035: oPushResult
3036: oGetLocal 6
3038: oPushResult
3039: oNodeVecElement
3040: oPop 2
3042: oAssign
3043: oGetLocal 2
3045: oPushResult
3046: oSetResult 21
3048: oPushResult
3049: oGetLocal 4
3051: oPushResult
3052: oNodeSet
3053: oPop 3
3055: oGetLocal 2
3057: oPushResult
3058: oScopeDeclare
3059: oPop 1
3061: oGetLocal 2
3063: oPushResult
3064: oSetResult 22
3066: oPushResult
3067: oGetLocal 5
3069: oPushResult
3070: oScopeAllocType
3071: oPop 1
3073: oPushResult
3074: oNodeSetInt
3075: oPop 3
3077: oGetAddrLocal 6
3079: oPushResult
3080: inc
3081: oPop 1
3083: oJumpForward 3090
3085: Choice Lookup Table
           0   3030
3088: oJumpForward 3092
3090: oJumpBack 3015
3092: oGetLocal 1
3094: oPushResult
3095: oNodeVecDelete
3096: oPop 1
3098: oInputChoice 3106
3100: oJumpForward 3114
3102: oJumpForward 3112
3104: oJumpForward 3112
3106: Choice Lookup Table
           5   3104
          15   3100
3111: oEndChoice
3112: oJumpBack 2900
3114: oJumpForward 3119
3116: Choice Lookup Table
          14   2900
3119: oReturn
3120: oLocalSpace 0
3122: oInputChoice 3137
3124: oInputChoice 3130
3126: oCall 3203
3128: oJumpForward 3135
3130: Choice Lookup Table
          12   3126
3133: oCall 3145
3135: oJumpForward 3142
3137: Choice Lookup Table
           0   3124
3140: oJumpForward 3144
3142: oJumpBack 3122
3144: oReturn
3145: oLocalSpace 2
3147: oGetAddrLocal 1
3149: oPushResult
3150: oSetResult 16
3152: oPushResult
3153: LAST_ID
3154: oPushResult
3155: oCall 10874
3157: oPop 2
3159: oAssign
3160: oInput 6
3162: oCall 5086
3164: oGetAddrLocal 2
3166: oPushResult
3167: oValueTop
3168: oAssign
3169: oValuePop
3170: oGetLocal 1
3172: oPushResult
3173: oSetResult 22
3175: oPushResult
3176: oGetLocal 2
3178: oPushResult
3179: oNodeSetInt
3180: oPop 3
3182: oGetLocal 1
3184: oPushResult
3185: oSetResult 21
3187: oPushResult
3188: oGetGlobal 6
3190: oPushResult
3191: oNodeSet
3192: oPop 3
3194: oGetLocal 1
3196: oPushResult
3197: oScopeDeclare
3198: oPop 1
3200: oInput 5
3202: oReturn
3203: oLocalSpace 4
3205: oGetAddrLocal 1
3207: oPushResult
3208: oSetResult 24
3210: oPushResult
3211: LAST_ID
3212: oPushResult
3213: oCall 10874
3215: oPop 2
3217: oAssign
3218: oGetAddrLocal 2
3220: oPushResult
3221: oCall 4030
3223: oPop 1
3225: oGetLocal 1
3227: oPushResult
3228: oSetResult 21
3230: oPushResult
3231: oGetLocal 2
3233: oPushResult
3234: oNodeSet
3235: oPop 3
3237: oGetLocal 2
3239: oPushResult
3240: oNodeType
3241: oPop 1
3243: oChoice 3344
3245: oInput 6
3247: oCall 5086
3249: oGetAddrLocal 3
3251: oPushResult
3252: oValueTop
3253: oAssign
3254: oValuePop
3255: oGetLocal 1
3257: oPushResult
3258: oSetResult 22
3260: oPushResult
3261: oGetLocal 3
3263: oPushResult
3264: oNodeSetInt
3265: oPop 3
3267: oGetLocal 1
3269: oPushResult
3270: oScopeDeclare
3271: oPop 1
3273: oInput 5
3275: oJumpForward 3368
3277: oError 16
3279: oJumpForward 3368
3281: oGetGlobal 2
3283: oPushResult
3284: oScopeEnter
3285: oPop 1
3287: oGetAddrLocal 4
3289: oPushResult
3290: oGetLocal 2
3292: oPushResult
3293: oScopeAllocType
3294: oPop 1
3296: oAssign
3297: oScopeEnd
3298: oGetGlobal 2
3300: oPushResult
3301: oCall 1973
3303: oPop 1
3305: oPushResult
3306: oCodePush
3307: oPop 1
3309: oGetLocal 1
3311: oPushResult
3312: oSetResult 22
3314: oPushResult
3315: oGetLocal 4
3317: oPushResult
3318: oNodeSetInt
3319: oPop 3
3321: oInput 6
3323: oGetLocal 2
3325: oPushResult
3326: oGetLocal 4
3328: oPushResult
3329: oCall 3369
3331: oPop 2
3333: oCodePop
3334: oGetLocal 1
3336: oPushResult
3337: oScopeDeclare
3338: oPop 1
3340: oInput 5
3342: oJumpForward 3368
3344: Choice Lookup Table
          37   3281
          35   3281
          34   3277
          33   3277
          27   3277
          39   3277
          40   3245
          28   3245
          32   3245
          29   3245
          30   3245
3367: oEndChoice
3368: oReturn
3369: oLocalSpace 10
3371: oGetParam 2
3373: oPushResult
3374: oNodeType
3375: oPop 1
3377: oChoice 3650
3379: oGetAddrLocal 1
3381: oPushResult
3382: oGetParam 2
3384: oPushResult
3385: oSetResult 36
3387: oPushResult
3388: oNodeGet
3389: oPop 2
3391: oAssign
3392: oGetAddrLocal 2
3394: oPushResult
3395: oGetParam 2
3397: oPushResult
3398: oSetResult 37
3400: oPushResult
3401: oNodeGet
3402: oPop 2
3404: oAssign
3405: oGetAddrLocal 3
3407: oPushResult
3408: oGetLocal 2
3410: oPushResult
3411: oCall 10986
3413: oPop 1
3415: oAssign
3416: oGetAddrLocal 4
3418: oPushResult
3419: oGetLocal 2
3421: oPushResult
3422: oCall 11081
3424: oPop 1
3426: oAssign
3427: oGetAddrLocal 5
3429: oPushResult
3430: oGetLocal 1
3432: oPushResult
3433: oSetResult 17
3435: oPushResult
3436: oNodeGetInt
3437: oPop 2
3439: oAssign
3440: oInput 14
3442: oGetAddrLocal 6
3444: oPushResult
3445: oGetLocal 3
3447: oAssign
3448: oGetLocal 1
3450: oPushResult
3451: oGetParam 1
3453: oPushResult
3454: oCall 3369
3456: oPop 2
3458: oGetLocal 6
3460: oPushResult
3461: oGetLocal 4
3463: oPushResult
3464: equal
3465: oPop 2
3467: oChoice 3475
3469: oJumpForward 3504
3471: oJumpForward 3481
3473: oJumpForward 3481
3475: Choice Lookup Table
           0   3473
           1   3469
3480: oEndChoice
3481: oInput 13
3483: oGetAddrParam 1
3485: oPushResult
3486: oGetParam 1
3488: oPushResult
3489: oGetLocal 5
3491: oPushResult
3492: add
3493: oPop 2
3495: oAssign
3496: oGetAddrLocal 6
3498: oPushResult
3499: inc
3500: oPop 1
3502: oJumpBack 3448
3504: oInput 15
3506: oJumpForward 3674
3508: oInput 14
3510: oGetAddrLocal 7
3512: oPushResult
3513: oGetParam 2
3515: oPushResult
3516: oSetResult 40
3518: oPushResult
3519: oNodeGet
3520: oPop 2
3522: oAssign
3523: oInputChoice 3527
3525: oJumpForward 3532
3527: Choice Lookup Table
           0   3525
3530: oJumpForward 3598
3532: oGetAddrLocal 8
3534: oPushResult
3535: oGetLocal 7
3537: oPushResult
3538: oScopeFindRequireInScope
3539: oPop 1
3541: oAssign
3542: oInput 12
3544: oGetAddrLocal 9
3546: oPushResult
3547: oGetLocal 8
3549: oPushResult
3550: oSetResult 21
3552: oPushResult
3553: oNodeGet
3554: oPop 2
3556: oAssign
3557: oGetAddrLocal 10
3559: oPushResult
3560: oGetParam 1
3562: oPushResult
3563: oGetLocal 8
3565: oPushResult
3566: oSetResult 22
3568: oPushResult
3569: oNodeGetInt
3570: oPop 2
3572: oPushResult
3573: add
3574: oPop 2
3576: oAssign
3577: oGetLocal 9
3579: oPushResult
3580: oGetLocal 10
3582: oPushResult
3583: oCall 3369
3585: oPop 2
3587: oInputChoice 3591
3589: oJumpForward 3596
3591: Choice Lookup Table
           5   3589
3594: oJumpForward 3598
3596: oJumpBack 3523
3598: oInput 15
3600: oJumpForward 3674
3602: oEmit 16
3604: oGetParam 1
3606: oPushResult
3607: oEmitInt
3608: oPop 1
3610: oCall 5086
3612: oEmit 15
3614: oValueTop
3615: oPushResult
3616: oEmitInt
3617: oPop 1
3619: oValuePop
3620: oEmit 27
3622: oJumpForward 3674
3624: oEmit 16
3626: oGetParam 1
3628: oPushResult
3629: oEmitInt
3630: oPop 1
3632: oCall 5086
3634: oEmit 15
3636: oValueTop
3637: oPushResult
3638: oEmitInt
3639: oPop 1
3641: oValuePop
3642: oEmit 26
3644: oJumpForward 3674
3646: oError 16
3648: oJumpForward 3674
3650: Choice Lookup Table
          34   3646
          33   3646
          27   3646
          39   3646
          40   3624
          28   3624
          32   3602
          29   3602
          30   3602
          37   3508
          35   3379
3673: oEndChoice
3674: oReturn
3675: oLocalSpace 2
3677: oInputChoice 3723
3679: oGetAddrLocal 1
3681: oPushResult
3682: oSetResult 18
3684: oPushResult
3685: LAST_ID
3686: oPushResult
3687: oCall 10874
3689: oPop 2
3691: oAssign
3692: oInput 6
3694: oGetAddrLocal 2
3696: oPushResult
3697: oCall 4030
3699: oPop 1
3701: oGetLocal 1
3703: oPushResult
3704: oSetResult 21
3706: oPushResult
3707: oGetLocal 2
3709: oPushResult
3710: oNodeSet
3711: oPop 3
3713: oGetLocal 1
3715: oPushResult
3716: oScopeDeclare
3717: oPop 1
3719: oInput 5
3721: oJumpForward 3728
3723: Choice Lookup Table
           0   3679
3726: oJumpForward 3730
3728: oJumpBack 3677
3730: oReturn
3731: oLocalSpace 6
3733: oInputChoice 3957
3735: oGetAddrLocal 1
3737: oPushResult
3738: oNodeVecNew
3739: oAssign
3740: oGetAddrLocal 2
3742: oPushResult
3743: oGetParam 1
3745: oPushResult
3746: LAST_ID
3747: oPushResult
3748: oCall 10874
3750: oPop 2
3752: oAssign
3753: oGetLocal 1
3755: oPushResult
3756: oGetLocal 2
3758: oPushResult
3759: oNodeVecAppend
3760: oPop 2
3762: oInputChoice 3768
3764: oInput 0
3766: oJumpForward 3773
3768: Choice Lookup Table
          13   3764
3771: oJumpForward 3775
3773: oJumpBack 3740
3775: oInput 12
3777: oGetAddrLocal 3
3779: oPushResult
3780: oCall 4030
3782: oPop 1
3784: oGetAddrLocal 4
3786: oPushResult
3787: oSetResult 0
3789: oAssign
3790: oGetLocal 4
3792: oPushResult
3793: oGetLocal 1
3795: oPushResult
3796: oNodeVecSize
3797: oPop 1
3799: oPushResult
3800: equal
3801: oPop 2
3803: oChoice 3844
3805: oGetAddrLocal 2
3807: oPushResult
3808: oGetLocal 1
3810: oPushResult
3811: oGetLocal 4
3813: oPushResult
3814: oNodeVecElement
3815: oPop 2
3817: oAssign
3818: oGetLocal 2
3820: oPushResult
3821: oSetResult 21
3823: oPushResult
3824: oGetLocal 3
3826: oPushResult
3827: oNodeSet
3828: oPop 3
3830: oGetLocal 2
3832: oPushResult
3833: oScopeDeclareAlloc
3834: oPop 1
3836: oGetAddrLocal 4
3838: oPushResult
3839: inc
3840: oPop 1
3842: oJumpForward 3849
3844: Choice Lookup Table
           0   3805
3847: oJumpForward 3851
3849: oJumpBack 3790
3851: oInputChoice 3944
3853: oGetLocal 1
3855: oPushResult
3856: oNodeVecSize
3857: oPop 1
3859: oChoice 3863
3861: oJumpForward 3868
3863: Choice Lookup Table
           1   3861
3866: oError 22
3868: oGetAddrLocal 5
3870: oPushResult
3871: oScopeCurrent
3872: oPushResult
3873: oCall 1973
3875: oPop 1
3877: oAssign
3878: oGetLocal 5
3880: oPushResult
3881: oCodePush
3882: oPop 1
3884: oGetAddrLocal 6
3886: oPushResult
3887: oSetResult 0
3889: oAssign
3890: oCall 10612
3892: oPushResult
3893: equal_zero
3894: oPop 1
3896: oChoice 3912
3898: oGetGlobal 3
3900: oPushResult
3901: oScopeEnter
3902: oPop 1
3904: oGetAddrLocal 6
3906: oPushResult
3907: oSetResult 1
3909: oAssign
3910: oJumpForward 3915
3912: Choice Lookup Table
           1   3898
3915: oGetLocal 2
3917: oPushResult
3918: oSetResult 1
3920: oPushResult
3921: oCall 9770
3923: oPop 2
3925: oCall 5159
3927: oCall 8027
3929: oCall 9526
3931: oGetLocal 6
3933: oChoice 3938
3935: oScopeEnd
3936: oJumpForward 3941
3938: Choice Lookup Table
           1   3935
3941: oCodePop
3942: oJumpForward 3947
3944: Choice Lookup Table
           6   3853
3947: oGetLocal 1
3949: oPushResult
3950: oNodeVecDelete
3951: oPop 1
3953: oInput 5
3955: oJumpForward 3962
3957: Choice Lookup Table
           0   3735
3960: oJumpForward 3964
3962: oJumpBack 3733
3964: oReturn
3965: oLocalSpace 2
3967: oInputChoice 3974
3969: oJumpForward 3980
3971: oChangeIntLitToLabelIdent
3972: oJumpForward 3980
3974: Choice Lookup Table
           1   3971
           0   3969
3979: oEndChoice
3980: oGetAddrLocal 1
3982: oPushResult
3983: oSetResult 25
3985: oPushResult
3986: LAST_ID
3987: oPushResult
3988: oCall 10874
3990: oPop 2
3992: oAssign
3993: oGetAddrLocal 2
3995: oPushResult
3996: oLabelNew
3997: oAssign
3998: oGetLocal 1
4000: oPushResult
4001: oSetResult 22
4003: oPushResult
4004: oGetLocal 2
4006: oPushResult
4007: oNodeSetLabel
4008: oPop 3
4010: oGetLocal 1
4012: oPushResult
4013: oScopeDeclare
4014: oPop 1
4016: oInputChoice 4020
4018: oJumpForward 4025
4020: Choice Lookup Table
          13   4018
4023: oJumpForward 4027
4025: oJumpBack 3967
4027: oInput 5
4029: oReturn
4030: oLocalSpace 12
4032: oInputChoice 4505
4034: oGetAddrLocal 1
4036: oPushResult
4037: oScopeFindRequire
4038: oAssign
4039: oGetAddrLocal 1
4041: oPushResult
4042: oCall 526
4044: oPop 1
4046: oGetLocal 1
4048: oPushResult
4049: oNodeType
4050: oPop 1
4052: oChoice 4069
4054: oGetParam 1
4056: oPushResult
4057: oGetLocal 1
4059: oPushResult
4060: oSetResult 21
4062: oPushResult
4063: oNodeGet
4064: oPop 2
4066: oAssign
4067: oJumpForward 4080
4069: Choice Lookup Table
          18   4054
4072: oError 2
4074: oGetParam 1
4076: oPushResult
4077: oGetGlobal 6
4079: oAssign
4080: oJumpForward 4524
4082: oInput 16
4084: oGetAddrLocal 2
4086: oPushResult
4087: oNodeVecNew
4088: oAssign
4089: oGetAddrLocal 3
4091: oPushResult
4092: oSetResult 36
4094: oPushResult
4095: oNodeNew
4096: oPop 1
4098: oAssign
4099: oGetLocal 3
4101: oPushResult
4102: oSetResult 36
4104: oPushResult
4105: oGetGlobal 6
4107: oPushResult
4108: oNodeSet
4109: oPop 3
4111: oCall 5086
4113: oGetLocal 3
4115: oPushResult
4116: oSetResult 38
4118: oPushResult
4119: oValueTop
4120: oPushResult
4121: oNodeSetInt
4122: oPop 3
4124: oValuePop
4125: oInput 21
4127: oCall 5086
4129: oGetLocal 3
4131: oPushResult
4132: oSetResult 39
4134: oPushResult
4135: oValueTop
4136: oPushResult
4137: oNodeSetInt
4138: oPop 3
4140: oValuePop
4141: oGetLocal 3
4143: oPushResult
4144: oSetResult 17
4146: oPushResult
4147: oSetResult 4
4149: oPushResult
4150: oNodeSetInt
4151: oPop 3
4153: oGetLocal 3
4155: oPushResult
4156: oTypeAdd
4157: oPop 1
4159: oGetAddrLocal 4
4161: oPushResult
4162: oSetResult 35
4164: oPushResult
4165: oNodeNew
4166: oPop 1
4168: oAssign
4169: oGetLocal 4
4171: oPushResult
4172: oSetResult 37
4174: oPushResult
4175: oGetLocal 3
4177: oPushResult
4178: oNodeSet
4179: oPop 3
4181: oGetLocal 2
4183: oPushResult
4184: oGetLocal 4
4186: oPushResult
4187: oNodeVecAppend
4188: oPop 2
4190: oInputChoice 4198
4192: oJumpForward 4206
4194: oJumpForward 4204
4196: oJumpForward 4204
4198: Choice Lookup Table
          13   4196
          17   4192
4203: oEndChoice
4204: oJumpBack 4089
4206: oInput 40
4208: oGetAddrLocal 5
4210: oPushResult
4211: oCall 4030
4213: oPop 1
4215: oGetAddrLocal 6
4217: oPushResult
4218: oGetLocal 2
4220: oPushResult
4221: oNodeVecSize
4222: oPop 1
4224: oAssign
4225: oGetAddrLocal 6
4227: oPushResult
4228: dec
4229: oPop 1
4231: oGetAddrLocal 7
4233: oPushResult
4234: oGetLocal 2
4236: oPushResult
4237: oGetLocal 6
4239: oPushResult
4240: oNodeVecElement
4241: oPop 2
4243: oAssign
4244: oGetLocal 7
4246: oPushResult
4247: oSetResult 36
4249: oPushResult
4250: oGetLocal 5
4252: oPushResult
4253: oNodeSet
4254: oPop 3
4256: oGetAddrLocal 8
4258: oPushResult
4259: oGetLocal 7
4261: oPushResult
4262: oSetResult 37
4264: oPushResult
4265: oNodeGet
4266: oPop 2
4268: oAssign
4269: oGetAddrLocal 9
4271: oPushResult
4272: oGetLocal 8
4274: oPushResult
4275: oSetResult 39
4277: oPushResult
4278: oNodeGetInt
4279: oPop 2
4281: oPushResult
4282: oGetLocal 8
4284: oPushResult
4285: oSetResult 38
4287: oPushResult
4288: oNodeGetInt
4289: oPop 2
4291: oPushResult
4292: subtract
4293: oPop 2
4295: oAssign
4296: oGetAddrLocal 9
4298: oPushResult
4299: inc
4300: oPop 1
4302: oGetLocal 7
4304: oPushResult
4305: oSetResult 17
4307: oPushResult
4308: oGetLocal 9
4310: oPushResult
4311: oGetLocal 5
4313: oPushResult
4314: oSetResult 17
4316: oPushResult
4317: oNodeGetInt
4318: oPop 2
4320: oPushResult
4321: multiply
4322: oPop 2
4324: oPushResult
4325: oNodeSetInt
4326: oPop 3
4328: oGetLocal 7
4330: oPushResult
4331: oTypeAdd
4332: oPop 1
4334: oGetAddrLocal 5
4336: oPushResult
4337: oGetLocal 7
4339: oAssign
4340: oGetLocal 6
4342: oPushResult
4343: equal_zero
4344: oPop 1
4346: oChoice 4352
4348: oJumpForward 4357
4350: oJumpForward 4355
4352: Choice Lookup Table
           1   4348
4355: oJumpBack 4225
4357: oGetParam 1
4359: oPushResult
4360: oGetLocal 2
4362: oPushResult
4363: oSetResult 0
4365: oPushResult
4366: oNodeVecElement
4367: oPop 2
4369: oAssign
4370: oGetLocal 2
4372: oPushResult
4373: oNodeVecDelete
4374: oPop 1
4376: oJumpForward 4524
4378: oGetAddrLocal 10
4380: oPushResult
4381: oCall 4030
4383: oPop 1
4385: oGetParam 1
4387: oPushResult
4388: oGetLocal 10
4390: oPushResult
4391: oCall 10902
4393: oPop 1
4395: oAssign
4396: oJumpForward 4524
4398: oGetParam 1
4400: oPushResult
4401: oSetResult 37
4403: oPushResult
4404: oNodeNew
4405: oPop 1
4407: oAssign
4408: oSetResult -1
4410: oPushResult
4411: oSetResult 2
4413: oPushResult
4414: oScopeBegin
4415: oPop 2
4417: oSetResult 22
4419: oPushResult
4420: oCall 3731
4422: oPop 1
4424: oGetAddrLocal 11
4426: oPushResult
4427: oScopeCurrent
4428: oPushResult
4429: oSetResult 17
4431: oPushResult
4432: oNodeGetInt
4433: oPop 2
4435: oAssign
4436: oGetLocal 11
4438: oPushResult
4439: equal_zero
4440: oPop 1
4442: oChoice 4448
4444: oError 19
4446: oJumpForward 4451
4448: Choice Lookup Table
           1   4444
4451: oInput 36
4453: oGetFromParam 1
4455: oPushResult
4456: oSetResult 40
4458: oPushResult
4459: oScopeCurrent
4460: oPushResult
4461: oNodeSet
4462: oPop 3
4464: oGetFromParam 1
4466: oPushResult
4467: oSetResult 17
4469: oPushResult
4470: oGetLocal 11
4472: oPushResult
4473: oNodeSetInt
4474: oPop 3
4476: oScopeEnd
4477: oGetFromParam 1
4479: oPushResult
4480: oTypeAdd
4481: oPop 1
4483: oJumpForward 4524
4485: oGetParam 1
4487: oPushResult
4488: oCall 4525
4490: oPop 1
4492: oJumpForward 4524
4494: oInput 40
4496: oGetAddrLocal 12
4498: oPushResult
4499: oCall 4030
4501: oPop 1
4503: oJumpForward 4524
4505: Choice Lookup Table
          39   4494
          14   4485
          38   4398
          18   4378
          37   4082
           0   4034
4518: oCall 5086
4520: oInput 21
4522: oCall 5086
4524: oReturn
4525: oLocalSpace 11
4527: oGetParam 1
4529: oPushResult
4530: oSetResult 40
4532: oPushResult
4533: oNodeNew
4534: oPop 1
4536: oAssign
4537: oGetAddrLocal 1
4539: oPushResult
4540: oSetResult 0
4542: oAssign
4543: oGetAddrLocal 2
4545: oPushResult
4546: oSetResult 0
4548: oAssign
4549: oGetAddrLocal 3
4551: oPushResult
4552: oSetResult 1
4554: oAssign
4555: oGetAddrLocal 4
4557: oPushResult
4558: oScopeCurrent
4559: oAssign
4560: oSetResult -1
4562: oPushResult
4563: oSetResult 2
4565: oPushResult
4566: oScopeBegin
4567: oPop 2
4569: oInput 0
4571: oGetAddrLocal 5
4573: oPushResult
4574: oSetResult 17
4576: oPushResult
4577: LAST_ID
4578: oPushResult
4579: oCall 10874
4581: oPop 2
4583: oAssign
4584: oGetAddrLocal 6
4586: oPushResult
4587: oSetResult 17
4589: oPushResult
4590: LAST_ID
4591: oPushResult
4592: oCall 10874
4594: oPop 2
4596: oAssign
4597: oGetLocal 5
4599: oPushResult
4600: oSetResult 21
4602: oPushResult
4603: oGetFromParam 1
4605: oPushResult
4606: oNodeSet
4607: oPop 3
4609: oGetLocal 6
4611: oPushResult
4612: oSetResult 21
4614: oPushResult
4615: oGetFromParam 1
4617: oPushResult
4618: oNodeSet
4619: oPop 3
4621: oGetAddrLocal 7
4623: oPushResult
4624: LAST_ID
4625: oPushResult
4626: ID_STRING
4627: oPop 1
4629: oPushResult
4630: oStringAllocLit
4631: oPop 1
4633: oAssign
4634: oGetLocal 5
4636: oPushResult
4637: oSetResult 32
4639: oPushResult
4640: oGetLocal 7
4642: oPushResult
4643: oNodeSetInt
4644: oPop 3
4646: oGetLocal 6
4648: oPushResult
4649: oSetResult 32
4651: oPushResult
4652: oGetLocal 7
4654: oPushResult
4655: oNodeSetInt
4656: oPop 3
4658: oInputChoice 4727
4660: oCall 5086
4662: oGetLocal 2
4664: oPushResult
4665: equal_zero
4666: oPop 1
4668: oChoice 4689
4670: oValueTop
4671: oPushResult
4672: oGetLocal 1
4674: oPushResult
4675: greater
4676: oPop 2
4678: oChoice 4684
4680: oError 26
4682: oJumpForward 4687
4684: Choice Lookup Table
           0   4680
4687: oJumpForward 4692
4689: Choice Lookup Table
           0   4670
4692: oGetLocal 1
4694: oPushResult
4695: oValueTop
4696: oPushResult
4697: equal
4698: oPop 2
4700: oChoice 4716
4702: oGetFromParam 1
4704: oPushResult
4705: oSetResult 43
4707: oPushResult
4708: oSetResult 1
4710: oPushResult
4711: oNodeSetBoolean
4712: oPop 3
4714: oJumpForward 4719
4716: Choice Lookup Table
           0   4702
4719: oGetAddrLocal 1
4721: oPushResult
4722: oValueTop
4723: oAssign
4724: oValuePop
4725: oJumpForward 4732
4727: Choice Lookup Table
           4   4660
           6   4660
4732: oGetLocal 5
4734: oPushResult
4735: oSetResult 22
4737: oPushResult
4738: oGetLocal 1
4740: oPushResult
4741: oNodeSetInt
4742: oPop 3
4744: oGetLocal 6
4746: oPushResult
4747: oSetResult 22
4749: oPushResult
4750: oGetLocal 1
4752: oPushResult
4753: oNodeSetInt
4754: oPop 3
4756: oGetLocal 5
4758: oPushResult
4759: oScopeDeclare
4760: oPop 1
4762: oGetLocal 4
4764: oPushResult
4765: oScopeEnter
4766: oPop 1
4768: oGetLocal 6
4770: oPushResult
4771: oScopeDeclare
4772: oPop 1
4774: oScopeEnd
4775: oGetAddrLocal 1
4777: oPushResult
4778: inc
4779: oPop 1
4781: oGetAddrLocal 2
4783: oPushResult
4784: inc
4785: oPop 1
4787: oInputChoice 4791
4789: oJumpForward 4796
4791: Choice Lookup Table
          13   4789
4794: oJumpForward 4798
4796: oJumpBack 4569
4798: oInput 15
4800: oGetFromParam 1
4802: oPushResult
4803: oSetResult 40
4805: oPushResult
4806: oScopeCurrent
4807: oPushResult
4808: oNodeSet
4809: oPop 3
4811: oGetFromParam 1
4813: oPushResult
4814: oSetResult 17
4816: oPushResult
4817: oSetResult 4
4819: oPushResult
4820: oNodeSetInt
4821: oPop 3
4823: oScopeEnd
4824: oGetGlobal 2
4826: oPushResult
4827: oCall 1973
4829: oPop 1
4831: oPushResult
4832: oCodePush
4833: oPop 1
4835: oGetGlobal 2
4837: oPushResult
4838: oScopeEnter
4839: oPop 1
4841: oGetAddrLocal 8
4843: oPushResult
4844: oGetLocal 2
4846: oPushResult
4847: oSetResult 1
4849: oPushResult
4850: add
4851: oPop 2
4853: oPushResult
4854: oSetResult 16
4856: oPushResult
4857: multiply
4858: oPop 2
4860: oAssign
4861: oGetAddrLocal 9
4863: oPushResult
4864: oGetLocal 8
4866: oPushResult
4867: oSetResult 8
4869: oPushResult
4870: oScopeAlloc
4871: oPop 2
4873: oAssign
4874: oScopeEnd
4875: oGetFromParam 1
4877: oPushResult
4878: oSetResult 42
4880: oPushResult
4881: oGetLocal 9
4883: oPushResult
4884: oNodeSetInt
4885: oPop 3
4887: oGetAddrLocal 10
4889: oPushResult
4890: oGetFromParam 1
4892: oPushResult
4893: oSetResult 40
4895: oPushResult
4896: oNodeGet
4897: oPop 2
4899: oPushResult
4900: oSetResult 15
4902: oPushResult
4903: oNodeGetIter
4904: oPop 2
4906: oAssign
4907: oGetAddrLocal 11
4909: oPushResult
4910: oGetLocal 10
4912: oPushResult
4913: oNodeIterValue
4914: oPop 1
4916: oAssign
4917: oGetLocal 11
4919: oPushResult
4920: oNodeNull
4921: oPop 1
4923: oChoice 4929
4925: oJumpForward 5016
4927: oJumpForward 4932
4929: Choice Lookup Table
           1   4925
4932: oEmit 16
4934: oGetLocal 9
4936: oPushResult
4937: oEmitInt
4938: oPop 1
4940: oEmit 15
4942: oGetLocal 11
4944: oPushResult
4945: oSetResult 22
4947: oPushResult
4948: oNodeGetInt
4949: oPop 2
4951: oPushResult
4952: oEmitInt
4953: oPop 1
4955: oEmit 26
4957: oGetAddrLocal 9
4959: oPushResult
4960: oGetLocal 9
4962: oPushResult
4963: oSetResult 8
4965: oPushResult
4966: add
4967: oPop 2
4969: oAssign
4970: oEmit 16
4972: oGetLocal 9
4974: oPushResult
4975: oEmitInt
4976: oPop 1
4978: oEmit 16
4980: oGetLocal 11
4982: oPushResult
4983: oSetResult 32
4985: oPushResult
4986: oNodeGetInt
4987: oPop 2
4989: oPushResult
4990: oEmitInt
4991: oPop 1
4993: oEmit 28
4995: oGetAddrLocal 9
4997: oPushResult
4998: oGetLocal 9
5000: oPushResult
5001: oSetResult 8
5003: oPushResult
5004: add
5005: oPop 2
5007: oAssign
5008: oGetAddrLocal 10
5010: oPushResult
5011: oNodeIterNext
5012: oPop 1
5014: oJumpBack 4907
5016: oEmit 16
5018: oGetLocal 9
5020: oPushResult
5021: oEmitInt
5022: oPop 1
5024: oEmit 15
5026: oSetResult 0
5028: oPushResult
5029: oEmitInt
5030: oPop 1
5032: oEmit 26
5034: oGetAddrLocal 9
5036: oPushResult
5037: oGetLocal 9
5039: oPushResult
5040: oSetResult 8
5042: oPushResult
5043: add
5044: oPop 2
5046: oAssign
5047: oEmit 16
5049: oGetLocal 9
5051: oPushResult
5052: oEmitInt
5053: oPop 1
5055: oEmit 15
5057: oSetResult 0
5059: oPushResult
5060: oEmitInt
5061: oPop 1
5063: oEmit 28
5065: oGetAddrLocal 9
5067: oPushResult
5068: oGetLocal 9
5070: oPushResult
5071: oSetResult 8
5073: oPushResult
5074: add
5075: oPop 2
5077: oAssign
5078: oCodePop
5079: oGetFromParam 1
5081: oPushResult
5082: oTypeAdd
5083: oPop 1
5085: oReturn
5086: oLocalSpace 1
5088: oInputChoice 5150
5090: TOKEN_VALUE
5091: oPushResult
5092: oValuePush
5093: oPop 1
5095: oJumpForward 5158
5097: oGetAddrLocal 1
5099: oPushResult
5100: oScopeFindRequire
5101: oAssign
5102: oGetAddrLocal 1
5104: oPushResult
5105: oCall 526
5107: oPop 1
5109: oGetLocal 1
5111: oPushResult
5112: oNodeType
5113: oPop 1
5115: oChoice 5132
5117: oGetLocal 1
5119: oPushResult
5120: oSetResult 22
5122: oPushResult
5123: oNodeGetInt
5124: oPop 2
5126: oPushResult
5127: oValuePush
5128: oPop 1
5130: oJumpForward 5143
5132: Choice Lookup Table
          16   5117
5135: oError 1
5137: oSetResult 0
5139: oPushResult
5140: oValuePush
5141: oPop 1
5143: oJumpForward 5158
5145: oCall 5086
5147: oValueNegate
5148: oJumpForward 5158
5150: Choice Lookup Table
          25   5145
           0   5097
           1   5090
5157: oEndChoice
5158: oReturn
5159: oLocalSpace 1
5161: oGetAddrLocal 1
5163: oPushResult
5164: oSetResult 0
5166: oAssign
5167: oGetAddrLocal 1
5169: oPushResult
5170: oCall 5320
5172: oPop 1
5174: oGetAddrLocal 1
5176: oPushResult
5177: oCall 5220
5179: oPop 1
5181: oReturn
5182: oLocalSpace 0
5184: oGetParam 1
5186: oPushResult
5187: oCall 5320
5189: oPop 1
5191: oTypeSNodeType
5192: oChoice 5211
5194: oJumpForward 5218
5196: oGetParam 1
5198: oPushResult
5199: oLabelNew
5200: oAssign
5201: oEmit 68
5203: oGetFromParam 1
5205: oPushResult
5206: oEmitLabel
5207: oPop 1
5209: oJumpForward 5218
5211: Choice Lookup Table
          30   5196
          31   5194
5216: oError 8
5218: oTypeSPop
5219: oReturn
5220: oLocalSpace 1
5222: oTypeSNodeType
5223: oChoice 5285
5225: oGetAddrLocal 1
5227: oPushResult
5228: oLabelNew
5229: oAssign
5230: oEmit 15
5232: oSetResult 1
5234: oPushResult
5235: oEmitInt
5236: oPop 1
5238: oEmit 66
5240: oGetLocal 1
5242: oPushResult
5243: oEmitLabel
5244: oPop 1
5246: oEmit 69
5248: oGetFromParam 1
5250: oPushResult
5251: oEmitLabel
5252: oPop 1
5254: oEmit 15
5256: oSetResult 0
5258: oPushResult
5259: oEmitInt
5260: oPop 1
5262: oEmit 69
5264: oGetLocal 1
5266: oPushResult
5267: oEmitLabel
5268: oPop 1
5270: oTypeSPop
5271: oGetGlobal 7
5273: oPushResult
5274: oTypeSPush
5275: oPop 1
5277: oGetParam 1
5279: oPushResult
5280: oSetResult 0
5282: oAssign
5283: oJumpForward 5288
5285: Choice Lookup Table
          31   5225
5288: oReturn
5289: oLocalSpace 0
5291: oTypeSNodeType
5292: oChoice 5316
5294: oGetParam 1
5296: oPushResult
5297: oLabelNew
5298: oAssign
5299: oEmit 68
5301: oGetFromParam 1
5303: oPushResult
5304: oEmitLabel
5305: oPop 1
5307: oTypeSPop
5308: oGetGlobal 8
5310: oPushResult
5311: oTypeSPush
5312: oPop 1
5314: oJumpForward 5319
5316: Choice Lookup Table
          30   5294
5319: oReturn
5320: oLocalSpace 0
5322: oGetParam 1
5324: oPushResult
5325: oCall 5793
5327: oPop 1
5329: oInputChoice 5775
5331: oGetParam 1
5333: oPushResult
5334: oCall 5220
5336: oPop 1
5338: oCall 10793
5340: oGetParam 1
5342: oPushResult
5343: oCall 5793
5345: oPop 1
5347: oGetParam 1
5349: oPushResult
5350: oCall 5220
5352: oPop 1
5354: oCall 10793
5356: oCall 10662
5358: oTypeSNodeType
5359: oChoice 5377
5361: oEmit 41
5363: oJumpForward 5396
5365: oEmit 47
5367: oJumpForward 5396
5369: oEmit 53
5371: oJumpForward 5396
5373: oError 16
5375: oJumpForward 5396
5377: Choice Lookup Table
          38   5373
          39   5373
          34   5369
          33   5369
          40   5365
          28   5365
          32   5361
          30   5361
5394: oError 17
5396: oTypeSPop
5397: oGetGlobal 7
5399: oPushResult
5400: oTypeSPush
5401: oPop 1
5403: oJumpForward 5790
5405: oGetParam 1
5407: oPushResult
5408: oCall 5220
5410: oPop 1
5412: oCall 10793
5414: oGetParam 1
5416: oPushResult
5417: oCall 5793
5419: oPop 1
5421: oGetParam 1
5423: oPushResult
5424: oCall 5220
5426: oPop 1
5428: oCall 10793
5430: oCall 10662
5432: oTypeSNodeType
5433: oChoice 5451
5435: oEmit 42
5437: oJumpForward 5470
5439: oEmit 48
5441: oJumpForward 5470
5443: oEmit 54
5445: oJumpForward 5470
5447: oError 16
5449: oJumpForward 5470
5451: Choice Lookup Table
          38   5447
          39   5447
          34   5443
          33   5443
          40   5439
          28   5439
          32   5435
          30   5435
5468: oError 17
5470: oTypeSPop
5471: oGetGlobal 7
5473: oPushResult
5474: oTypeSPush
5475: oPop 1
5477: oJumpForward 5790
5479: oGetParam 1
5481: oPushResult
5482: oCall 5220
5484: oPop 1
5486: oCall 10793
5488: oGetParam 1
5490: oPushResult
5491: oCall 5793
5493: oPop 1
5495: oGetParam 1
5497: oPushResult
5498: oCall 5220
5500: oPop 1
5502: oCall 10793
5504: oCall 10662
5506: oTypeSNodeType
5507: oChoice 5525
5509: oEmit 44
5511: oJumpForward 5544
5513: oEmit 50
5515: oJumpForward 5544
5517: oEmit 56
5519: oJumpForward 5544
5521: oError 16
5523: oJumpForward 5544
5525: Choice Lookup Table
          38   5521
          39   5521
          34   5517
          33   5517
          40   5513
          28   5513
          32   5509
          30   5509
5542: oError 17
5544: oTypeSPop
5545: oGetGlobal 7
5547: oPushResult
5548: oTypeSPush
5549: oPop 1
5551: oJumpForward 5790
5553: oGetParam 1
5555: oPushResult
5556: oCall 5220
5558: oPop 1
5560: oCall 10793
5562: oGetParam 1
5564: oPushResult
5565: oCall 5793
5567: oPop 1
5569: oGetParam 1
5571: oPushResult
5572: oCall 5220
5574: oPop 1
5576: oCall 10793
5578: oCall 10662
5580: oTypeSNodeType
5581: oChoice 5599
5583: oEmit 43
5585: oJumpForward 5618
5587: oEmit 49
5589: oJumpForward 5618
5591: oEmit 55
5593: oJumpForward 5618
5595: oError 16
5597: oJumpForward 5618
5599: Choice Lookup Table
          38   5595
          39   5595
          34   5591
          33   5591
          40   5587
          28   5587
          32   5583
          30   5583
5616: oError 17
5618: oTypeSPop
5619: oGetGlobal 7
5621: oPushResult
5622: oTypeSPush
5623: oPop 1
5625: oJumpForward 5790
5627: oGetParam 1
5629: oPushResult
5630: oCall 5220
5632: oPop 1
5634: oCall 10793
5636: oGetParam 1
5638: oPushResult
5639: oCall 5793
5641: oPop 1
5643: oGetParam 1
5645: oPushResult
5646: oCall 5220
5648: oPop 1
5650: oCall 10793
5652: oCall 10662
5654: oTypeSNodeType
5655: oChoice 5673
5657: oEmit 46
5659: oJumpForward 5692
5661: oEmit 52
5663: oJumpForward 5692
5665: oEmit 58
5667: oJumpForward 5692
5669: oError 16
5671: oJumpForward 5692
5673: Choice Lookup Table
          38   5669
          39   5669
          34   5665
          33   5665
          40   5661
          28   5661
          32   5657
          30   5657
5690: oError 17
5692: oTypeSPop
5693: oGetGlobal 7
5695: oPushResult
5696: oTypeSPush
5697: oPop 1
5699: oJumpForward 5790
5701: oGetParam 1
5703: oPushResult
5704: oCall 5220
5706: oPop 1
5708: oCall 10793
5710: oGetParam 1
5712: oPushResult
5713: oCall 5793
5715: oPop 1
5717: oGetParam 1
5719: oPushResult
5720: oCall 5220
5722: oPop 1
5724: oCall 10793
5726: oCall 10662
5728: oTypeSNodeType
5729: oChoice 5747
5731: oEmit 45
5733: oJumpForward 5766
5735: oEmit 51
5737: oJumpForward 5766
5739: oEmit 57
5741: oJumpForward 5766
5743: oError 16
5745: oJumpForward 5766
5747: Choice Lookup Table
          38   5743
          39   5743
          34   5739
          33   5739
          40   5735
          28   5735
          32   5731
          30   5731
5764: oError 17
5766: oTypeSPop
5767: oGetGlobal 7
5769: oPushResult
5770: oTypeSPush
5771: oPop 1
5773: oJumpForward 5790
5775: Choice Lookup Table
          11   5701
          10   5627
           9   5553
           8   5479
           7   5405
           6   5331
5788: oJumpForward 5792
5790: oJumpBack 5329
5792: oReturn
5793: oLocalSpace 1
5795: oGetAddrLocal 1
5797: oPushResult
5798: oSetResult 0
5800: oAssign
5801: oGetParam 1
5803: oPushResult
5804: oCall 5973
5806: oPop 1
5808: oInputChoice 5941
5810: oTypeSNodeType
5811: oChoice 5882
5813: oGetLocal 1
5815: oPushResult
5816: oSetResult 0
5818: oPushResult
5819: equal_label
5820: oPop 2
5822: oChoice 5831
5824: oGetAddrLocal 1
5826: oPushResult
5827: oLabelNew
5828: oAssign
5829: oJumpForward 5834
5831: Choice Lookup Table
           1   5824
5834: oEmit 66
5836: oGetLocal 1
5838: oPushResult
5839: oEmitLabel
5840: oPop 1
5842: oJumpForward 5889
5844: oGetParam 1
5846: oPushResult
5847: oCall 5289
5849: oPop 1
5851: oGetLocal 1
5853: oPushResult
5854: oSetResult 0
5856: oPushResult
5857: equal_label
5858: oPop 2
5860: oChoice 5869
5862: oGetAddrLocal 1
5864: oPushResult
5865: oLabelNew
5866: oAssign
5867: oJumpForward 5872
5869: Choice Lookup Table
           1   5862
5872: oEmit 66
5874: oGetLocal 1
5876: oPushResult
5877: oEmitLabel
5878: oPop 1
5880: oJumpForward 5889
5882: Choice Lookup Table
          30   5844
          31   5813
5887: oError 8
5889: oTypeSPop
5890: oEmit 69
5892: oGetFromParam 1
5894: oPushResult
5895: oEmitLabel
5896: oPop 1
5898: oGetParam 1
5900: oPushResult
5901: oSetResult 0
5903: oAssign
5904: oGetParam 1
5906: oPushResult
5907: oCall 5973
5909: oPop 1
5911: oTypeSNodeType
5912: oChoice 5925
5914: oJumpForward 5932
5916: oGetParam 1
5918: oPushResult
5919: oCall 5289
5921: oPop 1
5923: oJumpForward 5932
5925: Choice Lookup Table
          30   5916
          31   5914
5930: oError 8
5932: oTypeSPop
5933: oGetGlobal 8
5935: oPushResult
5936: oTypeSPush
5937: oPop 1
5939: oJumpForward 5946
5941: Choice Lookup Table
          55   5810
5944: oJumpForward 5948
5946: oJumpBack 5808
5948: oGetLocal 1
5950: oPushResult
5951: oSetResult 0
5953: oPushResult
5954: equal_label
5955: oPop 2
5957: oChoice 5969
5959: oEmit 69
5961: oGetLocal 1
5963: oPushResult
5964: oEmitLabel
5965: oPop 1
5967: oJumpForward 5972
5969: Choice Lookup Table
           0   5959
5972: oReturn
5973: oLocalSpace 2
5975: oGetAddrLocal 1
5977: oPushResult
5978: oSetResult 0
5980: oAssign
5981: oGetParam 1
5983: oPushResult
5984: oCall 6111
5986: oPop 1
5988: oInputChoice 6103
5990: oTypeSNodeType
5991: oChoice 6004
5993: oJumpForward 6011
5995: oGetParam 1
5997: oPushResult
5998: oCall 5289
6000: oPop 1
6002: oJumpForward 6011
6004: Choice Lookup Table
          30   5995
          31   5993
6009: oError 8
6011: oTypeSPop
6012: oGetLocal 1
6014: oPushResult
6015: oSetResult 0
6017: oPushResult
6018: equal_label
6019: oPop 2
6021: oChoice 6050
6023: oGetAddrLocal 1
6025: oPushResult
6026: oLabelNew
6027: oAssign
6028: oEmit 70
6030: oGetFromParam 1
6032: oPushResult
6033: oEmitLabel
6034: oPop 1
6036: oGetLocal 1
6038: oPushResult
6039: oEmitLabel
6040: oPop 1
6042: oGetParam 1
6044: oPushResult
6045: oGetLocal 1
6047: oAssign
6048: oJumpForward 6053
6050: Choice Lookup Table
           1   6023
6053: oGetAddrLocal 2
6055: oPushResult
6056: oSetResult 0
6058: oAssign
6059: oGetAddrLocal 2
6061: oPushResult
6062: oCall 6111
6064: oPop 1
6066: oTypeSNodeType
6067: oChoice 6080
6069: oJumpForward 6087
6071: oGetAddrLocal 2
6073: oPushResult
6074: oCall 5289
6076: oPop 1
6078: oJumpForward 6087
6080: Choice Lookup Table
          30   6071
          31   6069
6085: oError 8
6087: oEmit 70
6089: oGetLocal 2
6091: oPushResult
6092: oEmitLabel
6093: oPop 1
6095: oGetLocal 1
6097: oPushResult
6098: oEmitLabel
6099: oPop 1
6101: oJumpForward 6108
6103: Choice Lookup Table
          54   5990
6106: oJumpForward 6110
6108: oJumpBack 5988
6110: oReturn
6111: oLocalSpace 1
6113: oInputChoice 6167
6115: oGetAddrLocal 1
6117: oPushResult
6118: oSetResult 0
6120: oAssign
6121: oGetAddrLocal 1
6123: oPushResult
6124: oCall 6111
6126: oPop 1
6128: oTypeSNodeType
6129: oChoice 6158
6131: oGetParam 1
6133: oPushResult
6134: oLabelNew
6135: oAssign
6136: oEmit 66
6138: oGetFromParam 1
6140: oPushResult
6141: oEmitLabel
6142: oPop 1
6144: oEmit 69
6146: oGetLocal 1
6148: oPushResult
6149: oEmitLabel
6150: oPop 1
6152: oJumpForward 6165
6154: oEmit 40
6156: oJumpForward 6165
6158: Choice Lookup Table
          30   6154
          31   6131
6163: oError 8
6165: oJumpForward 6177
6167: Choice Lookup Table
          56   6115
6170: oGetParam 1
6172: oPushResult
6173: oCall 6178
6175: oPop 1
6177: oReturn
6178: oLocalSpace 2
6180: oGetAddrLocal 1
6182: oPushResult
6183: oSetResult 1
6185: oAssign
6186: oGetParam 1
6188: oPushResult
6189: oCall 6363
6191: oPop 1
6193: oInputChoice 6353
6195: oTypeSNodeType
6196: oChoice 6319
6198: oCall 10747
6200: oGetParam 1
6202: oPushResult
6203: oCall 6363
6205: oPop 1
6207: oTypeSNodeType
6208: oChoice 6216
6210: oEmit 22
6212: oCall 7931
6214: oJumpForward 6225
6216: Choice Lookup Table
          34   6210
          33   6210
6221: oCall 10767
6223: oEmit 37
6225: oJumpForward 6336
6227: oGetLocal 1
6229: oChoice 6245
6231: oGetAddrLocal 2
6233: oPushResult
6234: oCall 8161
6236: oAssign
6237: oGetAddrLocal 1
6239: oPushResult
6240: oSetResult 0
6242: oAssign
6243: oJumpForward 6248
6245: Choice Lookup Table
           1   6231
6248: oGetParam 1
6250: oPushResult
6251: oCall 6363
6253: oPop 1
6255: oTypeSNodeType
6256: oChoice 6294
6258: oCall 8270
6260: oEmit 17
6262: oGetLocal 2
6264: oPushResult
6265: oEmitInt
6266: oPop 1
6268: oGetGlobal 14
6270: oPushResult
6271: oTypeSPush
6272: oPop 1
6274: oJumpForward 6304
6276: oCall 8324
6278: oEmit 17
6280: oGetLocal 2
6282: oPushResult
6283: oEmitInt
6284: oPop 1
6286: oGetGlobal 14
6288: oPushResult
6289: oTypeSPush
6290: oPop 1
6292: oJumpForward 6304
6294: Choice Lookup Table
          32   6276
          38   6258
          39   6258
6301: oError 14
6303: oTypeSPop
6304: oJumpForward 6336
6306: oGetParam 1
6308: oPushResult
6309: oCall 6363
6311: oPop 1
6313: oCall 10747
6315: oCall 7931
6317: oJumpForward 6336
6319: Choice Lookup Table
          34   6306
          33   6306
          32   6227
          38   6227
          39   6227
          29   6198
          28   6198
6334: oError 17
6336: oJumpForward 6360
6338: oCall 10747
6340: oGetParam 1
6342: oPushResult
6343: oCall 6363
6345: oPop 1
6347: oCall 10767
6349: oEmit 38
6351: oJumpForward 6360
6353: Choice Lookup Table
          25   6338
          24   6195
6358: oJumpForward 6362
6360: oJumpBack 6193
6362: oReturn
6363: oLocalSpace 0
6365: oGetParam 1
6367: oPushResult
6368: oCall 6414
6370: oPop 1
6372: oInputChoice 6404
6374: oCall 10747
6376: oGetParam 1
6378: oPushResult
6379: oCall 6414
6381: oPop 1
6383: oCall 10767
6385: oEmit 34
6387: oJumpForward 6411
6389: oCall 10747
6391: oGetParam 1
6393: oPushResult
6394: oCall 6414
6396: oPop 1
6398: oCall 10767
6400: oEmit 35
6402: oJumpForward 6411
6404: Choice Lookup Table
          23   6389
          22   6374
6409: oJumpForward 6413
6411: oJumpBack 6372
6413: oReturn
6414: oLocalSpace 0
6416: oInputChoice 6442
6418: oGetParam 1
6420: oPushResult
6421: oCall 6455
6423: oPop 1
6425: oCall 10767
6427: oJumpForward 6454
6429: oGetParam 1
6431: oPushResult
6432: oCall 6455
6434: oPop 1
6436: oCall 10767
6438: oEmit 39
6440: oJumpForward 6454
6442: Choice Lookup Table
          25   6429
          24   6418
6447: oGetParam 1
6449: oPushResult
6450: oCall 6455
6452: oPop 1
6454: oReturn
6455: oLocalSpace 6
6457: oInputChoice 6696
6459: oEmit 15
6461: TOKEN_VALUE
6462: oPushResult
6463: oEmitInt
6464: oPop 1
6466: oGetGlobal 6
6468: oPushResult
6469: oTypeSPush
6470: oPop 1
6472: oJumpForward 6717
6474: oEmit 15
6476: TOKEN_VALUE
6477: oPushResult
6478: oEmitInt
6479: oPop 1
6481: oGetGlobal 9
6483: oPushResult
6484: oTypeSPush
6485: oPop 1
6487: oJumpForward 6717
6489: oGetParam 1
6491: oPushResult
6492: oCall 5320
6494: oPop 1
6496: oInput 15
6498: oJumpForward 6717
6500: oGetAddrLocal 1
6502: oPushResult
6503: CURRENT_STRLIT
6504: oPushResult
6505: oStringAllocShortStringLit
6506: oPop 1
6508: oAssign
6509: oEmit 16
6511: oGetLocal 1
6513: oPushResult
6514: oEmitInt
6515: oPop 1
6517: oGetGlobal 13
6519: oPushResult
6520: oTypeSPush
6521: oPop 1
6523: oCall 7529
6525: oCall 7475
6527: oJumpForward 6717
6529: oGetAddrLocal 2
6531: oPushResult
6532: oScopeFindRequire
6533: oAssign
6534: oGetAddrLocal 2
6536: oPushResult
6537: oCall 526
6539: oPop 1
6541: oGetLocal 2
6543: oPushResult
6544: oNodeType
6545: oPop 1
6547: oChoice 6620
6549: oGetLocal 2
6551: oPushResult
6552: oCall 8461
6554: oPop 1
6556: oJumpForward 6645
6558: oGetLocal 2
6560: oPushResult
6561: oCall 9081
6563: oPop 1
6565: oJumpForward 6645
6567: oGetAddrLocal 3
6569: oPushResult
6570: oGetLocal 2
6572: oPushResult
6573: oSetResult 21
6575: oPushResult
6576: oNodeGet
6577: oPop 2
6579: oAssign
6580: oGetLocal 3
6582: oPushResult
6583: oTypeSPush
6584: oPop 1
6586: oTypeSNodeType
6587: oChoice 6600
6589: oEmit 15
6591: oGetLocal 2
6593: oPushResult
6594: oCall 11176
6596: oPop 1
6598: oJumpForward 6609
6600: Choice Lookup Table
          30   6589
          40   6589
          28   6589
6607: oError 16
6609: oJumpForward 6645
6611: oGetLocal 2
6613: oPushResult
6614: oCall 6718
6616: oPop 1
6618: oJumpForward 6645
6620: Choice Lookup Table
          24   6611
          23   6611
          21   6611
          20   6611
          17   6567
          16   6567
          14   6558
          13   6549
6637: oError 6
6639: oGetGlobal 6
6641: oPushResult
6642: oTypeSPush
6643: oPop 1
6645: oJumpForward 6717
6647: oInput 0
6649: oGetAddrLocal 4
6651: oPushResult
6652: oScopeFindRequire
6653: oAssign
6654: oGetAddrLocal 4
6656: oPushResult
6657: oCall 526
6659: oPop 1
6661: oGetLocal 4
6663: oPushResult
6664: oSetResult 0
6666: oPushResult
6667: oCall 9770
6669: oPop 2
6671: oGetAddrLocal 5
6673: oPushResult
6674: oTypeSTop
6675: oAssign
6676: oTypeSPop
6677: oGetAddrLocal 6
6679: oPushResult
6680: oGetLocal 5
6682: oPushResult
6683: oCall 10902
6685: oPop 1
6687: oAssign
6688: oGetLocal 6
6690: oPushResult
6691: oTypeSPush
6692: oPop 1
6694: oJumpForward 6717
6696: Choice Lookup Table
          19   6647
           0   6529
           2   6500
          14   6489
           3   6474
           1   6459
6709: oError 6
6711: oGetGlobal 6
6713: oPushResult
6714: oTypeSPush
6715: oPop 1
6717: oReturn
6718: oLocalSpace 2
6720: oGetAddrLocal 1
6722: oPushResult
6723: oGetParam 1
6725: oPushResult
6726: oSetResult 21
6728: oPushResult
6729: oNodeGet
6730: oPop 2
6732: oAssign
6733: oGetAddrLocal 2
6735: oPushResult
6736: oGetParam 1
6738: oPushResult
6739: oCall 10644
6741: oPop 1
6743: oAssign
6744: oGetLocal 1
6746: oPushResult
6747: oTypeSPush
6748: oPop 1
6750: oTypeSNodeType
6751: oChoice 7450
6753: oGetParam 1
6755: oPushResult
6756: oNodeType
6757: oPop 1
6759: oChoice 6905
6761: oEmit 0
6763: oGetParam 1
6765: oPushResult
6766: oCall 11176
6768: oPop 1
6770: oJumpForward 6915
6772: oGetLocal 2
6774: oPushResult
6775: equal_zero
6776: oPop 1
6778: oChoice 6791
6780: oEmit 3
6782: oGetParam 1
6784: oPushResult
6785: oCall 11176
6787: oPop 1
6789: oJumpForward 6809
6791: Choice Lookup Table
           1   6780
6794: oEmit 9
6796: oGetLocal 2
6798: oPushResult
6799: oEmitInt
6800: oPop 1
6802: oGetParam 1
6804: oPushResult
6805: oCall 11176
6807: oPop 1
6809: oJumpForward 6915
6811: oGetParam 1
6813: oPushResult
6814: oSetResult 33
6816: oPushResult
6817: oNodeGetBoolean
6818: oPop 2
6820: oChoice 6863
6822: oGetLocal 2
6824: oPushResult
6825: equal_zero
6826: oPop 1
6828: oChoice 6841
6830: oEmit 8
6832: oGetParam 1
6834: oPushResult
6835: oCall 11176
6837: oPop 1
6839: oJumpForward 6859
6841: Choice Lookup Table
           1   6830
6844: oEmit 14
6846: oGetLocal 2
6848: oPushResult
6849: oEmitInt
6850: oPop 1
6852: oGetParam 1
6854: oPushResult
6855: oCall 11176
6857: oPop 1
6859: oEmit 23
6861: oJumpForward 6903
6863: Choice Lookup Table
           1   6822
6866: oGetLocal 2
6868: oPushResult
6869: equal_zero
6870: oPop 1
6872: oChoice 6885
6874: oEmit 6
6876: oGetParam 1
6878: oPushResult
6879: oCall 11176
6881: oPop 1
6883: oJumpForward 6903
6885: Choice Lookup Table
           1   6874
6888: oEmit 12
6890: oGetLocal 2
6892: oPushResult
6893: oEmitInt
6894: oPop 1
6896: oGetParam 1
6898: oPushResult
6899: oCall 11176
6901: oPop 1
6903: oJumpForward 6915
6905: Choice Lookup Table
          23   6811
          21   6772
          24   6761
          20   6761
6914: oEndChoice
6915: oJumpForward 7474
6917: oGetParam 1
6919: oPushResult
6920: oNodeType
6921: oPop 1
6923: oChoice 7069
6925: oEmit 1
6927: oGetParam 1
6929: oPushResult
6930: oCall 11176
6932: oPop 1
6934: oJumpForward 7079
6936: oGetLocal 2
6938: oPushResult
6939: equal_zero
6940: oPop 1
6942: oChoice 6955
6944: oEmit 4
6946: oGetParam 1
6948: oPushResult
6949: oCall 11176
6951: oPop 1
6953: oJumpForward 6973
6955: Choice Lookup Table
           1   6944
6958: oEmit 10
6960: oGetLocal 2
6962: oPushResult
6963: oEmitInt
6964: oPop 1
6966: oGetParam 1
6968: oPushResult
6969: oCall 11176
6971: oPop 1
6973: oJumpForward 7079
6975: oGetParam 1
6977: oPushResult
6978: oSetResult 33
6980: oPushResult
6981: oNodeGetBoolean
6982: oPop 2
6984: oChoice 7027
6986: oGetLocal 2
6988: oPushResult
6989: equal_zero
6990: oPop 1
6992: oChoice 7005
6994: oEmit 8
6996: oGetParam 1
6998: oPushResult
6999: oCall 11176
7001: oPop 1
7003: oJumpForward 7023
7005: Choice Lookup Table
           1   6994
7008: oEmit 14
7010: oGetLocal 2
7012: oPushResult
7013: oEmitInt
7014: oPop 1
7016: oGetParam 1
7018: oPushResult
7019: oCall 11176
7021: oPop 1
7023: oEmit 24
7025: oJumpForward 7067
7027: Choice Lookup Table
           1   6986
7030: oGetLocal 2
7032: oPushResult
7033: equal_zero
7034: oPop 1
7036: oChoice 7049
7038: oEmit 7
7040: oGetParam 1
7042: oPushResult
7043: oCall 11176
7045: oPop 1
7047: oJumpForward 7067
7049: Choice Lookup Table
           1   7038
7052: oEmit 13
7054: oGetLocal 2
7056: oPushResult
7057: oEmitInt
7058: oPop 1
7060: oGetParam 1
7062: oPushResult
7063: oCall 11176
7065: oPop 1
7067: oJumpForward 7079
7069: Choice Lookup Table
          23   6975
          21   6936
          24   6925
          20   6925
7078: oEndChoice
7079: oJumpForward 7474
7081: oError 16
7083: oJumpForward 7474
7085: oGetParam 1
7087: oPushResult
7088: oNodeType
7089: oPop 1
7091: oChoice 7237
7093: oEmit 2
7095: oGetParam 1
7097: oPushResult
7098: oCall 11176
7100: oPop 1
7102: oJumpForward 7247
7104: oGetLocal 2
7106: oPushResult
7107: equal_zero
7108: oPop 1
7110: oChoice 7123
7112: oEmit 5
7114: oGetParam 1
7116: oPushResult
7117: oCall 11176
7119: oPop 1
7121: oJumpForward 7141
7123: Choice Lookup Table
           1   7112
7126: oEmit 11
7128: oGetLocal 2
7130: oPushResult
7131: oEmitInt
7132: oPop 1
7134: oGetParam 1
7136: oPushResult
7137: oCall 11176
7139: oPop 1
7141: oJumpForward 7247
7143: oGetParam 1
7145: oPushResult
7146: oSetResult 33
7148: oPushResult
7149: oNodeGetBoolean
7150: oPop 2
7152: oChoice 7195
7154: oGetLocal 2
7156: oPushResult
7157: equal_zero
7158: oPop 1
7160: oChoice 7173
7162: oEmit 8
7164: oGetParam 1
7166: oPushResult
7167: oCall 11176
7169: oPop 1
7171: oJumpForward 7191
7173: Choice Lookup Table
           1   7162
7176: oEmit 14
7178: oGetLocal 2
7180: oPushResult
7181: oEmitInt
7182: oPop 1
7184: oGetParam 1
7186: oPushResult
7187: oCall 11176
7189: oPop 1
7191: oEmit 25
7193: oJumpForward 7235
7195: Choice Lookup Table
           1   7154
7198: oGetLocal 2
7200: oPushResult
7201: equal_zero
7202: oPop 1
7204: oChoice 7217
7206: oEmit 8
7208: oGetParam 1
7210: oPushResult
7211: oCall 11176
7213: oPop 1
7215: oJumpForward 7235
7217: Choice Lookup Table
           1   7206
7220: oEmit 14
7222: oGetLocal 2
7224: oPushResult
7225: oEmitInt
7226: oPop 1
7228: oGetParam 1
7230: oPushResult
7231: oCall 11176
7233: oPop 1
7235: oJumpForward 7247
7237: Choice Lookup Table
          23   7143
          21   7104
          24   7093
          20   7093
7246: oEndChoice
7247: oInputChoice 7277
7249: oTypeSPop
7250: oGetLocal 1
7252: oPushResult
7253: oSetResult 36
7255: oPushResult
7256: oNodeGet
7257: oPop 2
7259: oPushResult
7260: oTypeSPush
7261: oPop 1
7263: oCall 7529
7265: oCall 7475
7267: oJumpForward 7282
7269: oCall 7724
7271: oCall 7529
7273: oCall 7475
7275: oJumpForward 7282
7277: Choice Lookup Table
          16   7269
          18   7249
7282: oJumpForward 7474
7284: oGetParam 1
7286: oPushResult
7287: oNodeType
7288: oPop 1
7290: oChoice 7434
7292: oEmit 16
7294: oGetParam 1
7296: oPushResult
7297: oCall 11176
7299: oPop 1
7301: oJumpForward 7444
7303: oGetLocal 2
7305: oPushResult
7306: equal_zero
7307: oPop 1
7309: oChoice 7322
7311: oEmit 17
7313: oGetParam 1
7315: oPushResult
7316: oCall 11176
7318: oPop 1
7320: oJumpForward 7340
7322: Choice Lookup Table
           1   7311
7325: oEmit 20
7327: oGetLocal 2
7329: oPushResult
7330: oEmitInt
7331: oPop 1
7333: oGetParam 1
7335: oPushResult
7336: oCall 11176
7338: oPop 1
7340: oJumpForward 7444
7342: oGetParam 1
7344: oPushResult
7345: oSetResult 33
7347: oPushResult
7348: oNodeGetBoolean
7349: oPop 2
7351: oChoice 7392
7353: oGetLocal 2
7355: oPushResult
7356: equal_zero
7357: oPop 1
7359: oChoice 7372
7361: oEmit 8
7363: oGetParam 1
7365: oPushResult
7366: oCall 11176
7368: oPop 1
7370: oJumpForward 7390
7372: Choice Lookup Table
           1   7361
7375: oEmit 14
7377: oGetLocal 2
7379: oPushResult
7380: oEmitInt
7381: oPop 1
7383: oGetParam 1
7385: oPushResult
7386: oCall 11176
7388: oPop 1
7390: oJumpForward 7432
7392: Choice Lookup Table
           1   7353
7395: oGetLocal 2
7397: oPushResult
7398: equal_zero
7399: oPop 1
7401: oChoice 7414
7403: oEmit 18
7405: oGetParam 1
7407: oPushResult
7408: oCall 11176
7410: oPop 1
7412: oJumpForward 7432
7414: Choice Lookup Table
           1   7403
7417: oEmit 21
7419: oGetLocal 2
7421: oPushResult
7422: oEmitInt
7423: oPop 1
7425: oGetParam 1
7427: oPushResult
7428: oCall 11176
7430: oPop 1
7432: oJumpForward 7444
7434: Choice Lookup Table
          23   7342
          21   7303
          24   7292
          20   7292
7443: oEndChoice
7444: oCall 7529
7446: oCall 7475
7448: oJumpForward 7474
7450: Choice Lookup Table
          39   7284
          37   7284
          35   7284
          34   7085
          33   7085
          27   7081
          32   6917
          29   6917
          30   6917
          40   6753
          28   6753
7473: oEndChoice
7474: oReturn
7475: oLocalSpace 0
7477: oTypeSNodeType
7478: oChoice 7502
7480: oEmit 23
7482: oJumpForward 7528
7484: oEmit 24
7486: oJumpForward 7528
7488: oError 16
7490: oJumpForward 7528
7492: oEmit 25
7494: oJumpForward 7528
7496: oError 29
7498: oJumpForward 7528
7500: oJumpForward 7528
7502: Choice Lookup Table
          39   7500
          38   7500
          37   7500
          35   7500
          34   7496
          33   7492
          27   7488
          32   7484
          29   7484
          30   7484
          40   7480
          28   7480
7527: oEndChoice
7528: oReturn
7529: oLocalSpace 0
7531: oInputChoice 7569
7533: oTypeSNodeType
7534: oChoice 7548
7536: oCall 7581
7538: oJumpForward 7559
7540: oCall 7724
7542: oJumpForward 7559
7544: oCall 7803
7546: oJumpForward 7559
7548: Choice Lookup Table
          39   7544
          38   7544
          33   7540
          35   7536
7557: oError 10
7559: oJumpForward 7578
7561: oCall 7833
7563: oJumpForward 7578
7565: oCall 7987
7567: oJumpForward 7578
7569: Choice Lookup Table
          18   7565
          20   7561
          16   7533
7576: oJumpForward 7580
7578: oJumpBack 7531
7580: oReturn
7581: oLocalSpace 3
7583: oTypeSNodeType
7584: oChoice 7588
7586: oJumpForward 7593
7588: Choice Lookup Table
          35   7586
7591: oError 10
7593: oTypeSNodeType
7594: oChoice 7598
7596: oJumpForward 7603
7598: Choice Lookup Table
          35   7596
7601: oError 13
7603: oGetAddrLocal 1
7605: oPushResult
7606: oTypeSTop
7607: oPushResult
7608: oSetResult 37
7610: oPushResult
7611: oNodeGet
7612: oPop 2
7614: oPushResult
7615: oCall 10986
7617: oPop 1
7619: oAssign
7620: oGetAddrLocal 2
7622: oPushResult
7623: oTypeSTop
7624: oPushResult
7625: oSetResult 36
7627: oPushResult
7628: oNodeGet
7629: oPop 2
7631: oAssign
7632: oTypeSPop
7633: oGetLocal 2
7635: oPushResult
7636: oTypeSPush
7637: oPop 1
7639: oCall 5159
7641: oCall 10720
7643: oGetLocal 1
7645: oPushResult
7646: equal_zero
7647: oPop 1
7649: oChoice 7663
7651: oEmit 15
7653: oGetLocal 1
7655: oPushResult
7656: oEmitInt
7657: oPop 1
7659: oEmit 38
7661: oJumpForward 7666
7663: Choice Lookup Table
           0   7651
7666: oGetAddrLocal 3
7668: oPushResult
7669: oGetLocal 2
7671: oPushResult
7672: oSetResult 17
7674: oPushResult
7675: oNodeGetInt
7676: oPop 2
7678: oAssign
7679: oGetLocal 3
7681: oPushResult
7682: oSetResult 1
7684: oPushResult
7685: equal
7686: oPop 2
7688: oChoice 7702
7690: oEmit 15
7692: oGetLocal 3
7694: oPushResult
7695: oEmitInt
7696: oPop 1
7698: oEmit 34
7700: oJumpForward 7705
7702: Choice Lookup Table
           0   7690
7705: oEmit 36
7707: oInputChoice 7715
7709: oJumpForward 7723
7711: oJumpForward 7721
7713: oJumpForward 7721
7715: Choice Lookup Table
          13   7713
          17   7709
7720: oEndChoice
7721: oJumpBack 7593
7723: oReturn
7724: oLocalSpace 2
7726: oTypeSNodeType
7727: oChoice 7731
7729: oJumpForward 7736
7731: Choice Lookup Table
          33   7729
7734: oError 29
7736: oGetAddrLocal 1
7738: oPushResult
7739: oTypeSTop
7740: oPushResult
7741: oSetResult 36
7743: oPushResult
7744: oNodeGet
7745: oPop 2
7747: oAssign
7748: oTypeSPop
7749: oGetLocal 1
7751: oPushResult
7752: oTypeSPush
7753: oPop 1
7755: oCall 5159
7757: oCall 10720
7759: oGetAddrLocal 2
7761: oPushResult
7762: oGetLocal 1
7764: oPushResult
7765: oSetResult 17
7767: oPushResult
7768: oNodeGetInt
7769: oPop 2
7771: oAssign
7772: oGetLocal 2
7774: oPushResult
7775: oSetResult 1
7777: oPushResult
7778: equal
7779: oPop 2
7781: oChoice 7795
7783: oEmit 15
7785: oGetLocal 2
7787: oPushResult
7788: oEmitInt
7789: oPop 1
7791: oEmit 34
7793: oJumpForward 7798
7795: Choice Lookup Table
           0   7783
7798: oEmit 36
7800: oInput 17
7802: oReturn
7803: oLocalSpace 0
7805: oTypeSNodeType
7806: oChoice 7810
7808: oJumpForward 7817
7810: Choice Lookup Table
          39   7808
          38   7808
7815: oError 29
7817: oTypeSPop
7818: oGetGlobal 9
7820: oPushResult
7821: oTypeSPush
7822: oPop 1
7824: oCall 5159
7826: oCall 10720
7828: oEmit 36
7830: oInput 17
7832: oReturn
7833: oLocalSpace 2
7835: oTypeSNodeType
7836: oChoice 7840
7838: oJumpForward 7845
7840: Choice Lookup Table
          37   7838
7843: oError 11
7845: oTypeSTop
7846: oPushResult
7847: oSetResult 40
7849: oPushResult
7850: oNodeGet
7851: oPop 2
7853: oPushResult
7854: oScopeEnter
7855: oPop 1
7857: oInput 0
7859: oGetAddrLocal 1
7861: oPushResult
7862: oScopeFindRequire
7863: oAssign
7864: oGetLocal 1
7866: oPushResult
7867: oNodeType
7868: oPop 1
7870: oChoice 7874
7872: oJumpForward 7879
7874: Choice Lookup Table
          22   7872
7877: oError 12
7879: oScopeEnd
7880: oGetAddrLocal 2
7882: oPushResult
7883: oGetLocal 1
7885: oPushResult
7886: oSetResult 22
7888: oPushResult
7889: oNodeGetInt
7890: oPop 2
7892: oAssign
7893: oGetLocal 2
7895: oPushResult
7896: equal_zero
7897: oPop 1
7899: oChoice 7913
7901: oEmit 15
7903: oGetLocal 2
7905: oPushResult
7906: oEmitInt
7907: oPop 1
7909: oEmit 36
7911: oJumpForward 7916
7913: Choice Lookup Table
           0   7901
7916: oTypeSPop
7917: oGetLocal 1
7919: oPushResult
7920: oSetResult 21
7922: oPushResult
7923: oNodeGet
7924: oPop 2
7926: oPushResult
7927: oTypeSPush
7928: oPop 1
7930: oReturn
7931: oLocalSpace 2
7933: oGetAddrLocal 1
7935: oPushResult
7936: oTypeSTop
7937: oPushResult
7938: oSetResult 36
7940: oPushResult
7941: oNodeGet
7942: oPop 2
7944: oAssign
7945: oGetAddrLocal 2
7947: oPushResult
7948: oGetLocal 1
7950: oPushResult
7951: oSetResult 17
7953: oPushResult
7954: oNodeGetInt
7955: oPop 2
7957: oAssign
7958: oGetLocal 2
7960: oPushResult
7961: oSetResult 1
7963: oPushResult
7964: equal
7965: oPop 2
7967: oChoice 7981
7969: oEmit 15
7971: oGetLocal 2
7973: oPushResult
7974: oEmitInt
7975: oPop 1
7977: oEmit 34
7979: oJumpForward 7984
7981: Choice Lookup Table
           0   7969
7984: oEmit 36
7986: oReturn
7987: oLocalSpace 1
7989: oTypeSNodeType
7990: oChoice 7998
7992: oJumpForward 8005
7994: oError 29
7996: oJumpForward 8005
7998: Choice Lookup Table
          34   7994
          33   7992
8003: oError 9
8005: oEmit 25
8007: oGetAddrLocal 1
8009: oPushResult
8010: oTypeSTop
8011: oAssign
8012: oTypeSPop
8013: oGetLocal 1
8015: oPushResult
8016: oSetResult 36
8018: oPushResult
8019: oNodeGet
8020: oPop 2
8022: oPushResult
8023: oTypeSPush
8024: oPop 1
8026: oReturn
8027: oLocalSpace 1
8029: oGetAddrLocal 1
8031: oPushResult
8032: oTypeSNodeType
8033: oAssign
8034: oTypeSPop
8035: oGetLocal 1
8037: oPushResult
8038: oTypeSNodeType
8039: oPushResult
8040: equal_node_type
8041: oPop 2
8043: oChoice 8157
8045: oTypeSNodeType
8046: oChoice 8142
8048: oGetLocal 1
8050: oChoice 8057
8052: oEmit 30
8054: oReturn
8055: oJumpForward 8060
8057: Choice Lookup Table
          29   8052
8060: oJumpForward 8153
8062: oGetLocal 1
8064: oChoice 8071
8066: oEmit 31
8068: oReturn
8069: oJumpForward 8074
8071: Choice Lookup Table
          28   8066
8074: oJumpForward 8153
8076: oGetLocal 1
8078: oChoice 8111
8080: oReturn
8081: oJumpForward 8116
8083: oTypeSTop
8084: oPushResult
8085: oGetGlobal 10
8087: oPushResult
8088: equal_node
8089: oPop 2
8091: oChoice 8106
8093: oEmit 15
8095: oSetResult 1
8097: oPushResult
8098: oEmitInt
8099: oPop 1
8101: oEmit 36
8103: oReturn
8104: oJumpForward 8109
8106: Choice Lookup Table
           1   8093
8109: oJumpForward 8116
8111: Choice Lookup Table
          38   8083
          34   8080
8116: oJumpForward 8153
8118: oGetLocal 1
8120: oChoice 8125
8122: oReturn
8123: oJumpForward 8128
8125: Choice Lookup Table
          33   8122
8128: oJumpForward 8153
8130: oGetLocal 1
8132: oChoice 8137
8134: oReturn
8135: oJumpForward 8140
8137: Choice Lookup Table
          38   8134
8140: oJumpForward 8153
8142: Choice Lookup Table
          39   8130
          34   8118
          33   8076
          29   8062
          28   8048
8153: oError 14
8155: oJumpForward 8160
8157: Choice Lookup Table
           0   8045
8160: oReturn
8161: oLocalSpace 1
8163: oGetAddrLocal 1
8165: oPushResult
8166: oGetGlobal 14
8168: oPushResult
8169: oScopeAllocType
8170: oPop 1
8172: oAssign
8173: oTypeSNodeType
8174: oChoice 8242
8176: oEmit 17
8178: oGetLocal 1
8180: oPushResult
8181: oEmitInt
8182: oPop 1
8184: oEmit 22
8186: oEmit 29
8188: oGetGlobal 14
8190: oPushResult
8191: oSetResult 17
8193: oPushResult
8194: oNodeGetInt
8195: oPop 2
8197: oPushResult
8198: oEmitInt
8199: oPop 1
8201: oJumpForward 8251
8203: oEmit 17
8205: oGetLocal 1
8207: oPushResult
8208: oEmitInt
8209: oPop 1
8211: oEmit 15
8213: oSetResult 1
8215: oPushResult
8216: oEmitInt
8217: oPop 1
8219: oEmit 27
8221: oEmit 17
8223: oGetLocal 1
8225: oPushResult
8226: oSetResult 1
8228: oPushResult
8229: add
8230: oPop 2
8232: oPushResult
8233: oEmitInt
8234: oPop 1
8236: oEmit 22
8238: oEmit 27
8240: oJumpForward 8251
8242: Choice Lookup Table
          32   8203
          38   8176
          39   8176
8249: oError 14
8251: oTypeSPop
8252: oEmit 17
8254: oGetLocal 1
8256: oPushResult
8257: oEmitInt
8258: oPop 1
8260: oGetGlobal 14
8262: oPushResult
8263: oTypeSPush
8264: oPop 1
8266: oGetLocal 1
8268: oReturn
8269: oReturn
8270: oLocalSpace 0
8272: oEmit 59
8274: oSetResult 16
8276: oPushResult
8277: oEmitInt
8278: oPop 1
8280: oEmit 19
8282: oSetResult 8
8284: oPushResult
8285: oEmitInt
8286: oPop 1
8288: oEmit 22
8290: oEmit 28
8292: oEmit 19
8294: oSetResult 0
8296: oPushResult
8297: oEmitInt
8298: oPop 1
8300: oEmit 22
8302: oEmit 28
8304: oEmit 62
8306: oGetGlobal 19
8308: oPushResult
8309: oCall 11176
8311: oPop 1
8313: oEmit 61
8315: oSetResult 16
8317: oPushResult
8318: oEmitInt
8319: oPop 1
8321: oTypeSPop
8322: oTypeSPop
8323: oReturn
8324: oLocalSpace 0
8326: oEmit 59
8328: oSetResult 12
8330: oPushResult
8331: oEmitInt
8332: oPop 1
8334: oEmit 19
8336: oSetResult 8
8338: oPushResult
8339: oEmitInt
8340: oPop 1
8342: oEmit 22
8344: oEmit 26
8346: oEmit 19
8348: oSetResult 0
8350: oPushResult
8351: oEmitInt
8352: oPop 1
8354: oEmit 22
8356: oEmit 28
8358: oEmit 62
8360: oGetGlobal 20
8362: oPushResult
8363: oCall 11176
8365: oPop 1
8367: oEmit 61
8369: oSetResult 12
8371: oPushResult
8372: oEmitInt
8373: oPop 1
8375: oTypeSPop
8376: oTypeSPop
8377: oReturn
8378: oLocalSpace 2
8380: oGetAddrLocal 2
8382: oPushResult
8383: oGetParam 1
8385: oPushResult
8386: oSetResult 26
8388: oPushResult
8389: oNodeGetString
8390: oPop 2
8392: oAssign
8393: oGetLocal 2
8395: oPushResult
8396: oSetResult 0
8398: oPushResult
8399: equal_string
8400: oPop 2
8402: oChoice 8439
8404: oGetAddrLocal 1
8406: oPushResult
8407: oGetParam 1
8409: oPushResult
8410: oSetResult 4
8412: oPushResult
8413: oNodeGetInt
8414: oPop 2
8416: oPushResult
8417: ID_STRING
8418: oPop 1
8420: oPushResult
8421: oStringAllocLit
8422: oPop 1
8424: oAssign
8425: oJumpForward 8445
8427: oGetAddrLocal 1
8429: oPushResult
8430: oGetLocal 2
8432: oPushResult
8433: oStringAllocLit
8434: oPop 1
8436: oAssign
8437: oJumpForward 8445
8439: Choice Lookup Table
           0   8427
           1   8404
8444: oEndChoice
8445: oEmit 71
8447: oGetParam 1
8449: oPushResult
8450: oCall 11176
8452: oPop 1
8454: oGetLocal 1
8456: oPushResult
8457: oEmitInt
8458: oPop 1
8460: oReturn
8461: oLocalSpace 10
8463: oGetParam 1
8465: oPushResult
8466: oSetResult 25
8468: oPushResult
8469: oNodeGetBoolean
8470: oPop 2
8472: oChoice 8499
8474: oGetParam 1
8476: oPushResult
8477: oSetResult 28
8479: oPushResult
8480: oNodeGetBoolean
8481: oPop 2
8483: oChoice 8494
8485: oGetParam 1
8487: oPushResult
8488: oCall 8378
8490: oPop 1
8492: oJumpForward 8497
8494: Choice Lookup Table
           0   8485
8497: oJumpForward 8502
8499: Choice Lookup Table
           1   8474
8502: oGetParam 1
8504: oPushResult
8505: oSetResult 28
8507: oPushResult
8508: oSetResult 1
8510: oPushResult
8511: oNodeSetBoolean
8512: oPop 3
8514: oGetAddrLocal 1
8516: oPushResult
8517: oGetParam 1
8519: oPushResult
8520: oSetResult 27
8522: oPushResult
8523: oNodeGetBoolean
8524: oPop 2
8526: oAssign
8527: oGetAddrLocal 4
8529: oPushResult
8530: oGetParam 1
8532: oPushResult
8533: oNodeType
8534: oPop 1
8536: oPushResult
8537: oSetResult 13
8539: oPushResult
8540: equal_node_type
8541: oPop 2
8543: oAssign
8544: oGetLocal 4
8546: oChoice 8573
8548: oGetAddrLocal 2
8550: oPushResult
8551: oGetParam 1
8553: oPushResult
8554: oSetResult 21
8556: oPushResult
8557: oNodeGet
8558: oPop 2
8560: oAssign
8561: oGetAddrLocal 3
8563: oPushResult
8564: oGetLocal 2
8566: oPushResult
8567: oScopeAllocType
8568: oPop 1
8570: oAssign
8571: oJumpForward 8576
8573: Choice Lookup Table
           1   8548
8576: oGetAddrLocal 5
8578: oPushResult
8579: oGetParam 1
8581: oPushResult
8582: oSetResult 23
8584: oPushResult
8585: oNodeGet
8586: oPop 2
8588: oAssign
8589: oGetAddrLocal 6
8591: oPushResult
8592: oGetLocal 5
8594: oPushResult
8595: oSetResult 17
8597: oPushResult
8598: oNodeGetInt
8599: oPop 2
8601: oAssign
8602: oGetLocal 1
8604: oChoice 8626
8606: oEmit 60
8608: oGetLocal 6
8610: oPushResult
8611: oEmitInt
8612: oPop 1
8614: oJumpForward 8632
8616: oEmit 59
8618: oGetLocal 6
8620: oPushResult
8621: oEmitInt
8622: oPop 1
8624: oJumpForward 8632
8626: Choice Lookup Table
           0   8616
           1   8606
8631: oEndChoice
8632: oGetParam 1
8634: oPushResult
8635: oCall 10624
8637: oPop 1
8639: oPushResult
8640: oSetResult 0
8642: oPushResult
8643: greater
8644: oPop 2
8646: oChoice 8679
8648: oEmit 19
8650: oSetResult 0
8652: oPushResult
8653: oEmitInt
8654: oPop 1
8656: oEmit 20
8658: oGetParam 1
8660: oPushResult
8661: oCall 10644
8663: oPop 1
8665: oPushResult
8666: oEmitInt
8667: oPop 1
8669: oSetResult 0
8671: oPushResult
8672: oEmitInt
8673: oPop 1
8675: oEmit 28
8677: oJumpForward 8682
8679: Choice Lookup Table
           1   8648
8682: oGetAddrLocal 7
8684: oPushResult
8685: oGetLocal 5
8687: oPushResult
8688: oSetResult 15
8690: oPushResult
8691: oNodeGetIter
8692: oPop 2
8694: oAssign
8695: oGetAddrLocal 8
8697: oPushResult
8698: oGetLocal 7
8700: oPushResult
8701: oNodeIterValue
8702: oPop 1
8704: oAssign
8705: oInputChoice 8902
8707: oGetLocal 8
8709: oPushResult
8710: oNodeNull
8711: oPop 1
8713: oChoice 8719
8715: oJumpForward 8898
8717: oJumpForward 8722
8719: Choice Lookup Table
           1   8715
8722: oGetAddrLocal 9
8724: oPushResult
8725: oGetLocal 8
8727: oPushResult
8728: oSetResult 22
8730: oPushResult
8731: oNodeGetInt
8732: oPop 2
8734: oAssign
8735: oEmit 19
8737: oGetLocal 9
8739: oPushResult
8740: oEmitInt
8741: oPop 1
8743: oGetLocal 8
8745: oPushResult
8746: oSetResult 21
8748: oPushResult
8749: oNodeGet
8750: oPop 2
8752: oPushResult
8753: oTypeSPush
8754: oPop 1
8756: oGetLocal 8
8758: oPushResult
8759: oSetResult 33
8761: oPushResult
8762: oNodeGetBoolean
8763: oPop 2
8765: oChoice 8851
8767: oSetResult 1
8769: oPushResult
8770: oCall 9722
8772: oPop 1
8774: oCall 10662
8776: oEmit 28
8778: oJumpForward 8857
8780: oCall 5159
8782: oCall 8027
8784: oTypeSNodeType
8785: oChoice 8825
8787: oEmit 26
8789: oJumpForward 8849
8791: oEmit 27
8793: oJumpForward 8849
8795: oError 16
8797: oJumpForward 8849
8799: oEmit 28
8801: oJumpForward 8849
8803: oGetAddrLocal 10
8805: oPushResult
8806: oTypeSTop
8807: oPushResult
8808: oSetResult 17
8810: oPushResult
8811: oNodeGetInt
8812: oPop 2
8814: oAssign
8815: oEmit 29
8817: oGetLocal 10
8819: oPushResult
8820: oEmitInt
8821: oPop 1
8823: oJumpForward 8849
8825: Choice Lookup Table
          39   8803
          37   8803
          35   8803
          34   8799
          33   8799
          27   8795
          32   8791
          29   8791
          30   8791
          40   8787
          28   8787
8848: oEndChoice
8849: oJumpForward 8857
8851: Choice Lookup Table
           0   8780
           1   8767
8856: oEndChoice
8857: oTypeSPop
8858: oGetAddrLocal 7
8860: oPushResult
8861: oNodeIterNext
8862: oPop 1
8864: oGetAddrLocal 8
8866: oPushResult
8867: oGetLocal 7
8869: oPushResult
8870: oNodeIterValue
8871: oPop 1
8873: oAssign
8874: oGetLocal 8
8876: oPushResult
8877: oNodeNull
8878: oPop 1
8880: oChoice 8888
8882: oJumpForward 8898
8884: oJumpForward 8894
8886: oJumpForward 8894
8888: Choice Lookup Table
           0   8886
           1   8882
8893: oEndChoice
8894: oInput 13
8896: oJumpBack 8707
8898: oInput 15
8900: oJumpForward 8905
8902: Choice Lookup Table
          14   8707
8905: oGetLocal 8
8907: oPushResult
8908: oNodeNull
8909: oPop 1
8911: oChoice 8917
8913: oError 15
8915: oJumpForward 8920
8917: Choice Lookup Table
           0   8913
8920: oGetLocal 4
8922: oChoice 8951
8924: oEmit 19
8926: oGetParam 1
8928: oPushResult
8929: oSetResult 31
8931: oPushResult
8932: oNodeGetInt
8933: oPop 2
8935: oPushResult
8936: oEmitInt
8937: oPop 1
8939: oEmit 17
8941: oGetLocal 3
8943: oPushResult
8944: oEmitInt
8945: oPop 1
8947: oEmit 28
8949: oJumpForward 8954
8951: Choice Lookup Table
           1   8924
8954: oGetLocal 1
8956: oChoice 8980
8958: oEmit 63
8960: oGetParam 1
8962: oPushResult
8963: oCall 11176
8965: oPop 1
8967: oJumpForward 8986
8969: oEmit 62
8971: oGetParam 1
8973: oPushResult
8974: oCall 11176
8976: oPop 1
8978: oJumpForward 8986
8980: Choice Lookup Table
           0   8969
           1   8958
8985: oEndChoice
8986: oGetLocal 4
8988: oChoice 9069
8990: oGetLocal 2
8992: oPushResult
8993: oTypeSPush
8994: oPop 1
8996: oTypeSNodeType
8997: oChoice 9043
8999: oEmit 3
9001: oGetLocal 3
9003: oPushResult
9004: oEmitInt
9005: oPop 1
9007: oJumpForward 9067
9009: oEmit 4
9011: oGetLocal 3
9013: oPushResult
9014: oEmitInt
9015: oPop 1
9017: oJumpForward 9067
9019: oError 16
9021: oJumpForward 9067
9023: oEmit 5
9025: oGetLocal 3
9027: oPushResult
9028: oEmitInt
9029: oPop 1
9031: oJumpForward 9067
9033: oEmit 17
9035: oGetLocal 3
9037: oPushResult
9038: oEmitInt
9039: oPop 1
9041: oJumpForward 9067
9043: Choice Lookup Table
          39   9033
          37   9033
          35   9033
          34   9023
          33   9023
          27   9019
          32   9009
          29   9009
          30   9009
          40   8999
          28   8999
9066: oEndChoice
9067: oJumpForward 9072
9069: Choice Lookup Table
           1   8990
9072: oEmit 61
9074: oGetLocal 6
9076: oPushResult
9077: oEmitInt
9078: oPop 1
9080: oReturn
9081: oLocalSpace 0
9083: oGetParam 1
9085: oPushResult
9086: oGetGlobal 15
9088: oPushResult
9089: oNodeEqual
9090: oPop 2
9092: oChoice 9132
9094: oInput 14
9096: oCall 5159
9098: oTypeSNodeType
9099: oChoice 9107
9101: oJumpForward 9120
9103: oEmit 30
9105: oJumpForward 9120
9107: Choice Lookup Table
          32   9103
          29   9103
          30   9103
          40   9101
          28   9101
9118: oError 14
9120: oTypeSPop
9121: oGetGlobal 6
9123: oPushResult
9124: oTypeSPush
9125: oPop 1
9127: oInput 15
9129: oReturn
9130: oJumpForward 9135
9132: Choice Lookup Table
           1   9094
9135: oGetParam 1
9137: oPushResult
9138: oGetGlobal 16
9140: oPushResult
9141: oNodeEqual
9142: oPop 2
9144: oChoice 9178
9146: oInput 14
9148: oCall 5159
9150: oTypeSNodeType
9151: oChoice 9159
9153: oEmit 31
9155: oJumpForward 9166
9157: oJumpForward 9166
9159: Choice Lookup Table
          29   9157
          28   9153
9164: oError 14
9166: oTypeSPop
9167: oGetGlobal 9
9169: oPushResult
9170: oTypeSPush
9171: oPop 1
9173: oInput 15
9175: oReturn
9176: oJumpForward 9181
9178: Choice Lookup Table
           1   9146
9181: oGetParam 1
9183: oPushResult
9184: oGetGlobal 17
9186: oPushResult
9187: oNodeEqual
9188: oPop 2
9190: oChoice 9230
9192: oInput 14
9194: oCall 5159
9196: oTypeSNodeType
9197: oChoice 9218
9199: oTypeSTop
9200: oPushResult
9201: oSetResult 43
9203: oPushResult
9204: oNodeGetBoolean
9205: oPop 2
9207: oChoice 9213
9209: oError 28
9211: oJumpForward 9216
9213: Choice Lookup Table
           1   9209
9216: oJumpForward 9223
9218: Choice Lookup Table
          40   9199
9221: oError 14
9223: oEmit 33
9225: oInput 15
9227: oReturn
9228: oJumpForward 9233
9230: Choice Lookup Table
           1   9192
9233: oGetParam 1
9235: oPushResult
9236: oGetGlobal 18
9238: oPushResult
9239: oNodeEqual
9240: oPop 2
9242: oChoice 9282
9244: oInput 14
9246: oCall 5159
9248: oTypeSNodeType
9249: oChoice 9270
9251: oTypeSTop
9252: oPushResult
9253: oSetResult 43
9255: oPushResult
9256: oNodeGetBoolean
9257: oPop 2
9259: oChoice 9265
9261: oError 28
9263: oJumpForward 9268
9265: Choice Lookup Table
           1   9261
9268: oJumpForward 9275
9270: Choice Lookup Table
          40   9251
9273: oError 14
9275: oEmit 32
9277: oInput 15
9279: oReturn
9280: oJumpForward 9285
9282: Choice Lookup Table
           1   9244
9285: oError 16
9287: oReturn
9288: oLocalSpace 0
9290: oInputChoice 9349
9292: oCall 10475
9294: oJumpForward 9378
9296: oCall 10482
9298: oJumpForward 9378
9300: oCall 10606
9302: oJumpForward 9378
9304: oCall 10609
9306: oJumpForward 9378
9308: oCall 9960
9310: oJumpForward 9378
9312: oCall 10283
9314: oJumpForward 9378
9316: oCall 10026
9318: oJumpForward 9378
9320: oCall 10203
9322: oJumpForward 9378
9324: oCall 10368
9326: oJumpForward 9378
9328: oCall 10336
9330: oJumpForward 9378
9332: oCall 10452
9334: oJumpForward 9378
9336: oCall 9379
9338: oJumpForward 9378
9340: oCall 10400
9342: oJumpForward 9378
9344: oChangeIntLitToLabelIdent
9345: oCall 9379
9347: oJumpForward 9378
9349: Choice Lookup Table
           1   9344
          53   9340
           0   9336
          35   9332
          51   9328
          52   9324
          49   9320
          44   9316
          48   9312
          41   9308
          66   9304
          65   9300
          64   9296
          63   9292
9378: oReturn
9379: oLocalSpace 1
9381: oGetAddrLocal 1
9383: oPushResult
9384: oScopeFindRequire
9385: oAssign
9386: oGetAddrLocal 1
9388: oPushResult
9389: oCall 526
9391: oPop 1
9393: oGetLocal 1
9395: oPushResult
9396: oNodeType
9397: oPop 1
9399: oChoice 9439
9401: oGetLocal 1
9403: oPushResult
9404: oCall 9455
9406: oPop 1
9408: oCall 9288
9410: oJumpForward 9454
9412: oGetLocal 1
9414: oPushResult
9415: oCall 8461
9417: oPop 1
9419: oJumpForward 9454
9421: oGetLocal 1
9423: oPushResult
9424: oCall 9505
9426: oPop 1
9428: oJumpForward 9454
9430: oGetLocal 1
9432: oPushResult
9433: oCall 9595
9435: oPop 1
9437: oJumpForward 9454
9439: Choice Lookup Table
          13   9430
          23   9421
          21   9421
          20   9421
          12   9412
          25   9401
9452: oError 0
9454: oReturn
9455: oLocalSpace 0
9457: oGetParam 1
9459: oPushResult
9460: oSetResult 34
9462: oPushResult
9463: oNodeGetBoolean
9464: oPop 2
9466: oChoice 9472
9468: oError 21
9470: oJumpForward 9475
9472: Choice Lookup Table
           1   9468
9475: oEmit 69
9477: oGetParam 1
9479: oPushResult
9480: oSetResult 22
9482: oPushResult
9483: oNodeGetLabel
9484: oPop 2
9486: oPushResult
9487: oEmitLabel
9488: oPop 1
9490: oGetParam 1
9492: oPushResult
9493: oSetResult 34
9495: oPushResult
9496: oSetResult 1
9498: oPushResult
9499: oNodeSetBoolean
9500: oPop 3
9502: oInput 12
9504: oReturn
9505: oLocalSpace 0
9507: oGetParam 1
9509: oPushResult
9510: oSetResult 1
9512: oPushResult
9513: oCall 9770
9515: oPop 2
9517: oInput 4
9519: oCall 5159
9521: oCall 8027
9523: oCall 9526
9525: oReturn
9526: oLocalSpace 1
9528: oTypeSNodeType
9529: oChoice 9569
9531: oEmit 26
9533: oJumpForward 9593
9535: oEmit 27
9537: oJumpForward 9593
9539: oError 16
9541: oJumpForward 9593
9543: oEmit 28
9545: oJumpForward 9593
9547: oGetAddrLocal 1
9549: oPushResult
9550: oTypeSTop
9551: oPushResult
9552: oSetResult 17
9554: oPushResult
9555: oNodeGetInt
9556: oPop 2
9558: oAssign
9559: oEmit 29
9561: oGetLocal 1
9563: oPushResult
9564: oEmitInt
9565: oPop 1
9567: oJumpForward 9593
9569: Choice Lookup Table
          39   9547
          37   9547
          35   9547
          34   9543
          33   9543
          27   9539
          32   9535
          29   9535
          30   9535
          40   9531
          28   9531
9592: oEndChoice
9593: oTypeSPop
9594: oReturn
9595: oLocalSpace 1
9597: oGetParam 1
9599: oPushResult
9600: oSetResult 6
9602: oPushResult
9603: oNodeGet
9604: oPop 2
9606: oPushResult
9607: oScopeCurrent
9608: oPushResult
9609: oNodeEqual
9610: oPop 2
9612: oChoice 9618
9614: oError 20
9616: oJumpForward 9621
9618: Choice Lookup Table
           0   9614
9621: oEmit 8
9623: oGetParam 1
9625: oPushResult
9626: oSetResult 31
9628: oPushResult
9629: oNodeGetInt
9630: oPop 2
9632: oPushResult
9633: oEmitInt
9634: oPop 1
9636: oGetParam 1
9638: oPushResult
9639: oSetResult 21
9641: oPushResult
9642: oNodeGet
9643: oPop 2
9645: oPushResult
9646: oTypeSPush
9647: oPop 1
9649: oInput 4
9651: oCall 5159
9653: oCall 8027
9655: oTypeSNodeType
9656: oChoice 9696
9658: oEmit 26
9660: oJumpForward 9720
9662: oEmit 27
9664: oJumpForward 9720
9666: oError 16
9668: oJumpForward 9720
9670: oEmit 28
9672: oJumpForward 9720
9674: oGetAddrLocal 1
9676: oPushResult
9677: oTypeSTop
9678: oPushResult
9679: oSetResult 17
9681: oPushResult
9682: oNodeGetInt
9683: oPop 2
9685: oAssign
9686: oEmit 29
9688: oGetLocal 1
9690: oPushResult
9691: oEmitInt
9692: oPop 1
9694: oJumpForward 9720
9696: Choice Lookup Table
          39   9674
          37   9674
          35   9674
          34   9670
          33   9670
          27   9666
          32   9662
          29   9662
          30   9662
          40   9658
          28   9658
9719: oEndChoice
9720: oTypeSPop
9721: oReturn
9722: oLocalSpace 1
9724: oInput 0
9726: oGetAddrLocal 1
9728: oPushResult
9729: oScopeFindRequire
9730: oAssign
9731: oGetAddrLocal 1
9733: oPushResult
9734: oCall 526
9736: oPop 1
9738: oGetLocal 1
9740: oPushResult
9741: oNodeType
9742: oPop 1
9744: oChoice 9748
9746: oJumpForward 9759
9748: Choice Lookup Table
          24   9746
          23   9746
          21   9746
          20   9746
9757: oError 4
9759: oGetLocal 1
9761: oPushResult
9762: oGetParam 1
9764: oPushResult
9765: oCall 9770
9767: oPop 2
9769: oReturn
9770: oLocalSpace 0
9772: oGetParam 2
9774: oPushResult
9775: oNodeType
9776: oPop 1
9778: oChoice 9860
9780: oEmit 16
9782: oGetParam 2
9784: oPushResult
9785: oCall 11176
9787: oPop 1
9789: oJumpForward 9871
9791: oEmit 17
9793: oGetParam 2
9795: oPushResult
9796: oCall 11176
9798: oPop 1
9800: oJumpForward 9871
9802: oGetParam 2
9804: oPushResult
9805: oSetResult 33
9807: oPushResult
9808: oNodeGetBoolean
9809: oPop 2
9811: oChoice 9824
9813: oEmit 8
9815: oGetParam 2
9817: oPushResult
9818: oCall 11176
9820: oPop 1
9822: oJumpForward 9836
9824: Choice Lookup Table
           1   9813
9827: oEmit 18
9829: oGetParam 2
9831: oPushResult
9832: oCall 11176
9834: oPop 1
9836: oJumpForward 9871
9838: oGetParam 1
9840: oChoice 9853
9842: oEmit 16
9844: oGetParam 2
9846: oPushResult
9847: oCall 11176
9849: oPop 1
9851: oJumpForward 9858
9853: Choice Lookup Table
           0   9842
9856: oError 4
9858: oJumpForward 9871
9860: Choice Lookup Table
          24   9838
          23   9802
          21   9791
          20   9780
9869: oError 4
9871: oGetParam 2
9873: oPushResult
9874: oSetResult 21
9876: oPushResult
9877: oNodeGet
9878: oPop 2
9880: oPushResult
9881: oTypeSPush
9882: oPop 1
9884: oTypeSNodeType
9885: oChoice 9900
9887: oInputChoice 9895
9889: oEmit 25
9891: oCall 7724
9893: oJumpForward 9898
9895: Choice Lookup Table
          16   9889
9898: oJumpForward 9903
9900: Choice Lookup Table
          33   9887
9903: oCall 7529
9905: oReturn
9906: oLocalSpace 0
9908: oGetParam 1
9910: oPushResult
9911: oSetResult 1
9913: oPushResult
9914: oCall 9770
9916: oPop 2
9918: oCall 10720
9920: oGetParam 1
9922: oPushResult
9923: oCall 6718
9925: oPop 1
9927: oTypeSPop
9928: oEmit 32
9930: oEmit 26
9932: oReturn
9933: oLocalSpace 0
9935: oGetParam 1
9937: oPushResult
9938: oSetResult 1
9940: oPushResult
9941: oCall 9770
9943: oPop 2
9945: oCall 10720
9947: oGetParam 1
9949: oPushResult
9950: oCall 6718
9952: oPop 1
9954: oTypeSPop
9955: oEmit 33
9957: oEmit 26
9959: oReturn
9960: oLocalSpace 2
9962: oGetAddrLocal 1
9964: oPushResult
9965: oSetResult 0
9967: oAssign
9968: oGetAddrLocal 1
9970: oPushResult
9971: oCall 5182
9973: oPop 1
9975: oInput 42
9977: oCall 9288
9979: oInputChoice 10014
9981: oGetAddrLocal 2
9983: oPushResult
9984: oLabelNew
9985: oAssign
9986: oEmit 66
9988: oGetLocal 2
9990: oPushResult
9991: oEmitLabel
9992: oPop 1
9994: oEmit 69
9996: oGetLocal 1
9998: oPushResult
9999: oEmitLabel
10000: oPop 1
10002: oCall 9288
10004: oEmit 69
10006: oGetLocal 2
10008: oPushResult
10009: oEmitLabel
10010: oPop 1
10012: oJumpForward 10025
10014: Choice Lookup Table
          43   9981
10017: oEmit 69
10019: oGetLocal 1
10021: oPushResult
10022: oEmitLabel
10023: oPop 1
10025: oReturn
10026: oLocalSpace 4
10028: oInput 0
10030: oGetAddrLocal 1
10032: oPushResult
10033: oScopeFindRequire
10034: oAssign
10035: oGetLocal 1
10037: oPushResult
10038: oSetResult 1
10040: oPushResult
10041: oCall 9770
10043: oPop 2
10045: oCall 10720
10047: oInput 4
10049: oCall 5159
10051: oCall 10720
10053: oEmit 26
10055: oGetAddrLocal 2
10057: oPushResult
10058: oLabelNew
10059: oAssign
10060: oGetAddrLocal 3
10062: oPushResult
10063: oLabelNew
10064: oAssign
10065: oEmit 66
10067: oGetLocal 3
10069: oPushResult
10070: oEmitLabel
10071: oPop 1
10073: oGetAddrLocal 4
10075: oPushResult
10076: oLabelNew
10077: oAssign
10078: oEmit 69
10080: oGetLocal 4
10082: oPushResult
10083: oEmitLabel
10084: oPop 1
10086: oInputChoice 10166
10088: oGetLocal 1
10090: oPushResult
10091: oCall 9906
10093: oPop 1
10095: oEmit 69
10097: oGetLocal 3
10099: oPushResult
10100: oEmitLabel
10101: oPop 1
10103: oGetLocal 1
10105: oPushResult
10106: oCall 6718
10108: oPop 1
10110: oTypeSPop
10111: oCall 5159
10113: oCall 10720
10115: oEmit 49
10117: oEmit 67
10119: oGetLocal 2
10121: oPushResult
10122: oEmitLabel
10123: oPop 1
10125: oJumpForward 10172
10127: oGetLocal 1
10129: oPushResult
10130: oCall 9933
10132: oPop 1
10134: oEmit 69
10136: oGetLocal 3
10138: oPushResult
10139: oEmitLabel
10140: oPop 1
10142: oGetLocal 1
10144: oPushResult
10145: oCall 6718
10147: oPop 1
10149: oTypeSPop
10150: oCall 5159
10152: oCall 10720
10154: oEmit 50
10156: oEmit 67
10158: oGetLocal 2
10160: oPushResult
10161: oEmitLabel
10162: oPop 1
10164: oJumpForward 10172
10166: Choice Lookup Table
          46   10127
          45   10088
10171: oEndChoice
10172: oGetLocal 4
10174: oPushResult
10175: oGetLocal 2
10177: oPushResult
10178: oLoopPush
10179: oPop 2
10181: oInput 47
10183: oCall 9288
10185: oEmit 66
10187: oGetLocal 4
10189: oPushResult
10190: oEmitLabel
10191: oPop 1
10193: oEmit 69
10195: oGetLocal 2
10197: oPushResult
10198: oEmitLabel
10199: oPop 1
10201: oLoopPop
10202: oReturn
10203: oLocalSpace 3
10205: oGetAddrLocal 1
10207: oPushResult
10208: oLabelNew
10209: oAssign
10210: oEmit 69
10212: oGetLocal 1
10214: oPushResult
10215: oEmitLabel
10216: oPop 1
10218: oGetAddrLocal 2
10220: oPushResult
10221: oLabelNew
10222: oAssign
10223: oGetLocal 1
10225: oPushResult
10226: oGetLocal 2
10228: oPushResult
10229: oLoopPush
10230: oPop 2
10232: oCall 9288
10234: oInputChoice 10265
10236: oCall 9288
10238: oJumpForward 10271
10240: oGetAddrLocal 3
10242: oPushResult
10243: oCall 5182
10245: oPop 1
10247: oEmit 70
10249: oGetLocal 3
10251: oPushResult
10252: oEmitLabel
10253: oPop 1
10255: oGetLocal 1
10257: oPushResult
10258: oEmitLabel
10259: oPop 1
10261: oJumpForward 10273
10263: oJumpForward 10271
10265: Choice Lookup Table
          50   10240
           5   10236
10270: oEndChoice
10271: oJumpBack 10234
10273: oEmit 69
10275: oGetLocal 2
10277: oPushResult
10278: oEmitLabel
10279: oPop 1
10281: oLoopPop
10282: oReturn
10283: oLocalSpace 2
10285: oGetAddrLocal 1
10287: oPushResult
10288: oLabelNew
10289: oAssign
10290: oEmit 69
10292: oGetLocal 1
10294: oPushResult
10295: oEmitLabel
10296: oPop 1
10298: oGetAddrLocal 2
10300: oPushResult
10301: oCall 5182
10303: oPop 1
10305: oGetLocal 1
10307: oPushResult
10308: oGetLocal 2
10310: oPushResult
10311: oLoopPush
10312: oPop 2
10314: oInput 47
10316: oCall 9288
10318: oEmit 66
10320: oGetLocal 1
10322: oPushResult
10323: oEmitLabel
10324: oPop 1
10326: oEmit 69
10328: oGetLocal 2
10330: oPushResult
10331: oEmitLabel
10332: oPop 1
10334: oLoopPop
10335: oReturn
10336: oLocalSpace 0
10338: oLoopContinueLabel
10339: oPushResult
10340: oSetResult 0
10342: oPushResult
10343: equal_label
10344: oPop 2
10346: oChoice 10361
10348: oError 18
10350: oJumpForward 10367
10352: oEmit 66
10354: oLoopContinueLabel
10355: oPushResult
10356: oEmitLabel
10357: oPop 1
10359: oJumpForward 10367
10361: Choice Lookup Table
           0   10352
           1   10348
10366: oEndChoice
10367: oReturn
10368: oLocalSpace 0
10370: oLoopBreakLabel
10371: oPushResult
10372: oSetResult 0
10374: oPushResult
10375: equal_label
10376: oPop 2
10378: oChoice 10393
10380: oError 18
10382: oJumpForward 10399
10384: oEmit 66
10386: oLoopBreakLabel
10387: oPushResult
10388: oEmitLabel
10389: oPop 1
10391: oJumpForward 10399
10393: Choice Lookup Table
           0   10384
           1   10380
10398: oEndChoice
10399: oReturn
10400: oLocalSpace 1
10402: oInputChoice 10409
10404: oJumpForward 10415
10406: oChangeIntLitToLabelIdent
10407: oJumpForward 10415
10409: Choice Lookup Table
           1   10406
           0   10404
10414: oEndChoice
10415: oGetAddrLocal 1
10417: oPushResult
10418: oScopeCurrent
10419: oPushResult
10420: oScopeFindRequireInScope
10421: oPop 1
10423: oAssign
10424: oGetLocal 1
10426: oPushResult
10427: oSetResult 28
10429: oPushResult
10430: oSetResult 1
10432: oPushResult
10433: oNodeSetBoolean
10434: oPop 3
10436: oEmit 66
10438: oGetLocal 1
10440: oPushResult
10441: oSetResult 22
10443: oPushResult
10444: oNodeGetLabel
10445: oPop 2
10447: oPushResult
10448: oEmitLabel
10449: oPop 1
10451: oReturn
10452: oLocalSpace 0
10454: oCall 9288
10456: oInputChoice 10466
10458: oCall 9288
10460: oJumpForward 10472
10462: oJumpForward 10474
10464: oJumpForward 10472
10466: Choice Lookup Table
          36   10462
           5   10458
10471: oEndChoice
10472: oJumpBack 10456
10474: oReturn
10475: oLocalSpace 0
10477: oCall 10482
10479: oEmit 79
10481: oReturn
10482: oLocalSpace 0
10484: oInputChoice 10602
10486: oCall 5159
10488: oTypeSNodeType
10489: oChoice 10560
10491: oEmit 72
10493: oJumpForward 10583
10495: oEmit 73
10497: oJumpForward 10583
10499: oEmit 30
10501: oEmit 72
10503: oJumpForward 10583
10505: oEmit 74
10507: oJumpForward 10583
10509: oEmit 75
10511: oJumpForward 10583
10513: oError 16
10515: oJumpForward 10583
10517: oEmit 16
10519: oTypeSTop
10520: oPushResult
10521: oSetResult 42
10523: oPushResult
10524: oNodeGetInt
10525: oPop 2
10527: oPushResult
10528: oEmitInt
10529: oPop 1
10531: oEmit 78
10533: oJumpForward 10583
10535: oTypeSTop
10536: oPushResult
10537: oGetGlobal 10
10539: oPushResult
10540: equal_node
10541: oPop 2
10543: oChoice 10549
10545: oEmit 76
10547: oJumpForward 10554
10549: Choice Lookup Table
           1   10545
10552: oEmit 77
10554: oJumpForward 10583
10556: oEmit 77
10558: oJumpForward 10583
10560: Choice Lookup Table
          34   10556
          33   10535
          40   10517
          27   10513
          38   10509
          39   10509
          32   10505
          29   10499
          30   10495
          28   10491
10581: oError 17
10583: oTypeSPop
10584: oInputChoice 10592
10586: oJumpForward 10600
10588: oJumpForward 10598
10590: oJumpForward 10598
10592: Choice Lookup Table
          13   10590
          15   10586
10597: oEndChoice
10598: oJumpBack 10486
10600: oJumpForward 10605
10602: Choice Lookup Table
          14   10486
10605: oReturn
10606: oLocalSpace 0
10608: oReturn
10609: oLocalSpace 0
10611: oReturn
10612: oLocalSpace 0
10614: oScopeCurrent
10615: oPushResult
10616: oSetResult 14
10618: oPushResult
10619: oNodeGetInt
10620: oPop 2
10622: oReturn
10623: oReturn
10624: oLocalSpace 0
10626: oGetParam 1
10628: oPushResult
10629: oSetResult 20
10631: oPushResult
10632: oNodeGet
10633: oPop 2
10635: oPushResult
10636: oSetResult 14
10638: oPushResult
10639: oNodeGetInt
10640: oPop 2
10642: oReturn
10643: oReturn
10644: oLocalSpace 0
10646: oCall 10612
10648: oPushResult
10649: oGetParam 1
10651: oPushResult
10652: oCall 10624
10654: oPop 1
10656: oPushResult
10657: subtract
10658: oPop 2
10660: oReturn
10661: oReturn
10662: oLocalSpace 1
10664: oGetAddrLocal 1
10666: oPushResult
10667: oTypeSNodeType
10668: oAssign
10669: oTypeSPop
10670: oGetLocal 1
10672: oPushResult
10673: oTypeSNodeType
10674: oPushResult
10675: equal_node_type
10676: oPop 2
10678: oChoice 10716
10680: oTypeSNodeType
10681: oChoice 10707
10683: oGetLocal 1
10685: oChoice 10690
10687: oReturn
10688: oJumpForward 10693
10690: Choice Lookup Table
          34   10687
10693: oJumpForward 10712
10695: oGetLocal 1
10697: oChoice 10702
10699: oReturn
10700: oJumpForward 10705
10702: Choice Lookup Table
          33   10699
10705: oJumpForward 10712
10707: Choice Lookup Table
          34   10695
          33   10683
10712: oError 14
10714: oJumpForward 10719
10716: Choice Lookup Table
           0   10680
10719: oReturn
10720: oLocalSpace 0
10722: oTypeSNodeType
10723: oChoice 10727
10725: oJumpForward 10732
10727: Choice Lookup Table
          28   10725
10730: oError 7
10732: oTypeSPop
10733: oReturn
10734: oLocalSpace 0
10736: oTypeSNodeType
10737: oChoice 10741
10739: oJumpForward 10746
10741: Choice Lookup Table
          28   10739
10744: oError 7
10746: oReturn
10747: oLocalSpace 0
10749: oTypeSNodeType
10750: oChoice 10758
10752: oJumpForward 10765
10754: oEmit 30
10756: oJumpForward 10765
10758: Choice Lookup Table
          29   10754
          28   10752
10763: oError 7
10765: oTypeSPop
10766: oReturn
10767: oLocalSpace 0
10769: oTypeSNodeType
10770: oChoice 10785
10772: oJumpForward 10792
10774: oEmit 30
10776: oTypeSPop
10777: oGetGlobal 6
10779: oPushResult
10780: oTypeSPush
10781: oPop 1
10783: oJumpForward 10792
10785: Choice Lookup Table
          29   10774
          28   10772
10790: oError 7
10792: oReturn
10793: oLocalSpace 0
10795: oTypeSNodeType
10796: oChoice 10809
10798: oEmit 30
10800: oTypeSPop
10801: oGetGlobal 6
10803: oPushResult
10804: oTypeSPush
10805: oPop 1
10807: oJumpForward 10812
10809: Choice Lookup Table
          29   10798
10812: oReturn
10813: oLocalSpace 0
10815: oTypeSNodeType
10816: oChoice 10820
10818: oJumpForward 10825
10820: Choice Lookup Table
          30   10818
10823: oError 8
10825: oTypeSPop
10826: oReturn
10827: oLocalSpace 0
10829: oTypeSNodeType
10830: oChoice 10834
10832: oJumpForward 10839
10834: Choice Lookup Table
          30   10832
10837: oError 8
10839: oReturn
10840: oLocalSpace 1
10842: oGetAddrLocal 1
10844: oPushResult
10845: oGetParam 2
10847: oPushResult
10848: oNodeNew
10849: oPop 1
10851: oAssign
10852: oGetLocal 1
10854: oPushResult
10855: oSetResult 17
10857: oPushResult
10858: oGetParam 1
10860: oPushResult
10861: oNodeSetInt
10862: oPop 3
10864: oGetLocal 1
10866: oPushResult
10867: oTypeAdd
10868: oPop 1
10870: oGetLocal 1
10872: oReturn
10873: oReturn
10874: oLocalSpace 1
10876: oGetAddrLocal 1
10878: oPushResult
10879: oGetParam 2
10881: oPushResult
10882: oNodeNew
10883: oPop 1
10885: oAssign
10886: oGetLocal 1
10888: oPushResult
10889: oSetResult 4
10891: oPushResult
10892: oGetParam 1
10894: oPushResult
10895: oNodeSetInt
10896: oPop 3
10898: oGetLocal 1
10900: oReturn
10901: oReturn
10902: oLocalSpace 1
10904: oGetAddrLocal 1
10906: oPushResult
10907: oGetParam 1
10909: oPushResult
10910: oSetResult 35
10912: oPushResult
10913: oNodeGet
10914: oPop 2
10916: oAssign
10917: oGetLocal 1
10919: oPushResult
10920: oNodeNull
10921: oPop 1
10923: oChoice 10979
10925: oGetAddrLocal 1
10927: oPushResult
10928: oSetResult 33
10930: oPushResult
10931: oNodeNew
10932: oPop 1
10934: oAssign
10935: oGetLocal 1
10937: oPushResult
10938: oSetResult 36
10940: oPushResult
10941: oGetParam 1
10943: oPushResult
10944: oNodeSet
10945: oPop 3
10947: oGetLocal 1
10949: oPushResult
10950: oSetResult 17
10952: oPushResult
10953: oSetResult 8
10955: oPushResult
10956: oNodeSetInt
10957: oPop 3
10959: oGetLocal 1
10961: oPushResult
10962: oTypeAdd
10963: oPop 1
10965: oGetParam 1
10967: oPushResult
10968: oSetResult 35
10970: oPushResult
10971: oGetLocal 1
10973: oPushResult
10974: oNodeSet
10975: oPop 3
10977: oJumpForward 10982
10979: Choice Lookup Table
           1   10925
10982: oGetLocal 1
10984: oReturn
10985: oReturn
10986: oLocalSpace 2
10988: oGetParam 1
10990: oPushResult
10991: oNodeType
10992: oPop 1
10994: oChoice 11064
10996: oMININT
10997: oReturn
10998: oJumpForward 11080
11000: oSetResult 0
11002: oReturn
11003: oJumpForward 11080
11005: oSetResult 0
11007: oReturn
11008: oJumpForward 11080
11010: oGetAddrLocal 1
11012: oPushResult
11013: oGetParam 1
11015: oPushResult
11016: oSetResult 40
11018: oPushResult
11019: oNodeGet
11020: oPop 2
11022: oAssign
11023: oGetAddrLocal 2
11025: oPushResult
11026: oGetLocal 1
11028: oPushResult
11029: oSetResult 15
11031: oPushResult
11032: oNodeGetIter
11033: oPop 2
11035: oPushResult
11036: oNodeIterValue
11037: oPop 1
11039: oAssign
11040: oGetLocal 2
11042: oPushResult
11043: oSetResult 22
11045: oPushResult
11046: oNodeGetInt
11047: oPop 2
11049: oReturn
11050: oJumpForward 11080
11052: oGetParam 1
11054: oPushResult
11055: oSetResult 38
11057: oPushResult
11058: oNodeGetInt
11059: oPop 2
11061: oReturn
11062: oJumpForward 11080
11064: Choice Lookup Table
          36   11052
          40   11010
          32   11005
          30   11000
          28   10996
11075: oError 3
11077: oSetResult 0
11079: oReturn
11080: oReturn
11081: oLocalSpace 2
11083: oGetParam 1
11085: oPushResult
11086: oNodeType
11087: oPop 1
11089: oChoice 11159
11091: oMAXINT
11092: oReturn
11093: oJumpForward 11175
11095: oSetResult 1
11097: oReturn
11098: oJumpForward 11175
11100: oSetResult 255
11102: oReturn
11103: oJumpForward 11175
11105: oGetAddrLocal 1
11107: oPushResult
11108: oGetParam 1
11110: oPushResult
11111: oSetResult 40
11113: oPushResult
11114: oNodeGet
11115: oPop 2
11117: oAssign
11118: oGetAddrLocal 2
11120: oPushResult
11121: oGetLocal 1
11123: oPushResult
11124: oSetResult 15
11126: oPushResult
11127: oNodeGetIterLast
11128: oPop 2
11130: oPushResult
11131: oNodeIterValue
11132: oPop 1
11134: oAssign
11135: oGetLocal 2
11137: oPushResult
11138: oSetResult 22
11140: oPushResult
11141: oNodeGetInt
11142: oPop 2
11144: oReturn
11145: oJumpForward 11175
11147: oGetParam 1
11149: oPushResult
11150: oSetResult 39
11152: oPushResult
11153: oNodeGetInt
11154: oPop 2
11156: oReturn
11157: oJumpForward 11175
11159: Choice Lookup Table
          36   11147
          40   11105
          32   11100
          30   11095
          28   11091
11170: oError 3
11172: oSetResult 0
11174: oReturn
11175: oReturn
11176: oLocalSpace 0
11178: oGetParam 1
11180: oPushResult
11181: oSetResult 22
11183: oPushResult
11184: oNodeGetInt
11185: oPop 2
11187: oPushResult
11188: oEmitInt
11189: oPop 1
11191: oReturn
11192: oLocalSpace 1
11194: oGetAddrLocal 1
11196: oPushResult
11197: oSetResult 14
11199: oPushResult
11200: oGetParam 1
11202: oPushResult
11203: oCall 10874
11205: oPop 2
11207: oAssign
11208: oGetLocal 1
11210: oPushResult
11211: oScopeDeclare
11212: oPop 1
11214: oGetLocal 1
11216: oReturn
11217: oReturn
11218: oLocalSpace 1
11220: oGetAddrGlobal 4
11222: oPushResult
11223: oId_mysystem
11224: oAssign
11225: oGetAddrGlobal 5
11227: oPushResult
11228: oSetResult 27
11230: oPushResult
11231: oSetResult 4
11233: oPushResult
11234: oCall 10840
11236: oPop 2
11238: oAssign
11239: oGetAddrGlobal 6
11241: oPushResult
11242: oSetResult 28
11244: oPushResult
11245: oSetResult 4
11247: oPushResult
11248: oCall 10840
11250: oPop 2
11252: oAssign
11253: oGetAddrGlobal 7
11255: oPushResult
11256: oSetResult 30
11258: oPushResult
11259: oSetResult 1
11261: oPushResult
11262: oCall 10840
11264: oPop 2
11266: oAssign
11267: oGetAddrGlobal 8
11269: oPushResult
11270: oSetResult 31
11272: oPushResult
11273: oSetResult 1
11275: oPushResult
11276: oCall 10840
11278: oPop 2
11280: oAssign
11281: oGetAddrGlobal 9
11283: oPushResult
11284: oSetResult 32
11286: oPushResult
11287: oSetResult 1
11289: oPushResult
11290: oCall 10840
11292: oPop 2
11294: oAssign
11295: oGetAddrGlobal 10
11297: oPushResult
11298: oGetGlobal 9
11300: oPushResult
11301: oCall 10902
11303: oPop 1
11305: oAssign
11306: oGetAddrGlobal 11
11308: oPushResult
11309: oSetResult 29
11311: oPushResult
11312: oSetResult 1
11314: oPushResult
11315: oCall 10840
11317: oPop 2
11319: oAssign
11320: oGetAddrGlobal 12
11322: oPushResult
11323: oSetResult 34
11325: oPushResult
11326: oSetResult 8
11328: oPushResult
11329: oCall 10840
11331: oPop 2
11333: oAssign
11334: oGetGlobal 12
11336: oPushResult
11337: oSetResult 36
11339: oPushResult
11340: oGetGlobal 11
11342: oPushResult
11343: oNodeSet
11344: oPop 3
11346: oGetAddrGlobal 13
11348: oPushResult
11349: oSetResult 38
11351: oPushResult
11352: oSetResult 256
11354: oPushResult
11355: oCall 10840
11357: oPop 2
11359: oAssign
11360: oGetAddrGlobal 14
11362: oPushResult
11363: oSetResult 39
11365: oPushResult
11366: oSetResult 256
11368: oPushResult
11369: oCall 10840
11371: oPop 2
11373: oAssign
11374: oGetGlobal 14
11376: oPushResult
11377: oSetResult 41
11379: oPushResult
11380: oSetResult 255
11382: oPushResult
11383: oNodeSetInt
11384: oPop 3
11386: oGetAddrLocal 1
11388: oPushResult
11389: oSetResult 18
11391: oPushResult
11392: oId_File
11393: oPushResult
11394: oCall 10874
11396: oPop 2
11398: oAssign
11399: oGetLocal 1
11401: oPushResult
11402: oSetResult 21
11404: oPushResult
11405: oGetGlobal 5
11407: oPushResult
11408: oNodeSet
11409: oPop 3
11411: oGetLocal 1
11413: oPushResult
11414: oScopeDeclare
11415: oPop 1
11417: oGetAddrLocal 1
11419: oPushResult
11420: oSetResult 18
11422: oPushResult
11423: oId_Integer
11424: oPushResult
11425: oCall 10874
11427: oPop 2
11429: oAssign
11430: oGetLocal 1
11432: oPushResult
11433: oSetResult 21
11435: oPushResult
11436: oGetGlobal 6
11438: oPushResult
11439: oNodeSet
11440: oPop 3
11442: oGetLocal 1
11444: oPushResult
11445: oScopeDeclare
11446: oPop 1
11448: oGetAddrLocal 1
11450: oPushResult
11451: oSetResult 18
11453: oPushResult
11454: oId_Boolean
11455: oPushResult
11456: oCall 10874
11458: oPop 2
11460: oAssign
11461: oGetLocal 1
11463: oPushResult
11464: oSetResult 21
11466: oPushResult
11467: oGetGlobal 7
11469: oPushResult
11470: oNodeSet
11471: oPop 3
11473: oGetLocal 1
11475: oPushResult
11476: oScopeDeclare
11477: oPop 1
11479: oGetAddrLocal 1
11481: oPushResult
11482: oSetResult 18
11484: oPushResult
11485: oId_Char
11486: oPushResult
11487: oCall 10874
11489: oPop 2
11491: oAssign
11492: oGetLocal 1
11494: oPushResult
11495: oSetResult 21
11497: oPushResult
11498: oGetGlobal 9
11500: oPushResult
11501: oNodeSet
11502: oPop 3
11504: oGetLocal 1
11506: oPushResult
11507: oScopeDeclare
11508: oPop 1
11510: oGetAddrLocal 1
11512: oPushResult
11513: oSetResult 18
11515: oPushResult
11516: oId_Byte
11517: oPushResult
11518: oCall 10874
11520: oPop 2
11522: oAssign
11523: oGetLocal 1
11525: oPushResult
11526: oSetResult 21
11528: oPushResult
11529: oGetGlobal 11
11531: oPushResult
11532: oNodeSet
11533: oPop 3
11535: oGetLocal 1
11537: oPushResult
11538: oScopeDeclare
11539: oPop 1
11541: oGetAddrLocal 1
11543: oPushResult
11544: oSetResult 18
11546: oPushResult
11547: oId_Pointer
11548: oPushResult
11549: oCall 10874
11551: oPop 2
11553: oAssign
11554: oGetLocal 1
11556: oPushResult
11557: oSetResult 21
11559: oPushResult
11560: oGetGlobal 12
11562: oPushResult
11563: oNodeSet
11564: oPop 3
11566: oGetLocal 1
11568: oPushResult
11569: oScopeDeclare
11570: oPop 1
11572: oGetAddrLocal 1
11574: oPushResult
11575: oSetResult 18
11577: oPushResult
11578: oId_ShortString
11579: oPushResult
11580: oCall 10874
11582: oPop 2
11584: oAssign
11585: oGetLocal 1
11587: oPushResult
11588: oSetResult 21
11590: oPushResult
11591: oGetGlobal 14
11593: oPushResult
11594: oNodeSet
11595: oPop 3
11597: oGetLocal 1
11599: oPushResult
11600: oScopeDeclare
11601: oPop 1
11603: oGetAddrLocal 1
11605: oPushResult
11606: oSetResult 16
11608: oPushResult
11609: oId_True
11610: oPushResult
11611: oCall 10874
11613: oPop 2
11615: oAssign
11616: oGetLocal 1
11618: oPushResult
11619: oSetResult 21
11621: oPushResult
11622: oGetGlobal 7
11624: oPushResult
11625: oNodeSet
11626: oPop 3
11628: oGetLocal 1
11630: oPushResult
11631: oSetResult 22
11633: oPushResult
11634: oSetResult 1
11636: oPushResult
11637: oNodeSetInt
11638: oPop 3
11640: oGetLocal 1
11642: oPushResult
11643: oScopeDeclare
11644: oPop 1
11646: oGetAddrLocal 1
11648: oPushResult
11649: oSetResult 16
11651: oPushResult
11652: oId_False
11653: oPushResult
11654: oCall 10874
11656: oPop 2
11658: oAssign
11659: oGetLocal 1
11661: oPushResult
11662: oSetResult 21
11664: oPushResult
11665: oGetGlobal 7
11667: oPushResult
11668: oNodeSet
11669: oPop 3
11671: oGetLocal 1
11673: oPushResult
11674: oSetResult 22
11676: oPushResult
11677: oSetResult 0
11679: oPushResult
11680: oNodeSetInt
11681: oPop 3
11683: oGetLocal 1
11685: oPushResult
11686: oScopeDeclare
11687: oPop 1
11689: oGetAddrGlobal 15
11691: oPushResult
11692: oId_Ord
11693: oPushResult
11694: oCall 11192
11696: oPop 1
11698: oAssign
11699: oGetAddrGlobal 16
11701: oPushResult
11702: oId_Chr
11703: oPushResult
11704: oCall 11192
11706: oPop 1
11708: oAssign
11709: oGetAddrGlobal 17
11711: oPushResult
11712: oId_Pred
11713: oPushResult
11714: oCall 11192
11716: oPop 1
11718: oAssign
11719: oGetAddrGlobal 18
11721: oPushResult
11722: oId_Succ
11723: oPushResult
11724: oCall 11192
11726: oPop 1
11728: oAssign
11729: oReturn
