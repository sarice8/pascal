   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pStrLit
   2:    pCharLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pCase
   2:    pOtherwise
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushAddrGlobal   % <offset> - push ptr to global var (same as tPushConstP)
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tSwap             % swap the top two entries on the stack
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tCastBtoI         % zero-extend uint8_t to int32_t
   2:    tCastItoB         % truncate int32_t to uint8_t
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubP
   2:    tSubPI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tNot              % negate top boolean
   2:    tEqualB
   2:    tNotEqualB
   2:    tGreaterB         % B is uint8_t, so these are unsigned comparisons
   2:    tLessB
   2:    tGreaterEqualB
   2:    tLessEqualB
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too, but I'm moving to tEqualB etc for those
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tGreaterP
   2:    tLessP
   2:    tGreaterEqualP
   2:    tLessEqualP
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tJumpCaseB        % <label#>  pops uint8_t, jumps to case indicated by table at label (consisting of tCase, tCaseRange, tCaseEnd)
   2:    tJumpCaseI        % <label#>  pops integer, jumps to case indicated by table at label
   2:    tJumpCaseS        % <label#>  pops pointer to ShortString, jumps to case indicated by table at label
   2:    tCase             % <int> <label#>  - case table entry: if match int, goto label.  For tJumpCaseS, int is offset into global data.
   2:    tCaseRange        % <lowint> <highint> <label#>  - case table entry: if lowint <= value <= highint, goto label.  For tJumpCaseS, offsets into global.
   2:    tCaseEnd          % <label#> - end of case table.  Label points to no-match code (otherwise clause or end of statement).
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteChar        %  "     "    : write char, pop
   2:    tWriteShortStr    %  "     "    : write ShortString whose addr is on tos, pop
   2:    tWritePChar       %  "     "    : write a null-terminated string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteCR          %  "     "    : write cr
   2:    tFile             % <file#> - pascal source file id, for debugging.  I haven't decided yet how I will communicate the corresponding filename.
   2:    tLine             % <line#> - pascal source line number, for debugging
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    eCantUsePredSuccOnEnumWithValueGaps
   2:    eCantDereference
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nBuiltInFunc
   2: 	nBuiltInProc
   2: 	nConst
   2: 	nEnumValue
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nTypedConst
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nIntegerType
   2: 	nByteType
   2: 	nBooleanType
   2: 	nBooleanFlowType
   2: 	nCharType
   2: 	nPointerType
   2: 	nUniversalPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nStrLitType
   2: 	nShortStringType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qCapacity
   2: 	qNameTable
   2: 	qHasGap
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
      % intrinsic types & type constructs
      
   2: type typ:
   2:    tyNone     = 0    % in ptrTyp field of TT, means no ptr to type defined
   2:    tyInteger
   2:    tyBoolean
   2:    tyChar
   2:    tyString
   2:    tyFile            % tyInteger..tyFile are scalars (types on their own)
   2:    tyPointer         % following are type constructor classes...
   2:    tyArray           %   (they are not type#'s)
   2:    tyRecord
   2:    tyParams          % like record; a collection of proc/func params
   2:    tySet;
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     oMAXINT >> int    % the maximum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % gets/adds a predefined id to the scanner's id table, and returns the id code
   2:     oId_mysystem >> int
   2:     oId_ShortStringAppendShortString >> int
   2:     oId_ShortStringAppendChar >> int
   2:     oId_ShortStringCmp >> int
   2:     oId_File >> int
   2:     oId_Integer >> int
   2:     oId_Boolean >> int
   2:     oId_Char >> int
   2:     oId_Byte >> int
   2:     oId_Pointer >> int
   2:     oId_ShortString >> int
   2:     oId_True >> int
   2:     oId_False >> int
   2:     oId_Nil >> int
   2:     oId_Ord >> int
   2:     oId_Chr >> int
   2:     oId_Pred >> int
   2:     oId_Succ >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValueNegate                % negate top value
   2:    oValueTop >> int            % get top value on value stack
   2:    oValuePop;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    oStringAllocShortStringLit( String ) >> int  % alloc global space for ShortString, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      
   2: int     mysystemId               % id of identifier "mysystem"
      
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanFlowType
   2: Node    CharType
   2: Node    PCharType
   2: Node    ByteType
   2: Node    UniversalPointerType
   2: Node    StrLitType
   2: Node    ShortStringType
      
      % nBuiltInFunc
   2: Node    BuiltIn_Ord
   2: Node    BuiltIn_Chr
   2: Node    BuiltIn_Pred
   2: Node    BuiltIn_Succ
      
      % Declarations in unit mysystem that the compiler may refer to directly.
      
   2: Node    System_ShortStringAppendShortString
   2: Node    System_ShortStringAppendChar
   2: Node    System_ShortStringCmp
      
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: EnumTypeRef( out Node resultType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: OrdinalHigh( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowFlow( out Label falseLabel );
   2: BoolExprAllowFlow( out Label falseLabel );
   2: BoolTermAllowFlow( out Label falseLabel );
   2: BoolFactorAllowFlow( out Label falseLabel );
   2: ArithExprAllowFlow( out Label falseLabel );
   2: TermAllowFlow( out Label falseLabel );
   2: FactorAllowFlow( out Label falseLabel );
   2: PrimaryAllowFlow( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueVar( Node decl, boolean writeable );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: FlowToVal( inout Label falseLabel );
   2: ValToFlow( out Label falseLabel );
   2: MoveIntoTempShortString >> int;
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Declarations ----------------------------
      
   2: Program:
   4:    Node t
      
   4:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
   9:    oScopeBegin( 0, allocGlobal )
  18:    Node rootScope = oScopeCurrent
      
  23:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
  25:    .tEnter  oEmitInt( 0 )
  33:    Label mainLabel = oLabelNew
      
  38:    .tAllocActuals  oEmitInt( 0 )
  46:    .tCall  oEmitLabel( mainLabel )
  54:    .tFreeActuals  oEmitInt( 0 )
  62:    .tReturn
      
  64:    pProgram
  66:    pIdent
      
  68:    Node program = oNodeNew( nProgram )
  78:    oNodeSetInt( program, qIdent, LAST_ID )
  89:    oNodeSet( workspace, qProgram, program )
      
      
 101:    [
 101:       | '(' :
 103:          pIdent      % input, output files
      
 105:          t = @newIdent( nVar, LAST_ID )
 118:          oNodeSet( t, qType, FileType )
 130:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
 136:          ','
 138:          pIdent
      
 140:          t = @newIdent( nVar, LAST_ID )
 153:          oNodeSet( t, qType, FileType )
 165:          oScopeDeclareAlloc( t )
      
 171:          ')'
 173:       | * :
 178:    ]
 178:    ';'
      
 180:    @UsesMySystem( program )
         % The uses clause may only appear once, immediately after the program declaration.
 187:    [
 187:       | pUses :  @UsesClause( program )
 196:       | * :
 201:    ]
 201:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
 208:    oScopeBegin( 0, allocGlobal )
 217:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
 222:    oScopeBegin( 0, allocDown )
 231:    oNodeSet( oScopeCurrent, qExtends, globalScope )
 242:    initScope = oScopeCurrent
 247:    oNodeSet( program, qMainRoutineScope, initScope )
 259:    oScopeEnd
      
 260:    @BlockDecls( nGlobalVar )
      
      
 267:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
 273:    boolean isMain = true
 279:    @BlockStmt( mainLabel, globalScope, isMain )
      
 292:    oScopeEnd   % main routine scope
      
 293:    '.'
 295:    @CheckForUndefinedLabels
 297:    oScopeEnd   % global scope
 298:    @EndUsedUnits( program )   % used units scopes
 306:    ;
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
 306: UsesClause( Node user ):
 308:    {
 308:       pIdent
 310:       @Uses( LAST_ID, user )
 319:       [
 319:          | ',' :
 321:          | * :  >
 328:       ]
 328:    }   
 330:    ';'
 333:    ;
      
      
      % Process an implicit "uses mysystem" in every module, except in the mysystem unit itself.
      % (I'm calling the unit mysystem rather than system, so fpc doesn't use it to replace its own system unit.)
      %
 333: UsesMySystem( Node user ):
 335:    [ equal( oNodeGetInt( user, qIdent ), mysystemId )
 352:       | true :  >>
 354:       | * :
 359:    ]
 359:    @Uses( mysystemId, user )
 370:    ;
      
      
      % After processing the mysystem unit interface, grab certain declarations from it
      % that the compiler may want to refer to later.
      %
 370: FindSelectSystemDecls( Node unit ):
 372:    [ equal( oNodeGetInt( unit, qIdent ), mysystemId )
 389:       | true :
 390:          System_ShortStringAppendShortString = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendShortString )
 407:          System_ShortStringAppendChar = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendChar )
 424:          System_ShortStringCmp = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringCmp )
 441:       | * :
 446:    ]
 447:    ;
      
      
      % The given user module uses a unit with the given id,
      % which may or may not have been loaded already.
      %
 447: Uses( int id, Node user ):
 449:    Node unit = @FindOrCompileUnit( id )
 460:    [ equal_node( unit, Null )
 470:       | false :
 471:          oNodeAddLast( user, qUsedUnits, unit )
      
               % Put a declaration in the current scope, naming the unit and pointing to it.
               % This is to allow references to  <unit>.<identifier_in_unit>
 483:          Node unitRef = oNodeNew( nUnitRef )
 493:          oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 512:          oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 531:          oScopeDeclare( unitRef )
 537:       | * :
 542:    ];
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 543: ResolveUnitRef( inout Node decl ):
 545:    [ oNodeType( decl )
 552:       | nUnitRef :
 553:          Node scope = oNodeGet( decl, qPublicScope )
 566:          '.'
 568:          pIdent
 570:          decl = oScopeFindRequireInScope( scope )
 580:       | * :
 585:    ];
      
      
 586: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 588:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 601:    {
 601:       Node unit = oNodeIterValue( unitIt )
 611:       [ oNodeNull( unit )
 618:          | false :
 619:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 632:          | * :
 637:             >
 639:       ]
 639:       oNodeIterNext( unitIt )
 645:    }
 648:    ;
      
 648: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 650:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 663:    {
 663:       Node unit = oNodeIterValue( unitIt )
 673:       [ oNodeNull( unit )
 680:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 681:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 697:                | true :
 698:                | false :  #eInternalScopeMismatch
 702:             ]
 710:             oScopeEnd
 711:          | * :
 716:             >
 718:       ]
 718:       oNodeIterPrev( unitIt )
 724:    }
 727:    ;
      
      
 727: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 729:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 748:    [ equal_node( unit, Null )
 758:       | false :  >> unit
 762:       | * :
 767:    ]
      
         % If not, search for the source file on disk
 767:    boolean ok = oIncludeUnitFile( id )
 777:    [ ok
 780:       | false :  #eCantFindUnitFile  >> Null
 786:       | * :
 791:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 791:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 797:    oIncludeEnd
 798:    >> unit;
      
      
      
 802: Unit >> Node:
 804:    pUnit
 806:    pIdent
 808:    Node unit = oNodeNew( nUnit )
 818:    oNodeSetInt( unit, qIdent, LAST_ID )
 829:    Node unitImpl = oNodeNew( nUnitImpl )
 839:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 850:    oNodeSet( unit, qImpl, unitImpl )
 862:    ';'
      
         % mandatory sections
      
 864:    pInterface
 866:    @UsesMySystem( unit )
 873:    [
 873:       | pUses :   @UsesClause( unit )
 882:       | * :
 887:    ]
 887:    @EnterUsedUnits( unit )
      
 894:    oScopeBegin( 0, allocGlobal )
 903:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 914:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 919:    oScopeBegin( 0, allocDown )
 928:    initScope = oScopeCurrent
 933:    oNodeSet( unit, qInitRoutineScope, initScope )
 945:    oScopeEnd
      
 946:    @UnitInterface( unit )
 953:    oScopeEnd  % interface scope
      
 954:    pImplementation
 956:    @UsesMySystem( unitImpl )
 963:    [
 963:       | pUses :   @UsesClause( unitImpl )
 972:       | * :
 977:    ]
 977:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 984:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 997:    oScopeBegin( 0, allocGlobal )
1006:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
1017:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
1035:    globalScope = oScopeCurrent
1040:    @UnitImplementation( unit )
      
1047:    [
1047:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
1059:       | * :                @UnitInitialization( unit, false )  % implicit init routine
1074:    ]
1074:    [
1074:       | pFinalization :  @UnitFinalization( unit, true )
1086:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
1101:    ]
1101:    pEnd  '.'
      
1105:    oScopeEnd  % impl scope
1106:    oScopeEnd  % interface scope
1107:    @EndUsedUnits( unitImpl )  % used units scopes
1114:    @EndUsedUnits( unit )
1121:    oNodeAddLast( workspace, qUnits, unit )
1133:    >> unit;
      
      
1137: UnitInterface( Node unit ):
1139:    {[
1139:       | pConst :     @ConstDecl
1143:       | pType :      @TypeDecl
1147:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
1156:       | pProcedure :
1158:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
1164:          [
1164:             | pExternal :
1166:                @ExternalDecl( decl )
1173:                ';'
1175:             | * :
1180:          ]
      
1180:       | pFunction :
1182:          Node decl = @FuncHeaderDecl
1188:          [
1188:             | pExternal :
1190:                @ExternalDecl( decl )
1197:                ';'
1199:             | * :
1204:          ]
      
1204:       | * :          >
1219:    ]}
1221:    @FindSelectSystemDecls( unit )
1229:    ;
      
1229: UnitImplementation( Node unit ):
1231:    @BlockDecls( nGlobalVar )
1239:    ;
      
      
1239: UnitInitialization( Node unit, boolean hasStmts ):
1241:    Label label = oLabelNew
1246:    .tLabel  oEmitLabel( label )
1254:    oNodeSetLabel( unit, qInitLabel, label )
      
1266:    int patchLS
1266:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
1275:    Node scope
1275:    Code initCode
      
1275:    scope = oNodeGet( unit, qPublicScope )
1288:    initCode = oNodeGetCode( scope, qInitCode )
1301:    oEmitCode( initCode )
1307:    oNodeSetCode( scope, qInitCode, codeNull )
      
1319:    scope = oNodeGet( unit, qPrivateScope )
1332:    initCode = oNodeGetCode( scope, qInitCode )
1345:    oEmitCode( initCode )
1351:    oNodeSetCode( scope, qInitCode, codeNull )
      
1363:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1376:    [ hasStmts
1379:       | true :     
1380:          @Statement
1382:          {[
1382:             | ';' :  @Statement
1386:             | * :    >
1393:          ]}
1395:       | * :
1400:    ]
      
1400:    .tReturn
      
1402:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1414:    oPatch( patchLS, localSpace )
1423:    oScopeEnd   % init routine scope, for temporaries
1425:    ;
      
      
1425: UnitFinalization( Node unit, boolean hasStmts ):
1427:    Label label = oLabelNew
1432:    .tLabel  oEmitLabel( label )
1440:    oNodeSetLabel( unit, qFinalLabel, label )
      
1452:    int patchLS
1452:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1461:    oScopeBegin( 0, allocDown )
      
1470:    [ hasStmts
1473:       | true :     
1474:          @Statement
1476:          {[
1476:             | ';' :  @Statement
1480:             | * :    >
1487:          ]}
1489:       | * :
1494:    ]
      
1494:    .tReturn
      
1496:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1508:    oPatch( patchLS, localSpace )
1517:    oScopeEnd   % final routine scope, for temporaries
1519:    ;
      
      
1519: Block( node_type varNodeType, Label labelForBody ):
1521:    @BlockDecls( varNodeType )
1528:    @BlockStmt( labelForBody, oScopeCurrent, false )
1540:    @CheckForUndefinedLabels
1543:    ;
      
      
1543: BlockDecls( node_type varNodeType ):
1545:    {[
1545:       | pConst :     @ConstDecl
1549:       | pType :      @TypeDecl
1553:       | pVar :       @VarDecl( varNodeType )
1562:       | pLabel :     @LabelDecl
1566:       | pProcedure : @ProcDecl
1570:       | pFunction :  @FuncDecl
1574:       | * :          >
1591:    ]}
1593:    @CheckForUndefinedMethods
1596:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
1596: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
1599:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
1599: CheckForUndefinedLabels:
1601:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
1613:    {
1613:       Node decl = oNodeIterValue( it )
1623:       [ oNodeNull( decl )
1630:          | false :
1631:          | * :  >
1638:       ]
1638:       [ oNodeType( decl )
1645:          | nLabel :
1646:             [ oNodeGetBoolean( decl, qDefined )
1656:                | false :
1657:                   [ oNodeGetBoolean( decl, qUsed )
1667:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
1670:                      | * :
1675:                   ]
1675:                | * :
1680:             ]
1680:          | * :
1685:       ]
1685:       oNodeIterNext( it )
1691:    }
1694:    ;
      
      
1694: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1696:    NodeIter it = oNodeGetIter( workspace, qUnits )
1709:    {
1709:       Node unit = oNodeIterValue( it )
1719:       [ oNodeNull( unit )
1726:          | true :  >
1729:          | false :
1731:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1739:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1754:             .tFreeActuals  oEmitInt( 0 )
1762:             oNodeIterNext( it )
1768:       ]
1776:    };
      
      
1779: FinalizeUnits:
1781:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1794:    {
1794:       Node unit = oNodeIterValue( it )
1804:       [ oNodeNull( unit )
1811:          | true :  >
1814:          | false :
1816:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1824:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1839:             .tFreeActuals  oEmitInt( 0 )
1847:             oNodeIterPrev( it )
1853:       ]
1861:    };
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
1864: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
1866:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
1874:    int patchLS
1874:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
1883:    [ isMain
1886:       | true :  @InitializeUnits
1889:       | * :
1894:    ]
      
         % insert any code for initialization of this scope's variables
1894:    Code initCode = oNodeGetCode( varScope, qInitCode )
1907:    oEmitCode( initCode )
1913:    oNodeSetCode( varScope, qInitCode, codeNull )
      
1925:    @Statement
      
1927:    [ isMain
1930:       | true :  @FinalizeUnits
1933:       | * :
1938:    ]
      
1938:    .tReturn
      
1940:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1952:    oPatch( patchLS, localSpace )
1962:    ;
      
      
      % modifers that may appear on a proc/function declaration.
      %
1962: MethodModifiers( Node decl ):
1964:    {[
1964:       | pCdecl :
1966:          oNodeSetBoolean( decl, qCdecl, true )
1978:          ';'
      
1980:       | * : >
1987:    ]}
1990:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
1990: GetOrCreateInitCode( Node scope ) >> Code:
1992:    Code initCode = oNodeGetCode( scope, qInitCode )
2005:    [ equal_code( initCode, codeNull )
2015:       | true :
2016:          initCode = oCodeNew
2021:          oNodeSetCode( scope, qInitCode, initCode )
2033:       | * :
2038:    ]
2038:    >> initCode;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note, I'll hold off on issuing the .tLabelExtern until we see that
      % the external method is actually called.  Otherwise we'd fill each output file
      % with all the external method names in my included libraries, which seems dumb.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
2042: ExternalDecl( Node decl ):
2044:    [ equal_zero( @DeclLevel( decl ) )
2056:       | false :  #eExternalMethodCannotBeNested
2059:       | * :
2064:    ]
2064:    oNodeSetBoolean( decl, qExternal, true )
2076:    [
2076:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
2078:          [
2078:             | pName :
2080:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
2082:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
2093:             | * :
2098:          ]
2098:       | * :
2103:    ]
2104:    ;
      
      
2104: ProcHeaderDecl >> Node:
2106:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2108:    boolean redeclaring = false
2114:    Node decl = oScopeFindInCurrentScope
      
2119:    [ oNodeNull( decl )
2126:       | true :
               % first declaration
2127:          decl = @newIdent( nProc, LAST_ID )
2140:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2151:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2153:          redeclaring = true
2159:          [ oNodeGetBoolean( decl, qBodyDefined )
2169:             | true : #eAlreadyDefined
2172:             | * :
2177:          ]
2177:          [ oNodeGetBoolean( decl, qExternal )
2187:             | true : #eAlreadyDefined
2190:             | * :
2195:          ]
2195:          [ oNodeType( decl )
2202:             | nProc :
2203:             | * : #eAlreadyDefined   % wrong kind
2210:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2210:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2229:          oNodeSet( decl, qParams, Null )
2241:    ]
      
2249:    int level = @ScopeLevel
2255:    boolean nested = greater( level, 0 )
2268:    inc( level )
2274:    oScopeBegin( level, allocUp )
2283:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2288:    [ nested
2291:       | true :
2292:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2307:       | * :
2312:    ]
      
2312:    @FormalArgDecl
2314:    oNodeSet( decl, qParams, paramScope )
2326:    oScopeEnd
2327:    ';'
      
2329:    [ redeclaring
2332:       | false : oScopeDeclare( decl )
2339:       | true :  % TO DO: check that qParams is consistent with qOldParams
2341:    ]
      
2349:    @MethodModifiers( decl )
2356:    >> decl;
      
      
2360: ProcDecl:
2362:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
2368:    [
2368:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2370:       | pExternal : @ExternalDecl( decl )
      
2379:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2386:          Node paramScope = oNodeGet( decl, qParams )
2399:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
2405:          int level = oNodeGetInt( paramScope, qLevel )
2418:          oScopeBegin( level, allocDown )
2427:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2438:          Label label = oNodeGetLabel( decl, qValue )
2451:          @Block( nLocalVar, label )
2461:          oNodeSetBoolean( decl, qBodyDefined, true )
2473:          oScopeEnd
      
2474:          oScopeEnd  % paramScope
2475:    ]
2475:    ';';
      
      
      
2478: FuncHeaderDecl >> Node:
2480:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
2482:    boolean redeclaring = false
2488:    Node decl = oScopeFindInCurrentScope
      
2493:    [ oNodeNull( decl )
2500:       | true :
               % first declaration
2501:          decl = @newIdent( nFunc, LAST_ID )
2514:          oNodeSetLabel( decl, qValue, oLabelNew )
      
2525:       | false :
               % we already have a declaration.
               % Keep it, and its label.
2527:          redeclaring = true
2533:          [ oNodeGetBoolean( decl, qBodyDefined )
2543:             | true : #eAlreadyDefined
2546:             | * :
2551:          ]
2551:          [ oNodeType( decl )
2558:             | nFunc :
2559:             | * : #eAlreadyDefined   % wrong kind
2566:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
2566:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
2585:          oNodeSet( decl, qParams, Null )
2597:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
2616:          oNodeSet( decl, qType, Null )
2628:    ]
      
2636:    int level = @ScopeLevel
2642:    boolean nested = greater( level, 0 )
2655:    inc( level )
2661:    oScopeBegin( level, allocUp )
2670:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2675:    [ nested
2678:       | true :
2679:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2694:       | * :
2699:    ]
      
2699:    @FormalArgDecl
2701:    oNodeSet( decl, qParams, paramScope )
      
2713:    ':'
      
2715:    Node theType
2715:    @TypeRef( theType )
2722:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2734:    Node ptrType = @PointerTypeTo( theType )
2745:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2761:    oScopeEnd
2762:    ';'
      
2764:    [ redeclaring
2767:       | false : oScopeDeclare( decl )
2774:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2776:    ]
      
2784:    @MethodModifiers( decl )
      
2791:    >> decl;
      
      
2795: FuncDecl:
2797:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2803:    [
2803:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2805:       | pExternal : @ExternalDecl( decl )
      
2814:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2821:          Node paramScope = oNodeGet( decl, qParams )
2834:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2840:          int level = oNodeGetInt( paramScope, qLevel )
2853:          oScopeBegin( level, allocDown )
2862:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2873:          Label label = oNodeGetLabel( decl, qValue )
2886:          @Block( nLocalVar, label )
2896:          oNodeSetBoolean( decl, qBodyDefined, true )
2908:          oScopeEnd
      
2909:          oScopeEnd  % paramScope
2910:    ]
2910:    ';';
      
      
2913: FormalArgDecl:
2915:    [
2915:       | '(' :
2917:          {
2917:             NodeVec decls = oNodeVecNew
2922:             Node decl
2922:             boolean isInOut = false
      
2928:             [
2928:                | pVar : isInOut = true
2936:                | * :
2941:             ]
      
2941:             {  pIdent
      
2943:                decl = @newIdent( nParam, LAST_ID )
2956:                oNodeSetBoolean( decl, qInOut, isInOut )
2968:                oNodeVecAppend( decls, decl )
      
2977:                [
2977:                   | ':' : >
2981:                   | ',' :
2983:                ]
2991:             }
      
2993:             Node theType
2993:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
3000:             Node allocType
3000:             [ isInOut
3003:                | true :   allocType = @PointerTypeTo( theType )
3015:                | * :      allocType = theType
3026:             ]
      
3026:             int i = 0
3032:             {[ equal( i, oNodeVecSize( decls ) )
3046:                | false :
3047:                   decl = oNodeVecElement( decls, i )
      
3060:                   oNodeSet( decl, qType, theType )
3072:                   oScopeDeclare( decl )
3078:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
3094:                   inc( i )
3100:                | * :
3105:                   >
3107:             ]}
      
3109:             oNodeVecDelete( decls )
      
3115:             [
3115:                | ')' : >
3119:                | ';' :
3121:             ]
3129:          }
3131:       | * :
3136:    ];
      
      
3137: ConstDecl:
3139:    {[
3139:       | pIdent :
3141:          [
3141:             | ':' :
3143:                @TypedConstDecl
3145:             | * :
3150:                @UntypedConstDecl
3152:          ]
3152:       | * :
3157:          >
3159:    ]};
      
      
      % Parse an untyped const declaration.
      % We've just accepted the identifier.
      %
3162: UntypedConstDecl:
3164:    Node decl = @newIdent( nConst, LAST_ID )
3177:    '='
      
3179:    @ConstExpr
         % TO DO: currently ConstExpr leaves int result on oValue stack
3181:    int val = oValueTop
3186:    oValuePop
3187:    oNodeSetInt( decl, qValue, val )
      
         % TO DO: different types.  Currently assumes int!
         % Untyped const decl is supposed to allow:
         %   ordinal types, set types, pointer types (but only Nil), real types, char, string.
3199:    oNodeSet( decl, qType, IntegerType )
      
3211:    oScopeDeclare( decl )
3217:    ';'
3220:    ;
      
      
      % Parse a typed const declaration.
      % We've just accepted the identifier and ':'
      %
3220: TypedConstDecl:
3222:    Node decl = @newIdent( nTypedConst, LAST_ID )
      
3235:    Node theType
3235:    @TypeRef( theType )
3242:    oNodeSet( decl, qType, theType )
      
         % TO DO: array and record consts are allocated in global memory,
         % with global offset stored as decl value.
         % Scalar consts are not allocated in memory, and their value is
         % stored directly as the decl value.
      
         % TO DO: skip subranges, similar to oTypeSNodeType.
3254:    [ oNodeType( theType )
3261:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType :
               % Parse expression and store value in decl
3262:          '='
      
3264:          @ConstExpr
               % TO DO: currently ConstExpr leaves int result on oValue stack
3266:          int val = oValueTop
3271:          oValuePop
3272:          oNodeSetInt( decl, qValue, val )
3284:          oScopeDeclare( decl )
3290:          ';'
      
3292:       | nShortStringType, nFileType, nPointerType, nUniversalPointerType :
3294:          #eNotImplemented
      
3296:       | nArrayType, nRecordType :
               % Allocate global space, store address in decl.
               % Push into global scope init code stream (since we'll be issuing code
               % rather than creating static data, at the moment).
               % Parse expression and store in global memory.
3298:          oScopeEnter( globalScope )
3304:          int addr = oScopeAllocType( theType )
3314:          oScopeEnd
3315:          oCodePush( @GetOrCreateInitCode( globalScope ) )
3326:          oNodeSetInt( decl, qValue, addr )
3338:          '='
3340:          @TypedConstInit( theType, addr )
3350:          oCodePop
3351:          oScopeDeclare( decl )
3357:          ';'
3359:    ]
3386:    ;
      
      
      % Parse the initial value of a constant that's being stored in global memory.
      % (An array or record constant, and recursively all its elements.)
      % Given the type, and the address in global memory for the const value.
      % The caller has already pushed into the global init code stream.
      %
3386: TypedConstInit( Node theType, int addr ):
      
         % TO DO: skip subranges, similar to oTypeSNodeTYpe
3388:    [ oNodeType( theType )
3395:       | nArrayType :
3396:          Node baseType = oNodeGet( theType, qBaseType )
3409:          Node indexType = oNodeGet( theType, qIndexType )
3422:          int low = @OrdinalLow( indexType )
3433:          int high = @OrdinalHigh( indexType )
3444:          int elementSize = oNodeGetInt( baseType, qSize )
      
3457:          '('
               % Loop over elements
3459:          int i = low
3465:          {
3465:             @TypedConstInit( baseType, addr )
3475:             [ equal( i, high )
3485:                | true : >
3488:                | false :
3490:             ]
3498:             ','
3500:             addr = add( addr, elementSize )
3513:             inc( i )
3519:          }
3521:          ')'
      
3523:       | nRecordType :
3525:          '('
3527:          Node fieldScope = oNodeGet( theType, qScope )
               % Loop over zero or more named fields.  It's not necessary to name them all.
               % fpc says the names that are given should be in order, but I'm not requiring that.
               % Since this is global memory, uninitialized fields will be left as 0.
3540:          {
3540:             [
3540:                | pIdent :
3542:                | * :  >
3549:             ]
3549:             Node field = oScopeFindRequireInScope( fieldScope )
3559:             ':'
3561:             Node fieldType = oNodeGet( field, qType )
3574:             int fieldAddr = add( addr, oNodeGetInt( field, qValue ) )
3594:             @TypedConstInit( fieldType, fieldAddr )
3604:             [
3604:                | ';' :
3606:                | * :  >
3613:             ]
3613:          }
3615:          ')'
      
3617:       | nBooleanType, nByteType, nCharType:
3619:          .tPushAddrGlobal  oEmitInt( addr )
3627:          @ConstExpr
3629:          .tPushConstI  oEmitInt( oValueTop )
3636:          oValuePop
3637:          .tAssignB
      
3639:       | nIntegerType, nEnumType:
3641:          .tPushAddrGlobal  oEmitInt( addr )
3649:          @ConstExpr
3651:          .tPushConstI  oEmitInt( oValueTop )
3658:          oValuePop
3659:          .tAssignI
      
3661:       | nShortStringType, nFileType, nPointerType, nUniversalPointerType :
3663:          #eNotImplemented
3665:    ]
3692:    ;
      
      
3692: TypeDecl:
3694:    {[
3694:       | pIdent :
3696:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3709:          '='
3711:          Node theType
3711:          @TypeRef( theType )
3718:          oNodeSet( decl, qType, theType )
3730:          oScopeDeclare( decl )
3736:          ';'
3738:       | * :
3743:          >
3745:    ]};
      
3748: VarDecl( node_type varNodeType ):
3750:    {[
3750:       | pIdent :
3752:          NodeVec decls = oNodeVecNew
3757:          Node decl
3757:          {
3757:             decl = @newIdent( varNodeType, LAST_ID )
3770:             oNodeVecAppend( decls, decl )
3779:             [
3779:                | ',' :
3781:                   pIdent
3783:                | * :
3788:                   >
3790:             ]
3790:          }
3792:          ':'
3794:          Node theType
3794:          @TypeRef( theType )
      
3801:          int i = 0
3807:          {[ equal( i, oNodeVecSize( decls ) )
3821:             | false :
3822:                decl = oNodeVecElement( decls, i )
3835:                oNodeSet( decl, qType, theType )
3847:                oScopeDeclareAlloc( decl )
3853:                inc( i )
3859:             | * :
3864:               >
3866:          ]}
      
               % optional initialization
3868:          [
3868:             | '=' :
3870:                [ oNodeVecSize( decls )
3877:                   | 1 :
3878:                   | * :  #eOnlyOneVarCanBeInitialized
3885:                ]
      
                     % we need an initCode stream for this scope
3885:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3895:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3901:                boolean changedScope = false
3907:                [ equal_zero( @ScopeLevel )
3914:                   | true : oScopeEnter( initScope )
3921:                            changedScope = true
3927:                   | * :
3932:                ]
                     % generate assignment in initCode stream
3932:                @LValueVar( decl, true )
3942:                @Expr
3944:                @CoerceType
3946:                @Assign
3948:                [ changedScope
3951:                   | true : oScopeEnd
3953:                   | * :
3958:                ]
3958:                oCodePop
                   
3959:             | * :
3964:          ]
      
3964:          oNodeVecDelete( decls )
3970:          ';'
3972:       | * :
3977:          >
3979:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3982: LabelDecl:
3984:    {
3984:       Node decl
3984:       [
3984:          | pIdent :
3986:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3988:             oChangeIntLitToLabelIdent
3989:       ]
3997:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
4010:       Label label = oLabelNew
4015:       oNodeSetLabel( decl, qValue, label )
4027:       oScopeDeclare( decl )
4033:       [
4033:          | ',' :
4035:          | * :
4040:             >
4042:       ]
4042:    }
4044:    ';'
4047:    ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
4047: TypeRef( out Node resultType ):
4049:    [
4049:       | pIdent :           % previously named type (including intrinsics)
4051:          Node decl = oScopeFindRequire
4056:          @ResolveUnitRef( decl )
4063:          [ oNodeType( decl )
4070:             | nTypeDecl :
4071:                resultType = oNodeGet( decl, qType )
4084:             | * :
4089:                #eNotType
4091:                resultType = IntegerType
4097:          ]
         
4097:       | pArray :
4099:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
4101:          NodeVec dimensions = oNodeVecNew
      
4106:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
4106:             Node subrange = oNodeNew( nSubrangeType )
                  % TO DO: currently assuming subrange of integer
4116:             oNodeSet( subrange, qBaseType, IntegerType )
      
                  % TO DO: currently ConstExpr leaves int result on oValue stack
4128:             @ConstExpr
4130:             oNodeSetInt( subrange, qLow, oValueTop )
4141:             oValuePop
4142:             '..'
4144:             @ConstExpr
4146:             oNodeSetInt( subrange, qHigh, oValueTop )
4157:             oValuePop
4158:             oNodeSetInt( subrange, qSize, 4 )   % maybe don't need
      
4170:             oTypeAdd( subrange )
      
4176:             Node a = oNodeNew( nArrayType )
4186:             oNodeSet( a, qIndexType, subrange )
      
4198:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
4207:             [
4207:                | ']' : >
4211:                | ',' :
4213:             ]
4221:          }
      
4223:          pOf
4225:          Node baseType
4225:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
4232:          int dim = oNodeVecSize( dimensions )
      
4242:          {
4242:              dec(dim)
      
4248:              Node a = oNodeVecElement( dimensions, dim )
      
4261:              oNodeSet( a, qBaseType, baseType )
4273:              Node subrange = oNodeGet( a, qIndexType )
4286:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
4313:              inc( width )
4319:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
4345:              oTypeAdd( a )
4351:              baseType = a
      
4357:              [ equal_zero(dim)
4364:                  | true:  >
4367:                  | *:
4372:              ]
4372:          }
      
4374:          resultType = oNodeVecElement( dimensions, 0 )
4387:          oNodeVecDelete( dimensions )
      
4393:       | '^' :
4395:          Node theType
4395:          @TypeRef( theType )
4402:          resultType = @PointerTypeTo( theType )
      
4413:       | pRecord :
4415:          resultType = oNodeNew( nRecordType )
4425:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
4434:          @VarDecl( nRecordField )
      
4441:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
4453:          [ equal_zero( size )
4460:             | true : #eRecordEmpty
4463:             | * :
4468:          ]
      
4468:          pEnd
      
4470:          oNodeSet( resultType, qScope, oScopeCurrent )
4481:          oNodeSetInt( resultType, qSize, size )
4493:          oScopeEnd
4494:          oTypeAdd( resultType )
      
      
4500:       | '(' :
               % An enum type declaration.
4502:          @EnumTypeRef( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
4509:       | pSet :
4511:          pOf
4513:          Node theType
4513:          @TypeRef( theType )
4520:       | * :       % this works for cases except where expr starts with an id
4535:          @ConstExpr '..' @ConstExpr
4541:    ];
      
      
      % Parse an enum type.
      % We've already accepted the '('
      % Returns the new type.
      %
4542: EnumTypeRef( out Node resultType ):
      
4544:    resultType = oNodeNew( nEnumType )
4554:    int value = 0
4560:    int numValues = 0
4566:    boolean first = true
      
         % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
         % That will let programs use either <val> or <enumType>.<val>
4572:    Node outerScope = oScopeCurrent
4577:    oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
4586:    {
            % TO DO: assert that name not already seen in this scope, i.e. this enum.
            %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
            %  It might be in some other higher/used scope.
4586:       pIdent
4588:       Node decl = @newIdent( nEnumValue, LAST_ID )
4601:       Node decl2 = @newIdent( nEnumValue, LAST_ID )
4614:       oNodeSet( decl, qType, resultType )
4626:       oNodeSet( decl2, qType, resultType )
      
            % build up name table, for i/o
4638:       int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
4651:       oNodeSetInt( decl, qNameOffset, nameOffset )
4663:       oNodeSetInt( decl2, qNameOffset, nameOffset )
4675:       [
4675:          | '=', ':=' :
4677:             @ConstExpr
                  % value must be ascending
                  % this obviously doesn't apply to the first value
4679:             [ equal_zero( numValues )
4686:                | false :
4687:                   [ greater( oValueTop, value )
4696:                      | false :   #eEnumValueNotAscending
4699:                      | * :
4704:                   ]
4704:                | * :
4709:             ]
4709:             [ equal( value, oValueTop )
4718:                | false :
                        % The values differ from 0..N-1.  pred/succ may not be used with this type.
4719:                   oNodeSetBoolean( resultType, qHasGap, true )
4731:                | * :
4736:             ]
4736:             value = oValueTop
4741:             oValuePop
4742:          | * :
4749:       ]
4749:       oNodeSetInt( decl, qValue, value )
4761:       oNodeSetInt( decl2, qValue, value )
4773:       oScopeDeclare( decl )
      
4779:       oScopeEnter( outerScope )
4785:       oScopeDeclare( decl2 )
4791:       oScopeEnd
      
4792:       inc( value )
4798:       inc( numValues )
4804:       [
4804:          | ',' :
4806:          | * :    >
4813:       ]
4813:    }
4815:    ')'
      
4817:    oNodeSet( resultType, qScope, oScopeCurrent )
4828:    oNodeSetInt( resultType, qSize, 4 )   % always integer sized
4840:    oScopeEnd
      
         % Finish creation of the name table
         %    struct {
         %      int    value;
         %      int    padding;
         %      char*  name;
         %    } table[ numValues + 1 ];
         %  final entry will have name == nullptr
         %
         % I'll need to generate init code, to store pointers in global data,
         % since I don't have a relocation mechanism for static data at the moment.
4841:    oCodePush( @GetOrCreateInitCode( globalScope ) )
4852:    oScopeEnter( globalScope )
4858:    int size = multiply( add( numValues, 1 ), 16 )
4878:    int addr = oScopeAlloc( size, 8 )
4891:    oScopeEnd
4892:    oNodeSetInt( resultType, qNameTable, addr )
         % loop over enum values
4904:    NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
4924:    {
4924:       Node enumValue = oNodeIterValue( it )
4934:       [ oNodeNull( enumValue )
4941:          | true :  >
4944:          | * :
4949:       ]
4949:       .tPushAddrGlobal  oEmitInt( addr )
4957:       .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
4972:       .tAssignI
4974:       addr = add( addr, 8 )
4987:       .tPushAddrGlobal  oEmitInt( addr )
4995:       .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
5010:       .tAssignP
5012:       addr = add( addr, 8 )
5025:       oNodeIterNext( it )
5031:    }
         % final table entry
5033:    .tPushAddrGlobal  oEmitInt( addr )
5041:    .tPushConstI  oEmitInt( 0 )
5049:    .tAssignI
5051:    addr = add( addr, 8 )
5064:    .tPushAddrGlobal  oEmitInt( addr )
5072:    .tPushConstI  oEmitInt( 0 )
5080:    .tAssignP
5082:    addr = add( addr, 8 )
5095:    oCodePop
      
5096:    oTypeAdd( resultType )
5103:    ;
      
      
      % --------------------------- Const Expressions --------------------------
      
      % Constant expressions: currently, only literal integers or previously
      % named constant integers are supported, possibly with a negation.
      % Constant expressions are evaluated at compile time.
      
5103: ConstExpr:
5105:    [
5105:       | pIntLit :
5107:          oValuePush( TOKEN_VALUE )
5112:       | pIdent :
5114:          Node decl = oScopeFindRequire
5119:          @ResolveUnitRef( decl )
5126:          [ oNodeType( decl )
5133:             | nConst :
5134:                oValuePush( oNodeGetInt( decl, qValue ) )
5147:             | * :
5152:                #eNotConst
5154:                oValuePush( 0 )
5160:          ]
5160:       | pMinus :
5162:          @ConstExpr
5164:          oValueNegate
5165:    ];
      
      
      
      % ------------------------------ Expressions -----------------------------
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanFlowType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
5176: Expr:
5178:    Label falseLabel = labelNull
      
5184:    @ExprAllowFlow( falseLabel )
5191:    @FlowToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
5199: BooleanExprControlFlow( out Label falseLabel ):
5201:    @ExprAllowFlow( falseLabel )
5208:    [ oTypeSNodeType
5210:       | nBooleanFlowType :
5211:       | nBooleanType :
               % convert value to control flow
5213:          falseLabel = oLabelNew
5218:          .tJumpFalse  oEmitLabel( falseLabel )
5226:       | * :
5233:          #eNotBoolean
5235:    ]
5235:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
5237: FlowToVal( inout Label falseLabel ):
5239:    [ oTypeSNodeType
5241:       | nBooleanFlowType :
5242:          Label doneLabel = oLabelNew
5247:          .tPushConstI  oEmitInt( 1 )
5255:          .tJump  oEmitLabel( doneLabel )
5263:          .tLabel  oEmitLabel( falseLabel )
5271:          .tPushConstI  oEmitInt( 0 )
5279:          .tLabel  oEmitLabel( doneLabel )
5287:          oTypeSPop
5288:          oTypeSPush( BooleanType )
5294:          falseLabel = labelNull
5300:       | * :
5305:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
5306: ValToFlow( out Label falseLabel ):
5308:    [ oTypeSNodeType
5310:       | nBooleanType :
5311:          falseLabel = oLabelNew
5316:          .tJumpFalse  oEmitLabel( falseLabel )
5324:          oTypeSPop
5325:          oTypeSPush( BooleanFlowType )
5331:       | * :
5336:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanFlowType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanFlowType.
      % In this case, falseLabel is ignored.
      %
5337: ExprAllowFlow( out Label falseLabel ):
5339:    @BoolExprAllowFlow( falseLabel )
5346:    {[
5346:       | '=' :
5348:          @FlowToVal( falseLabel )
5355:          @PromoteToIntOptional
5357:          @BoolExprAllowFlow( falseLabel )
5364:          @FlowToVal( falseLabel )
5371:          @PromoteToIntOptional
5373:          @MatchTypes
5375:          [ oTypeSNodeType
5377:             | nBooleanType, nCharType :     .tEqualB
5380:             | nIntegerType, nEnumType :     .tEqualI
5384:             | nPointerType, nUniversalPointerType :    .tEqualP
5388:             | nShortStringType, nStrLitType :
5390:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tEqualI
5402:             | * :                           #eNotAllowed
5423:          ]
5423:          oTypeSPop
5424:          oTypeSPush( BooleanType )
      
5430:       | '<>' :
5432:          @FlowToVal( falseLabel )
5439:          @PromoteToIntOptional
5441:          @BoolExprAllowFlow( falseLabel )
5448:          @FlowToVal( falseLabel )
5455:          @PromoteToIntOptional
5457:          @MatchTypes
5459:          [ oTypeSNodeType
5461:             | nBooleanType, nCharType :     .tNotEqualB
5464:             | nIntegerType, nEnumType :     .tNotEqualI
5468:             | nPointerType, nUniversalPointerType :    .tNotEqualP
5472:             | nShortStringType, nStrLitType :
5474:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tNotEqualI
5486:             | * :                           #eNotAllowed
5507:          ]
5507:          oTypeSPop
5508:          oTypeSPush( BooleanType )
      
5514:       | '<' :
5516:          @FlowToVal( falseLabel )
5523:          @PromoteToIntOptional
5525:          @BoolExprAllowFlow( falseLabel )
5532:          @FlowToVal( falseLabel )
5539:          @PromoteToIntOptional
5541:          @MatchTypes
5543:          [ oTypeSNodeType
5545:             | nBooleanType, nCharType :     .tLessB
5548:             | nIntegerType, nEnumType :     .tLessI
5552:             | nPointerType, nUniversalPointerType :   .tLessP
5556:             | nShortStringType, nStrLitType :
5558:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessI
5570:             | * :                           #eNotAllowed
5591:          ]
5591:          oTypeSPop
5592:          oTypeSPush( BooleanType )
      
5598:       | '>' :
5600:          @FlowToVal( falseLabel )
5607:          @PromoteToIntOptional
5609:          @BoolExprAllowFlow( falseLabel )
5616:          @FlowToVal( falseLabel )
5623:          @PromoteToIntOptional
5625:          @MatchTypes
5627:          [ oTypeSNodeType
5629:             | nBooleanType, nCharType :     .tGreaterB
5632:             | nIntegerType, nEnumType :     .tGreaterI
5636:             | nPointerType, nUniversalPointerType :   .tGreaterP
5640:             | nShortStringType, nStrLitType :
5642:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterI
5654:             | * :                           #eNotAllowed
5675:          ]
5675:          oTypeSPop
5676:          oTypeSPush( BooleanType )
      
5682:       | '<=' :
5684:          @FlowToVal( falseLabel )
5691:          @PromoteToIntOptional
5693:          @BoolExprAllowFlow( falseLabel )
5700:          @FlowToVal( falseLabel )
5707:          @PromoteToIntOptional
5709:          @MatchTypes
5711:          [ oTypeSNodeType
5713:             | nBooleanType, nCharType :     .tLessEqualB
5716:             | nIntegerType, nEnumType :     .tLessEqualI
5720:             | nPointerType, nUniversalPointerType :   .tLessEqualP
5724:             | nShortStringType, nStrLitType :
5726:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessEqualI
5738:             | * :                           #eNotAllowed
5759:          ]
5759:          oTypeSPop
5760:          oTypeSPush( BooleanType )
      
5766:       | '>=' :
5768:          @FlowToVal( falseLabel )
5775:          @PromoteToIntOptional
5777:          @BoolExprAllowFlow( falseLabel )
5784:          @FlowToVal( falseLabel )
5791:          @PromoteToIntOptional
5793:          @MatchTypes
5795:          [ oTypeSNodeType
5797:             | nBooleanType, nCharType :     .tGreaterEqualB
5800:             | nIntegerType, nEnumType :     .tGreaterEqualI
5804:             | nPointerType, nUniversalPointerType :   .tGreaterEqualP
5808:             | nShortStringType, nStrLitType :
5810:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterEqualI
5822:             | * :                           #eNotAllowed
5843:          ]
5843:          oTypeSPop
5844:          oTypeSPush( BooleanType )
      
5850:       | * :
5865:          >
5867:    ]};
      
      
5870: BoolExprAllowFlow( out Label falseLabel ):
5872:    Label trueLabel = labelNull
      
5878:    @BoolTermAllowFlow( falseLabel )
5885:    {[
5885:       | pOr :
5887:          [ oTypeSNodeType
5889:             | nBooleanFlowType :
                     % We are true here. Jump ahead to done
5890:                [ equal_label( trueLabel, labelNull )
5900:                   | true :  trueLabel = oLabelNew
5906:                   | * :
5911:                ]
5911:                .tJump  oEmitLabel( trueLabel )
5919:             | nBooleanType :
5921:                @ValToFlow( falseLabel )
                     % We are true here. Jump ahead to done
5928:                [ equal_label( trueLabel, labelNull )
5938:                   | true :  trueLabel = oLabelNew
5944:                   | * :
5949:                ]
5949:                .tJump  oEmitLabel( trueLabel )
5957:             | * : #eNotBoolean
5966:          ]
5966:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5967:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5975:          falseLabel = labelNull
5981:          @BoolTermAllowFlow( falseLabel )
      
5988:          [ oTypeSNodeType
5990:             | nBooleanFlowType :
5991:             | nBooleanType :
5993:                @ValToFlow( falseLabel )
6000:             | * : #eNotBoolean
6009:          ]
      
6009:          oTypeSPop
6010:          oTypeSPush( BooleanFlowType )
      
6016:       | * :
6021:          >
6023:    ]}
      
         % any short-circuit trues jump here to the end
6025:    [ equal_label( trueLabel, labelNull )
6035:       | false :
6036:          .tLabel  oEmitLabel( trueLabel )
6044:       | * :
6049:    ]
6050:    ;
      
      
6050: BoolTermAllowFlow( out Label falseLabel ):
6052:    Label overallFalseLabel = labelNull
      
6058:    @BoolFactorAllowFlow( falseLabel )
6065:    {[
6065:       | pAnd :
6067:          [ oTypeSNodeType
6069:             | nBooleanFlowType :
6070:             | nBooleanType :
6072:                @ValToFlow( falseLabel )
6079:             | * :
6086:                #eNotBoolean
6088:          ]
6088:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
6089:          [ equal_label( overallFalseLabel, labelNull )
6099:             | true :
6100:                overallFalseLabel = oLabelNew
6105:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
6119:                falseLabel = overallFalseLabel
6125:             | * :
6130:          ]
      
6130:          Label factorFalseLabel = labelNull
6136:          @BoolFactorAllowFlow( factorFalseLabel )
      
6143:          [ oTypeSNodeType
6145:             | nBooleanFlowType :
6146:             | nBooleanType :
6148:                @ValToFlow( factorFalseLabel )
6155:             | * : #eNotBoolean
6164:          ]
6164:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
6178:       | * :
6183:          >
6185:    ]};
      
6188: BoolFactorAllowFlow( out Label falseLabel ):
6190:    [
6190:       | pNot :
6192:          Label factorFalseLabel = labelNull
      
6198:          @BoolFactorAllowFlow( factorFalseLabel )
6205:          [ oTypeSNodeType
6207:             | nBooleanFlowType :
                     % We have control flow, and are sitting at the point that has value false.
6208:                falseLabel = oLabelNew
6213:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
6221:                .tLabel  oEmitLabel( factorFalseLabel )
      
6229:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
6231:                .tNot
      
6233:             | * : #eNotBoolean
6242:          ]
      
6242:       | * :
6247:          @ArithExprAllowFlow( falseLabel )
6254:    ];
      
6255: ArithExprAllowFlow( out Label falseLabel ):
6257:    boolean first = true
6263:    int tempStrOffset
      
6263:    @TermAllowFlow( falseLabel )
6270:    {[
6270:       | '+' :
6272:          [ oTypeSNodeType
6274:             | nIntegerType, nByteType :
6275:                @PromoteToIntPop
6277:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
      
6284:                [ oTypeSNodeType
6286:                   | nPointerType, nUniversalPointerType :
                           % int + ptr
6287:                      .tSwap
                           % leave only the ptr type on the type stack (int was already popped above)
6289:                      @PointerAddition
6291:                   | * :
6298:                      @PromoteToInt
6300:                      .tAddI
6302:                ]
      
6302:             | nShortStringType, nStrLitType, nCharType :
                     % String concatenation
6304:                [ first
6307:                   | true :  % move into a temp string, so subsequent term(s) can further modify it.
6308:                             tempStrOffset = @MoveIntoTempShortString
6314:                             first = false
6320:                   | * :
6325:                ]
6325:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6332:                [ oTypeSNodeType
6334:                   | nShortStringType, nStrLitType :
6335:                      @ShortStringAppendShortString
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6337:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6345:                      oTypeSPush( ShortStringType )
6351:                   | nCharType :
6353:                      @ShortStringAppendChar
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6355:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6363:                      oTypeSPush( ShortStringType )
6369:                   | * :
6378:                      #eTypeMismatch
6380:                      oTypeSPop
6381:                ]
      
6381:             | nPointerType, nUniversalPointerType :
6383:                @TermAllowFlow( falseLabel )   % actually not allowing CF
6390:                @PromoteToIntPop
6392:                @PointerAddition
      
6394:             | * :
6411:                #eNotAllowed
6413:          ]
      
6413:       | '-' :
6415:          [ oTypeSNodeType
6417:             | nIntegerType, nByteType :
6418:                @PromoteToIntPop
6420:                @TermAllowFlow( falseLabel )
6427:                @PromoteToInt
6429:                .tSubI
      
6431:             | nPointerType, nUniversalPointerType :
6433:                @TermAllowFlow( falseLabel )
6440:                [ oTypeSNodeType
6442:                   | nIntegerType, nByteType :
6443:                      @PromoteToIntPop
6445:                      @PointerSubInt
6447:                   | nPointerType, nUniversalPointerType :
6449:                      @MatchTypes
6451:                      @PointerSubPointer
6453:                   | * :
6464:                      #eNotAllowed
6466:                ]
      
6466:             | * :  #eNotAllowed
      
6479:          ]
6479:       | * :
6486:          >
6488:    ]};
      
6491: TermAllowFlow( out Label falseLabel ):
6493:    @FactorAllowFlow( falseLabel )
6500:    {[
6500:       | pTimes :
6502:          @PromoteToIntPop
6504:          @FactorAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6511:          @PromoteToInt
6513:          .tMultI
6515:       | pDivide :
6517:          @PromoteToIntPop
6519:          @FactorAllowFlow( falseLabel )
6526:          @PromoteToInt
6528:          .tDivI
6530:       | * :
6537:          >
6539:    ]};
      
6542: FactorAllowFlow( out Label falseLabel ):
6544:    [
6544:       | pPlus :
6546:          @PrimaryAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
               % TO DO: unary +/- is supposed to leave expression type as-is.
6553:          @PromoteToInt
6555:       | pMinus :
6557:          @PrimaryAllowFlow( falseLabel )
               % TO DO: unary +/- is supposed to leave expression type as-is.
6564:          @PromoteToInt
6566:          .tNegI
6568:       | * :
6575:          @PrimaryAllowFlow( falseLabel )
6582:    ];
      
6583: PrimaryAllowFlow( out Label falseLabel ):
6585:    [
6585:       | pIntLit :
6587:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6594:          oTypeSPush( IntegerType )
      
6600:       | pCharLit :
6602:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6609:          oTypeSPush( CharType )
      
6615:       | '(' :
6617:          @ExprAllowFlow( falseLabel )
6624:          ')'
      
6626:       | pStrLit :
6628:          int addr = oStringAllocShortStringLit( CURRENT_STRLIT )     % store in global data
6637:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: consider defining a ShortString type with the exact capacity used.
               % But, I don't think it should matter here, since nobody should be assigning to this string.
6645:          oTypeSPush( StrLitType )
               % This seems unlikely, but the strlit may be followed by
               % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
               % First, advance the pointer by index if any
6651:          @LValueIndexes
               % get final value of dereferencing, if any
6653:          @FetchVar
      
6655:       | pIdent :
6657:          Node decl = oScopeFindRequire
6662:          @ResolveUnitRef( decl )
6669:          Node theType
      
6669:          [ oNodeType( decl )
6676:             | nFunc :
6677:                @Call( decl )
      
6684:             | nBuiltInFunc :
6686:                @CallBuiltInFunc( decl )
      
6693:             | nConst, nEnumValue :
6695:                theType = oNodeGet( decl, qType )
6708:                oTypeSPush( theType )
6714:                [ oTypeSNodeType
6716:                   | nIntegerType, nEnumType, nBooleanType :
6717:                      .tPushConstI @EmitValue( decl )
6726:                   | nPointerType, nUniversalPointerType :
                           % We have one pointer const, Nil.  It's pushed as I.
                           % Sign-extending I to P won't hurt since it's 0.
6728:                      .tPushConstI @EmitValue( decl )
6737:                   | * :
6750:                      #eNotImplemented
6752:                ]
      
6752:             | nGlobalVar, nLocalVar, nParam, nTypedConst :
6754:                @VarExpr( decl )
      
6761:             | * :
6780:                #eNotValue
6782:                oTypeSPush( IntegerType )
6788:          ]
      
6788:       | '@' :        % @var -- pointer to var
6790:          pIdent
      
6792:          Node decl = oScopeFindRequire
6797:          @ResolveUnitRef( decl )
6804:          Node theType
      
               % writeable is false because we're not on the left hand side of an assignment,
               % or passign into a var parameter.  So it's ok to take the address of a typed const.
6804:          @LValueVar( decl, false )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
6814:          theType = oTypeSTop
6819:          oTypeSPop
6820:          Node ptrType = @PointerTypeTo( theType )
6831:          oTypeSPush( ptrType )
      
6837:       | * :
6852:          #eNotValue
6854:          oTypeSPush( IntegerType )
6860:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
6861: VarExpr( Node decl ):
6863:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
6876:    int uplevels = @DeclUpLevels( decl )
      
6887:    oTypeSPush( theType )
6893:    [ oTypeSNodeType
6895:       | nIntegerType, nEnumType :
6896:          [ oNodeType( decl )
6903:             | nGlobalVar, nTypedConst :   .tPushGlobalI  @EmitValue( decl )
6913:             | nLocalVar :
6915:                [ equal_zero( uplevels )
6922:                   | true :  .tPushLocalI  @EmitValue( decl )
6932:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
6952:                ]
6952:             | nParam :
6954:                [ oNodeGetBoolean( decl, qInOut )
6964:                   | true :    % VAR param points to the var.  Auto dereference.
6965:                      [ equal_zero( uplevels )
6972:                         | true :  .tPushParamP  @EmitValue( decl )
6982:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7002:                      ]
7002:                      .tFetchI
7004:                   | * :
7009:                      [ equal_zero( uplevels )
7016:                         | true :  .tPushParamI  @EmitValue( decl )
7026:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
7046:                      ]
7046:                ]
7046:          ]
      
7058:       | nBooleanType, nByteType, nCharType :
7060:          [ oNodeType( decl )
7067:             | nGlobalVar, nTypedConst :   .tPushGlobalB  @EmitValue( decl )
7077:             | nLocalVar :
7079:                [ equal_zero( uplevels )
7086:                   | true :  .tPushLocalB  @EmitValue( decl )
7096:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
7116:                ]
7116:             | nParam :
7118:                [ oNodeGetBoolean( decl, qInOut )
7128:                   | true :    % VAR param points to the var.  Auto dereference.
7129:                      [ equal_zero( uplevels )
7136:                         | true :  .tPushParamP  @EmitValue( decl )
7146:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7166:                      ]
7166:                      .tFetchB
7168:                   | * :
7173:                      [ equal_zero( uplevels )
7180:                         | true :  .tPushParamB  @EmitValue( decl )
7190:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
7210:                      ]
7210:                ]
7210:          ]
      
7222:       | nFileType :
7224:          #eNotImplemented
      
7226:       | nPointerType, nUniversalPointerType :
7228:          [ oNodeType( decl )
7235:             | nGlobalVar, nTypedConst :   .tPushGlobalP @EmitValue( decl )
7245:             | nLocalVar :
7247:                [ equal_zero( uplevels )
7254:                   | true :  .tPushLocalP  @EmitValue( decl )
7264:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
7284:                ]
7284:             | nParam :
7286:                [ oNodeGetBoolean( decl, qInOut )
7296:                   | true :    % VAR param points to the var.  Auto dereference.
7297:                      [ equal_zero( uplevels )
7304:                         | true :  .tPushParamP  @EmitValue( decl )
7314:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7334:                      ]
7334:                      .tFetchP
7336:                   | * :
7341:                      [ equal_zero( uplevels )
7348:                         | true :  .tPushParamP  @EmitValue( decl )
7358:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7378:                      ]
7378:                ]               
7378:          ]
7390:          [
7390:             | '^' :             % dereferenced
7392:                oTypeSPop
7393:                oTypeSPush( oNodeGet( theType, qBaseType ) )
7406:                @LValueIndexes
7408:                @FetchVar
7410:             | '[' :             % dereferencing pointer like an array [0..] of baseType
7412:                @PointerArraySubscript
                     % modify addr for any subsequent subscripts, field references, etc
7414:                @LValueIndexes
7416:                @FetchVar
7418:             | * :               % just ptr value alone
7425:          ]
      
7425:       | nArrayType, nRecordType, nShortStringType :
               % compound type
               % first, push addr of start of var
7427:          [ oNodeType( decl )
7434:             | nGlobalVar, nTypedConst :   .tPushAddrGlobal @EmitValue( decl )
7444:             | nLocalVar :
7446:                [ equal_zero( uplevels )
7453:                   | true :  .tPushAddrLocal  @EmitValue( decl )
7463:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
7483:                ]
7483:             | nParam :
7485:                [ oNodeGetBoolean( decl, qInOut )
7495:                   | true :    % VAR param points to the var.  Auto dereference.
7496:                      [ equal_zero( uplevels )
7503:                         | true :  .tPushParamP  @EmitValue( decl )
7513:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7533:                      ]
7533:                   | * :
7538:                      [ equal_zero( uplevels )
7545:                         | true :  .tPushAddrParam  @EmitValue( decl )
7555:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
7575:                      ]
7575:                ]
7575:          ]
               % modify addr for subscripts, field references, etc
7587:          @LValueIndexes
               % get final value
7589:          @FetchVar
7591:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
7618: FetchVar:
7620:    [ oTypeSNodeType
7622:       | nIntegerType, nEnumType :  .tFetchI
7625:       | nBooleanType, nByteType, nCharType :  .tFetchB
7629:       | nFileType :   #eNotImplemented
7633:       | nPointerType :             .tFetchP
7637:       | nUniversalPointerType :    #eCantDereference
7641:       | nArrayType, nRecordType, nStrLitType, nShortStringType :  % compound type; leave as addr
7643:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
7672: LValueIndexes:
7674:    {[
7674:       | '[' :
7676:          [ oTypeSNodeType
7678:             | nArrayType :    @ArraySubscripts
7681:             | nPointerType :  @PointerArraySubscript
7685:             | nStrLitType, nShortStringType :  @ShortStringArraySubscript
7689:             | * :             #eNotArray
7702:          ]
7702:       | '.' :       @RecordFieldRef
7706:       | '^' :       @PointerDeref   % TO DO: I suspect I don't have logic right here
                                          % about precondition and using .tFetchP
                                          % Ideally this should take over for the ^ in VarExpr too.
7710:       | * :         >
7721:    ]};
      
7724: ArraySubscripts:
7726:    [ oTypeSNodeType
7728:       | nArrayType :
7729:       | * :       #eNotArray
7736:    ]
7736:    {
7736:       [ oTypeSNodeType
7738:          | nArrayType :
7739:          | * :    #eTooManySubscripts
7746:       ]
      
            % low subscript of this dimension
7746:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
7763:       Node baseType
7763:       baseType = oNodeGet( oTypeSTop, qBaseType )
7775:       oTypeSPop
7776:       oTypeSPush( baseType )
      
7782:       @Expr
7784:       @RequireIntPop
            % adjust for low subscript
7786:       [ equal_zero( low )
7793:          | false :
7794:             .tPushConstI oEmitInt( low ) .tSubI
7804:          | * :
7809:       ]
      
            % multiply by element size
7809:       int size = oNodeGetInt( baseType, qSize )
7822:       [ equal( size, 1 )
7832:          | false :
7833:             .tPushConstI oEmitInt( size ) .tMultI
7843:          | * :
7848:       ]
      
            % update start address
7848:       .tAddPI
7850:       [
7850:          | ']' :  >
7854:          | ',' :
7856:       ]
7864:    };
      
      
      % pointer[index] - similar to array[index] where index counts from 0.
      % On entry, the pointer value is on the stack, and pointer type is on the type stack.
      % We've already accepted the '['.
      % On exit, the address of the pointed-to element is on the stack,
      % and the element type is on the type stack.
      %
7867: PointerArraySubscript:
7869:    [ oTypeSNodeType
7871:       | nPointerType :
7872:       | * :    #eCantDereference
7879:    ]
         % replace type stack with base type
7879:    Node baseType = oNodeGet( oTypeSTop, qBaseType )
7891:    oTypeSPop
7892:    oTypeSPush( baseType )
         
7898:    @Expr
7900:    @RequireIntPop
         % multiply by element size
7902:    int size = oNodeGetInt( baseType, qSize )
7915:    [ equal( size, 1 )
7925:       | false :
7926:          .tPushConstI  oEmitInt( size )  .tMultI
7936:       | * :
7941:    ]
         % update start address
7941:    .tAddPI
7943:    ']';
      
      
      % Specialization of array indexing for ShortString.
      % We treat the starting index as 0 so that str[1] sees the first string char,
      % past the length byte.
      %
7946: ShortStringArraySubscript:
7948:    [ oTypeSNodeType
7950:       | nStrLitType, nShortStringType :
7951:       | * :    #eCantDereference
7960:    ]
7960:    oTypeSPop
7961:    oTypeSPush( CharType )
7967:    @Expr
7969:    @RequireIntPop
7971:    .tAddPI
7973:    ']';
      
      
7976: RecordFieldRef:
7978:    [ oTypeSNodeType
7980:       | nRecordType :
7981:       | * :    #eNotRecord
7988:    ]
7988:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
8000:    pIdent
8002:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
8007:    [ oNodeType( field )
8014:       | nRecordField :
8015:       | * :   #eNotRecordField
8022:    ]
8022:    oScopeEnd
8023:    int offset = oNodeGetInt( field, qValue )
8036:    [ equal_zero( offset )
8043:       | false :
8044:          .tPushConstI oEmitInt( offset ) .tAddPI
8054:       | * :
8059:    ]
      
         % replace the type on the type stack, with the field type
8059:    oTypeSPop
8060:    oTypeSPush( oNodeGet( field, qType ) )
8074:    ;
      
      
      % On entry, expr stack has ptr, and integer index above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr advanced to that index
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
8074: PointerAddition:
8076:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8088:    int elementSize = oNodeGetInt( elementType, qSize )
8101:    [ equal( elementSize, 1 )
8111:       | false :
8112:          .tPushConstI  oEmitInt( elementSize )
8120:          .tMultI
8122:       | * :
8127:    ]
8127:    .tAddPI
8130:    ;
      
      
      % On entry, expr stack has ptr, and integer above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr decremented by that integer
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
8130: PointerSubInt:
8132:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8144:    int elementSize = oNodeGetInt( elementType, qSize )
8157:    [ equal( elementSize, 1 )
8167:       | false :
8168:          .tPushConstI  oEmitInt( elementSize )
8176:          .tMultI
8178:       | * :
8183:    ]
8183:    .tSubPI
8186:    ;
      
      
      % On entry, expr stack has two pointers, P1 and P2 above it.
      % The type stack has the type of P1.  (The type of P2 was already matched to P1.)
      % Replace the pointers on the expression stack with P1 - P2, scaled by the
      % pointed-to element size.  Type stack switched to integer.
      % 
8186: PointerSubPointer:
8188:    .tSubP
8190:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8202:    int elementSize = oNodeGetInt( elementType, qSize )
8215:    [ equal( elementSize, 1 )
8225:       | false :
8226:          .tPushConstI  oEmitInt( elementSize )
8234:          .tDivI
8236:       | * :
8241:    ]
8241:    oTypeSPop
8242:    oTypeSPush( IntegerType )
8249:    ;
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
8249: PointerDeref:
8251:    [ oTypeSNodeType
8253:       | nPointerType :
8254:       | nUniversalPointerType :   #eCantDereference
8258:       | * :       #eNotPointer
8267:    ]
8267:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
8269:    Node theType = oTypeSTop
8274:    oTypeSPop
8275:    oTypeSPush( oNodeGet( theType, qBaseType ) )
8289:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
8289: CoerceType:
8291:    node_type nt = oTypeSNodeType
8296:    oTypeSPop
8297:    [ equal_node_type( nt, oTypeSNodeType )
8306:       | false :
               % Can we implicitly convert the value to the desired type?
8307:          [ oTypeSNodeType
8309:             | nIntegerType :
8310:                [ nt
8313:                   | nByteType :   .tCastBtoI  >>
8317:                   | * :
8322:                ]
8322:             | nByteType :
8324:                [ nt
8327:                   | nIntegerType :   .tCastItoB  >>
8331:                   | * :
8336:                ]
8336:             | nPointerType :
8338:                [ nt
8341:                   | nUniversalPointerType :  >>
8343:                   | nStrLitType :
8345:                      [ equal_node( oTypeSTop, PCharType )
8354:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8355:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8366:                         | * :
8371:                      ]
8371:                   | * :
8378:                ]
8378:             | nUniversalPointerType :
8380:                [ nt
8383:                   | nPointerType :  >>
8385:                   | * :
8390:                ]
8390:             | nShortStringType :
8392:                [ nt
8395:                   | nStrLitType :  >>
8397:                   | nCharType :
                           % Store char as a temp ShortString.
8399:                      oTypeSPush( CharType )
8405:                      int tempOffset = @MoveIntoTempShortString
8411:                      oTypeSPop
8412:                      >>
8413:                   | * :
8420:                ]
8420:             | * :
8433:          ]
8433:          #eTypeMismatch
8435:       | * :
8440:    ];
      
      
      % Given a ShortString, StrLit, or Char on the expression stack
      % (and type on the type stack).  Move the value into a new temporary ShortString.
      % Leave that temp string and type on the stacks.
      % Also returns the offset of the temp string.
      %
8441: MoveIntoTempShortString >> int:
8443:    int tempOffset = oScopeAllocType( ShortStringType )
         % copy the value
8453:    [ oTypeSNodeType
8455:       | nShortStringType, nStrLitType :
8456:          .tPushAddrLocal  oEmitInt( tempOffset )
               % put temp addr under value addr
8464:          .tSwap
               % TO DO: we could just copy length + 1, but tCopy takes a fixed #bytes
8466:          .tCopy  oEmitInt( oNodeGetInt( ShortStringType, qSize ) )
8481:       | nCharType :
               % temp[0] = 1
8483:          .tPushAddrLocal  oEmitInt( tempOffset )
8491:          .tPushConstI  oEmitInt( 1 )
8499:          .tAssignB
               % temp[1] = value
8501:          .tPushAddrLocal  oEmitInt( add( tempOffset, 1 ) )
8516:          .tSwap
8518:          .tAssignB
8520:       | * :   #eTypeMismatch
8531:    ]
8531:    oTypeSPop
         % Leave the temp ShortString on the expr stack and type stack
8532:    .tPushAddrLocal  oEmitInt( tempOffset )
8540:    oTypeSPush( ShortStringType )
8546:    >> tempOffset;
      
      
      % Top of expr stack / type stack is ShortString B.
      % Under it is ShortString A.
      % Change A to append the contents of B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
8550: ShortStringAppendShortString:
         % TO DO: ideally I would do this directly with tcode.  But I think I need some more
         % enhancements for that to work well.   Meanwhile, generate a call to a method.
         % For the moment, I'll implement the method in Pascal, in the mysystem unit.
8552:    .tAllocActuals  oEmitInt( 16 )
8560:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
8572:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
8584:    .tCall   @EmitValue( System_ShortStringAppendShortString )
         % TO DO: Ideally I would leave A on the expr stack / type stack.
         %  But I can't really do that without dup, which I hesitate to add.
         %  I'll have the caller push A again themselves.
8593:    .tFreeActuals  oEmitInt( 16 )
8601:    oTypeSPop
8602:    oTypeSPop
8604:    ;
      
      % Top of expr stack / type stack is Char B.
      % Under it is ShortString A.
      % Change A to append char B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
8604: ShortStringAppendChar:
         % Note at the moment I don't align params
8606:    .tAllocActuals  oEmitInt( 12 )
8614:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignI
8626:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
8638:    .tCall  @EmitValue( System_ShortStringAppendChar )
8647:    .tFreeActuals  oEmitInt( 12 )
8655:    oTypeSPop
8656:    oTypeSPop
8658:    ;
      
      % Expr stack has ShortString A, and ShortString B above it.
      % Type stack has just the type of ShortString A.
      % Replaces the expr stack with the integer value of string comparison:
      % -1 if A < B,  0 if A = B,  1 if A > B
      % Leaves Integer on the type stack.
      %
8658: ShortStringCmp:
8660:    .tAllocActuals  oEmitInt( 24 )
8668:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
8680:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
8692:    int tempOffset = oScopeAllocType( IntegerType )
8702:    .tPushAddrActual  oEmitInt( 16 )  .tPushAddrLocal  oEmitInt( tempOffset )  .tAssignP
8720:    .tCall  @EmitValue( System_ShortStringCmp )
8729:    .tPushLocalI  oEmitInt( tempOffset )
8737:    .tFreeActuals  oEmitInt( 24 )
8745:    oTypeSPop
8746:    oTypeSPush( IntegerType )
8753:    ;
      
      
      % Called on first use of an extern method
      %
8753: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
8755:    int strAddr
8755:    String externalName = oNodeGetString( method, qExternalName )
8768:    [ equal_string( externalName, stringNull )
8778:       | true :
8779:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
8800:       | false :
8802:          strAddr = oStringAllocLit( externalName )
8812:    ]
8820:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
8836:    ;
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
8836: Call( Node method ):
      
         % Prior to first call, issue extern label for a called method.
         % I don't want to issue .tLabelExtern for unused methods, that seems inefficient.
8838:    [ oNodeGetBoolean( method, qExternal )
8848:       | true :
8849:          [ oNodeGetBoolean( method, qUsed )
8859:             | false :
                     % define the extern label on first use
8860:                @DefineExternLabel( method )
8867:             | * :
8872:          ]
8872:      | * :
8877:    ]
8877:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
8889:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
8902:    Node resultType
8902:    int tempOffset
      
8902:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
8919:    [ isFunc
8922:       | true :
8923:          resultType = oNodeGet( method, qType )
8936:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
8946:       | * :
8951:    ]
         
      
8951:    Node paramScope = oNodeGet( method, qParams )
8964:    int actualsSize = oNodeGetInt( paramScope, qSize )
8977:    [ cdecl
8980:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
8989:       | false :  .tAllocActuals  oEmitInt( actualsSize )
8999:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
9007:    [ greater( @DeclLevel( method ), 0 )
9022:       | true :
9023:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
9031:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
9050:          .tAssignP
9052:       | * :
9057:    ]
      
      
9057:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
9070:    Node param = oNodeIterValue( paramIter )
9080:    [
9080:       | '(' :
            
9082:          {
9082:             [ oNodeNull( param )
9089:                | true : >
9092:                | * :
9097:             ]
      
9097:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
9110:             .tPushAddrActual oEmitInt( offset )
9118:             oTypeSPush( oNodeGet( param, qType ) )
      
9131:             [ oNodeGetBoolean( param, qInOut )
9141:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
9142:                           @LValueExpr( true )
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
9149:                           @MatchTypes
      
9151:                           .tAssignP
      
9153:                | false :  @Expr
9157:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
9159:                           [ oTypeSNodeType
9161:                              | nIntegerType, nEnumType : .tAssignI
9164:                              | nBooleanType, nByteType, nCharType :  .tAssignB
9168:                              | nFileType :   #eNotImplemented
9172:                              | nPointerType, nUniversalPointerType :  .tAssignP
9176:                              | nArrayType, nRecordType, nShortStringType :
                                       % compound types: copy value into actuals space
9178:                                  int size = oNodeGetInt( oTypeSTop, qSize )
9190:                                  .tCopy  oEmitInt( size )    % multi-word copy
9198:                           ]
9224:             ]
9232:             oTypeSPop
      
9233:             oNodeIterNext( paramIter )
9239:             param = oNodeIterValue( paramIter )
9249:             [ oNodeNull( param )
9256:                | true :  >
9259:                | false :
9261:             ]
      
9269:             ','
9271:          }
      
9273:          ')'
      
9275:       | * :
9280:    ]
      
9280:    [ oNodeNull( param )
9287:       | false :    #eMissingParameter
9290:       | * :
9295:    ]
      
9295:    [ isFunc
9298:       | true :
               % Pass result temp as an additional VAR parameter.
9299:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
9314:          .tPushAddrLocal  oEmitInt( tempOffset )
9322:          .tAssignP
9324:       | * :
9329:    ]
      
9329:    [ cdecl
9332:       | true :
9333:          .tCallCdecl  @EmitValue( method )
9342:       | false :
9344:          .tCall   @EmitValue( method )
9353:    ]
      
9361:    [ isFunc
9364:       | true :
               % push return value from temp
9365:          oTypeSPush( resultType )
      
9371:          [ oTypeSNodeType
9373:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
9382:             | nBooleanType, nByteType, nCharType :   .tPushLocalB  oEmitInt( tempOffset )
9392:             | nFileType :  #eNotImplemented
9396:             | nPointerType, nUniversalPointerType :   .tPushLocalP  oEmitInt( tempOffset )
9406:             | nArrayType, nRecordType, nShortStringType :   % compound type: push address
9408:                                .tPushAddrLocal  oEmitInt( tempOffset )
9416:          ]
9442:       | * :
9447:    ]
         
9447:    .tFreeActuals  oEmitInt( actualsSize )
9456:    ;
      
      
      % Parse a call to a built-in function, identified by the just-accepted identifier.
      % This will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
9456: CallBuiltInFunc( Node method ):
      
         % Ord(x)
9458:    [ oNodeEqual( method, BuiltIn_Ord )
9468:       | true :
               % parameter is any scalar type (including boolean, enum, char)
               % result is integer
9469:          '('
9471:          @Expr
9473:          [ oTypeSNodeType
9475:             | nIntegerType, nEnumType :
9476:             | nBooleanType, nByteType, nCharType :  .tCastBtoI
9480:             | * :  #eTypeMismatch
9495:          ]
9495:          oTypeSPop
9496:          oTypeSPush( IntegerType )
9502:          ')'
9504:          >>
9505:       | * :
9510:    ]
      
         % Chr(x)
9510:    [ oNodeEqual( method, BuiltIn_Chr )
9520:       | true :
               % parameter is integer
               % result is char
9521:          '('
9523:          @Expr
9525:          [ oTypeSNodeType
9527:             | nIntegerType :    .tCastItoB
9530:             | nByteType :
9532:             | * :  #eTypeMismatch
9541:          ]
9541:          oTypeSPop
9542:          oTypeSPush( CharType )
9548:          ')'
9550:          >>
9551:       | * :
9556:    ]
      
         % Pred(x)
9556:    [ oNodeEqual( method, BuiltIn_Pred )
9566:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
9567:          '('
9569:          @Expr
9571:          [ oTypeSNodeType
9573:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
9574:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
9583:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
9586:                   | * :
9591:                ]
9591:             | * :  #eTypeMismatch
9598:          ]
9598:          .tDecI
9600:          ')'
9602:          >>
9603:       | * :
9608:    ]
      
         % Succ(x)
9608:    [ oNodeEqual( method, BuiltIn_Succ )
9618:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
9619:          '('
9621:          @Expr
9623:          [ oTypeSNodeType
9625:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
9626:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
9635:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
9638:                   | * :
9643:                ]
9643:             | * :  #eTypeMismatch
9650:          ]
9650:          .tIncI
9652:          ')'
9654:          >>
9655:       | * :
9660:    ]
      
9660:    #eNotImplemented
9663:    ;
      
      
      % ------------------------------ Statements -----------------------------
      
9663: Statement:
9665:    [
9665:       | pWriteln :     @WritelnStmt
9669:       | pWrite :       @WriteStmt
9673:       | pReadln :      @ReadlnStmt
9677:       | pRead :        @ReadStmt
9681:       | pIf :          @IfStmt
9685:       | pWhile :       @WhileStmt
9689:       | pFor :         @ForStmt
9693:       | pRepeat :      @RepeatStmt
9697:       | pBreak :       @BreakStmt
9701:       | pContinue :    @ContinueStmt
9705:       | pBegin :       @BeginStmt
9709:       | pIdent :       @LabelOrAssignOrCallStmt
9713:       | pCase :        @CaseStmt
9717:       | pGoto :        @GotoStmt
9721:       | pIntLit :      % should be an integer label
9723:                        oChangeIntLitToLabelIdent
9724:                        @LabelOrAssignOrCallStmt
9726:       | * :            % null statement : don't accept any tokens
9759:    ];
      
      
9760: LabelOrAssignOrCallStmt:
9762:    Node decl = oScopeFindRequire
9767:    @ResolveUnitRef( decl )
9774:    [ oNodeType( decl )
9781:       | nLabel :                          @LabelDefinition( decl )
9789:                                           @Statement
9791:       | nProc :                           @Call( decl )
9800:       | nGlobalVar, nLocalVar, nParam :   @AssignStmt( decl )
9809:       | nFunc :                           @AssignResultStmt( decl )
9818:       | * :                               #eBadStatement
9835:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
9836: LabelDefinition( Node decl ):
9838:    [ oNodeGetBoolean( decl, qDefined )
9848:       | true :  #eAlreadyDefined
9851:       | * :
9856:    ]
9856:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
9871:    oNodeSetBoolean( decl, qDefined, true )
9883:    ':'
9886:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
9886: AssignStmt( Node decl ):
      
9888:    @LValueVar( decl, true )
9898:    ':=' 
9900:    @Expr
9902:    @CoerceType
9904:    @Assign
9907:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack (already coerced to the lvalue type),
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
9907: Assign:
9909:    [ oTypeSNodeType
9911:       | nIntegerType, nEnumType :  .tAssignI
9914:       | nBooleanType, nByteType, nCharType :  .tAssignB
9918:       | nFileType :   #eNotImplemented
9922:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9926:       | nArrayType, nRecordType, nShortStringType :
                % TO DO: for ShortString, allow destination to be smaller capacity,
                % and truncate the copied value/length.
9928:           int size = oNodeGetInt( oTypeSTop, qSize )
9940:           .tCopy  oEmitInt( size )    % multi-word copy
9948:    ]
9974:    oTypeSPop
9976:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
9976: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
9978:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
9994:       | false :   #eNotCurrentFunction
9997:       | * :
10002:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
10002:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
10017:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
10030:    ':='
10032:    @Expr
10034:    @CoerceType
10036:    [ oTypeSNodeType
10038:       | nIntegerType, nEnumType : .tAssignI
10041:       | nBooleanType, nByteType, nCharType :  .tAssignB
10045:       | nFileType :   #eNotImplemented
10049:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
10053:       | nArrayType, nRecordType, nShortStringType :
10055:           int size = oNodeGetInt( oTypeSTop, qSize )
10067:           .tCopy  oEmitInt( size )    % multi-word copy
10075:    ]
10101:    oTypeSPop
10103:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
10103: LValueExpr( boolean writeable ):
         % At the moment, all lvalue expressions start with a variable name.
         % I think there can also be typecasts, not supported yet.  Check standard syntax.
10105:    pIdent
10107:    Node decl = oScopeFindRequire
10112:    @ResolveUnitRef( decl )
10119:    [ oNodeType( decl )
10126:       | nGlobalVar, nLocalVar, nParam, nTypedConst :
10127:       | * :  #eNotVar
10140:    ]
10140:    @LValueVar( decl, writeable )
10151:    ;
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
10151: LValueVar( Node decl, boolean writeable ):
10153:    [ oNodeType( decl )
10160:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
10170:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
10181:       | nParam :
10183:          [ oNodeGetBoolean( decl, qInOut )
10193:             | true :   % VAR param points to variable.  No dereference.
10194:                        .tPushParamP @EmitValue( decl )
10203:             | * :      .tPushAddrParam @EmitValue( decl )
10217:          ]
10217:       | nTypedConst :
10219:          [ writeable
10222:             | false :  .tPushAddrGlobal @EmitValue( decl )                       
10232:             | * :      #eNotVar
10239:          ]
10239:       | * :            #eNotVar
10252:    ]
      
10252:    oTypeSPush( oNodeGet( decl, qType ) )
      
         % handle subscripts, if any.
         % There is one case that I'm not fitting into the pattern nicely, so need to
         % check for specially here:  if lvalue var is a pointer variable, and is
         % followed by [index], we need to dereference the pointer variable before applying
         % the index.  This is different from handling of [index] on an rvalue expression.
         % Right now I have LValueIndexes working for both lvalue and rvalue (composite types)
         % so can't easily add this behavior in there.
         % TO DO: probably I need separate rules LValueIndexes and RValueIndexes.
         %    This might also explain my confusion about handling of deref operator in LValueIndexes vs rvalue expr,
         %    and having separate rules might clear that up better.
      
10265:    [ oTypeSNodeType
10267:       | nPointerType :
10268:          [
10268:             | '[' :
                     % dereference the pointer var first
10270:                .tFetchP
10272:                @PointerArraySubscript
10274:             | * :
10279:          ]
10279:       | * :
10284:    ]
         % additional subscripts, if any
10284:    @LValueIndexes
10287:    ;
      
      
10287: IncVar( Node decl ):
10289:    @LValueVar( decl, true )
10299:    @RequireIntPop
10301:    @VarExpr( decl )
10308:    oTypeSPop
10309:    .tIncI
10311:    .tAssignI;
      
10314: DecVar( Node decl ):
10316:    @LValueVar( decl, true )
10326:    @RequireIntPop
10328:    @VarExpr( decl )
10335:    oTypeSPop
10336:    .tDecI
10338:    .tAssignI;
      
      
10341: IfStmt:
10343:    Label falseLabel = labelNull
      
10349:    @BooleanExprControlFlow( falseLabel )
10356:    pThen
10358:    @Statement
10360:    [
10360:       | pElse :
10362:          Label doneLabel = oLabelNew
      
10367:          .tJump  oEmitLabel( doneLabel )
10375:          .tLabel oEmitLabel( falseLabel )
10383:          @Statement
10385:          .tLabel oEmitLabel( doneLabel )
      
10393:       | * :
10398:          .tLabel oEmitLabel( falseLabel )
10406:    ];
      
      
10407: ForStmt:
10409:    pIdent
      
10411:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
10416:    @LValueVar( decl, true )
10426:    @RequireIntPop
      
10428:    ':='
      
10430:    @Expr
10432:    @RequireIntPop
10434:    .tAssignI
      
10436:    Label breakLabel = oLabelNew
      
10441:    Label checkLabel = oLabelNew
10446:    .tJump  oEmitLabel( checkLabel )
      
10454:    Label continueLabel = oLabelNew
10459:    .tLabel  oEmitLabel( continueLabel )
10467:    [
10467:       | pTo :
10469:          @IncVar( decl )
10476:          .tLabel  oEmitLabel( checkLabel )
10484:          @VarExpr( decl )  oTypeSPop
10492:          @Expr
10494:          @RequireIntPop
10496:          .tGreaterI
10498:          .tJumpTrue  oEmitLabel( breakLabel )
10506:       | pDownto :
10508:          @DecVar( decl )
10515:          .tLabel  oEmitLabel( checkLabel )
10523:          @VarExpr( decl )  oTypeSPop
10531:          @Expr
10533:          @RequireIntPop
10535:          .tLessI
10537:          .tJumpTrue  oEmitLabel( breakLabel )
10545:    ]
10553:    oLoopPush( continueLabel, breakLabel )
10562:    pDo
10564:    @Statement
10566:    .tJump  oEmitLabel( continueLabel )
10574:    .tLabel  oEmitLabel( breakLabel )
10582:    oLoopPop;
      
      
10584: RepeatStmt:
10586:    Label continueLabel = oLabelNew
10591:    .tLabel  oEmitLabel( continueLabel )
      
10599:    Label breakLabel = oLabelNew
      
10604:    oLoopPush( continueLabel, breakLabel )
10613:    @Statement
10615:    {[
10615:       | ';' :
10617:          @Statement
10619:       | pUntil :
10621:          Label falseLabel
10621:          @BooleanExprControlFlow( falseLabel )
10628:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
10642:          >
10644:    ]}
10654:    .tLabel  oEmitLabel( breakLabel )
10662:    oLoopPop;
      
      
10664: WhileStmt:
10666:    Label continueLabel = oLabelNew
10671:    .tLabel  oEmitLabel( continueLabel )
      
10679:    Label breakLabel
10679:    @BooleanExprControlFlow( breakLabel )
      
10686:    oLoopPush( continueLabel, breakLabel )
10695:    pDo
10697:    @Statement
10699:    .tJump  oEmitLabel( continueLabel )
10707:    .tLabel  oEmitLabel( breakLabel )
10715:    oLoopPop;
      
      
10717: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
10719:    [ equal_label( oLoopContinueLabel, labelNull )
10728:       | true :
10729:          #eNotInALoop
10731:       | false :
10733:          .tJump  oEmitLabel( oLoopContinueLabel )
10740:    ];
      
      
10749: BreakStmt:
10751:    [ equal_label( oLoopBreakLabel, labelNull )
10760:       | true :
10761:          #eNotInALoop
10763:       | false :
10765:          .tJump  oEmitLabel( oLoopBreakLabel )
10772:    ];
      
      
10781: CaseStmt:
10783:    Code tableCode = oCodeNew
10788:    Label tableLabel = oLabelNew
10793:    Label doneLabel = oLabelNew
10798:    Label otherwiseLabel = doneLabel
      
10804:    @Expr
10806:    Node theType = oTypeSTop
10811:    [ oTypeSNodeType
10813:       | nBooleanType, nByteType, nCharType :   .tJumpCaseB  oEmitLabel( tableLabel )
10822:       | nIntegerType, nEnumType :              .tJumpCaseI  oEmitLabel( tableLabel )
10832:       | nShortStringType, nStrLitType :        #eNotImplemented
10836:       | * :     #eNotAllowed
10855:    ]
10855:    pOf
      
10857:    {
10857:       [
10857:          | pOtherwise, pElse :
10859:             otherwiseLabel = oLabelNew
10864:             .tLabel  oEmitLabel( otherwiseLabel )
      
                  % A bit tricky:
                  % The otherwise clause allows multiple statements (unlike other cases).
                  % ';' might be separating statements in the otherwise clause,
                  % or might be an optional trailing ; after the last statement.
                  % I have to watch for End to know when the statements stop.
                  % (Note, the otherwise clause is the last part of the case statement.)
10872:             {[
10872:                | pEnd :  >
10876:                | * :
10881:                   @Statement
10883:                   [
10883:                      | ';' :
10885:                      | * :   pEnd  >
10894:                   ]
10894:             ]}
10896:             >
      
10898:          | pEnd :
                  % Reached end with no otherwise clause
10900:             >
      
10902:          | * :
10911:             Label caseLabel = oLabelNew
10916:             oCodePush( tableCode )
10922:             {
10922:                @ConstExpr
                     % TO DO: currently ConstExpr leaves int result on oValue stack, and doesn't indicate type
10924:                int val = oValueTop
10929:                oValuePop
10930:                [
10930:                   | '..' :  @ConstExpr
10934:                             int highval = oValueTop
10939:                             oValuePop
10940:                             .tCaseRange  oEmitInt( val )  oEmitInt( highval )  oEmitLabel( caseLabel )
10960:                   | * :     .tCase  oEmitInt( val )  oEmitLabel( caseLabel )
10979:                ]
10979:                [
10979:                   | ',' :
10981:                   | * :  >
10988:                ]
10988:             }
10990:             oCodePop
10991:             ':'
10993:             .tLabel  oEmitLabel( caseLabel )
11001:             @Statement
11003:             .tJump  oEmitLabel( doneLabel )
                  % Swallow optional trailing ';'
11011:             [
11011:                | ';' :
11013:                | * :
11018:             ]
                  
11018:       ]
         
11018:    }
      
11020:    .tLabel  oEmitLabel( tableLabel )
11028:    oEmitCode( tableCode )
11034:    .tCaseEnd  oEmitLabel( otherwiseLabel )
11042:    .tLabel  oEmitLabel( doneLabel )
11051:    ;
      
      
11051: GotoStmt:
11053:    [
11053:       | pIdent :
11055:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
11057:          oChangeIntLitToLabelIdent
11058:    ]
      
         % Some pascals have rules about where you can jump (to a sibling statement or
         % higher level statement in the block, but not into a lower lower level statement.)
         % fpc just says "jumping into a nested statement can have strange effects."
         % I'm going to follow that and not prohibit any goto, as long as it's in the same block.
      
         % Label must be declared in the same block (same scope) it is used.
         % Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
11066:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
11075:    oNodeSetBoolean( decl, qUsed, true )
11087:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
11103:    ;
      
      
11103: BeginStmt:
11105:    @Statement
11107:    {[
11107:       | ';' :   @Statement
11111:       | pEnd :  >
11115:    ]};
      
      
11126: WritelnStmt:
11128:    @WriteStmt
11130:    .tWriteCR;
      
      
11133: WriteStmt:
11135:    [
11135:       | '(' :
11137:          {
11137:             @Expr
11139:             [ oTypeSNodeType
11141:                | nIntegerType :             .tWriteI
11144:                | nBooleanType :             .tWriteBool
11148:                | nByteType :                .tCastBtoI  .tWriteI
11154:                | nCharType :                .tWriteChar
11158:                | nShortStringType, nStrLitType :   .tWriteShortStr
11162:                | nFileType :                #eNotImplemented
11166:                | nEnumType :
                        % write name via table lookup
11168:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
11182:                   .tWriteEnum
11184:                | nPointerType :
11186:                   [ equal_node( oTypeSTop, PCharType )
11195:                      | true :               .tWritePChar
11198:                      | * :                  .tWriteP
11205:                   ]
11205:                | nUniversalPointerType :    .tWriteP
11209:                | * :                        #eNotAllowed
11234:             ]
11234:             oTypeSPop
11235:             [
11235:                | ')' : >
11239:                | ',' :
11241:             ]
11249:          }
11251:       | * :
11256:    ];
      
      
11257: ReadlnStmt:      % ***
         % TO DO
11260:    ;
      
11260: ReadStmt:
         % TO DO
11263:    ;
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
11263: ScopeLevel >> int:
11265:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
11275: DeclLevel( Node decl ) >> int:
11277:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
11295: DeclUpLevels( Node decl ) >> int:
11297:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
11313: MatchTypes:
11315:    node_type nt = oTypeSNodeType
11320:    oTypeSPop
11321:    [ equal_node_type( nt, oTypeSNodeType )
11330:       | false :
               % Some implicit conversion is allowed even here
11331:          [ oTypeSNodeType
11333:             | nPointerType :
11334:                [ nt
11337:                   | nUniversalPointerType :  >>
11339:                   | * :
11344:                ]
11344:             | nUniversalPointerType :
11346:                [ nt
11349:                   | nPointerType :  >>
11351:                   | * :
11356:                ]
11356:             | * :
11363:          ]
11363:          #eTypeMismatch
11365:       | * :
11370:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
11371: RequireIntPop:
11373:    [ oTypeSNodeType
11375:       | nIntegerType :
11376:       | * :          #eNotInteger
11383:    ]
11383:    oTypeSPop;
      
11385: RequireInt:
11387:    [ oTypeSNodeType
11389:       | nIntegerType :
11390:       | * :          #eNotInteger
11397:    ];
      
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Pop the type stack.
      %
11398: PromoteToIntPop:
11400:    [ oTypeSNodeType
11402:       | nIntegerType :
11403:       | nByteType :        .tCastBtoI
11407:       | * :                #eNotInteger
11416:    ]
11416:    oTypeSPop;
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Leave integer on the type stack.
      %
11418: PromoteToInt:
11420:    [ oTypeSNodeType
11422:       | nIntegerType :
11423:       | nByteType :        .tCastBtoI
11427:                            oTypeSPop
11428:                            oTypeSPush( IntegerType )
11434:       | * :                #eNotInteger
11443:    ];
      
      
      % If the top value is implicitly convertable to integer, do so.
      % Otherwise leave it as-is.
      %
11444: PromoteToIntOptional:
11446:    [ oTypeSNodeType
11448:       | nByteType :        .tCastBtoI
11451:                            oTypeSPop
11452:                            oTypeSPush( IntegerType )
11458:       | * :
11463:    ];
      
      
      
      
11464: RequireBoolPop:
11466:    [ oTypeSNodeType
11468:       | nBooleanType :
11469:       | * :          #eNotBoolean
11476:    ]
11476:    oTypeSPop;
      
11478: RequireBool:
11480:    [ oTypeSNodeType
11482:       | nBooleanType :
11483:       | * :          #eNotBoolean
11490:    ];
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
11491: newType( node_type nt, int size ) >> Node:
11493:   Node node = oNodeNew( nt )
11503:   oNodeSetInt( node, qSize, size )
11515:   oTypeAdd( node )
11521:   >> node
11525:   ;
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
11525: newIdent( node_type nt, int id ) >> Node:
11527:   Node t = oNodeNew( nt )
11537:   oNodeSetInt( t, qIdent, id )
11549:   >> t
11553:   ;
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
11553: PointerTypeTo( Node theType ) >> Node:
11555:    Node ptrType = oNodeGet( theType, qPointerType )
11568:    [ oNodeNull( ptrType )
11575:       | true :
11576:          ptrType = oNodeNew( nPointerType )
11586:          oNodeSet( ptrType, qBaseType, theType )
11598:          oNodeSetInt( ptrType, qSize, 8 )
11610:          oTypeAdd( ptrType )
11616:          oNodeSet( theType, qPointerType, ptrType )
11628:       | * :
11633:    ]
11633:    >> ptrType;
      
      
      % Return the low value of an ordinal type
      %
11637: OrdinalLow( Node theType ) >> int:
11639:    [ oNodeType( theType )
11646:       | nIntegerType :  >> oMININT
11649:       | nBooleanType :  >> 0
11654:       | nCharType :     >> 0
11659:       | nEnumType :
11661:          Node enumScope = oNodeGet( theType, qScope )
11674:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
11691:          >> oNodeGetInt( first, qValue )
11701:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
11713:       | * :             #eNotOrdinalType
11728:                         >> 0
11731:    ];
      
      
      % Return the high value of an ordinal type
      %
11732: OrdinalHigh( Node theType ) >> int:
11734:    [ oNodeType( theType )
11741:       | nIntegerType :  >> oMAXINT
11744:       | nBooleanType :  >> 1
11749:       | nCharType :     >> 255
11754:       | nEnumType :
11756:          Node enumScope = oNodeGet( theType, qScope )
11769:          Node last = oNodeIterValue( oNodeGetIterLast( enumScope, qDecls ) )
11786:          >> oNodeGetInt( last, qValue )
11796:       | nSubrangeType : >> oNodeGetInt( theType, qHigh )
11808:       | * :             #eNotOrdinalType
11823:                         >> 0
11826:    ];
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
11827: EmitValue( Node decl ):
11829:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
11843: DeclareBuiltInFunc( int id ) >> Node:
11845:    Node decl = @newIdent( nBuiltInFunc, id )
11859:    oScopeDeclare( decl )
11865:    >> decl;
      
      
11869: installBuiltIns:
      
         % "mysystem" is the name of a unit that will be available everywhere.
         % Add its name to the id table so we can easily spot the name later.
11871:    mysystemId = oId_mysystem
      
         % install built-in types
11876:    FileType = @newType( nFileType, 4 )
11890:    IntegerType = @newType( nIntegerType, 4 )
11904:    BooleanType = @newType( nBooleanType, 1 )
11918:    BooleanFlowType = @newType( nBooleanFlowType, 1 )
11932:    CharType = @newType( nCharType, 1 )
11946:    PCharType = @PointerTypeTo( CharType )
11957:    ByteType = @newType( nByteType, 1 )
         % Universal pointer says base type Byte, but this is only for the sake of
         % pointer arithmetic.  It doesn't matter otherwise, because this type cannot be dereferened.
11971:    UniversalPointerType = @newType( nUniversalPointerType, 8 )
11985:    oNodeSet( UniversalPointerType, qBaseType, ByteType )
         % StrLitType is stored with both a length byte and null termination, so it can be assigned to
         % both a ShortString and a PChar.  StrLits longer than 255 characters appear truncated when
         % referenced as a ShortString, but not when referenced as a PChar.
11997:    StrLitType = @newType( nStrLitType, 256 )
         % ShortString is the original Pascal string type: an array of characters, not null-terminated,
         % with the first byte recording the current length.
         % The default ShortString type has capacity for 255 characters.  The user may define
         % additional ShortString types with smaller capacities.
         % The first character can be accessed as myString[1].
12011:    ShortStringType = @newType( nShortStringType, 256 )
12025:    oNodeSetInt( ShortStringType, qCapacity, 255 )
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oId_File
      
12037:    Node t
      
12037:    t = @newIdent( nTypeDecl, oId_File )
12050:    oNodeSet( t, qType, FileType )
12062:    oScopeDeclare( t )
      
12068:    t = @newIdent( nTypeDecl, oId_Integer )
12081:    oNodeSet( t, qType, IntegerType )
12093:    oScopeDeclare( t )
      
12099:    t = @newIdent( nTypeDecl, oId_Boolean )
12112:    oNodeSet( t, qType, BooleanType )
12124:    oScopeDeclare( t )
      
12130:    t = @newIdent( nTypeDecl, oId_Char )
12143:    oNodeSet( t, qType, CharType )
12155:    oScopeDeclare( t )
      
12161:    t = @newIdent( nTypeDecl, oId_Byte )
12174:    oNodeSet( t, qType, ByteType )
12186:    oScopeDeclare( t )
      
12192:    t = @newIdent( nTypeDecl, oId_Pointer )
12205:    oNodeSet( t, qType, UniversalPointerType )
12217:    oScopeDeclare( t )
      
12223:    t = @newIdent( nTypeDecl, oId_ShortString )
12236:    oNodeSet( t, qType, ShortStringType )
12248:    oScopeDeclare( t )
      
         % Built-in constants
      
12254:    t = @newIdent( nConst, oId_True )
12267:    oNodeSet( t, qType, BooleanType )
12279:    oNodeSetInt( t, qValue, 1 )
12291:    oScopeDeclare( t )
      
12297:    t = @newIdent( nConst, oId_False )
12310:    oNodeSet( t, qType, BooleanType )
12322:    oNodeSetInt( t, qValue, 0 )
12334:    oScopeDeclare( t )
      
12340:    t = @newIdent( nConst, oId_Nil )
12353:    oNodeSet( t, qType, UniversalPointerType )
12365:    oNodeSetInt( t, qValue, 0 )
12377:    oScopeDeclare( t )
      
         % Built-in methods
         % These aren't declared like normal methods, because they may have
         % special rules for parameter types (e.g. any scalar type).
         % Calls to these methods will be handled specially by the compiler.
      
12383:    BuiltIn_Ord = @DeclareBuiltInFunc( oId_Ord )
12393:    BuiltIn_Chr = @DeclareBuiltInFunc( oId_Chr )
12403:    BuiltIn_Pred = @DeclareBuiltInFunc( oId_Pred )
12413:    BuiltIn_Succ = @DeclareBuiltInFunc( oId_Succ )
12424:    ;
      
12424: end
      
12424: 

Generated code:

   0: oGlobalSpace 22
   2: oLocalSpace 5
   4: oGetAddrGlobal 1
   6: oPushResult
   7: oWorkspaceNew
   8: oAssign
   9: oSetResult 0
  11: oPushResult
  12: oSetResult 0
  14: oPushResult
  15: oScopeBegin
  16: oPop 2
  18: oGetAddrLocal 2
  20: oPushResult
  21: oScopeCurrent
  22: oAssign
  23: oCall 11869
  25: oEmit 67
  27: oSetResult 0
  29: oPushResult
  30: oEmitInt
  31: oPop 1
  33: oGetAddrLocal 3
  35: oPushResult
  36: oLabelNew
  37: oAssign
  38: oEmit 61
  40: oSetResult 0
  42: oPushResult
  43: oEmitInt
  44: oPop 1
  46: oEmit 64
  48: oGetLocal 3
  50: oPushResult
  51: oEmitLabel
  52: oPop 1
  54: oEmit 63
  56: oSetResult 0
  58: oPushResult
  59: oEmitInt
  60: oPop 1
  62: oEmit 66
  64: oInput 28
  66: oInput 0
  68: oGetAddrLocal 4
  70: oPushResult
  71: oSetResult 4
  73: oPushResult
  74: oNodeNew
  75: oPop 1
  77: oAssign
  78: oGetLocal 4
  80: oPushResult
  81: oSetResult 4
  83: oPushResult
  84: LAST_ID
  85: oPushResult
  86: oNodeSetInt
  87: oPop 3
  89: oGetGlobal 1
  91: oPushResult
  92: oSetResult 2
  94: oPushResult
  95: oGetLocal 4
  97: oPushResult
  98: oNodeSet
  99: oPop 3
 101: oInputChoice 175
 103: oInput 0
 105: oGetAddrLocal 1
 107: oPushResult
 108: oSetResult 19
 110: oPushResult
 111: LAST_ID
 112: oPushResult
 113: oCall 11525
 115: oPop 2
 117: oAssign
 118: oGetLocal 1
 120: oPushResult
 121: oSetResult 21
 123: oPushResult
 124: oGetGlobal 5
 126: oPushResult
 127: oNodeSet
 128: oPop 3
 130: oGetLocal 1
 132: oPushResult
 133: oScopeDeclareAlloc
 134: oPop 1
 136: oInput 13
 138: oInput 0
 140: oGetAddrLocal 1
 142: oPushResult
 143: oSetResult 19
 145: oPushResult
 146: LAST_ID
 147: oPushResult
 148: oCall 11525
 150: oPop 2
 152: oAssign
 153: oGetLocal 1
 155: oPushResult
 156: oSetResult 21
 158: oPushResult
 159: oGetGlobal 5
 161: oPushResult
 162: oNodeSet
 163: oPop 3
 165: oGetLocal 1
 167: oPushResult
 168: oScopeDeclareAlloc
 169: oPop 1
 171: oInput 15
 173: oJumpForward 178
 175: Choice Lookup Table
          14    103
 178: oInput 5
 180: oGetLocal 4
 182: oPushResult
 183: oCall 333
 185: oPop 1
 187: oInputChoice 198
 189: oGetLocal 4
 191: oPushResult
 192: oCall 306
 194: oPop 1
 196: oJumpForward 201
 198: Choice Lookup Table
          59    189
 201: oGetLocal 4
 203: oPushResult
 204: oCall 586
 206: oPop 1
 208: oSetResult 0
 210: oPushResult
 211: oSetResult 0
 213: oPushResult
 214: oScopeBegin
 215: oPop 2
 217: oGetAddrGlobal 2
 219: oPushResult
 220: oScopeCurrent
 221: oAssign
 222: oSetResult 0
 224: oPushResult
 225: oSetResult 1
 227: oPushResult
 228: oScopeBegin
 229: oPop 2
 231: oScopeCurrent
 232: oPushResult
 233: oSetResult 16
 235: oPushResult
 236: oGetGlobal 2
 238: oPushResult
 239: oNodeSet
 240: oPop 3
 242: oGetAddrGlobal 3
 244: oPushResult
 245: oScopeCurrent
 246: oAssign
 247: oGetLocal 4
 249: oPushResult
 250: oSetResult 7
 252: oPushResult
 253: oGetGlobal 3
 255: oPushResult
 256: oNodeSet
 257: oPop 3
 259: oScopeEnd
 260: oSetResult 20
 262: oPushResult
 263: oCall 1543
 265: oPop 1
 267: oGetGlobal 3
 269: oPushResult
 270: oScopeEnter
 271: oPop 1
 273: oGetAddrLocal 5
 275: oPushResult
 276: oSetResult 1
 278: oAssign
 279: oGetLocal 3
 281: oPushResult
 282: oGetGlobal 2
 284: oPushResult
 285: oGetLocal 5
 287: oPushResult
 288: oCall 1864
 290: oPop 3
 292: oScopeEnd
 293: oInput 20
 295: oCall 1599
 297: oScopeEnd
 298: oGetLocal 4
 300: oPushResult
 301: oCall 648
 303: oPop 1
 305: oReturn
 306: oLocalSpace 0
 308: oInput 0
 310: LAST_ID
 311: oPushResult
 312: oGetParam 1
 314: oPushResult
 315: oCall 447
 317: oPop 2
 319: oInputChoice 323
 321: oJumpForward 328
 323: Choice Lookup Table
          13    321
 326: oJumpForward 330
 328: oJumpBack 308
 330: oInput 5
 332: oReturn
 333: oLocalSpace 0
 335: oGetParam 1
 337: oPushResult
 338: oSetResult 4
 340: oPushResult
 341: oNodeGetInt
 342: oPop 2
 344: oPushResult
 345: oGetGlobal 4
 347: oPushResult
 348: equal
 349: oPop 2
 351: oChoice 356
 353: oReturn
 354: oJumpForward 359
 356: Choice Lookup Table
           1    353
 359: oGetGlobal 4
 361: oPushResult
 362: oGetParam 1
 364: oPushResult
 365: oCall 447
 367: oPop 2
 369: oReturn
 370: oLocalSpace 0
 372: oGetParam 1
 374: oPushResult
 375: oSetResult 4
 377: oPushResult
 378: oNodeGetInt
 379: oPop 2
 381: oPushResult
 382: oGetGlobal 4
 384: oPushResult
 385: equal
 386: oPop 2
 388: oChoice 443
 390: oGetAddrGlobal 19
 392: oPushResult
 393: oScopeCurrent
 394: oPushResult
 395: oSetResult 15
 397: oPushResult
 398: oSetResult 4
 400: oPushResult
 401: oId_ShortStringAppendShortString
 402: oPushResult
 403: oNodeFind
 404: oPop 4
 406: oAssign
 407: oGetAddrGlobal 20
 409: oPushResult
 410: oScopeCurrent
 411: oPushResult
 412: oSetResult 15
 414: oPushResult
 415: oSetResult 4
 417: oPushResult
 418: oId_ShortStringAppendChar
 419: oPushResult
 420: oNodeFind
 421: oPop 4
 423: oAssign
 424: oGetAddrGlobal 21
 426: oPushResult
 427: oScopeCurrent
 428: oPushResult
 429: oSetResult 15
 431: oPushResult
 432: oSetResult 4
 434: oPushResult
 435: oId_ShortStringCmp
 436: oPushResult
 437: oNodeFind
 438: oPop 4
 440: oAssign
 441: oJumpForward 446
 443: Choice Lookup Table
           1    390
 446: oReturn
 447: oLocalSpace 2
 449: oGetAddrLocal 1
 451: oPushResult
 452: oGetParam 2
 454: oPushResult
 455: oCall 727
 457: oPop 1
 459: oAssign
 460: oGetLocal 1
 462: oPushResult
 463: oSetResult 0
 465: oPushResult
 466: equal_node
 467: oPop 2
 469: oChoice 539
 471: oGetParam 1
 473: oPushResult
 474: oSetResult 5
 476: oPushResult
 477: oGetLocal 1
 479: oPushResult
 480: oNodeAddLast
 481: oPop 3
 483: oGetAddrLocal 2
 485: oPushResult
 486: oSetResult 10
 488: oPushResult
 489: oNodeNew
 490: oPop 1
 492: oAssign
 493: oGetLocal 2
 495: oPushResult
 496: oSetResult 4
 498: oPushResult
 499: oGetLocal 1
 501: oPushResult
 502: oSetResult 4
 504: oPushResult
 505: oNodeGetInt
 506: oPop 2
 508: oPushResult
 509: oNodeSetInt
 510: oPop 3
 512: oGetLocal 2
 514: oPushResult
 515: oSetResult 9
 517: oPushResult
 518: oGetLocal 1
 520: oPushResult
 521: oSetResult 9
 523: oPushResult
 524: oNodeGet
 525: oPop 2
 527: oPushResult
 528: oNodeSet
 529: oPop 3
 531: oGetLocal 2
 533: oPushResult
 534: oScopeDeclare
 535: oPop 1
 537: oJumpForward 542
 539: Choice Lookup Table
           0    471
 542: oReturn
 543: oLocalSpace 1
 545: oGetFromParam 1
 547: oPushResult
 548: oNodeType
 549: oPop 1
 551: oChoice 582
 553: oGetAddrLocal 1
 555: oPushResult
 556: oGetFromParam 1
 558: oPushResult
 559: oSetResult 9
 561: oPushResult
 562: oNodeGet
 563: oPop 2
 565: oAssign
 566: oInput 20
 568: oInput 0
 570: oGetParam 1
 572: oPushResult
 573: oGetLocal 1
 575: oPushResult
 576: oScopeFindRequireInScope
 577: oPop 1
 579: oAssign
 580: oJumpForward 585
 582: Choice Lookup Table
          10    553
 585: oReturn
 586: oLocalSpace 2
 588: oGetAddrLocal 1
 590: oPushResult
 591: oGetParam 1
 593: oPushResult
 594: oSetResult 5
 596: oPushResult
 597: oNodeGetIter
 598: oPop 2
 600: oAssign
 601: oGetAddrLocal 2
 603: oPushResult
 604: oGetLocal 1
 606: oPushResult
 607: oNodeIterValue
 608: oPop 1
 610: oAssign
 611: oGetLocal 2
 613: oPushResult
 614: oNodeNull
 615: oPop 1
 617: oChoice 634
 619: oGetLocal 2
 621: oPushResult
 622: oSetResult 9
 624: oPushResult
 625: oNodeGet
 626: oPop 2
 628: oPushResult
 629: oScopeEnter
 630: oPop 1
 632: oJumpForward 639
 634: Choice Lookup Table
           0    619
 637: oJumpForward 647
 639: oGetAddrLocal 1
 641: oPushResult
 642: oNodeIterNext
 643: oPop 1
 645: oJumpBack 601
 647: oReturn
 648: oLocalSpace 2
 650: oGetAddrLocal 1
 652: oPushResult
 653: oGetParam 1
 655: oPushResult
 656: oSetResult 5
 658: oPushResult
 659: oNodeGetIterLast
 660: oPop 2
 662: oAssign
 663: oGetAddrLocal 2
 665: oPushResult
 666: oGetLocal 1
 668: oPushResult
 669: oNodeIterValue
 670: oPop 1
 672: oAssign
 673: oGetLocal 2
 675: oPushResult
 676: oNodeNull
 677: oPop 1
 679: oChoice 713
 681: oScopeCurrent
 682: oPushResult
 683: oGetLocal 2
 685: oPushResult
 686: oSetResult 9
 688: oPushResult
 689: oNodeGet
 690: oPop 2
 692: oPushResult
 693: oNodeEqual
 694: oPop 2
 696: oChoice 704
 698: oJumpForward 710
 700: oError 25
 702: oJumpForward 710
 704: Choice Lookup Table
           0    700
           1    698
 709: oEndChoice
 710: oScopeEnd
 711: oJumpForward 718
 713: Choice Lookup Table
           0    681
 716: oJumpForward 726
 718: oGetAddrLocal 1
 720: oPushResult
 721: oNodeIterPrev
 722: oPop 1
 724: oJumpBack 663
 726: oReturn
 727: oLocalSpace 2
 729: oGetAddrLocal 1
 731: oPushResult
 732: oGetGlobal 1
 734: oPushResult
 735: oSetResult 1
 737: oPushResult
 738: oSetResult 4
 740: oPushResult
 741: oGetParam 1
 743: oPushResult
 744: oNodeFind
 745: oPop 4
 747: oAssign
 748: oGetLocal 1
 750: oPushResult
 751: oSetResult 0
 753: oPushResult
 754: equal_node
 755: oPop 2
 757: oChoice 764
 759: oGetLocal 1
 761: oReturn
 762: oJumpForward 767
 764: Choice Lookup Table
           0    759
 767: oGetAddrLocal 2
 769: oPushResult
 770: oGetParam 1
 772: oPushResult
 773: oIncludeUnitFile
 774: oPop 1
 776: oAssign
 777: oGetLocal 2
 779: oChoice 788
 781: oError 24
 783: oSetResult 0
 785: oReturn
 786: oJumpForward 791
 788: Choice Lookup Table
           0    781
 791: oGetAddrLocal 1
 793: oPushResult
 794: oCall 802
 796: oAssign
 797: oIncludeEnd
 798: oGetLocal 1
 800: oReturn
 801: oReturn
 802: oLocalSpace 2
 804: oInput 60
 806: oInput 0
 808: oGetAddrLocal 1
 810: oPushResult
 811: oSetResult 5
 813: oPushResult
 814: oNodeNew
 815: oPop 1
 817: oAssign
 818: oGetLocal 1
 820: oPushResult
 821: oSetResult 4
 823: oPushResult
 824: LAST_ID
 825: oPushResult
 826: oNodeSetInt
 827: oPop 3
 829: oGetAddrLocal 2
 831: oPushResult
 832: oSetResult 6
 834: oPushResult
 835: oNodeNew
 836: oPop 1
 838: oAssign
 839: oGetLocal 2
 841: oPushResult
 842: oSetResult 4
 844: oPushResult
 845: LAST_ID
 846: oPushResult
 847: oNodeSetInt
 848: oPop 3
 850: oGetLocal 1
 852: oPushResult
 853: oSetResult 8
 855: oPushResult
 856: oGetLocal 2
 858: oPushResult
 859: oNodeSet
 860: oPop 3
 862: oInput 5
 864: oInput 61
 866: oGetLocal 1
 868: oPushResult
 869: oCall 333
 871: oPop 1
 873: oInputChoice 884
 875: oGetLocal 1
 877: oPushResult
 878: oCall 306
 880: oPop 1
 882: oJumpForward 887
 884: Choice Lookup Table
          59    875
 887: oGetLocal 1
 889: oPushResult
 890: oCall 586
 892: oPop 1
 894: oSetResult 0
 896: oPushResult
 897: oSetResult 0
 899: oPushResult
 900: oScopeBegin
 901: oPop 2
 903: oGetLocal 1
 905: oPushResult
 906: oSetResult 9
 908: oPushResult
 909: oScopeCurrent
 910: oPushResult
 911: oNodeSet
 912: oPop 3
 914: oGetAddrGlobal 2
 916: oPushResult
 917: oScopeCurrent
 918: oAssign
 919: oSetResult 0
 921: oPushResult
 922: oSetResult 1
 924: oPushResult
 925: oScopeBegin
 926: oPop 2
 928: oGetAddrGlobal 3
 930: oPushResult
 931: oScopeCurrent
 932: oAssign
 933: oGetLocal 1
 935: oPushResult
 936: oSetResult 13
 938: oPushResult
 939: oGetGlobal 3
 941: oPushResult
 942: oNodeSet
 943: oPop 3
 945: oScopeEnd
 946: oGetLocal 1
 948: oPushResult
 949: oCall 1137
 951: oPop 1
 953: oScopeEnd
 954: oInput 62
 956: oGetLocal 2
 958: oPushResult
 959: oCall 333
 961: oPop 1
 963: oInputChoice 974
 965: oGetLocal 2
 967: oPushResult
 968: oCall 306
 970: oPop 1
 972: oJumpForward 977
 974: Choice Lookup Table
          59    965
 977: oGetLocal 2
 979: oPushResult
 980: oCall 586
 982: oPop 1
 984: oGetLocal 1
 986: oPushResult
 987: oSetResult 9
 989: oPushResult
 990: oNodeGet
 991: oPop 2
 993: oPushResult
 994: oScopeEnter
 995: oPop 1
 997: oSetResult 0
 999: oPushResult
1000: oSetResult 0
1002: oPushResult
1003: oScopeBegin
1004: oPop 2
1006: oGetLocal 1
1008: oPushResult
1009: oSetResult 10
1011: oPushResult
1012: oScopeCurrent
1013: oPushResult
1014: oNodeSet
1015: oPop 3
1017: oScopeCurrent
1018: oPushResult
1019: oSetResult 16
1021: oPushResult
1022: oGetLocal 1
1024: oPushResult
1025: oSetResult 9
1027: oPushResult
1028: oNodeGet
1029: oPop 2
1031: oPushResult
1032: oNodeSet
1033: oPop 3
1035: oGetAddrGlobal 2
1037: oPushResult
1038: oScopeCurrent
1039: oAssign
1040: oGetLocal 1
1042: oPushResult
1043: oCall 1229
1045: oPop 1
1047: oInputChoice 1061
1049: oGetLocal 1
1051: oPushResult
1052: oSetResult 1
1054: oPushResult
1055: oCall 1239
1057: oPop 2
1059: oJumpForward 1074
1061: Choice Lookup Table
          63   1049
1064: oGetLocal 1
1066: oPushResult
1067: oSetResult 0
1069: oPushResult
1070: oCall 1239
1072: oPop 2
1074: oInputChoice 1088
1076: oGetLocal 1
1078: oPushResult
1079: oSetResult 1
1081: oPushResult
1082: oCall 1425
1084: oPop 2
1086: oJumpForward 1101
1088: Choice Lookup Table
          64   1076
1091: oGetLocal 1
1093: oPushResult
1094: oSetResult 0
1096: oPushResult
1097: oCall 1425
1099: oPop 2
1101: oInput 36
1103: oInput 20
1105: oScopeEnd
1106: oScopeEnd
1107: oGetLocal 2
1109: oPushResult
1110: oCall 648
1112: oPop 1
1114: oGetLocal 1
1116: oPushResult
1117: oCall 648
1119: oPop 1
1121: oGetGlobal 1
1123: oPushResult
1124: oSetResult 1
1126: oPushResult
1127: oGetLocal 1
1129: oPushResult
1130: oNodeAddLast
1131: oPop 3
1133: oGetLocal 1
1135: oReturn
1136: oReturn
1137: oLocalSpace 2
1139: oInputChoice 1206
1141: oCall 3137
1143: oJumpForward 1219
1145: oCall 3692
1147: oJumpForward 1219
1149: oSetResult 20
1151: oPushResult
1152: oCall 3748
1154: oPop 1
1156: oJumpForward 1219
1158: oGetAddrLocal 1
1160: oPushResult
1161: oCall 2104
1163: oAssign
1164: oInputChoice 1177
1166: oGetLocal 1
1168: oPushResult
1169: oCall 2042
1171: oPop 1
1173: oInput 5
1175: oJumpForward 1180
1177: Choice Lookup Table
          70   1166
1180: oJumpForward 1219
1182: oGetAddrLocal 2
1184: oPushResult
1185: oCall 2478
1187: oAssign
1188: oInputChoice 1201
1190: oGetLocal 2
1192: oPushResult
1193: oCall 2042
1195: oPop 1
1197: oInput 5
1199: oJumpForward 1204
1201: Choice Lookup Table
          70   1190
1204: oJumpForward 1219
1206: Choice Lookup Table
          30   1182
          29   1158
          33   1149
          32   1145
          31   1141
1217: oJumpForward 1221
1219: oJumpBack 1139
1221: oGetParam 1
1223: oPushResult
1224: oCall 370
1226: oPop 1
1228: oReturn
1229: oLocalSpace 0
1231: oSetResult 20
1233: oPushResult
1234: oCall 1543
1236: oPop 1
1238: oReturn
1239: oLocalSpace 5
1241: oGetAddrLocal 1
1243: oPushResult
1244: oLabelNew
1245: oAssign
1246: oEmit 77
1248: oGetLocal 1
1250: oPushResult
1251: oEmitLabel
1252: oPop 1
1254: oGetParam 2
1256: oPushResult
1257: oSetResult 11
1259: oPushResult
1260: oGetLocal 1
1262: oPushResult
1263: oNodeSetLabel
1264: oPop 3
1266: oEmit 67
1268: oGetAddrLocal 2
1270: oPushResult
1271: Here
1272: oAssign
1273: oEmit 90
1275: oGetAddrLocal 3
1277: oPushResult
1278: oGetParam 2
1280: oPushResult
1281: oSetResult 9
1283: oPushResult
1284: oNodeGet
1285: oPop 2
1287: oAssign
1288: oGetAddrLocal 4
1290: oPushResult
1291: oGetLocal 3
1293: oPushResult
1294: oSetResult 19
1296: oPushResult
1297: oNodeGetCode
1298: oPop 2
1300: oAssign
1301: oGetLocal 4
1303: oPushResult
1304: oEmitCode
1305: oPop 1
1307: oGetLocal 3
1309: oPushResult
1310: oSetResult 19
1312: oPushResult
1313: oSetResult 0
1315: oPushResult
1316: oNodeSetCode
1317: oPop 3
1319: oGetAddrLocal 3
1321: oPushResult
1322: oGetParam 2
1324: oPushResult
1325: oSetResult 10
1327: oPushResult
1328: oNodeGet
1329: oPop 2
1331: oAssign
1332: oGetAddrLocal 4
1334: oPushResult
1335: oGetLocal 3
1337: oPushResult
1338: oSetResult 19
1340: oPushResult
1341: oNodeGetCode
1342: oPop 2
1344: oAssign
1345: oGetLocal 4
1347: oPushResult
1348: oEmitCode
1349: oPop 1
1351: oGetLocal 3
1353: oPushResult
1354: oSetResult 19
1356: oPushResult
1357: oSetResult 0
1359: oPushResult
1360: oNodeSetCode
1361: oPop 3
1363: oGetParam 2
1365: oPushResult
1366: oSetResult 13
1368: oPushResult
1369: oNodeGet
1370: oPop 2
1372: oPushResult
1373: oScopeEnter
1374: oPop 1
1376: oGetParam 1
1378: oChoice 1397
1380: oCall 9663
1382: oInputChoice 1388
1384: oCall 9663
1386: oJumpForward 1393
1388: Choice Lookup Table
           5   1384
1391: oJumpForward 1395
1393: oJumpBack 1382
1395: oJumpForward 1400
1397: Choice Lookup Table
           1   1380
1400: oEmit 66
1402: oGetAddrLocal 5
1404: oPushResult
1405: oScopeCurrent
1406: oPushResult
1407: oSetResult 17
1409: oPushResult
1410: oNodeGetInt
1411: oPop 2
1413: oAssign
1414: oGetLocal 2
1416: oPushResult
1417: oGetLocal 5
1419: oPushResult
1420: oPatch
1421: oPop 2
1423: oScopeEnd
1424: oReturn
1425: oLocalSpace 3
1427: oGetAddrLocal 1
1429: oPushResult
1430: oLabelNew
1431: oAssign
1432: oEmit 77
1434: oGetLocal 1
1436: oPushResult
1437: oEmitLabel
1438: oPop 1
1440: oGetParam 2
1442: oPushResult
1443: oSetResult 12
1445: oPushResult
1446: oGetLocal 1
1448: oPushResult
1449: oNodeSetLabel
1450: oPop 3
1452: oEmit 67
1454: oGetAddrLocal 2
1456: oPushResult
1457: Here
1458: oAssign
1459: oEmit 90
1461: oSetResult 0
1463: oPushResult
1464: oSetResult 1
1466: oPushResult
1467: oScopeBegin
1468: oPop 2
1470: oGetParam 1
1472: oChoice 1491
1474: oCall 9663
1476: oInputChoice 1482
1478: oCall 9663
1480: oJumpForward 1487
1482: Choice Lookup Table
           5   1478
1485: oJumpForward 1489
1487: oJumpBack 1476
1489: oJumpForward 1494
1491: Choice Lookup Table
           1   1474
1494: oEmit 66
1496: oGetAddrLocal 3
1498: oPushResult
1499: oScopeCurrent
1500: oPushResult
1501: oSetResult 17
1503: oPushResult
1504: oNodeGetInt
1505: oPop 2
1507: oAssign
1508: oGetLocal 2
1510: oPushResult
1511: oGetLocal 3
1513: oPushResult
1514: oPatch
1515: oPop 2
1517: oScopeEnd
1518: oReturn
1519: oLocalSpace 0
1521: oGetParam 2
1523: oPushResult
1524: oCall 1543
1526: oPop 1
1528: oGetParam 1
1530: oPushResult
1531: oScopeCurrent
1532: oPushResult
1533: oSetResult 0
1535: oPushResult
1536: oCall 1864
1538: oPop 3
1540: oCall 1599
1542: oReturn
1543: oLocalSpace 0
1545: oInputChoice 1576
1547: oCall 3137
1549: oJumpForward 1591
1551: oCall 3692
1553: oJumpForward 1591
1555: oGetParam 1
1557: oPushResult
1558: oCall 3748
1560: oPop 1
1562: oJumpForward 1591
1564: oCall 3982
1566: oJumpForward 1591
1568: oCall 2360
1570: oJumpForward 1591
1572: oCall 2795
1574: oJumpForward 1591
1576: Choice Lookup Table
          30   1572
          29   1568
          34   1564
          33   1555
          32   1551
          31   1547
1589: oJumpForward 1593
1591: oJumpBack 1545
1593: oCall 1596
1595: oReturn
1596: oLocalSpace 0
1598: oReturn
1599: oLocalSpace 2
1601: oGetAddrLocal 1
1603: oPushResult
1604: oScopeCurrent
1605: oPushResult
1606: oSetResult 15
1608: oPushResult
1609: oNodeGetIter
1610: oPop 2
1612: oAssign
1613: oGetAddrLocal 2
1615: oPushResult
1616: oGetLocal 1
1618: oPushResult
1619: oNodeIterValue
1620: oPop 1
1622: oAssign
1623: oGetLocal 2
1625: oPushResult
1626: oNodeNull
1627: oPop 1
1629: oChoice 1633
1631: oJumpForward 1638
1633: Choice Lookup Table
           0   1631
1636: oJumpForward 1693
1638: oGetLocal 2
1640: oPushResult
1641: oNodeType
1642: oPop 1
1644: oChoice 1682
1646: oGetLocal 2
1648: oPushResult
1649: oSetResult 34
1651: oPushResult
1652: oNodeGetBoolean
1653: oPop 2
1655: oChoice 1677
1657: oGetLocal 2
1659: oPushResult
1660: oSetResult 28
1662: oPushResult
1663: oNodeGetBoolean
1664: oPop 2
1666: oChoice 1672
1668: oError 27
1670: oJumpForward 1675
1672: Choice Lookup Table
           1   1668
1675: oJumpForward 1680
1677: Choice Lookup Table
           0   1657
1680: oJumpForward 1685
1682: Choice Lookup Table
          25   1646
1685: oGetAddrLocal 1
1687: oPushResult
1688: oNodeIterNext
1689: oPop 1
1691: oJumpBack 1613
1693: oReturn
1694: oLocalSpace 2
1696: oGetAddrLocal 1
1698: oPushResult
1699: oGetGlobal 1
1701: oPushResult
1702: oSetResult 1
1704: oPushResult
1705: oNodeGetIter
1706: oPop 2
1708: oAssign
1709: oGetAddrLocal 2
1711: oPushResult
1712: oGetLocal 1
1714: oPushResult
1715: oNodeIterValue
1716: oPop 1
1718: oAssign
1719: oGetLocal 2
1721: oPushResult
1722: oNodeNull
1723: oPop 1
1725: oChoice 1770
1727: oJumpForward 1778
1729: oJumpForward 1776
1731: oEmit 61
1733: oSetResult 0
1735: oPushResult
1736: oEmitInt
1737: oPop 1
1739: oEmit 64
1741: oGetLocal 2
1743: oPushResult
1744: oSetResult 11
1746: oPushResult
1747: oNodeGetLabel
1748: oPop 2
1750: oPushResult
1751: oEmitLabel
1752: oPop 1
1754: oEmit 63
1756: oSetResult 0
1758: oPushResult
1759: oEmitInt
1760: oPop 1
1762: oGetAddrLocal 1
1764: oPushResult
1765: oNodeIterNext
1766: oPop 1
1768: oJumpForward 1776
1770: Choice Lookup Table
           0   1731
           1   1727
1775: oEndChoice
1776: oJumpBack 1709
1778: oReturn
1779: oLocalSpace 2
1781: oGetAddrLocal 1
1783: oPushResult
1784: oGetGlobal 1
1786: oPushResult
1787: oSetResult 1
1789: oPushResult
1790: oNodeGetIterLast
1791: oPop 2
1793: oAssign
1794: oGetAddrLocal 2
1796: oPushResult
1797: oGetLocal 1
1799: oPushResult
1800: oNodeIterValue
1801: oPop 1
1803: oAssign
1804: oGetLocal 2
1806: oPushResult
1807: oNodeNull
1808: oPop 1
1810: oChoice 1855
1812: oJumpForward 1863
1814: oJumpForward 1861
1816: oEmit 61
1818: oSetResult 0
1820: oPushResult
1821: oEmitInt
1822: oPop 1
1824: oEmit 64
1826: oGetLocal 2
1828: oPushResult
1829: oSetResult 12
1831: oPushResult
1832: oNodeGetLabel
1833: oPop 2
1835: oPushResult
1836: oEmitLabel
1837: oPop 1
1839: oEmit 63
1841: oSetResult 0
1843: oPushResult
1844: oEmitInt
1845: oPop 1
1847: oGetAddrLocal 1
1849: oPushResult
1850: oNodeIterPrev
1851: oPop 1
1853: oJumpForward 1861
1855: Choice Lookup Table
           0   1816
           1   1812
1860: oEndChoice
1861: oJumpBack 1794
1863: oReturn
1864: oLocalSpace 3
1866: oEmit 77
1868: oGetParam 3
1870: oPushResult
1871: oEmitLabel
1872: oPop 1
1874: oEmit 67
1876: oGetAddrLocal 1
1878: oPushResult
1879: Here
1880: oAssign
1881: oEmit 90
1883: oGetParam 1
1885: oChoice 1891
1887: oCall 1694
1889: oJumpForward 1894
1891: Choice Lookup Table
           1   1887
1894: oGetAddrLocal 2
1896: oPushResult
1897: oGetParam 2
1899: oPushResult
1900: oSetResult 19
1902: oPushResult
1903: oNodeGetCode
1904: oPop 2
1906: oAssign
1907: oGetLocal 2
1909: oPushResult
1910: oEmitCode
1911: oPop 1
1913: oGetParam 2
1915: oPushResult
1916: oSetResult 19
1918: oPushResult
1919: oSetResult 0
1921: oPushResult
1922: oNodeSetCode
1923: oPop 3
1925: oCall 9663
1927: oGetParam 1
1929: oChoice 1935
1931: oCall 1779
1933: oJumpForward 1938
1935: Choice Lookup Table
           1   1931
1938: oEmit 66
1940: oGetAddrLocal 3
1942: oPushResult
1943: oScopeCurrent
1944: oPushResult
1945: oSetResult 17
1947: oPushResult
1948: oNodeGetInt
1949: oPop 2
1951: oAssign
1952: oGetLocal 1
1954: oPushResult
1955: oGetLocal 3
1957: oPushResult
1958: oPatch
1959: oPop 2
1961: oReturn
1962: oLocalSpace 0
1964: oInputChoice 1982
1966: oGetParam 1
1968: oPushResult
1969: oSetResult 27
1971: oPushResult
1972: oSetResult 1
1974: oPushResult
1975: oNodeSetBoolean
1976: oPop 3
1978: oInput 5
1980: oJumpForward 1987
1982: Choice Lookup Table
          72   1966
1985: oJumpForward 1989
1987: oJumpBack 1964
1989: oReturn
1990: oLocalSpace 1
1992: oGetAddrLocal 1
1994: oPushResult
1995: oGetParam 1
1997: oPushResult
1998: oSetResult 19
2000: oPushResult
2001: oNodeGetCode
2002: oPop 2
2004: oAssign
2005: oGetLocal 1
2007: oPushResult
2008: oSetResult 0
2010: oPushResult
2011: equal_code
2012: oPop 2
2014: oChoice 2035
2016: oGetAddrLocal 1
2018: oPushResult
2019: oCodeNew
2020: oAssign
2021: oGetParam 1
2023: oPushResult
2024: oSetResult 19
2026: oPushResult
2027: oGetLocal 1
2029: oPushResult
2030: oNodeSetCode
2031: oPop 3
2033: oJumpForward 2038
2035: Choice Lookup Table
           1   2016
2038: oGetLocal 1
2040: oReturn
2041: oReturn
2042: oLocalSpace 0
2044: oGetParam 1
2046: oPushResult
2047: oCall 11275
2049: oPop 1
2051: oPushResult
2052: equal_zero
2053: oPop 1
2055: oChoice 2061
2057: oError 23
2059: oJumpForward 2064
2061: Choice Lookup Table
           0   2057
2064: oGetParam 1
2066: oPushResult
2067: oSetResult 25
2069: oPushResult
2070: oSetResult 1
2072: oPushResult
2073: oNodeSetBoolean
2074: oPop 3
2076: oInputChoice 2100
2078: oInputChoice 2095
2080: oInput 2
2082: oGetParam 1
2084: oPushResult
2085: oSetResult 26
2087: oPushResult
2088: CURRENT_STRLIT
2089: oPushResult
2090: oNodeSetString
2091: oPop 3
2093: oJumpForward 2098
2095: Choice Lookup Table
          71   2080
2098: oJumpForward 2103
2100: Choice Lookup Table
           2   2078
2103: oReturn
2104: oLocalSpace 6
2106: oInput 0
2108: oGetAddrLocal 1
2110: oPushResult
2111: oSetResult 0
2113: oAssign
2114: oGetAddrLocal 2
2116: oPushResult
2117: oScopeFindInCurrentScope
2118: oAssign
2119: oGetLocal 2
2121: oPushResult
2122: oNodeNull
2123: oPop 1
2125: oChoice 2243
2127: oGetAddrLocal 2
2129: oPushResult
2130: oSetResult 12
2132: oPushResult
2133: LAST_ID
2134: oPushResult
2135: oCall 11525
2137: oPop 2
2139: oAssign
2140: oGetLocal 2
2142: oPushResult
2143: oSetResult 22
2145: oPushResult
2146: oLabelNew
2147: oPushResult
2148: oNodeSetLabel
2149: oPop 3
2151: oJumpForward 2249
2153: oGetAddrLocal 1
2155: oPushResult
2156: oSetResult 1
2158: oAssign
2159: oGetLocal 2
2161: oPushResult
2162: oSetResult 24
2164: oPushResult
2165: oNodeGetBoolean
2166: oPop 2
2168: oChoice 2174
2170: oError 21
2172: oJumpForward 2177
2174: Choice Lookup Table
           1   2170
2177: oGetLocal 2
2179: oPushResult
2180: oSetResult 25
2182: oPushResult
2183: oNodeGetBoolean
2184: oPop 2
2186: oChoice 2192
2188: oError 21
2190: oJumpForward 2195
2192: Choice Lookup Table
           1   2188
2195: oGetLocal 2
2197: oPushResult
2198: oNodeType
2199: oPop 1
2201: oChoice 2205
2203: oJumpForward 2210
2205: Choice Lookup Table
          12   2203
2208: oError 21
2210: oGetLocal 2
2212: oPushResult
2213: oSetResult 29
2215: oPushResult
2216: oGetLocal 2
2218: oPushResult
2219: oSetResult 23
2221: oPushResult
2222: oNodeGet
2223: oPop 2
2225: oPushResult
2226: oNodeSet
2227: oPop 3
2229: oGetLocal 2
2231: oPushResult
2232: oSetResult 23
2234: oPushResult
2235: oSetResult 0
2237: oPushResult
2238: oNodeSet
2239: oPop 3
2241: oJumpForward 2249
2243: Choice Lookup Table
           0   2153
           1   2127
2248: oEndChoice
2249: oGetAddrLocal 3
2251: oPushResult
2252: oCall 11263
2254: oAssign
2255: oGetAddrLocal 4
2257: oPushResult
2258: oGetLocal 3
2260: oPushResult
2261: oSetResult 0
2263: oPushResult
2264: greater
2265: oPop 2
2267: oAssign
2268: oGetAddrLocal 3
2270: oPushResult
2271: inc
2272: oPop 1
2274: oGetLocal 3
2276: oPushResult
2277: oSetResult 2
2279: oPushResult
2280: oScopeBegin
2281: oPop 2
2283: oGetAddrLocal 5
2285: oPushResult
2286: oScopeCurrent
2287: oAssign
2288: oGetLocal 4
2290: oChoice 2309
2292: oGetAddrLocal 6
2294: oPushResult
2295: oGetGlobal 6
2297: oPushResult
2298: oCall 11553
2300: oPop 1
2302: oPushResult
2303: oScopeAllocType
2304: oPop 1
2306: oAssign
2307: oJumpForward 2312
2309: Choice Lookup Table
           1   2292
2312: oCall 2913
2314: oGetLocal 2
2316: oPushResult
2317: oSetResult 23
2319: oPushResult
2320: oGetLocal 5
2322: oPushResult
2323: oNodeSet
2324: oPop 3
2326: oScopeEnd
2327: oInput 5
2329: oGetLocal 1
2331: oChoice 2343
2333: oGetLocal 2
2335: oPushResult
2336: oScopeDeclare
2337: oPop 1
2339: oJumpForward 2349
2341: oJumpForward 2349
2343: Choice Lookup Table
           1   2341
           0   2333
2348: oEndChoice
2349: oGetLocal 2
2351: oPushResult
2352: oCall 1962
2354: oPop 1
2356: oGetLocal 2
2358: oReturn
2359: oReturn
2360: oLocalSpace 4
2362: oGetAddrLocal 1
2364: oPushResult
2365: oCall 2104
2367: oAssign
2368: oInputChoice 2381
2370: oJumpForward 2475
2372: oGetLocal 1
2374: oPushResult
2375: oCall 2042
2377: oPop 1
2379: oJumpForward 2475
2381: Choice Lookup Table
          70   2372
          69   2370
2386: oGetAddrLocal 2
2388: oPushResult
2389: oGetLocal 1
2391: oPushResult
2392: oSetResult 23
2394: oPushResult
2395: oNodeGet
2396: oPop 2
2398: oAssign
2399: oGetLocal 2
2401: oPushResult
2402: oScopeEnter
2403: oPop 1
2405: oGetAddrLocal 3
2407: oPushResult
2408: oGetLocal 2
2410: oPushResult
2411: oSetResult 14
2413: oPushResult
2414: oNodeGetInt
2415: oPop 2
2417: oAssign
2418: oGetLocal 3
2420: oPushResult
2421: oSetResult 1
2423: oPushResult
2424: oScopeBegin
2425: oPop 2
2427: oGetLocal 1
2429: oPushResult
2430: oSetResult 6
2432: oPushResult
2433: oScopeCurrent
2434: oPushResult
2435: oNodeSet
2436: oPop 3
2438: oGetAddrLocal 4
2440: oPushResult
2441: oGetLocal 1
2443: oPushResult
2444: oSetResult 22
2446: oPushResult
2447: oNodeGetLabel
2448: oPop 2
2450: oAssign
2451: oSetResult 21
2453: oPushResult
2454: oGetLocal 4
2456: oPushResult
2457: oCall 1519
2459: oPop 2
2461: oGetLocal 1
2463: oPushResult
2464: oSetResult 24
2466: oPushResult
2467: oSetResult 1
2469: oPushResult
2470: oNodeSetBoolean
2471: oPop 3
2473: oScopeEnd
2474: oScopeEnd
2475: oInput 5
2477: oReturn
2478: oLocalSpace 8
2480: oInput 0
2482: oGetAddrLocal 1
2484: oPushResult
2485: oSetResult 0
2487: oAssign
2488: oGetAddrLocal 2
2490: oPushResult
2491: oScopeFindInCurrentScope
2492: oAssign
2493: oGetLocal 2
2495: oPushResult
2496: oNodeNull
2497: oPop 1
2499: oChoice 2630
2501: oGetAddrLocal 2
2503: oPushResult
2504: oSetResult 13
2506: oPushResult
2507: LAST_ID
2508: oPushResult
2509: oCall 11525
2511: oPop 2
2513: oAssign
2514: oGetLocal 2
2516: oPushResult
2517: oSetResult 22
2519: oPushResult
2520: oLabelNew
2521: oPushResult
2522: oNodeSetLabel
2523: oPop 3
2525: oJumpForward 2636
2527: oGetAddrLocal 1
2529: oPushResult
2530: oSetResult 1
2532: oAssign
2533: oGetLocal 2
2535: oPushResult
2536: oSetResult 24
2538: oPushResult
2539: oNodeGetBoolean
2540: oPop 2
2542: oChoice 2548
2544: oError 21
2546: oJumpForward 2551
2548: Choice Lookup Table
           1   2544
2551: oGetLocal 2
2553: oPushResult
2554: oNodeType
2555: oPop 1
2557: oChoice 2561
2559: oJumpForward 2566
2561: Choice Lookup Table
          13   2559
2564: oError 21
2566: oGetLocal 2
2568: oPushResult
2569: oSetResult 29
2571: oPushResult
2572: oGetLocal 2
2574: oPushResult
2575: oSetResult 23
2577: oPushResult
2578: oNodeGet
2579: oPop 2
2581: oPushResult
2582: oNodeSet
2583: oPop 3
2585: oGetLocal 2
2587: oPushResult
2588: oSetResult 23
2590: oPushResult
2591: oSetResult 0
2593: oPushResult
2594: oNodeSet
2595: oPop 3
2597: oGetLocal 2
2599: oPushResult
2600: oSetResult 30
2602: oPushResult
2603: oGetLocal 2
2605: oPushResult
2606: oSetResult 21
2608: oPushResult
2609: oNodeGet
2610: oPop 2
2612: oPushResult
2613: oNodeSet
2614: oPop 3
2616: oGetLocal 2
2618: oPushResult
2619: oSetResult 21
2621: oPushResult
2622: oSetResult 0
2624: oPushResult
2625: oNodeSet
2626: oPop 3
2628: oJumpForward 2636
2630: Choice Lookup Table
           0   2527
           1   2501
2635: oEndChoice
2636: oGetAddrLocal 3
2638: oPushResult
2639: oCall 11263
2641: oAssign
2642: oGetAddrLocal 4
2644: oPushResult
2645: oGetLocal 3
2647: oPushResult
2648: oSetResult 0
2650: oPushResult
2651: greater
2652: oPop 2
2654: oAssign
2655: oGetAddrLocal 3
2657: oPushResult
2658: inc
2659: oPop 1
2661: oGetLocal 3
2663: oPushResult
2664: oSetResult 2
2666: oPushResult
2667: oScopeBegin
2668: oPop 2
2670: oGetAddrLocal 5
2672: oPushResult
2673: oScopeCurrent
2674: oAssign
2675: oGetLocal 4
2677: oChoice 2696
2679: oGetAddrLocal 6
2681: oPushResult
2682: oGetGlobal 6
2684: oPushResult
2685: oCall 11553
2687: oPop 1
2689: oPushResult
2690: oScopeAllocType
2691: oPop 1
2693: oAssign
2694: oJumpForward 2699
2696: Choice Lookup Table
           1   2679
2699: oCall 2913
2701: oGetLocal 2
2703: oPushResult
2704: oSetResult 23
2706: oPushResult
2707: oGetLocal 5
2709: oPushResult
2710: oNodeSet
2711: oPop 3
2713: oInput 12
2715: oGetAddrLocal 7
2717: oPushResult
2718: oCall 4047
2720: oPop 1
2722: oGetLocal 2
2724: oPushResult
2725: oSetResult 21
2727: oPushResult
2728: oGetLocal 7
2730: oPushResult
2731: oNodeSet
2732: oPop 3
2734: oGetAddrLocal 8
2736: oPushResult
2737: oGetLocal 7
2739: oPushResult
2740: oCall 11553
2742: oPop 1
2744: oAssign
2745: oGetLocal 2
2747: oPushResult
2748: oSetResult 31
2750: oPushResult
2751: oGetLocal 8
2753: oPushResult
2754: oScopeAllocType
2755: oPop 1
2757: oPushResult
2758: oNodeSetInt
2759: oPop 3
2761: oScopeEnd
2762: oInput 5
2764: oGetLocal 1
2766: oChoice 2778
2768: oGetLocal 2
2770: oPushResult
2771: oScopeDeclare
2772: oPop 1
2774: oJumpForward 2784
2776: oJumpForward 2784
2778: Choice Lookup Table
           1   2776
           0   2768
2783: oEndChoice
2784: oGetLocal 2
2786: oPushResult
2787: oCall 1962
2789: oPop 1
2791: oGetLocal 2
2793: oReturn
2794: oReturn
2795: oLocalSpace 4
2797: oGetAddrLocal 1
2799: oPushResult
2800: oCall 2478
2802: oAssign
2803: oInputChoice 2816
2805: oJumpForward 2910
2807: oGetLocal 1
2809: oPushResult
2810: oCall 2042
2812: oPop 1
2814: oJumpForward 2910
2816: Choice Lookup Table
          70   2807
          69   2805
2821: oGetAddrLocal 2
2823: oPushResult
2824: oGetLocal 1
2826: oPushResult
2827: oSetResult 23
2829: oPushResult
2830: oNodeGet
2831: oPop 2
2833: oAssign
2834: oGetLocal 2
2836: oPushResult
2837: oScopeEnter
2838: oPop 1
2840: oGetAddrLocal 3
2842: oPushResult
2843: oGetLocal 2
2845: oPushResult
2846: oSetResult 14
2848: oPushResult
2849: oNodeGetInt
2850: oPop 2
2852: oAssign
2853: oGetLocal 3
2855: oPushResult
2856: oSetResult 1
2858: oPushResult
2859: oScopeBegin
2860: oPop 2
2862: oGetLocal 1
2864: oPushResult
2865: oSetResult 6
2867: oPushResult
2868: oScopeCurrent
2869: oPushResult
2870: oNodeSet
2871: oPop 3
2873: oGetAddrLocal 4
2875: oPushResult
2876: oGetLocal 1
2878: oPushResult
2879: oSetResult 22
2881: oPushResult
2882: oNodeGetLabel
2883: oPop 2
2885: oAssign
2886: oSetResult 21
2888: oPushResult
2889: oGetLocal 4
2891: oPushResult
2892: oCall 1519
2894: oPop 2
2896: oGetLocal 1
2898: oPushResult
2899: oSetResult 24
2901: oPushResult
2902: oSetResult 1
2904: oPushResult
2905: oNodeSetBoolean
2906: oPop 3
2908: oScopeEnd
2909: oScopeEnd
2910: oInput 5
2912: oReturn
2913: oLocalSpace 6
2915: oInputChoice 3133
2917: oGetAddrLocal 1
2919: oPushResult
2920: oNodeVecNew
2921: oAssign
2922: oGetAddrLocal 3
2924: oPushResult
2925: oSetResult 0
2927: oAssign
2928: oInputChoice 2938
2930: oGetAddrLocal 3
2932: oPushResult
2933: oSetResult 1
2935: oAssign
2936: oJumpForward 2941
2938: Choice Lookup Table
          33   2930
2941: oInput 0
2943: oGetAddrLocal 2
2945: oPushResult
2946: oSetResult 23
2948: oPushResult
2949: LAST_ID
2950: oPushResult
2951: oCall 11525
2953: oPop 2
2955: oAssign
2956: oGetLocal 2
2958: oPushResult
2959: oSetResult 33
2961: oPushResult
2962: oGetLocal 3
2964: oPushResult
2965: oNodeSetBoolean
2966: oPop 3
2968: oGetLocal 1
2970: oPushResult
2971: oGetLocal 2
2973: oPushResult
2974: oNodeVecAppend
2975: oPop 2
2977: oInputChoice 2985
2979: oJumpForward 2993
2981: oJumpForward 2991
2983: oJumpForward 2991
2985: Choice Lookup Table
          13   2983
          12   2979
2990: oEndChoice
2991: oJumpBack 2941
2993: oGetAddrLocal 4
2995: oPushResult
2996: oCall 4047
2998: oPop 1
3000: oGetLocal 3
3002: oChoice 3017
3004: oGetAddrLocal 5
3006: oPushResult
3007: oGetLocal 4
3009: oPushResult
3010: oCall 11553
3012: oPop 1
3014: oAssign
3015: oJumpForward 3026
3017: Choice Lookup Table
           1   3004
3020: oGetAddrLocal 5
3022: oPushResult
3023: oGetLocal 4
3025: oAssign
3026: oGetAddrLocal 6
3028: oPushResult
3029: oSetResult 0
3031: oAssign
3032: oGetLocal 6
3034: oPushResult
3035: oGetLocal 1
3037: oPushResult
3038: oNodeVecSize
3039: oPop 1
3041: oPushResult
3042: equal
3043: oPop 2
3045: oChoice 3102
3047: oGetAddrLocal 2
3049: oPushResult
3050: oGetLocal 1
3052: oPushResult
3053: oGetLocal 6
3055: oPushResult
3056: oNodeVecElement
3057: oPop 2
3059: oAssign
3060: oGetLocal 2
3062: oPushResult
3063: oSetResult 21
3065: oPushResult
3066: oGetLocal 4
3068: oPushResult
3069: oNodeSet
3070: oPop 3
3072: oGetLocal 2
3074: oPushResult
3075: oScopeDeclare
3076: oPop 1
3078: oGetLocal 2
3080: oPushResult
3081: oSetResult 22
3083: oPushResult
3084: oGetLocal 5
3086: oPushResult
3087: oScopeAllocType
3088: oPop 1
3090: oPushResult
3091: oNodeSetInt
3092: oPop 3
3094: oGetAddrLocal 6
3096: oPushResult
3097: inc
3098: oPop 1
3100: oJumpForward 3107
3102: Choice Lookup Table
           0   3047
3105: oJumpForward 3109
3107: oJumpBack 3032
3109: oGetLocal 1
3111: oPushResult
3112: oNodeVecDelete
3113: oPop 1
3115: oInputChoice 3123
3117: oJumpForward 3131
3119: oJumpForward 3129
3121: oJumpForward 3129
3123: Choice Lookup Table
           5   3121
          15   3117
3128: oEndChoice
3129: oJumpBack 2917
3131: oJumpForward 3136
3133: Choice Lookup Table
          14   2917
3136: oReturn
3137: oLocalSpace 0
3139: oInputChoice 3154
3141: oInputChoice 3147
3143: oCall 3220
3145: oJumpForward 3152
3147: Choice Lookup Table
          12   3143
3150: oCall 3162
3152: oJumpForward 3159
3154: Choice Lookup Table
           0   3141
3157: oJumpForward 3161
3159: oJumpBack 3139
3161: oReturn
3162: oLocalSpace 2
3164: oGetAddrLocal 1
3166: oPushResult
3167: oSetResult 16
3169: oPushResult
3170: LAST_ID
3171: oPushResult
3172: oCall 11525
3174: oPop 2
3176: oAssign
3177: oInput 6
3179: oCall 5103
3181: oGetAddrLocal 2
3183: oPushResult
3184: oValueTop
3185: oAssign
3186: oValuePop
3187: oGetLocal 1
3189: oPushResult
3190: oSetResult 22
3192: oPushResult
3193: oGetLocal 2
3195: oPushResult
3196: oNodeSetInt
3197: oPop 3
3199: oGetLocal 1
3201: oPushResult
3202: oSetResult 21
3204: oPushResult
3205: oGetGlobal 6
3207: oPushResult
3208: oNodeSet
3209: oPop 3
3211: oGetLocal 1
3213: oPushResult
3214: oScopeDeclare
3215: oPop 1
3217: oInput 5
3219: oReturn
3220: oLocalSpace 4
3222: oGetAddrLocal 1
3224: oPushResult
3225: oSetResult 24
3227: oPushResult
3228: LAST_ID
3229: oPushResult
3230: oCall 11525
3232: oPop 2
3234: oAssign
3235: oGetAddrLocal 2
3237: oPushResult
3238: oCall 4047
3240: oPop 1
3242: oGetLocal 1
3244: oPushResult
3245: oSetResult 21
3247: oPushResult
3248: oGetLocal 2
3250: oPushResult
3251: oNodeSet
3252: oPop 3
3254: oGetLocal 2
3256: oPushResult
3257: oNodeType
3258: oPop 1
3260: oChoice 3361
3262: oInput 6
3264: oCall 5103
3266: oGetAddrLocal 3
3268: oPushResult
3269: oValueTop
3270: oAssign
3271: oValuePop
3272: oGetLocal 1
3274: oPushResult
3275: oSetResult 22
3277: oPushResult
3278: oGetLocal 3
3280: oPushResult
3281: oNodeSetInt
3282: oPop 3
3284: oGetLocal 1
3286: oPushResult
3287: oScopeDeclare
3288: oPop 1
3290: oInput 5
3292: oJumpForward 3385
3294: oError 16
3296: oJumpForward 3385
3298: oGetGlobal 2
3300: oPushResult
3301: oScopeEnter
3302: oPop 1
3304: oGetAddrLocal 4
3306: oPushResult
3307: oGetLocal 2
3309: oPushResult
3310: oScopeAllocType
3311: oPop 1
3313: oAssign
3314: oScopeEnd
3315: oGetGlobal 2
3317: oPushResult
3318: oCall 1990
3320: oPop 1
3322: oPushResult
3323: oCodePush
3324: oPop 1
3326: oGetLocal 1
3328: oPushResult
3329: oSetResult 22
3331: oPushResult
3332: oGetLocal 4
3334: oPushResult
3335: oNodeSetInt
3336: oPop 3
3338: oInput 6
3340: oGetLocal 2
3342: oPushResult
3343: oGetLocal 4
3345: oPushResult
3346: oCall 3386
3348: oPop 2
3350: oCodePop
3351: oGetLocal 1
3353: oPushResult
3354: oScopeDeclare
3355: oPop 1
3357: oInput 5
3359: oJumpForward 3385
3361: Choice Lookup Table
          37   3298
          35   3298
          34   3294
          33   3294
          27   3294
          39   3294
          40   3262
          28   3262
          32   3262
          29   3262
          30   3262
3384: oEndChoice
3385: oReturn
3386: oLocalSpace 10
3388: oGetParam 2
3390: oPushResult
3391: oNodeType
3392: oPop 1
3394: oChoice 3667
3396: oGetAddrLocal 1
3398: oPushResult
3399: oGetParam 2
3401: oPushResult
3402: oSetResult 36
3404: oPushResult
3405: oNodeGet
3406: oPop 2
3408: oAssign
3409: oGetAddrLocal 2
3411: oPushResult
3412: oGetParam 2
3414: oPushResult
3415: oSetResult 37
3417: oPushResult
3418: oNodeGet
3419: oPop 2
3421: oAssign
3422: oGetAddrLocal 3
3424: oPushResult
3425: oGetLocal 2
3427: oPushResult
3428: oCall 11637
3430: oPop 1
3432: oAssign
3433: oGetAddrLocal 4
3435: oPushResult
3436: oGetLocal 2
3438: oPushResult
3439: oCall 11732
3441: oPop 1
3443: oAssign
3444: oGetAddrLocal 5
3446: oPushResult
3447: oGetLocal 1
3449: oPushResult
3450: oSetResult 17
3452: oPushResult
3453: oNodeGetInt
3454: oPop 2
3456: oAssign
3457: oInput 14
3459: oGetAddrLocal 6
3461: oPushResult
3462: oGetLocal 3
3464: oAssign
3465: oGetLocal 1
3467: oPushResult
3468: oGetParam 1
3470: oPushResult
3471: oCall 3386
3473: oPop 2
3475: oGetLocal 6
3477: oPushResult
3478: oGetLocal 4
3480: oPushResult
3481: equal
3482: oPop 2
3484: oChoice 3492
3486: oJumpForward 3521
3488: oJumpForward 3498
3490: oJumpForward 3498
3492: Choice Lookup Table
           0   3490
           1   3486
3497: oEndChoice
3498: oInput 13
3500: oGetAddrParam 1
3502: oPushResult
3503: oGetParam 1
3505: oPushResult
3506: oGetLocal 5
3508: oPushResult
3509: add
3510: oPop 2
3512: oAssign
3513: oGetAddrLocal 6
3515: oPushResult
3516: inc
3517: oPop 1
3519: oJumpBack 3465
3521: oInput 15
3523: oJumpForward 3691
3525: oInput 14
3527: oGetAddrLocal 7
3529: oPushResult
3530: oGetParam 2
3532: oPushResult
3533: oSetResult 40
3535: oPushResult
3536: oNodeGet
3537: oPop 2
3539: oAssign
3540: oInputChoice 3544
3542: oJumpForward 3549
3544: Choice Lookup Table
           0   3542
3547: oJumpForward 3615
3549: oGetAddrLocal 8
3551: oPushResult
3552: oGetLocal 7
3554: oPushResult
3555: oScopeFindRequireInScope
3556: oPop 1
3558: oAssign
3559: oInput 12
3561: oGetAddrLocal 9
3563: oPushResult
3564: oGetLocal 8
3566: oPushResult
3567: oSetResult 21
3569: oPushResult
3570: oNodeGet
3571: oPop 2
3573: oAssign
3574: oGetAddrLocal 10
3576: oPushResult
3577: oGetParam 1
3579: oPushResult
3580: oGetLocal 8
3582: oPushResult
3583: oSetResult 22
3585: oPushResult
3586: oNodeGetInt
3587: oPop 2
3589: oPushResult
3590: add
3591: oPop 2
3593: oAssign
3594: oGetLocal 9
3596: oPushResult
3597: oGetLocal 10
3599: oPushResult
3600: oCall 3386
3602: oPop 2
3604: oInputChoice 3608
3606: oJumpForward 3613
3608: Choice Lookup Table
           5   3606
3611: oJumpForward 3615
3613: oJumpBack 3540
3615: oInput 15
3617: oJumpForward 3691
3619: oEmit 16
3621: oGetParam 1
3623: oPushResult
3624: oEmitInt
3625: oPop 1
3627: oCall 5103
3629: oEmit 15
3631: oValueTop
3632: oPushResult
3633: oEmitInt
3634: oPop 1
3636: oValuePop
3637: oEmit 27
3639: oJumpForward 3691
3641: oEmit 16
3643: oGetParam 1
3645: oPushResult
3646: oEmitInt
3647: oPop 1
3649: oCall 5103
3651: oEmit 15
3653: oValueTop
3654: oPushResult
3655: oEmitInt
3656: oPop 1
3658: oValuePop
3659: oEmit 26
3661: oJumpForward 3691
3663: oError 16
3665: oJumpForward 3691
3667: Choice Lookup Table
          34   3663
          33   3663
          27   3663
          39   3663
          40   3641
          28   3641
          32   3619
          29   3619
          30   3619
          37   3525
          35   3396
3690: oEndChoice
3691: oReturn
3692: oLocalSpace 2
3694: oInputChoice 3740
3696: oGetAddrLocal 1
3698: oPushResult
3699: oSetResult 18
3701: oPushResult
3702: LAST_ID
3703: oPushResult
3704: oCall 11525
3706: oPop 2
3708: oAssign
3709: oInput 6
3711: oGetAddrLocal 2
3713: oPushResult
3714: oCall 4047
3716: oPop 1
3718: oGetLocal 1
3720: oPushResult
3721: oSetResult 21
3723: oPushResult
3724: oGetLocal 2
3726: oPushResult
3727: oNodeSet
3728: oPop 3
3730: oGetLocal 1
3732: oPushResult
3733: oScopeDeclare
3734: oPop 1
3736: oInput 5
3738: oJumpForward 3745
3740: Choice Lookup Table
           0   3696
3743: oJumpForward 3747
3745: oJumpBack 3694
3747: oReturn
3748: oLocalSpace 6
3750: oInputChoice 3974
3752: oGetAddrLocal 1
3754: oPushResult
3755: oNodeVecNew
3756: oAssign
3757: oGetAddrLocal 2
3759: oPushResult
3760: oGetParam 1
3762: oPushResult
3763: LAST_ID
3764: oPushResult
3765: oCall 11525
3767: oPop 2
3769: oAssign
3770: oGetLocal 1
3772: oPushResult
3773: oGetLocal 2
3775: oPushResult
3776: oNodeVecAppend
3777: oPop 2
3779: oInputChoice 3785
3781: oInput 0
3783: oJumpForward 3790
3785: Choice Lookup Table
          13   3781
3788: oJumpForward 3792
3790: oJumpBack 3757
3792: oInput 12
3794: oGetAddrLocal 3
3796: oPushResult
3797: oCall 4047
3799: oPop 1
3801: oGetAddrLocal 4
3803: oPushResult
3804: oSetResult 0
3806: oAssign
3807: oGetLocal 4
3809: oPushResult
3810: oGetLocal 1
3812: oPushResult
3813: oNodeVecSize
3814: oPop 1
3816: oPushResult
3817: equal
3818: oPop 2
3820: oChoice 3861
3822: oGetAddrLocal 2
3824: oPushResult
3825: oGetLocal 1
3827: oPushResult
3828: oGetLocal 4
3830: oPushResult
3831: oNodeVecElement
3832: oPop 2
3834: oAssign
3835: oGetLocal 2
3837: oPushResult
3838: oSetResult 21
3840: oPushResult
3841: oGetLocal 3
3843: oPushResult
3844: oNodeSet
3845: oPop 3
3847: oGetLocal 2
3849: oPushResult
3850: oScopeDeclareAlloc
3851: oPop 1
3853: oGetAddrLocal 4
3855: oPushResult
3856: inc
3857: oPop 1
3859: oJumpForward 3866
3861: Choice Lookup Table
           0   3822
3864: oJumpForward 3868
3866: oJumpBack 3807
3868: oInputChoice 3961
3870: oGetLocal 1
3872: oPushResult
3873: oNodeVecSize
3874: oPop 1
3876: oChoice 3880
3878: oJumpForward 3885
3880: Choice Lookup Table
           1   3878
3883: oError 22
3885: oGetAddrLocal 5
3887: oPushResult
3888: oScopeCurrent
3889: oPushResult
3890: oCall 1990
3892: oPop 1
3894: oAssign
3895: oGetLocal 5
3897: oPushResult
3898: oCodePush
3899: oPop 1
3901: oGetAddrLocal 6
3903: oPushResult
3904: oSetResult 0
3906: oAssign
3907: oCall 11263
3909: oPushResult
3910: equal_zero
3911: oPop 1
3913: oChoice 3929
3915: oGetGlobal 3
3917: oPushResult
3918: oScopeEnter
3919: oPop 1
3921: oGetAddrLocal 6
3923: oPushResult
3924: oSetResult 1
3926: oAssign
3927: oJumpForward 3932
3929: Choice Lookup Table
           1   3915
3932: oGetLocal 2
3934: oPushResult
3935: oSetResult 1
3937: oPushResult
3938: oCall 10151
3940: oPop 2
3942: oCall 5176
3944: oCall 8289
3946: oCall 9907
3948: oGetLocal 6
3950: oChoice 3955
3952: oScopeEnd
3953: oJumpForward 3958
3955: Choice Lookup Table
           1   3952
3958: oCodePop
3959: oJumpForward 3964
3961: Choice Lookup Table
           6   3870
3964: oGetLocal 1
3966: oPushResult
3967: oNodeVecDelete
3968: oPop 1
3970: oInput 5
3972: oJumpForward 3979
3974: Choice Lookup Table
           0   3752
3977: oJumpForward 3981
3979: oJumpBack 3750
3981: oReturn
3982: oLocalSpace 2
3984: oInputChoice 3991
3986: oJumpForward 3997
3988: oChangeIntLitToLabelIdent
3989: oJumpForward 3997
3991: Choice Lookup Table
           1   3988
           0   3986
3996: oEndChoice
3997: oGetAddrLocal 1
3999: oPushResult
4000: oSetResult 25
4002: oPushResult
4003: LAST_ID
4004: oPushResult
4005: oCall 11525
4007: oPop 2
4009: oAssign
4010: oGetAddrLocal 2
4012: oPushResult
4013: oLabelNew
4014: oAssign
4015: oGetLocal 1
4017: oPushResult
4018: oSetResult 22
4020: oPushResult
4021: oGetLocal 2
4023: oPushResult
4024: oNodeSetLabel
4025: oPop 3
4027: oGetLocal 1
4029: oPushResult
4030: oScopeDeclare
4031: oPop 1
4033: oInputChoice 4037
4035: oJumpForward 4042
4037: Choice Lookup Table
          13   4035
4040: oJumpForward 4044
4042: oJumpBack 3984
4044: oInput 5
4046: oReturn
4047: oLocalSpace 12
4049: oInputChoice 4522
4051: oGetAddrLocal 1
4053: oPushResult
4054: oScopeFindRequire
4055: oAssign
4056: oGetAddrLocal 1
4058: oPushResult
4059: oCall 543
4061: oPop 1
4063: oGetLocal 1
4065: oPushResult
4066: oNodeType
4067: oPop 1
4069: oChoice 4086
4071: oGetParam 1
4073: oPushResult
4074: oGetLocal 1
4076: oPushResult
4077: oSetResult 21
4079: oPushResult
4080: oNodeGet
4081: oPop 2
4083: oAssign
4084: oJumpForward 4097
4086: Choice Lookup Table
          18   4071
4089: oError 2
4091: oGetParam 1
4093: oPushResult
4094: oGetGlobal 6
4096: oAssign
4097: oJumpForward 4541
4099: oInput 16
4101: oGetAddrLocal 2
4103: oPushResult
4104: oNodeVecNew
4105: oAssign
4106: oGetAddrLocal 3
4108: oPushResult
4109: oSetResult 36
4111: oPushResult
4112: oNodeNew
4113: oPop 1
4115: oAssign
4116: oGetLocal 3
4118: oPushResult
4119: oSetResult 36
4121: oPushResult
4122: oGetGlobal 6
4124: oPushResult
4125: oNodeSet
4126: oPop 3
4128: oCall 5103
4130: oGetLocal 3
4132: oPushResult
4133: oSetResult 38
4135: oPushResult
4136: oValueTop
4137: oPushResult
4138: oNodeSetInt
4139: oPop 3
4141: oValuePop
4142: oInput 21
4144: oCall 5103
4146: oGetLocal 3
4148: oPushResult
4149: oSetResult 39
4151: oPushResult
4152: oValueTop
4153: oPushResult
4154: oNodeSetInt
4155: oPop 3
4157: oValuePop
4158: oGetLocal 3
4160: oPushResult
4161: oSetResult 17
4163: oPushResult
4164: oSetResult 4
4166: oPushResult
4167: oNodeSetInt
4168: oPop 3
4170: oGetLocal 3
4172: oPushResult
4173: oTypeAdd
4174: oPop 1
4176: oGetAddrLocal 4
4178: oPushResult
4179: oSetResult 35
4181: oPushResult
4182: oNodeNew
4183: oPop 1
4185: oAssign
4186: oGetLocal 4
4188: oPushResult
4189: oSetResult 37
4191: oPushResult
4192: oGetLocal 3
4194: oPushResult
4195: oNodeSet
4196: oPop 3
4198: oGetLocal 2
4200: oPushResult
4201: oGetLocal 4
4203: oPushResult
4204: oNodeVecAppend
4205: oPop 2
4207: oInputChoice 4215
4209: oJumpForward 4223
4211: oJumpForward 4221
4213: oJumpForward 4221
4215: Choice Lookup Table
          13   4213
          17   4209
4220: oEndChoice
4221: oJumpBack 4106
4223: oInput 40
4225: oGetAddrLocal 5
4227: oPushResult
4228: oCall 4047
4230: oPop 1
4232: oGetAddrLocal 6
4234: oPushResult
4235: oGetLocal 2
4237: oPushResult
4238: oNodeVecSize
4239: oPop 1
4241: oAssign
4242: oGetAddrLocal 6
4244: oPushResult
4245: dec
4246: oPop 1
4248: oGetAddrLocal 7
4250: oPushResult
4251: oGetLocal 2
4253: oPushResult
4254: oGetLocal 6
4256: oPushResult
4257: oNodeVecElement
4258: oPop 2
4260: oAssign
4261: oGetLocal 7
4263: oPushResult
4264: oSetResult 36
4266: oPushResult
4267: oGetLocal 5
4269: oPushResult
4270: oNodeSet
4271: oPop 3
4273: oGetAddrLocal 8
4275: oPushResult
4276: oGetLocal 7
4278: oPushResult
4279: oSetResult 37
4281: oPushResult
4282: oNodeGet
4283: oPop 2
4285: oAssign
4286: oGetAddrLocal 9
4288: oPushResult
4289: oGetLocal 8
4291: oPushResult
4292: oSetResult 39
4294: oPushResult
4295: oNodeGetInt
4296: oPop 2
4298: oPushResult
4299: oGetLocal 8
4301: oPushResult
4302: oSetResult 38
4304: oPushResult
4305: oNodeGetInt
4306: oPop 2
4308: oPushResult
4309: subtract
4310: oPop 2
4312: oAssign
4313: oGetAddrLocal 9
4315: oPushResult
4316: inc
4317: oPop 1
4319: oGetLocal 7
4321: oPushResult
4322: oSetResult 17
4324: oPushResult
4325: oGetLocal 9
4327: oPushResult
4328: oGetLocal 5
4330: oPushResult
4331: oSetResult 17
4333: oPushResult
4334: oNodeGetInt
4335: oPop 2
4337: oPushResult
4338: multiply
4339: oPop 2
4341: oPushResult
4342: oNodeSetInt
4343: oPop 3
4345: oGetLocal 7
4347: oPushResult
4348: oTypeAdd
4349: oPop 1
4351: oGetAddrLocal 5
4353: oPushResult
4354: oGetLocal 7
4356: oAssign
4357: oGetLocal 6
4359: oPushResult
4360: equal_zero
4361: oPop 1
4363: oChoice 4369
4365: oJumpForward 4374
4367: oJumpForward 4372
4369: Choice Lookup Table
           1   4365
4372: oJumpBack 4242
4374: oGetParam 1
4376: oPushResult
4377: oGetLocal 2
4379: oPushResult
4380: oSetResult 0
4382: oPushResult
4383: oNodeVecElement
4384: oPop 2
4386: oAssign
4387: oGetLocal 2
4389: oPushResult
4390: oNodeVecDelete
4391: oPop 1
4393: oJumpForward 4541
4395: oGetAddrLocal 10
4397: oPushResult
4398: oCall 4047
4400: oPop 1
4402: oGetParam 1
4404: oPushResult
4405: oGetLocal 10
4407: oPushResult
4408: oCall 11553
4410: oPop 1
4412: oAssign
4413: oJumpForward 4541
4415: oGetParam 1
4417: oPushResult
4418: oSetResult 37
4420: oPushResult
4421: oNodeNew
4422: oPop 1
4424: oAssign
4425: oSetResult -1
4427: oPushResult
4428: oSetResult 2
4430: oPushResult
4431: oScopeBegin
4432: oPop 2
4434: oSetResult 22
4436: oPushResult
4437: oCall 3748
4439: oPop 1
4441: oGetAddrLocal 11
4443: oPushResult
4444: oScopeCurrent
4445: oPushResult
4446: oSetResult 17
4448: oPushResult
4449: oNodeGetInt
4450: oPop 2
4452: oAssign
4453: oGetLocal 11
4455: oPushResult
4456: equal_zero
4457: oPop 1
4459: oChoice 4465
4461: oError 19
4463: oJumpForward 4468
4465: Choice Lookup Table
           1   4461
4468: oInput 36
4470: oGetFromParam 1
4472: oPushResult
4473: oSetResult 40
4475: oPushResult
4476: oScopeCurrent
4477: oPushResult
4478: oNodeSet
4479: oPop 3
4481: oGetFromParam 1
4483: oPushResult
4484: oSetResult 17
4486: oPushResult
4487: oGetLocal 11
4489: oPushResult
4490: oNodeSetInt
4491: oPop 3
4493: oScopeEnd
4494: oGetFromParam 1
4496: oPushResult
4497: oTypeAdd
4498: oPop 1
4500: oJumpForward 4541
4502: oGetParam 1
4504: oPushResult
4505: oCall 4542
4507: oPop 1
4509: oJumpForward 4541
4511: oInput 40
4513: oGetAddrLocal 12
4515: oPushResult
4516: oCall 4047
4518: oPop 1
4520: oJumpForward 4541
4522: Choice Lookup Table
          39   4511
          14   4502
          38   4415
          18   4395
          37   4099
           0   4051
4535: oCall 5103
4537: oInput 21
4539: oCall 5103
4541: oReturn
4542: oLocalSpace 11
4544: oGetParam 1
4546: oPushResult
4547: oSetResult 40
4549: oPushResult
4550: oNodeNew
4551: oPop 1
4553: oAssign
4554: oGetAddrLocal 1
4556: oPushResult
4557: oSetResult 0
4559: oAssign
4560: oGetAddrLocal 2
4562: oPushResult
4563: oSetResult 0
4565: oAssign
4566: oGetAddrLocal 3
4568: oPushResult
4569: oSetResult 1
4571: oAssign
4572: oGetAddrLocal 4
4574: oPushResult
4575: oScopeCurrent
4576: oAssign
4577: oSetResult -1
4579: oPushResult
4580: oSetResult 2
4582: oPushResult
4583: oScopeBegin
4584: oPop 2
4586: oInput 0
4588: oGetAddrLocal 5
4590: oPushResult
4591: oSetResult 17
4593: oPushResult
4594: LAST_ID
4595: oPushResult
4596: oCall 11525
4598: oPop 2
4600: oAssign
4601: oGetAddrLocal 6
4603: oPushResult
4604: oSetResult 17
4606: oPushResult
4607: LAST_ID
4608: oPushResult
4609: oCall 11525
4611: oPop 2
4613: oAssign
4614: oGetLocal 5
4616: oPushResult
4617: oSetResult 21
4619: oPushResult
4620: oGetFromParam 1
4622: oPushResult
4623: oNodeSet
4624: oPop 3
4626: oGetLocal 6
4628: oPushResult
4629: oSetResult 21
4631: oPushResult
4632: oGetFromParam 1
4634: oPushResult
4635: oNodeSet
4636: oPop 3
4638: oGetAddrLocal 7
4640: oPushResult
4641: LAST_ID
4642: oPushResult
4643: ID_STRING
4644: oPop 1
4646: oPushResult
4647: oStringAllocLit
4648: oPop 1
4650: oAssign
4651: oGetLocal 5
4653: oPushResult
4654: oSetResult 32
4656: oPushResult
4657: oGetLocal 7
4659: oPushResult
4660: oNodeSetInt
4661: oPop 3
4663: oGetLocal 6
4665: oPushResult
4666: oSetResult 32
4668: oPushResult
4669: oGetLocal 7
4671: oPushResult
4672: oNodeSetInt
4673: oPop 3
4675: oInputChoice 4744
4677: oCall 5103
4679: oGetLocal 2
4681: oPushResult
4682: equal_zero
4683: oPop 1
4685: oChoice 4706
4687: oValueTop
4688: oPushResult
4689: oGetLocal 1
4691: oPushResult
4692: greater
4693: oPop 2
4695: oChoice 4701
4697: oError 26
4699: oJumpForward 4704
4701: Choice Lookup Table
           0   4697
4704: oJumpForward 4709
4706: Choice Lookup Table
           0   4687
4709: oGetLocal 1
4711: oPushResult
4712: oValueTop
4713: oPushResult
4714: equal
4715: oPop 2
4717: oChoice 4733
4719: oGetFromParam 1
4721: oPushResult
4722: oSetResult 43
4724: oPushResult
4725: oSetResult 1
4727: oPushResult
4728: oNodeSetBoolean
4729: oPop 3
4731: oJumpForward 4736
4733: Choice Lookup Table
           0   4719
4736: oGetAddrLocal 1
4738: oPushResult
4739: oValueTop
4740: oAssign
4741: oValuePop
4742: oJumpForward 4749
4744: Choice Lookup Table
           4   4677
           6   4677
4749: oGetLocal 5
4751: oPushResult
4752: oSetResult 22
4754: oPushResult
4755: oGetLocal 1
4757: oPushResult
4758: oNodeSetInt
4759: oPop 3
4761: oGetLocal 6
4763: oPushResult
4764: oSetResult 22
4766: oPushResult
4767: oGetLocal 1
4769: oPushResult
4770: oNodeSetInt
4771: oPop 3
4773: oGetLocal 5
4775: oPushResult
4776: oScopeDeclare
4777: oPop 1
4779: oGetLocal 4
4781: oPushResult
4782: oScopeEnter
4783: oPop 1
4785: oGetLocal 6
4787: oPushResult
4788: oScopeDeclare
4789: oPop 1
4791: oScopeEnd
4792: oGetAddrLocal 1
4794: oPushResult
4795: inc
4796: oPop 1
4798: oGetAddrLocal 2
4800: oPushResult
4801: inc
4802: oPop 1
4804: oInputChoice 4808
4806: oJumpForward 4813
4808: Choice Lookup Table
          13   4806
4811: oJumpForward 4815
4813: oJumpBack 4586
4815: oInput 15
4817: oGetFromParam 1
4819: oPushResult
4820: oSetResult 40
4822: oPushResult
4823: oScopeCurrent
4824: oPushResult
4825: oNodeSet
4826: oPop 3
4828: oGetFromParam 1
4830: oPushResult
4831: oSetResult 17
4833: oPushResult
4834: oSetResult 4
4836: oPushResult
4837: oNodeSetInt
4838: oPop 3
4840: oScopeEnd
4841: oGetGlobal 2
4843: oPushResult
4844: oCall 1990
4846: oPop 1
4848: oPushResult
4849: oCodePush
4850: oPop 1
4852: oGetGlobal 2
4854: oPushResult
4855: oScopeEnter
4856: oPop 1
4858: oGetAddrLocal 8
4860: oPushResult
4861: oGetLocal 2
4863: oPushResult
4864: oSetResult 1
4866: oPushResult
4867: add
4868: oPop 2
4870: oPushResult
4871: oSetResult 16
4873: oPushResult
4874: multiply
4875: oPop 2
4877: oAssign
4878: oGetAddrLocal 9
4880: oPushResult
4881: oGetLocal 8
4883: oPushResult
4884: oSetResult 8
4886: oPushResult
4887: oScopeAlloc
4888: oPop 2
4890: oAssign
4891: oScopeEnd
4892: oGetFromParam 1
4894: oPushResult
4895: oSetResult 42
4897: oPushResult
4898: oGetLocal 9
4900: oPushResult
4901: oNodeSetInt
4902: oPop 3
4904: oGetAddrLocal 10
4906: oPushResult
4907: oGetFromParam 1
4909: oPushResult
4910: oSetResult 40
4912: oPushResult
4913: oNodeGet
4914: oPop 2
4916: oPushResult
4917: oSetResult 15
4919: oPushResult
4920: oNodeGetIter
4921: oPop 2
4923: oAssign
4924: oGetAddrLocal 11
4926: oPushResult
4927: oGetLocal 10
4929: oPushResult
4930: oNodeIterValue
4931: oPop 1
4933: oAssign
4934: oGetLocal 11
4936: oPushResult
4937: oNodeNull
4938: oPop 1
4940: oChoice 4946
4942: oJumpForward 5033
4944: oJumpForward 4949
4946: Choice Lookup Table
           1   4942
4949: oEmit 16
4951: oGetLocal 9
4953: oPushResult
4954: oEmitInt
4955: oPop 1
4957: oEmit 15
4959: oGetLocal 11
4961: oPushResult
4962: oSetResult 22
4964: oPushResult
4965: oNodeGetInt
4966: oPop 2
4968: oPushResult
4969: oEmitInt
4970: oPop 1
4972: oEmit 26
4974: oGetAddrLocal 9
4976: oPushResult
4977: oGetLocal 9
4979: oPushResult
4980: oSetResult 8
4982: oPushResult
4983: add
4984: oPop 2
4986: oAssign
4987: oEmit 16
4989: oGetLocal 9
4991: oPushResult
4992: oEmitInt
4993: oPop 1
4995: oEmit 16
4997: oGetLocal 11
4999: oPushResult
5000: oSetResult 32
5002: oPushResult
5003: oNodeGetInt
5004: oPop 2
5006: oPushResult
5007: oEmitInt
5008: oPop 1
5010: oEmit 28
5012: oGetAddrLocal 9
5014: oPushResult
5015: oGetLocal 9
5017: oPushResult
5018: oSetResult 8
5020: oPushResult
5021: add
5022: oPop 2
5024: oAssign
5025: oGetAddrLocal 10
5027: oPushResult
5028: oNodeIterNext
5029: oPop 1
5031: oJumpBack 4924
5033: oEmit 16
5035: oGetLocal 9
5037: oPushResult
5038: oEmitInt
5039: oPop 1
5041: oEmit 15
5043: oSetResult 0
5045: oPushResult
5046: oEmitInt
5047: oPop 1
5049: oEmit 26
5051: oGetAddrLocal 9
5053: oPushResult
5054: oGetLocal 9
5056: oPushResult
5057: oSetResult 8
5059: oPushResult
5060: add
5061: oPop 2
5063: oAssign
5064: oEmit 16
5066: oGetLocal 9
5068: oPushResult
5069: oEmitInt
5070: oPop 1
5072: oEmit 15
5074: oSetResult 0
5076: oPushResult
5077: oEmitInt
5078: oPop 1
5080: oEmit 28
5082: oGetAddrLocal 9
5084: oPushResult
5085: oGetLocal 9
5087: oPushResult
5088: oSetResult 8
5090: oPushResult
5091: add
5092: oPop 2
5094: oAssign
5095: oCodePop
5096: oGetFromParam 1
5098: oPushResult
5099: oTypeAdd
5100: oPop 1
5102: oReturn
5103: oLocalSpace 1
5105: oInputChoice 5167
5107: TOKEN_VALUE
5108: oPushResult
5109: oValuePush
5110: oPop 1
5112: oJumpForward 5175
5114: oGetAddrLocal 1
5116: oPushResult
5117: oScopeFindRequire
5118: oAssign
5119: oGetAddrLocal 1
5121: oPushResult
5122: oCall 543
5124: oPop 1
5126: oGetLocal 1
5128: oPushResult
5129: oNodeType
5130: oPop 1
5132: oChoice 5149
5134: oGetLocal 1
5136: oPushResult
5137: oSetResult 22
5139: oPushResult
5140: oNodeGetInt
5141: oPop 2
5143: oPushResult
5144: oValuePush
5145: oPop 1
5147: oJumpForward 5160
5149: Choice Lookup Table
          16   5134
5152: oError 1
5154: oSetResult 0
5156: oPushResult
5157: oValuePush
5158: oPop 1
5160: oJumpForward 5175
5162: oCall 5103
5164: oValueNegate
5165: oJumpForward 5175
5167: Choice Lookup Table
          25   5162
           0   5114
           1   5107
5174: oEndChoice
5175: oReturn
5176: oLocalSpace 1
5178: oGetAddrLocal 1
5180: oPushResult
5181: oSetResult 0
5183: oAssign
5184: oGetAddrLocal 1
5186: oPushResult
5187: oCall 5337
5189: oPop 1
5191: oGetAddrLocal 1
5193: oPushResult
5194: oCall 5237
5196: oPop 1
5198: oReturn
5199: oLocalSpace 0
5201: oGetParam 1
5203: oPushResult
5204: oCall 5337
5206: oPop 1
5208: oTypeSNodeType
5209: oChoice 5228
5211: oJumpForward 5235
5213: oGetParam 1
5215: oPushResult
5216: oLabelNew
5217: oAssign
5218: oEmit 70
5220: oGetFromParam 1
5222: oPushResult
5223: oEmitLabel
5224: oPop 1
5226: oJumpForward 5235
5228: Choice Lookup Table
          30   5213
          31   5211
5233: oError 8
5235: oTypeSPop
5236: oReturn
5237: oLocalSpace 1
5239: oTypeSNodeType
5240: oChoice 5302
5242: oGetAddrLocal 1
5244: oPushResult
5245: oLabelNew
5246: oAssign
5247: oEmit 15
5249: oSetResult 1
5251: oPushResult
5252: oEmitInt
5253: oPop 1
5255: oEmit 68
5257: oGetLocal 1
5259: oPushResult
5260: oEmitLabel
5261: oPop 1
5263: oEmit 77
5265: oGetFromParam 1
5267: oPushResult
5268: oEmitLabel
5269: oPop 1
5271: oEmit 15
5273: oSetResult 0
5275: oPushResult
5276: oEmitInt
5277: oPop 1
5279: oEmit 77
5281: oGetLocal 1
5283: oPushResult
5284: oEmitLabel
5285: oPop 1
5287: oTypeSPop
5288: oGetGlobal 7
5290: oPushResult
5291: oTypeSPush
5292: oPop 1
5294: oGetParam 1
5296: oPushResult
5297: oSetResult 0
5299: oAssign
5300: oJumpForward 5305
5302: Choice Lookup Table
          31   5242
5305: oReturn
5306: oLocalSpace 0
5308: oTypeSNodeType
5309: oChoice 5333
5311: oGetParam 1
5313: oPushResult
5314: oLabelNew
5315: oAssign
5316: oEmit 70
5318: oGetFromParam 1
5320: oPushResult
5321: oEmitLabel
5322: oPop 1
5324: oTypeSPop
5325: oGetGlobal 8
5327: oPushResult
5328: oTypeSPush
5329: oPop 1
5331: oJumpForward 5336
5333: Choice Lookup Table
          30   5311
5336: oReturn
5337: oLocalSpace 0
5339: oGetParam 1
5341: oPushResult
5342: oCall 5870
5344: oPop 1
5346: oInputChoice 5852
5348: oGetParam 1
5350: oPushResult
5351: oCall 5237
5353: oPop 1
5355: oCall 11444
5357: oGetParam 1
5359: oPushResult
5360: oCall 5870
5362: oPop 1
5364: oGetParam 1
5366: oPushResult
5367: oCall 5237
5369: oPop 1
5371: oCall 11444
5373: oCall 11313
5375: oTypeSNodeType
5376: oChoice 5404
5378: oEmit 43
5380: oJumpForward 5423
5382: oEmit 49
5384: oJumpForward 5423
5386: oEmit 55
5388: oJumpForward 5423
5390: oCall 8658
5392: oEmit 15
5394: oSetResult 0
5396: oPushResult
5397: oEmitInt
5398: oPop 1
5400: oEmit 49
5402: oJumpForward 5423
5404: Choice Lookup Table
          38   5390
          39   5390
          34   5386
          33   5386
          40   5382
          28   5382
          32   5378
          30   5378
5421: oError 17
5423: oTypeSPop
5424: oGetGlobal 7
5426: oPushResult
5427: oTypeSPush
5428: oPop 1
5430: oJumpForward 5867
5432: oGetParam 1
5434: oPushResult
5435: oCall 5237
5437: oPop 1
5439: oCall 11444
5441: oGetParam 1
5443: oPushResult
5444: oCall 5870
5446: oPop 1
5448: oGetParam 1
5450: oPushResult
5451: oCall 5237
5453: oPop 1
5455: oCall 11444
5457: oCall 11313
5459: oTypeSNodeType
5460: oChoice 5488
5462: oEmit 44
5464: oJumpForward 5507
5466: oEmit 50
5468: oJumpForward 5507
5470: oEmit 56
5472: oJumpForward 5507
5474: oCall 8658
5476: oEmit 15
5478: oSetResult 0
5480: oPushResult
5481: oEmitInt
5482: oPop 1
5484: oEmit 50
5486: oJumpForward 5507
5488: Choice Lookup Table
          38   5474
          39   5474
          34   5470
          33   5470
          40   5466
          28   5466
          32   5462
          30   5462
5505: oError 17
5507: oTypeSPop
5508: oGetGlobal 7
5510: oPushResult
5511: oTypeSPush
5512: oPop 1
5514: oJumpForward 5867
5516: oGetParam 1
5518: oPushResult
5519: oCall 5237
5521: oPop 1
5523: oCall 11444
5525: oGetParam 1
5527: oPushResult
5528: oCall 5870
5530: oPop 1
5532: oGetParam 1
5534: oPushResult
5535: oCall 5237
5537: oPop 1
5539: oCall 11444
5541: oCall 11313
5543: oTypeSNodeType
5544: oChoice 5572
5546: oEmit 46
5548: oJumpForward 5591
5550: oEmit 52
5552: oJumpForward 5591
5554: oEmit 58
5556: oJumpForward 5591
5558: oCall 8658
5560: oEmit 15
5562: oSetResult 0
5564: oPushResult
5565: oEmitInt
5566: oPop 1
5568: oEmit 52
5570: oJumpForward 5591
5572: Choice Lookup Table
          38   5558
          39   5558
          34   5554
          33   5554
          40   5550
          28   5550
          32   5546
          30   5546
5589: oError 17
5591: oTypeSPop
5592: oGetGlobal 7
5594: oPushResult
5595: oTypeSPush
5596: oPop 1
5598: oJumpForward 5867
5600: oGetParam 1
5602: oPushResult
5603: oCall 5237
5605: oPop 1
5607: oCall 11444
5609: oGetParam 1
5611: oPushResult
5612: oCall 5870
5614: oPop 1
5616: oGetParam 1
5618: oPushResult
5619: oCall 5237
5621: oPop 1
5623: oCall 11444
5625: oCall 11313
5627: oTypeSNodeType
5628: oChoice 5656
5630: oEmit 45
5632: oJumpForward 5675
5634: oEmit 51
5636: oJumpForward 5675
5638: oEmit 57
5640: oJumpForward 5675
5642: oCall 8658
5644: oEmit 15
5646: oSetResult 0
5648: oPushResult
5649: oEmitInt
5650: oPop 1
5652: oEmit 51
5654: oJumpForward 5675
5656: Choice Lookup Table
          38   5642
          39   5642
          34   5638
          33   5638
          40   5634
          28   5634
          32   5630
          30   5630
5673: oError 17
5675: oTypeSPop
5676: oGetGlobal 7
5678: oPushResult
5679: oTypeSPush
5680: oPop 1
5682: oJumpForward 5867
5684: oGetParam 1
5686: oPushResult
5687: oCall 5237
5689: oPop 1
5691: oCall 11444
5693: oGetParam 1
5695: oPushResult
5696: oCall 5870
5698: oPop 1
5700: oGetParam 1
5702: oPushResult
5703: oCall 5237
5705: oPop 1
5707: oCall 11444
5709: oCall 11313
5711: oTypeSNodeType
5712: oChoice 5740
5714: oEmit 48
5716: oJumpForward 5759
5718: oEmit 54
5720: oJumpForward 5759
5722: oEmit 60
5724: oJumpForward 5759
5726: oCall 8658
5728: oEmit 15
5730: oSetResult 0
5732: oPushResult
5733: oEmitInt
5734: oPop 1
5736: oEmit 54
5738: oJumpForward 5759
5740: Choice Lookup Table
          38   5726
          39   5726
          34   5722
          33   5722
          40   5718
          28   5718
          32   5714
          30   5714
5757: oError 17
5759: oTypeSPop
5760: oGetGlobal 7
5762: oPushResult
5763: oTypeSPush
5764: oPop 1
5766: oJumpForward 5867
5768: oGetParam 1
5770: oPushResult
5771: oCall 5237
5773: oPop 1
5775: oCall 11444
5777: oGetParam 1
5779: oPushResult
5780: oCall 5870
5782: oPop 1
5784: oGetParam 1
5786: oPushResult
5787: oCall 5237
5789: oPop 1
5791: oCall 11444
5793: oCall 11313
5795: oTypeSNodeType
5796: oChoice 5824
5798: oEmit 47
5800: oJumpForward 5843
5802: oEmit 53
5804: oJumpForward 5843
5806: oEmit 59
5808: oJumpForward 5843
5810: oCall 8658
5812: oEmit 15
5814: oSetResult 0
5816: oPushResult
5817: oEmitInt
5818: oPop 1
5820: oEmit 53
5822: oJumpForward 5843
5824: Choice Lookup Table
          38   5810
          39   5810
          34   5806
          33   5806
          40   5802
          28   5802
          32   5798
          30   5798
5841: oError 17
5843: oTypeSPop
5844: oGetGlobal 7
5846: oPushResult
5847: oTypeSPush
5848: oPop 1
5850: oJumpForward 5867
5852: Choice Lookup Table
          11   5768
          10   5684
           9   5600
           8   5516
           7   5432
           6   5348
5865: oJumpForward 5869
5867: oJumpBack 5346
5869: oReturn
5870: oLocalSpace 1
5872: oGetAddrLocal 1
5874: oPushResult
5875: oSetResult 0
5877: oAssign
5878: oGetParam 1
5880: oPushResult
5881: oCall 6050
5883: oPop 1
5885: oInputChoice 6018
5887: oTypeSNodeType
5888: oChoice 5959
5890: oGetLocal 1
5892: oPushResult
5893: oSetResult 0
5895: oPushResult
5896: equal_label
5897: oPop 2
5899: oChoice 5908
5901: oGetAddrLocal 1
5903: oPushResult
5904: oLabelNew
5905: oAssign
5906: oJumpForward 5911
5908: Choice Lookup Table
           1   5901
5911: oEmit 68
5913: oGetLocal 1
5915: oPushResult
5916: oEmitLabel
5917: oPop 1
5919: oJumpForward 5966
5921: oGetParam 1
5923: oPushResult
5924: oCall 5306
5926: oPop 1
5928: oGetLocal 1
5930: oPushResult
5931: oSetResult 0
5933: oPushResult
5934: equal_label
5935: oPop 2
5937: oChoice 5946
5939: oGetAddrLocal 1
5941: oPushResult
5942: oLabelNew
5943: oAssign
5944: oJumpForward 5949
5946: Choice Lookup Table
           1   5939
5949: oEmit 68
5951: oGetLocal 1
5953: oPushResult
5954: oEmitLabel
5955: oPop 1
5957: oJumpForward 5966
5959: Choice Lookup Table
          30   5921
          31   5890
5964: oError 8
5966: oTypeSPop
5967: oEmit 77
5969: oGetFromParam 1
5971: oPushResult
5972: oEmitLabel
5973: oPop 1
5975: oGetParam 1
5977: oPushResult
5978: oSetResult 0
5980: oAssign
5981: oGetParam 1
5983: oPushResult
5984: oCall 6050
5986: oPop 1
5988: oTypeSNodeType
5989: oChoice 6002
5991: oJumpForward 6009
5993: oGetParam 1
5995: oPushResult
5996: oCall 5306
5998: oPop 1
6000: oJumpForward 6009
6002: Choice Lookup Table
          30   5993
          31   5991
6007: oError 8
6009: oTypeSPop
6010: oGetGlobal 8
6012: oPushResult
6013: oTypeSPush
6014: oPop 1
6016: oJumpForward 6023
6018: Choice Lookup Table
          57   5887
6021: oJumpForward 6025
6023: oJumpBack 5885
6025: oGetLocal 1
6027: oPushResult
6028: oSetResult 0
6030: oPushResult
6031: equal_label
6032: oPop 2
6034: oChoice 6046
6036: oEmit 77
6038: oGetLocal 1
6040: oPushResult
6041: oEmitLabel
6042: oPop 1
6044: oJumpForward 6049
6046: Choice Lookup Table
           0   6036
6049: oReturn
6050: oLocalSpace 2
6052: oGetAddrLocal 1
6054: oPushResult
6055: oSetResult 0
6057: oAssign
6058: oGetParam 1
6060: oPushResult
6061: oCall 6188
6063: oPop 1
6065: oInputChoice 6180
6067: oTypeSNodeType
6068: oChoice 6081
6070: oJumpForward 6088
6072: oGetParam 1
6074: oPushResult
6075: oCall 5306
6077: oPop 1
6079: oJumpForward 6088
6081: Choice Lookup Table
          30   6072
          31   6070
6086: oError 8
6088: oTypeSPop
6089: oGetLocal 1
6091: oPushResult
6092: oSetResult 0
6094: oPushResult
6095: equal_label
6096: oPop 2
6098: oChoice 6127
6100: oGetAddrLocal 1
6102: oPushResult
6103: oLabelNew
6104: oAssign
6105: oEmit 78
6107: oGetFromParam 1
6109: oPushResult
6110: oEmitLabel
6111: oPop 1
6113: oGetLocal 1
6115: oPushResult
6116: oEmitLabel
6117: oPop 1
6119: oGetParam 1
6121: oPushResult
6122: oGetLocal 1
6124: oAssign
6125: oJumpForward 6130
6127: Choice Lookup Table
           1   6100
6130: oGetAddrLocal 2
6132: oPushResult
6133: oSetResult 0
6135: oAssign
6136: oGetAddrLocal 2
6138: oPushResult
6139: oCall 6188
6141: oPop 1
6143: oTypeSNodeType
6144: oChoice 6157
6146: oJumpForward 6164
6148: oGetAddrLocal 2
6150: oPushResult
6151: oCall 5306
6153: oPop 1
6155: oJumpForward 6164
6157: Choice Lookup Table
          30   6148
          31   6146
6162: oError 8
6164: oEmit 78
6166: oGetLocal 2
6168: oPushResult
6169: oEmitLabel
6170: oPop 1
6172: oGetLocal 1
6174: oPushResult
6175: oEmitLabel
6176: oPop 1
6178: oJumpForward 6185
6180: Choice Lookup Table
          56   6067
6183: oJumpForward 6187
6185: oJumpBack 6065
6187: oReturn
6188: oLocalSpace 1
6190: oInputChoice 6244
6192: oGetAddrLocal 1
6194: oPushResult
6195: oSetResult 0
6197: oAssign
6198: oGetAddrLocal 1
6200: oPushResult
6201: oCall 6188
6203: oPop 1
6205: oTypeSNodeType
6206: oChoice 6235
6208: oGetParam 1
6210: oPushResult
6211: oLabelNew
6212: oAssign
6213: oEmit 68
6215: oGetFromParam 1
6217: oPushResult
6218: oEmitLabel
6219: oPop 1
6221: oEmit 77
6223: oGetLocal 1
6225: oPushResult
6226: oEmitLabel
6227: oPop 1
6229: oJumpForward 6242
6231: oEmit 42
6233: oJumpForward 6242
6235: Choice Lookup Table
          30   6231
          31   6208
6240: oError 8
6242: oJumpForward 6254
6244: Choice Lookup Table
          58   6192
6247: oGetParam 1
6249: oPushResult
6250: oCall 6255
6252: oPop 1
6254: oReturn
6255: oLocalSpace 2
6257: oGetAddrLocal 1
6259: oPushResult
6260: oSetResult 1
6262: oAssign
6263: oGetParam 1
6265: oPushResult
6266: oCall 6491
6268: oPop 1
6270: oInputChoice 6481
6272: oTypeSNodeType
6273: oChoice 6396
6275: oCall 11398
6277: oGetParam 1
6279: oPushResult
6280: oCall 6491
6282: oPop 1
6284: oTypeSNodeType
6285: oChoice 6293
6287: oEmit 22
6289: oCall 8074
6291: oJumpForward 6302
6293: Choice Lookup Table
          34   6287
          33   6287
6298: oCall 11418
6300: oEmit 37
6302: oJumpForward 6413
6304: oGetLocal 1
6306: oChoice 6322
6308: oGetAddrLocal 2
6310: oPushResult
6311: oCall 8441
6313: oAssign
6314: oGetAddrLocal 1
6316: oPushResult
6317: oSetResult 0
6319: oAssign
6320: oJumpForward 6325
6322: Choice Lookup Table
           1   6308
6325: oGetParam 1
6327: oPushResult
6328: oCall 6491
6330: oPop 1
6332: oTypeSNodeType
6333: oChoice 6371
6335: oCall 8550
6337: oEmit 17
6339: oGetLocal 2
6341: oPushResult
6342: oEmitInt
6343: oPop 1
6345: oGetGlobal 14
6347: oPushResult
6348: oTypeSPush
6349: oPop 1
6351: oJumpForward 6381
6353: oCall 8604
6355: oEmit 17
6357: oGetLocal 2
6359: oPushResult
6360: oEmitInt
6361: oPop 1
6363: oGetGlobal 14
6365: oPushResult
6366: oTypeSPush
6367: oPop 1
6369: oJumpForward 6381
6371: Choice Lookup Table
          32   6353
          38   6335
          39   6335
6378: oError 14
6380: oTypeSPop
6381: oJumpForward 6413
6383: oGetParam 1
6385: oPushResult
6386: oCall 6491
6388: oPop 1
6390: oCall 11398
6392: oCall 8074
6394: oJumpForward 6413
6396: Choice Lookup Table
          34   6383
          33   6383
          32   6304
          38   6304
          39   6304
          29   6275
          28   6275
6411: oError 17
6413: oJumpForward 6488
6415: oTypeSNodeType
6416: oChoice 6468
6418: oCall 11398
6420: oGetParam 1
6422: oPushResult
6423: oCall 6491
6425: oPop 1
6427: oCall 11418
6429: oEmit 40
6431: oJumpForward 6479
6433: oGetParam 1
6435: oPushResult
6436: oCall 6491
6438: oPop 1
6440: oTypeSNodeType
6441: oChoice 6455
6443: oCall 11398
6445: oCall 8130
6447: oJumpForward 6466
6449: oCall 11313
6451: oCall 8186
6453: oJumpForward 6466
6455: Choice Lookup Table
          34   6449
          33   6449
          29   6443
          28   6443
6464: oError 17
6466: oJumpForward 6479
6468: Choice Lookup Table
          34   6433
          33   6433
          29   6418
          28   6418
6477: oError 17
6479: oJumpForward 6488
6481: Choice Lookup Table
          25   6415
          24   6272
6486: oJumpForward 6490
6488: oJumpBack 6270
6490: oReturn
6491: oLocalSpace 0
6493: oGetParam 1
6495: oPushResult
6496: oCall 6542
6498: oPop 1
6500: oInputChoice 6532
6502: oCall 11398
6504: oGetParam 1
6506: oPushResult
6507: oCall 6542
6509: oPop 1
6511: oCall 11418
6513: oEmit 34
6515: oJumpForward 6539
6517: oCall 11398
6519: oGetParam 1
6521: oPushResult
6522: oCall 6542
6524: oPop 1
6526: oCall 11418
6528: oEmit 35
6530: oJumpForward 6539
6532: Choice Lookup Table
          23   6517
          22   6502
6537: oJumpForward 6541
6539: oJumpBack 6500
6541: oReturn
6542: oLocalSpace 0
6544: oInputChoice 6570
6546: oGetParam 1
6548: oPushResult
6549: oCall 6583
6551: oPop 1
6553: oCall 11418
6555: oJumpForward 6582
6557: oGetParam 1
6559: oPushResult
6560: oCall 6583
6562: oPop 1
6564: oCall 11418
6566: oEmit 41
6568: oJumpForward 6582
6570: Choice Lookup Table
          25   6557
          24   6546
6575: oGetParam 1
6577: oPushResult
6578: oCall 6583
6580: oPop 1
6582: oReturn
6583: oLocalSpace 6
6585: oInputChoice 6839
6587: oEmit 15
6589: TOKEN_VALUE
6590: oPushResult
6591: oEmitInt
6592: oPop 1
6594: oGetGlobal 6
6596: oPushResult
6597: oTypeSPush
6598: oPop 1
6600: oJumpForward 6860
6602: oEmit 15
6604: TOKEN_VALUE
6605: oPushResult
6606: oEmitInt
6607: oPop 1
6609: oGetGlobal 9
6611: oPushResult
6612: oTypeSPush
6613: oPop 1
6615: oJumpForward 6860
6617: oGetParam 1
6619: oPushResult
6620: oCall 5337
6622: oPop 1
6624: oInput 15
6626: oJumpForward 6860
6628: oGetAddrLocal 1
6630: oPushResult
6631: CURRENT_STRLIT
6632: oPushResult
6633: oStringAllocShortStringLit
6634: oPop 1
6636: oAssign
6637: oEmit 16
6639: oGetLocal 1
6641: oPushResult
6642: oEmitInt
6643: oPop 1
6645: oGetGlobal 13
6647: oPushResult
6648: oTypeSPush
6649: oPop 1
6651: oCall 7672
6653: oCall 7618
6655: oJumpForward 6860
6657: oGetAddrLocal 2
6659: oPushResult
6660: oScopeFindRequire
6661: oAssign
6662: oGetAddrLocal 2
6664: oPushResult
6665: oCall 543
6667: oPop 1
6669: oGetLocal 2
6671: oPushResult
6672: oNodeType
6673: oPop 1
6675: oChoice 6763
6677: oGetLocal 2
6679: oPushResult
6680: oCall 8836
6682: oPop 1
6684: oJumpForward 6788
6686: oGetLocal 2
6688: oPushResult
6689: oCall 9456
6691: oPop 1
6693: oJumpForward 6788
6695: oGetAddrLocal 3
6697: oPushResult
6698: oGetLocal 2
6700: oPushResult
6701: oSetResult 21
6703: oPushResult
6704: oNodeGet
6705: oPop 2
6707: oAssign
6708: oGetLocal 3
6710: oPushResult
6711: oTypeSPush
6712: oPop 1
6714: oTypeSNodeType
6715: oChoice 6739
6717: oEmit 15
6719: oGetLocal 2
6721: oPushResult
6722: oCall 11827
6724: oPop 1
6726: oJumpForward 6752
6728: oEmit 15
6730: oGetLocal 2
6732: oPushResult
6733: oCall 11827
6735: oPop 1
6737: oJumpForward 6752
6739: Choice Lookup Table
          34   6728
          33   6728
          30   6717
          40   6717
          28   6717
6750: oError 16
6752: oJumpForward 6788
6754: oGetLocal 2
6756: oPushResult
6757: oCall 6861
6759: oPop 1
6761: oJumpForward 6788
6763: Choice Lookup Table
          24   6754
          23   6754
          21   6754
          20   6754
          17   6695
          16   6695
          14   6686
          13   6677
6780: oError 6
6782: oGetGlobal 6
6784: oPushResult
6785: oTypeSPush
6786: oPop 1
6788: oJumpForward 6860
6790: oInput 0
6792: oGetAddrLocal 4
6794: oPushResult
6795: oScopeFindRequire
6796: oAssign
6797: oGetAddrLocal 4
6799: oPushResult
6800: oCall 543
6802: oPop 1
6804: oGetLocal 4
6806: oPushResult
6807: oSetResult 0
6809: oPushResult
6810: oCall 10151
6812: oPop 2
6814: oGetAddrLocal 5
6816: oPushResult
6817: oTypeSTop
6818: oAssign
6819: oTypeSPop
6820: oGetAddrLocal 6
6822: oPushResult
6823: oGetLocal 5
6825: oPushResult
6826: oCall 11553
6828: oPop 1
6830: oAssign
6831: oGetLocal 6
6833: oPushResult
6834: oTypeSPush
6835: oPop 1
6837: oJumpForward 6860
6839: Choice Lookup Table
          19   6790
           0   6657
           2   6628
          14   6617
           3   6602
           1   6587
6852: oError 6
6854: oGetGlobal 6
6856: oPushResult
6857: oTypeSPush
6858: oPop 1
6860: oReturn
6861: oLocalSpace 2
6863: oGetAddrLocal 1
6865: oPushResult
6866: oGetParam 1
6868: oPushResult
6869: oSetResult 21
6871: oPushResult
6872: oNodeGet
6873: oPop 2
6875: oAssign
6876: oGetAddrLocal 2
6878: oPushResult
6879: oGetParam 1
6881: oPushResult
6882: oCall 11295
6884: oPop 1
6886: oAssign
6887: oGetLocal 1
6889: oPushResult
6890: oTypeSPush
6891: oPop 1
6893: oTypeSNodeType
6894: oChoice 7593
6896: oGetParam 1
6898: oPushResult
6899: oNodeType
6900: oPop 1
6902: oChoice 7048
6904: oEmit 0
6906: oGetParam 1
6908: oPushResult
6909: oCall 11827
6911: oPop 1
6913: oJumpForward 7058
6915: oGetLocal 2
6917: oPushResult
6918: equal_zero
6919: oPop 1
6921: oChoice 6934
6923: oEmit 3
6925: oGetParam 1
6927: oPushResult
6928: oCall 11827
6930: oPop 1
6932: oJumpForward 6952
6934: Choice Lookup Table
           1   6923
6937: oEmit 9
6939: oGetLocal 2
6941: oPushResult
6942: oEmitInt
6943: oPop 1
6945: oGetParam 1
6947: oPushResult
6948: oCall 11827
6950: oPop 1
6952: oJumpForward 7058
6954: oGetParam 1
6956: oPushResult
6957: oSetResult 33
6959: oPushResult
6960: oNodeGetBoolean
6961: oPop 2
6963: oChoice 7006
6965: oGetLocal 2
6967: oPushResult
6968: equal_zero
6969: oPop 1
6971: oChoice 6984
6973: oEmit 8
6975: oGetParam 1
6977: oPushResult
6978: oCall 11827
6980: oPop 1
6982: oJumpForward 7002
6984: Choice Lookup Table
           1   6973
6987: oEmit 14
6989: oGetLocal 2
6991: oPushResult
6992: oEmitInt
6993: oPop 1
6995: oGetParam 1
6997: oPushResult
6998: oCall 11827
7000: oPop 1
7002: oEmit 23
7004: oJumpForward 7046
7006: Choice Lookup Table
           1   6965
7009: oGetLocal 2
7011: oPushResult
7012: equal_zero
7013: oPop 1
7015: oChoice 7028
7017: oEmit 6
7019: oGetParam 1
7021: oPushResult
7022: oCall 11827
7024: oPop 1
7026: oJumpForward 7046
7028: Choice Lookup Table
           1   7017
7031: oEmit 12
7033: oGetLocal 2
7035: oPushResult
7036: oEmitInt
7037: oPop 1
7039: oGetParam 1
7041: oPushResult
7042: oCall 11827
7044: oPop 1
7046: oJumpForward 7058
7048: Choice Lookup Table
          23   6954
          21   6915
          24   6904
          20   6904
7057: oEndChoice
7058: oJumpForward 7617
7060: oGetParam 1
7062: oPushResult
7063: oNodeType
7064: oPop 1
7066: oChoice 7212
7068: oEmit 1
7070: oGetParam 1
7072: oPushResult
7073: oCall 11827
7075: oPop 1
7077: oJumpForward 7222
7079: oGetLocal 2
7081: oPushResult
7082: equal_zero
7083: oPop 1
7085: oChoice 7098
7087: oEmit 4
7089: oGetParam 1
7091: oPushResult
7092: oCall 11827
7094: oPop 1
7096: oJumpForward 7116
7098: Choice Lookup Table
           1   7087
7101: oEmit 10
7103: oGetLocal 2
7105: oPushResult
7106: oEmitInt
7107: oPop 1
7109: oGetParam 1
7111: oPushResult
7112: oCall 11827
7114: oPop 1
7116: oJumpForward 7222
7118: oGetParam 1
7120: oPushResult
7121: oSetResult 33
7123: oPushResult
7124: oNodeGetBoolean
7125: oPop 2
7127: oChoice 7170
7129: oGetLocal 2
7131: oPushResult
7132: equal_zero
7133: oPop 1
7135: oChoice 7148
7137: oEmit 8
7139: oGetParam 1
7141: oPushResult
7142: oCall 11827
7144: oPop 1
7146: oJumpForward 7166
7148: Choice Lookup Table
           1   7137
7151: oEmit 14
7153: oGetLocal 2
7155: oPushResult
7156: oEmitInt
7157: oPop 1
7159: oGetParam 1
7161: oPushResult
7162: oCall 11827
7164: oPop 1
7166: oEmit 24
7168: oJumpForward 7210
7170: Choice Lookup Table
           1   7129
7173: oGetLocal 2
7175: oPushResult
7176: equal_zero
7177: oPop 1
7179: oChoice 7192
7181: oEmit 7
7183: oGetParam 1
7185: oPushResult
7186: oCall 11827
7188: oPop 1
7190: oJumpForward 7210
7192: Choice Lookup Table
           1   7181
7195: oEmit 13
7197: oGetLocal 2
7199: oPushResult
7200: oEmitInt
7201: oPop 1
7203: oGetParam 1
7205: oPushResult
7206: oCall 11827
7208: oPop 1
7210: oJumpForward 7222
7212: Choice Lookup Table
          23   7118
          21   7079
          24   7068
          20   7068
7221: oEndChoice
7222: oJumpForward 7617
7224: oError 16
7226: oJumpForward 7617
7228: oGetParam 1
7230: oPushResult
7231: oNodeType
7232: oPop 1
7234: oChoice 7380
7236: oEmit 2
7238: oGetParam 1
7240: oPushResult
7241: oCall 11827
7243: oPop 1
7245: oJumpForward 7390
7247: oGetLocal 2
7249: oPushResult
7250: equal_zero
7251: oPop 1
7253: oChoice 7266
7255: oEmit 5
7257: oGetParam 1
7259: oPushResult
7260: oCall 11827
7262: oPop 1
7264: oJumpForward 7284
7266: Choice Lookup Table
           1   7255
7269: oEmit 11
7271: oGetLocal 2
7273: oPushResult
7274: oEmitInt
7275: oPop 1
7277: oGetParam 1
7279: oPushResult
7280: oCall 11827
7282: oPop 1
7284: oJumpForward 7390
7286: oGetParam 1
7288: oPushResult
7289: oSetResult 33
7291: oPushResult
7292: oNodeGetBoolean
7293: oPop 2
7295: oChoice 7338
7297: oGetLocal 2
7299: oPushResult
7300: equal_zero
7301: oPop 1
7303: oChoice 7316
7305: oEmit 8
7307: oGetParam 1
7309: oPushResult
7310: oCall 11827
7312: oPop 1
7314: oJumpForward 7334
7316: Choice Lookup Table
           1   7305
7319: oEmit 14
7321: oGetLocal 2
7323: oPushResult
7324: oEmitInt
7325: oPop 1
7327: oGetParam 1
7329: oPushResult
7330: oCall 11827
7332: oPop 1
7334: oEmit 25
7336: oJumpForward 7378
7338: Choice Lookup Table
           1   7297
7341: oGetLocal 2
7343: oPushResult
7344: equal_zero
7345: oPop 1
7347: oChoice 7360
7349: oEmit 8
7351: oGetParam 1
7353: oPushResult
7354: oCall 11827
7356: oPop 1
7358: oJumpForward 7378
7360: Choice Lookup Table
           1   7349
7363: oEmit 14
7365: oGetLocal 2
7367: oPushResult
7368: oEmitInt
7369: oPop 1
7371: oGetParam 1
7373: oPushResult
7374: oCall 11827
7376: oPop 1
7378: oJumpForward 7390
7380: Choice Lookup Table
          23   7286
          21   7247
          24   7236
          20   7236
7389: oEndChoice
7390: oInputChoice 7420
7392: oTypeSPop
7393: oGetLocal 1
7395: oPushResult
7396: oSetResult 36
7398: oPushResult
7399: oNodeGet
7400: oPop 2
7402: oPushResult
7403: oTypeSPush
7404: oPop 1
7406: oCall 7672
7408: oCall 7618
7410: oJumpForward 7425
7412: oCall 7867
7414: oCall 7672
7416: oCall 7618
7418: oJumpForward 7425
7420: Choice Lookup Table
          16   7412
          18   7392
7425: oJumpForward 7617
7427: oGetParam 1
7429: oPushResult
7430: oNodeType
7431: oPop 1
7433: oChoice 7577
7435: oEmit 16
7437: oGetParam 1
7439: oPushResult
7440: oCall 11827
7442: oPop 1
7444: oJumpForward 7587
7446: oGetLocal 2
7448: oPushResult
7449: equal_zero
7450: oPop 1
7452: oChoice 7465
7454: oEmit 17
7456: oGetParam 1
7458: oPushResult
7459: oCall 11827
7461: oPop 1
7463: oJumpForward 7483
7465: Choice Lookup Table
           1   7454
7468: oEmit 20
7470: oGetLocal 2
7472: oPushResult
7473: oEmitInt
7474: oPop 1
7476: oGetParam 1
7478: oPushResult
7479: oCall 11827
7481: oPop 1
7483: oJumpForward 7587
7485: oGetParam 1
7487: oPushResult
7488: oSetResult 33
7490: oPushResult
7491: oNodeGetBoolean
7492: oPop 2
7494: oChoice 7535
7496: oGetLocal 2
7498: oPushResult
7499: equal_zero
7500: oPop 1
7502: oChoice 7515
7504: oEmit 8
7506: oGetParam 1
7508: oPushResult
7509: oCall 11827
7511: oPop 1
7513: oJumpForward 7533
7515: Choice Lookup Table
           1   7504
7518: oEmit 14
7520: oGetLocal 2
7522: oPushResult
7523: oEmitInt
7524: oPop 1
7526: oGetParam 1
7528: oPushResult
7529: oCall 11827
7531: oPop 1
7533: oJumpForward 7575
7535: Choice Lookup Table
           1   7496
7538: oGetLocal 2
7540: oPushResult
7541: equal_zero
7542: oPop 1
7544: oChoice 7557
7546: oEmit 18
7548: oGetParam 1
7550: oPushResult
7551: oCall 11827
7553: oPop 1
7555: oJumpForward 7575
7557: Choice Lookup Table
           1   7546
7560: oEmit 21
7562: oGetLocal 2
7564: oPushResult
7565: oEmitInt
7566: oPop 1
7568: oGetParam 1
7570: oPushResult
7571: oCall 11827
7573: oPop 1
7575: oJumpForward 7587
7577: Choice Lookup Table
          23   7485
          21   7446
          24   7435
          20   7435
7586: oEndChoice
7587: oCall 7672
7589: oCall 7618
7591: oJumpForward 7617
7593: Choice Lookup Table
          39   7427
          37   7427
          35   7427
          34   7228
          33   7228
          27   7224
          32   7060
          29   7060
          30   7060
          40   6896
          28   6896
7616: oEndChoice
7617: oReturn
7618: oLocalSpace 0
7620: oTypeSNodeType
7621: oChoice 7645
7623: oEmit 23
7625: oJumpForward 7671
7627: oEmit 24
7629: oJumpForward 7671
7631: oError 16
7633: oJumpForward 7671
7635: oEmit 25
7637: oJumpForward 7671
7639: oError 29
7641: oJumpForward 7671
7643: oJumpForward 7671
7645: Choice Lookup Table
          39   7643
          38   7643
          37   7643
          35   7643
          34   7639
          33   7635
          27   7631
          32   7627
          29   7627
          30   7627
          40   7623
          28   7623
7670: oEndChoice
7671: oReturn
7672: oLocalSpace 0
7674: oInputChoice 7712
7676: oTypeSNodeType
7677: oChoice 7691
7679: oCall 7724
7681: oJumpForward 7702
7683: oCall 7867
7685: oJumpForward 7702
7687: oCall 7946
7689: oJumpForward 7702
7691: Choice Lookup Table
          39   7687
          38   7687
          33   7683
          35   7679
7700: oError 10
7702: oJumpForward 7721
7704: oCall 7976
7706: oJumpForward 7721
7708: oCall 8249
7710: oJumpForward 7721
7712: Choice Lookup Table
          18   7708
          20   7704
          16   7676
7719: oJumpForward 7723
7721: oJumpBack 7674
7723: oReturn
7724: oLocalSpace 3
7726: oTypeSNodeType
7727: oChoice 7731
7729: oJumpForward 7736
7731: Choice Lookup Table
          35   7729
7734: oError 10
7736: oTypeSNodeType
7737: oChoice 7741
7739: oJumpForward 7746
7741: Choice Lookup Table
          35   7739
7744: oError 13
7746: oGetAddrLocal 1
7748: oPushResult
7749: oTypeSTop
7750: oPushResult
7751: oSetResult 37
7753: oPushResult
7754: oNodeGet
7755: oPop 2
7757: oPushResult
7758: oCall 11637
7760: oPop 1
7762: oAssign
7763: oGetAddrLocal 2
7765: oPushResult
7766: oTypeSTop
7767: oPushResult
7768: oSetResult 36
7770: oPushResult
7771: oNodeGet
7772: oPop 2
7774: oAssign
7775: oTypeSPop
7776: oGetLocal 2
7778: oPushResult
7779: oTypeSPush
7780: oPop 1
7782: oCall 5176
7784: oCall 11371
7786: oGetLocal 1
7788: oPushResult
7789: equal_zero
7790: oPop 1
7792: oChoice 7806
7794: oEmit 15
7796: oGetLocal 1
7798: oPushResult
7799: oEmitInt
7800: oPop 1
7802: oEmit 40
7804: oJumpForward 7809
7806: Choice Lookup Table
           0   7794
7809: oGetAddrLocal 3
7811: oPushResult
7812: oGetLocal 2
7814: oPushResult
7815: oSetResult 17
7817: oPushResult
7818: oNodeGetInt
7819: oPop 2
7821: oAssign
7822: oGetLocal 3
7824: oPushResult
7825: oSetResult 1
7827: oPushResult
7828: equal
7829: oPop 2
7831: oChoice 7845
7833: oEmit 15
7835: oGetLocal 3
7837: oPushResult
7838: oEmitInt
7839: oPop 1
7841: oEmit 34
7843: oJumpForward 7848
7845: Choice Lookup Table
           0   7833
7848: oEmit 36
7850: oInputChoice 7858
7852: oJumpForward 7866
7854: oJumpForward 7864
7856: oJumpForward 7864
7858: Choice Lookup Table
          13   7856
          17   7852
7863: oEndChoice
7864: oJumpBack 7736
7866: oReturn
7867: oLocalSpace 2
7869: oTypeSNodeType
7870: oChoice 7874
7872: oJumpForward 7879
7874: Choice Lookup Table
          33   7872
7877: oError 29
7879: oGetAddrLocal 1
7881: oPushResult
7882: oTypeSTop
7883: oPushResult
7884: oSetResult 36
7886: oPushResult
7887: oNodeGet
7888: oPop 2
7890: oAssign
7891: oTypeSPop
7892: oGetLocal 1
7894: oPushResult
7895: oTypeSPush
7896: oPop 1
7898: oCall 5176
7900: oCall 11371
7902: oGetAddrLocal 2
7904: oPushResult
7905: oGetLocal 1
7907: oPushResult
7908: oSetResult 17
7910: oPushResult
7911: oNodeGetInt
7912: oPop 2
7914: oAssign
7915: oGetLocal 2
7917: oPushResult
7918: oSetResult 1
7920: oPushResult
7921: equal
7922: oPop 2
7924: oChoice 7938
7926: oEmit 15
7928: oGetLocal 2
7930: oPushResult
7931: oEmitInt
7932: oPop 1
7934: oEmit 34
7936: oJumpForward 7941
7938: Choice Lookup Table
           0   7926
7941: oEmit 36
7943: oInput 17
7945: oReturn
7946: oLocalSpace 0
7948: oTypeSNodeType
7949: oChoice 7953
7951: oJumpForward 7960
7953: Choice Lookup Table
          39   7951
          38   7951
7958: oError 29
7960: oTypeSPop
7961: oGetGlobal 9
7963: oPushResult
7964: oTypeSPush
7965: oPop 1
7967: oCall 5176
7969: oCall 11371
7971: oEmit 36
7973: oInput 17
7975: oReturn
7976: oLocalSpace 2
7978: oTypeSNodeType
7979: oChoice 7983
7981: oJumpForward 7988
7983: Choice Lookup Table
          37   7981
7986: oError 11
7988: oTypeSTop
7989: oPushResult
7990: oSetResult 40
7992: oPushResult
7993: oNodeGet
7994: oPop 2
7996: oPushResult
7997: oScopeEnter
7998: oPop 1
8000: oInput 0
8002: oGetAddrLocal 1
8004: oPushResult
8005: oScopeFindRequire
8006: oAssign
8007: oGetLocal 1
8009: oPushResult
8010: oNodeType
8011: oPop 1
8013: oChoice 8017
8015: oJumpForward 8022
8017: Choice Lookup Table
          22   8015
8020: oError 12
8022: oScopeEnd
8023: oGetAddrLocal 2
8025: oPushResult
8026: oGetLocal 1
8028: oPushResult
8029: oSetResult 22
8031: oPushResult
8032: oNodeGetInt
8033: oPop 2
8035: oAssign
8036: oGetLocal 2
8038: oPushResult
8039: equal_zero
8040: oPop 1
8042: oChoice 8056
8044: oEmit 15
8046: oGetLocal 2
8048: oPushResult
8049: oEmitInt
8050: oPop 1
8052: oEmit 36
8054: oJumpForward 8059
8056: Choice Lookup Table
           0   8044
8059: oTypeSPop
8060: oGetLocal 1
8062: oPushResult
8063: oSetResult 21
8065: oPushResult
8066: oNodeGet
8067: oPop 2
8069: oPushResult
8070: oTypeSPush
8071: oPop 1
8073: oReturn
8074: oLocalSpace 2
8076: oGetAddrLocal 1
8078: oPushResult
8079: oTypeSTop
8080: oPushResult
8081: oSetResult 36
8083: oPushResult
8084: oNodeGet
8085: oPop 2
8087: oAssign
8088: oGetAddrLocal 2
8090: oPushResult
8091: oGetLocal 1
8093: oPushResult
8094: oSetResult 17
8096: oPushResult
8097: oNodeGetInt
8098: oPop 2
8100: oAssign
8101: oGetLocal 2
8103: oPushResult
8104: oSetResult 1
8106: oPushResult
8107: equal
8108: oPop 2
8110: oChoice 8124
8112: oEmit 15
8114: oGetLocal 2
8116: oPushResult
8117: oEmitInt
8118: oPop 1
8120: oEmit 34
8122: oJumpForward 8127
8124: Choice Lookup Table
           0   8112
8127: oEmit 36
8129: oReturn
8130: oLocalSpace 2
8132: oGetAddrLocal 1
8134: oPushResult
8135: oTypeSTop
8136: oPushResult
8137: oSetResult 36
8139: oPushResult
8140: oNodeGet
8141: oPop 2
8143: oAssign
8144: oGetAddrLocal 2
8146: oPushResult
8147: oGetLocal 1
8149: oPushResult
8150: oSetResult 17
8152: oPushResult
8153: oNodeGetInt
8154: oPop 2
8156: oAssign
8157: oGetLocal 2
8159: oPushResult
8160: oSetResult 1
8162: oPushResult
8163: equal
8164: oPop 2
8166: oChoice 8180
8168: oEmit 15
8170: oGetLocal 2
8172: oPushResult
8173: oEmitInt
8174: oPop 1
8176: oEmit 34
8178: oJumpForward 8183
8180: Choice Lookup Table
           0   8168
8183: oEmit 39
8185: oReturn
8186: oLocalSpace 2
8188: oEmit 38
8190: oGetAddrLocal 1
8192: oPushResult
8193: oTypeSTop
8194: oPushResult
8195: oSetResult 36
8197: oPushResult
8198: oNodeGet
8199: oPop 2
8201: oAssign
8202: oGetAddrLocal 2
8204: oPushResult
8205: oGetLocal 1
8207: oPushResult
8208: oSetResult 17
8210: oPushResult
8211: oNodeGetInt
8212: oPop 2
8214: oAssign
8215: oGetLocal 2
8217: oPushResult
8218: oSetResult 1
8220: oPushResult
8221: equal
8222: oPop 2
8224: oChoice 8238
8226: oEmit 15
8228: oGetLocal 2
8230: oPushResult
8231: oEmitInt
8232: oPop 1
8234: oEmit 35
8236: oJumpForward 8241
8238: Choice Lookup Table
           0   8226
8241: oTypeSPop
8242: oGetGlobal 6
8244: oPushResult
8245: oTypeSPush
8246: oPop 1
8248: oReturn
8249: oLocalSpace 1
8251: oTypeSNodeType
8252: oChoice 8260
8254: oJumpForward 8267
8256: oError 29
8258: oJumpForward 8267
8260: Choice Lookup Table
          34   8256
          33   8254
8265: oError 9
8267: oEmit 25
8269: oGetAddrLocal 1
8271: oPushResult
8272: oTypeSTop
8273: oAssign
8274: oTypeSPop
8275: oGetLocal 1
8277: oPushResult
8278: oSetResult 36
8280: oPushResult
8281: oNodeGet
8282: oPop 2
8284: oPushResult
8285: oTypeSPush
8286: oPop 1
8288: oReturn
8289: oLocalSpace 2
8291: oGetAddrLocal 1
8293: oPushResult
8294: oTypeSNodeType
8295: oAssign
8296: oTypeSPop
8297: oGetLocal 1
8299: oPushResult
8300: oTypeSNodeType
8301: oPushResult
8302: equal_node_type
8303: oPop 2
8305: oChoice 8437
8307: oTypeSNodeType
8308: oChoice 8422
8310: oGetLocal 1
8312: oChoice 8319
8314: oEmit 30
8316: oReturn
8317: oJumpForward 8322
8319: Choice Lookup Table
          29   8314
8322: oJumpForward 8433
8324: oGetLocal 1
8326: oChoice 8333
8328: oEmit 31
8330: oReturn
8331: oJumpForward 8336
8333: Choice Lookup Table
          28   8328
8336: oJumpForward 8433
8338: oGetLocal 1
8340: oChoice 8373
8342: oReturn
8343: oJumpForward 8378
8345: oTypeSTop
8346: oPushResult
8347: oGetGlobal 10
8349: oPushResult
8350: equal_node
8351: oPop 2
8353: oChoice 8368
8355: oEmit 15
8357: oSetResult 1
8359: oPushResult
8360: oEmitInt
8361: oPop 1
8363: oEmit 36
8365: oReturn
8366: oJumpForward 8371
8368: Choice Lookup Table
           1   8355
8371: oJumpForward 8378
8373: Choice Lookup Table
          38   8345
          34   8342
8378: oJumpForward 8433
8380: oGetLocal 1
8382: oChoice 8387
8384: oReturn
8385: oJumpForward 8390
8387: Choice Lookup Table
          33   8384
8390: oJumpForward 8433
8392: oGetLocal 1
8394: oChoice 8415
8396: oReturn
8397: oJumpForward 8420
8399: oGetGlobal 9
8401: oPushResult
8402: oTypeSPush
8403: oPop 1
8405: oGetAddrLocal 2
8407: oPushResult
8408: oCall 8441
8410: oAssign
8411: oTypeSPop
8412: oReturn
8413: oJumpForward 8420
8415: Choice Lookup Table
          32   8399
          38   8396
8420: oJumpForward 8433
8422: Choice Lookup Table
          39   8392
          34   8380
          33   8338
          29   8324
          28   8310
8433: oError 14
8435: oJumpForward 8440
8437: Choice Lookup Table
           0   8307
8440: oReturn
8441: oLocalSpace 1
8443: oGetAddrLocal 1
8445: oPushResult
8446: oGetGlobal 14
8448: oPushResult
8449: oScopeAllocType
8450: oPop 1
8452: oAssign
8453: oTypeSNodeType
8454: oChoice 8522
8456: oEmit 17
8458: oGetLocal 1
8460: oPushResult
8461: oEmitInt
8462: oPop 1
8464: oEmit 22
8466: oEmit 29
8468: oGetGlobal 14
8470: oPushResult
8471: oSetResult 17
8473: oPushResult
8474: oNodeGetInt
8475: oPop 2
8477: oPushResult
8478: oEmitInt
8479: oPop 1
8481: oJumpForward 8531
8483: oEmit 17
8485: oGetLocal 1
8487: oPushResult
8488: oEmitInt
8489: oPop 1
8491: oEmit 15
8493: oSetResult 1
8495: oPushResult
8496: oEmitInt
8497: oPop 1
8499: oEmit 27
8501: oEmit 17
8503: oGetLocal 1
8505: oPushResult
8506: oSetResult 1
8508: oPushResult
8509: add
8510: oPop 2
8512: oPushResult
8513: oEmitInt
8514: oPop 1
8516: oEmit 22
8518: oEmit 27
8520: oJumpForward 8531
8522: Choice Lookup Table
          32   8483
          38   8456
          39   8456
8529: oError 14
8531: oTypeSPop
8532: oEmit 17
8534: oGetLocal 1
8536: oPushResult
8537: oEmitInt
8538: oPop 1
8540: oGetGlobal 14
8542: oPushResult
8543: oTypeSPush
8544: oPop 1
8546: oGetLocal 1
8548: oReturn
8549: oReturn
8550: oLocalSpace 0
8552: oEmit 61
8554: oSetResult 16
8556: oPushResult
8557: oEmitInt
8558: oPop 1
8560: oEmit 19
8562: oSetResult 8
8564: oPushResult
8565: oEmitInt
8566: oPop 1
8568: oEmit 22
8570: oEmit 28
8572: oEmit 19
8574: oSetResult 0
8576: oPushResult
8577: oEmitInt
8578: oPop 1
8580: oEmit 22
8582: oEmit 28
8584: oEmit 64
8586: oGetGlobal 19
8588: oPushResult
8589: oCall 11827
8591: oPop 1
8593: oEmit 63
8595: oSetResult 16
8597: oPushResult
8598: oEmitInt
8599: oPop 1
8601: oTypeSPop
8602: oTypeSPop
8603: oReturn
8604: oLocalSpace 0
8606: oEmit 61
8608: oSetResult 12
8610: oPushResult
8611: oEmitInt
8612: oPop 1
8614: oEmit 19
8616: oSetResult 8
8618: oPushResult
8619: oEmitInt
8620: oPop 1
8622: oEmit 22
8624: oEmit 26
8626: oEmit 19
8628: oSetResult 0
8630: oPushResult
8631: oEmitInt
8632: oPop 1
8634: oEmit 22
8636: oEmit 28
8638: oEmit 64
8640: oGetGlobal 20
8642: oPushResult
8643: oCall 11827
8645: oPop 1
8647: oEmit 63
8649: oSetResult 12
8651: oPushResult
8652: oEmitInt
8653: oPop 1
8655: oTypeSPop
8656: oTypeSPop
8657: oReturn
8658: oLocalSpace 1
8660: oEmit 61
8662: oSetResult 24
8664: oPushResult
8665: oEmitInt
8666: oPop 1
8668: oEmit 19
8670: oSetResult 8
8672: oPushResult
8673: oEmitInt
8674: oPop 1
8676: oEmit 22
8678: oEmit 28
8680: oEmit 19
8682: oSetResult 0
8684: oPushResult
8685: oEmitInt
8686: oPop 1
8688: oEmit 22
8690: oEmit 28
8692: oGetAddrLocal 1
8694: oPushResult
8695: oGetGlobal 6
8697: oPushResult
8698: oScopeAllocType
8699: oPop 1
8701: oAssign
8702: oEmit 19
8704: oSetResult 16
8706: oPushResult
8707: oEmitInt
8708: oPop 1
8710: oEmit 17
8712: oGetLocal 1
8714: oPushResult
8715: oEmitInt
8716: oPop 1
8718: oEmit 28
8720: oEmit 64
8722: oGetGlobal 21
8724: oPushResult
8725: oCall 11827
8727: oPop 1
8729: oEmit 3
8731: oGetLocal 1
8733: oPushResult
8734: oEmitInt
8735: oPop 1
8737: oEmit 63
8739: oSetResult 24
8741: oPushResult
8742: oEmitInt
8743: oPop 1
8745: oTypeSPop
8746: oGetGlobal 6
8748: oPushResult
8749: oTypeSPush
8750: oPop 1
8752: oReturn
8753: oLocalSpace 2
8755: oGetAddrLocal 2
8757: oPushResult
8758: oGetParam 1
8760: oPushResult
8761: oSetResult 26
8763: oPushResult
8764: oNodeGetString
8765: oPop 2
8767: oAssign
8768: oGetLocal 2
8770: oPushResult
8771: oSetResult 0
8773: oPushResult
8774: equal_string
8775: oPop 2
8777: oChoice 8814
8779: oGetAddrLocal 1
8781: oPushResult
8782: oGetParam 1
8784: oPushResult
8785: oSetResult 4
8787: oPushResult
8788: oNodeGetInt
8789: oPop 2
8791: oPushResult
8792: ID_STRING
8793: oPop 1
8795: oPushResult
8796: oStringAllocLit
8797: oPop 1
8799: oAssign
8800: oJumpForward 8820
8802: oGetAddrLocal 1
8804: oPushResult
8805: oGetLocal 2
8807: oPushResult
8808: oStringAllocLit
8809: oPop 1
8811: oAssign
8812: oJumpForward 8820
8814: Choice Lookup Table
           0   8802
           1   8779
8819: oEndChoice
8820: oEmit 79
8822: oGetParam 1
8824: oPushResult
8825: oCall 11827
8827: oPop 1
8829: oGetLocal 1
8831: oPushResult
8832: oEmitInt
8833: oPop 1
8835: oReturn
8836: oLocalSpace 10
8838: oGetParam 1
8840: oPushResult
8841: oSetResult 25
8843: oPushResult
8844: oNodeGetBoolean
8845: oPop 2
8847: oChoice 8874
8849: oGetParam 1
8851: oPushResult
8852: oSetResult 28
8854: oPushResult
8855: oNodeGetBoolean
8856: oPop 2
8858: oChoice 8869
8860: oGetParam 1
8862: oPushResult
8863: oCall 8753
8865: oPop 1
8867: oJumpForward 8872
8869: Choice Lookup Table
           0   8860
8872: oJumpForward 8877
8874: Choice Lookup Table
           1   8849
8877: oGetParam 1
8879: oPushResult
8880: oSetResult 28
8882: oPushResult
8883: oSetResult 1
8885: oPushResult
8886: oNodeSetBoolean
8887: oPop 3
8889: oGetAddrLocal 1
8891: oPushResult
8892: oGetParam 1
8894: oPushResult
8895: oSetResult 27
8897: oPushResult
8898: oNodeGetBoolean
8899: oPop 2
8901: oAssign
8902: oGetAddrLocal 4
8904: oPushResult
8905: oGetParam 1
8907: oPushResult
8908: oNodeType
8909: oPop 1
8911: oPushResult
8912: oSetResult 13
8914: oPushResult
8915: equal_node_type
8916: oPop 2
8918: oAssign
8919: oGetLocal 4
8921: oChoice 8948
8923: oGetAddrLocal 2
8925: oPushResult
8926: oGetParam 1
8928: oPushResult
8929: oSetResult 21
8931: oPushResult
8932: oNodeGet
8933: oPop 2
8935: oAssign
8936: oGetAddrLocal 3
8938: oPushResult
8939: oGetLocal 2
8941: oPushResult
8942: oScopeAllocType
8943: oPop 1
8945: oAssign
8946: oJumpForward 8951
8948: Choice Lookup Table
           1   8923
8951: oGetAddrLocal 5
8953: oPushResult
8954: oGetParam 1
8956: oPushResult
8957: oSetResult 23
8959: oPushResult
8960: oNodeGet
8961: oPop 2
8963: oAssign
8964: oGetAddrLocal 6
8966: oPushResult
8967: oGetLocal 5
8969: oPushResult
8970: oSetResult 17
8972: oPushResult
8973: oNodeGetInt
8974: oPop 2
8976: oAssign
8977: oGetLocal 1
8979: oChoice 9001
8981: oEmit 62
8983: oGetLocal 6
8985: oPushResult
8986: oEmitInt
8987: oPop 1
8989: oJumpForward 9007
8991: oEmit 61
8993: oGetLocal 6
8995: oPushResult
8996: oEmitInt
8997: oPop 1
8999: oJumpForward 9007
9001: Choice Lookup Table
           0   8991
           1   8981
9006: oEndChoice
9007: oGetParam 1
9009: oPushResult
9010: oCall 11275
9012: oPop 1
9014: oPushResult
9015: oSetResult 0
9017: oPushResult
9018: greater
9019: oPop 2
9021: oChoice 9054
9023: oEmit 19
9025: oSetResult 0
9027: oPushResult
9028: oEmitInt
9029: oPop 1
9031: oEmit 20
9033: oGetParam 1
9035: oPushResult
9036: oCall 11295
9038: oPop 1
9040: oPushResult
9041: oEmitInt
9042: oPop 1
9044: oSetResult 0
9046: oPushResult
9047: oEmitInt
9048: oPop 1
9050: oEmit 28
9052: oJumpForward 9057
9054: Choice Lookup Table
           1   9023
9057: oGetAddrLocal 7
9059: oPushResult
9060: oGetLocal 5
9062: oPushResult
9063: oSetResult 15
9065: oPushResult
9066: oNodeGetIter
9067: oPop 2
9069: oAssign
9070: oGetAddrLocal 8
9072: oPushResult
9073: oGetLocal 7
9075: oPushResult
9076: oNodeIterValue
9077: oPop 1
9079: oAssign
9080: oInputChoice 9277
9082: oGetLocal 8
9084: oPushResult
9085: oNodeNull
9086: oPop 1
9088: oChoice 9094
9090: oJumpForward 9273
9092: oJumpForward 9097
9094: Choice Lookup Table
           1   9090
9097: oGetAddrLocal 9
9099: oPushResult
9100: oGetLocal 8
9102: oPushResult
9103: oSetResult 22
9105: oPushResult
9106: oNodeGetInt
9107: oPop 2
9109: oAssign
9110: oEmit 19
9112: oGetLocal 9
9114: oPushResult
9115: oEmitInt
9116: oPop 1
9118: oGetLocal 8
9120: oPushResult
9121: oSetResult 21
9123: oPushResult
9124: oNodeGet
9125: oPop 2
9127: oPushResult
9128: oTypeSPush
9129: oPop 1
9131: oGetLocal 8
9133: oPushResult
9134: oSetResult 33
9136: oPushResult
9137: oNodeGetBoolean
9138: oPop 2
9140: oChoice 9226
9142: oSetResult 1
9144: oPushResult
9145: oCall 10103
9147: oPop 1
9149: oCall 11313
9151: oEmit 28
9153: oJumpForward 9232
9155: oCall 5176
9157: oCall 8289
9159: oTypeSNodeType
9160: oChoice 9200
9162: oEmit 26
9164: oJumpForward 9224
9166: oEmit 27
9168: oJumpForward 9224
9170: oError 16
9172: oJumpForward 9224
9174: oEmit 28
9176: oJumpForward 9224
9178: oGetAddrLocal 10
9180: oPushResult
9181: oTypeSTop
9182: oPushResult
9183: oSetResult 17
9185: oPushResult
9186: oNodeGetInt
9187: oPop 2
9189: oAssign
9190: oEmit 29
9192: oGetLocal 10
9194: oPushResult
9195: oEmitInt
9196: oPop 1
9198: oJumpForward 9224
9200: Choice Lookup Table
          39   9178
          37   9178
          35   9178
          34   9174
          33   9174
          27   9170
          32   9166
          29   9166
          30   9166
          40   9162
          28   9162
9223: oEndChoice
9224: oJumpForward 9232
9226: Choice Lookup Table
           0   9155
           1   9142
9231: oEndChoice
9232: oTypeSPop
9233: oGetAddrLocal 7
9235: oPushResult
9236: oNodeIterNext
9237: oPop 1
9239: oGetAddrLocal 8
9241: oPushResult
9242: oGetLocal 7
9244: oPushResult
9245: oNodeIterValue
9246: oPop 1
9248: oAssign
9249: oGetLocal 8
9251: oPushResult
9252: oNodeNull
9253: oPop 1
9255: oChoice 9263
9257: oJumpForward 9273
9259: oJumpForward 9269
9261: oJumpForward 9269
9263: Choice Lookup Table
           0   9261
           1   9257
9268: oEndChoice
9269: oInput 13
9271: oJumpBack 9082
9273: oInput 15
9275: oJumpForward 9280
9277: Choice Lookup Table
          14   9082
9280: oGetLocal 8
9282: oPushResult
9283: oNodeNull
9284: oPop 1
9286: oChoice 9292
9288: oError 15
9290: oJumpForward 9295
9292: Choice Lookup Table
           0   9288
9295: oGetLocal 4
9297: oChoice 9326
9299: oEmit 19
9301: oGetParam 1
9303: oPushResult
9304: oSetResult 31
9306: oPushResult
9307: oNodeGetInt
9308: oPop 2
9310: oPushResult
9311: oEmitInt
9312: oPop 1
9314: oEmit 17
9316: oGetLocal 3
9318: oPushResult
9319: oEmitInt
9320: oPop 1
9322: oEmit 28
9324: oJumpForward 9329
9326: Choice Lookup Table
           1   9299
9329: oGetLocal 1
9331: oChoice 9355
9333: oEmit 65
9335: oGetParam 1
9337: oPushResult
9338: oCall 11827
9340: oPop 1
9342: oJumpForward 9361
9344: oEmit 64
9346: oGetParam 1
9348: oPushResult
9349: oCall 11827
9351: oPop 1
9353: oJumpForward 9361
9355: Choice Lookup Table
           0   9344
           1   9333
9360: oEndChoice
9361: oGetLocal 4
9363: oChoice 9444
9365: oGetLocal 2
9367: oPushResult
9368: oTypeSPush
9369: oPop 1
9371: oTypeSNodeType
9372: oChoice 9418
9374: oEmit 3
9376: oGetLocal 3
9378: oPushResult
9379: oEmitInt
9380: oPop 1
9382: oJumpForward 9442
9384: oEmit 4
9386: oGetLocal 3
9388: oPushResult
9389: oEmitInt
9390: oPop 1
9392: oJumpForward 9442
9394: oError 16
9396: oJumpForward 9442
9398: oEmit 5
9400: oGetLocal 3
9402: oPushResult
9403: oEmitInt
9404: oPop 1
9406: oJumpForward 9442
9408: oEmit 17
9410: oGetLocal 3
9412: oPushResult
9413: oEmitInt
9414: oPop 1
9416: oJumpForward 9442
9418: Choice Lookup Table
          39   9408
          37   9408
          35   9408
          34   9398
          33   9398
          27   9394
          32   9384
          29   9384
          30   9384
          40   9374
          28   9374
9441: oEndChoice
9442: oJumpForward 9447
9444: Choice Lookup Table
           1   9365
9447: oEmit 63
9449: oGetLocal 6
9451: oPushResult
9452: oEmitInt
9453: oPop 1
9455: oReturn
9456: oLocalSpace 0
9458: oGetParam 1
9460: oPushResult
9461: oGetGlobal 15
9463: oPushResult
9464: oNodeEqual
9465: oPop 2
9467: oChoice 9507
9469: oInput 14
9471: oCall 5176
9473: oTypeSNodeType
9474: oChoice 9482
9476: oJumpForward 9495
9478: oEmit 30
9480: oJumpForward 9495
9482: Choice Lookup Table
          32   9478
          29   9478
          30   9478
          40   9476
          28   9476
9493: oError 14
9495: oTypeSPop
9496: oGetGlobal 6
9498: oPushResult
9499: oTypeSPush
9500: oPop 1
9502: oInput 15
9504: oReturn
9505: oJumpForward 9510
9507: Choice Lookup Table
           1   9469
9510: oGetParam 1
9512: oPushResult
9513: oGetGlobal 16
9515: oPushResult
9516: oNodeEqual
9517: oPop 2
9519: oChoice 9553
9521: oInput 14
9523: oCall 5176
9525: oTypeSNodeType
9526: oChoice 9534
9528: oEmit 31
9530: oJumpForward 9541
9532: oJumpForward 9541
9534: Choice Lookup Table
          29   9532
          28   9528
9539: oError 14
9541: oTypeSPop
9542: oGetGlobal 9
9544: oPushResult
9545: oTypeSPush
9546: oPop 1
9548: oInput 15
9550: oReturn
9551: oJumpForward 9556
9553: Choice Lookup Table
           1   9521
9556: oGetParam 1
9558: oPushResult
9559: oGetGlobal 17
9561: oPushResult
9562: oNodeEqual
9563: oPop 2
9565: oChoice 9605
9567: oInput 14
9569: oCall 5176
9571: oTypeSNodeType
9572: oChoice 9593
9574: oTypeSTop
9575: oPushResult
9576: oSetResult 43
9578: oPushResult
9579: oNodeGetBoolean
9580: oPop 2
9582: oChoice 9588
9584: oError 28
9586: oJumpForward 9591
9588: Choice Lookup Table
           1   9584
9591: oJumpForward 9598
9593: Choice Lookup Table
          40   9574
9596: oError 14
9598: oEmit 33
9600: oInput 15
9602: oReturn
9603: oJumpForward 9608
9605: Choice Lookup Table
           1   9567
9608: oGetParam 1
9610: oPushResult
9611: oGetGlobal 18
9613: oPushResult
9614: oNodeEqual
9615: oPop 2
9617: oChoice 9657
9619: oInput 14
9621: oCall 5176
9623: oTypeSNodeType
9624: oChoice 9645
9626: oTypeSTop
9627: oPushResult
9628: oSetResult 43
9630: oPushResult
9631: oNodeGetBoolean
9632: oPop 2
9634: oChoice 9640
9636: oError 28
9638: oJumpForward 9643
9640: Choice Lookup Table
           1   9636
9643: oJumpForward 9650
9645: Choice Lookup Table
          40   9626
9648: oError 14
9650: oEmit 32
9652: oInput 15
9654: oReturn
9655: oJumpForward 9660
9657: Choice Lookup Table
           1   9619
9660: oError 16
9662: oReturn
9663: oLocalSpace 0
9665: oInputChoice 9728
9667: oCall 11126
9669: oJumpForward 9759
9671: oCall 11133
9673: oJumpForward 9759
9675: oCall 11257
9677: oJumpForward 9759
9679: oCall 11260
9681: oJumpForward 9759
9683: oCall 10341
9685: oJumpForward 9759
9687: oCall 10664
9689: oJumpForward 9759
9691: oCall 10407
9693: oJumpForward 9759
9695: oCall 10584
9697: oJumpForward 9759
9699: oCall 10749
9701: oJumpForward 9759
9703: oCall 10717
9705: oJumpForward 9759
9707: oCall 11103
9709: oJumpForward 9759
9711: oCall 9760
9713: oJumpForward 9759
9715: oCall 10781
9717: oJumpForward 9759
9719: oCall 11051
9721: oJumpForward 9759
9723: oChangeIntLitToLabelIdent
9724: oCall 9760
9726: oJumpForward 9759
9728: Choice Lookup Table
           1   9723
          55   9719
          53   9715
           0   9711
          35   9707
          51   9703
          52   9699
          49   9695
          44   9691
          48   9687
          41   9683
          68   9679
          67   9675
          66   9671
          65   9667
9759: oReturn
9760: oLocalSpace 1
9762: oGetAddrLocal 1
9764: oPushResult
9765: oScopeFindRequire
9766: oAssign
9767: oGetAddrLocal 1
9769: oPushResult
9770: oCall 543
9772: oPop 1
9774: oGetLocal 1
9776: oPushResult
9777: oNodeType
9778: oPop 1
9780: oChoice 9820
9782: oGetLocal 1
9784: oPushResult
9785: oCall 9836
9787: oPop 1
9789: oCall 9663
9791: oJumpForward 9835
9793: oGetLocal 1
9795: oPushResult
9796: oCall 8836
9798: oPop 1
9800: oJumpForward 9835
9802: oGetLocal 1
9804: oPushResult
9805: oCall 9886
9807: oPop 1
9809: oJumpForward 9835
9811: oGetLocal 1
9813: oPushResult
9814: oCall 9976
9816: oPop 1
9818: oJumpForward 9835
9820: Choice Lookup Table
          13   9811
          23   9802
          21   9802
          20   9802
          12   9793
          25   9782
9833: oError 0
9835: oReturn
9836: oLocalSpace 0
9838: oGetParam 1
9840: oPushResult
9841: oSetResult 34
9843: oPushResult
9844: oNodeGetBoolean
9845: oPop 2
9847: oChoice 9853
9849: oError 21
9851: oJumpForward 9856
9853: Choice Lookup Table
           1   9849
9856: oEmit 77
9858: oGetParam 1
9860: oPushResult
9861: oSetResult 22
9863: oPushResult
9864: oNodeGetLabel
9865: oPop 2
9867: oPushResult
9868: oEmitLabel
9869: oPop 1
9871: oGetParam 1
9873: oPushResult
9874: oSetResult 34
9876: oPushResult
9877: oSetResult 1
9879: oPushResult
9880: oNodeSetBoolean
9881: oPop 3
9883: oInput 12
9885: oReturn
9886: oLocalSpace 0
9888: oGetParam 1
9890: oPushResult
9891: oSetResult 1
9893: oPushResult
9894: oCall 10151
9896: oPop 2
9898: oInput 4
9900: oCall 5176
9902: oCall 8289
9904: oCall 9907
9906: oReturn
9907: oLocalSpace 1
9909: oTypeSNodeType
9910: oChoice 9950
9912: oEmit 26
9914: oJumpForward 9974
9916: oEmit 27
9918: oJumpForward 9974
9920: oError 16
9922: oJumpForward 9974
9924: oEmit 28
9926: oJumpForward 9974
9928: oGetAddrLocal 1
9930: oPushResult
9931: oTypeSTop
9932: oPushResult
9933: oSetResult 17
9935: oPushResult
9936: oNodeGetInt
9937: oPop 2
9939: oAssign
9940: oEmit 29
9942: oGetLocal 1
9944: oPushResult
9945: oEmitInt
9946: oPop 1
9948: oJumpForward 9974
9950: Choice Lookup Table
          39   9928
          37   9928
          35   9928
          34   9924
          33   9924
          27   9920
          32   9916
          29   9916
          30   9916
          40   9912
          28   9912
9973: oEndChoice
9974: oTypeSPop
9975: oReturn
9976: oLocalSpace 1
9978: oGetParam 1
9980: oPushResult
9981: oSetResult 6
9983: oPushResult
9984: oNodeGet
9985: oPop 2
9987: oPushResult
9988: oScopeCurrent
9989: oPushResult
9990: oNodeEqual
9991: oPop 2
9993: oChoice 9999
9995: oError 20
9997: oJumpForward 10002
9999: Choice Lookup Table
           0   9995
10002: oEmit 8
10004: oGetParam 1
10006: oPushResult
10007: oSetResult 31
10009: oPushResult
10010: oNodeGetInt
10011: oPop 2
10013: oPushResult
10014: oEmitInt
10015: oPop 1
10017: oGetParam 1
10019: oPushResult
10020: oSetResult 21
10022: oPushResult
10023: oNodeGet
10024: oPop 2
10026: oPushResult
10027: oTypeSPush
10028: oPop 1
10030: oInput 4
10032: oCall 5176
10034: oCall 8289
10036: oTypeSNodeType
10037: oChoice 10077
10039: oEmit 26
10041: oJumpForward 10101
10043: oEmit 27
10045: oJumpForward 10101
10047: oError 16
10049: oJumpForward 10101
10051: oEmit 28
10053: oJumpForward 10101
10055: oGetAddrLocal 1
10057: oPushResult
10058: oTypeSTop
10059: oPushResult
10060: oSetResult 17
10062: oPushResult
10063: oNodeGetInt
10064: oPop 2
10066: oAssign
10067: oEmit 29
10069: oGetLocal 1
10071: oPushResult
10072: oEmitInt
10073: oPop 1
10075: oJumpForward 10101
10077: Choice Lookup Table
          39   10055
          37   10055
          35   10055
          34   10051
          33   10051
          27   10047
          32   10043
          29   10043
          30   10043
          40   10039
          28   10039
10100: oEndChoice
10101: oTypeSPop
10102: oReturn
10103: oLocalSpace 1
10105: oInput 0
10107: oGetAddrLocal 1
10109: oPushResult
10110: oScopeFindRequire
10111: oAssign
10112: oGetAddrLocal 1
10114: oPushResult
10115: oCall 543
10117: oPop 1
10119: oGetLocal 1
10121: oPushResult
10122: oNodeType
10123: oPop 1
10125: oChoice 10129
10127: oJumpForward 10140
10129: Choice Lookup Table
          24   10127
          23   10127
          21   10127
          20   10127
10138: oError 4
10140: oGetLocal 1
10142: oPushResult
10143: oGetParam 1
10145: oPushResult
10146: oCall 10151
10148: oPop 2
10150: oReturn
10151: oLocalSpace 0
10153: oGetParam 2
10155: oPushResult
10156: oNodeType
10157: oPop 1
10159: oChoice 10241
10161: oEmit 16
10163: oGetParam 2
10165: oPushResult
10166: oCall 11827
10168: oPop 1
10170: oJumpForward 10252
10172: oEmit 17
10174: oGetParam 2
10176: oPushResult
10177: oCall 11827
10179: oPop 1
10181: oJumpForward 10252
10183: oGetParam 2
10185: oPushResult
10186: oSetResult 33
10188: oPushResult
10189: oNodeGetBoolean
10190: oPop 2
10192: oChoice 10205
10194: oEmit 8
10196: oGetParam 2
10198: oPushResult
10199: oCall 11827
10201: oPop 1
10203: oJumpForward 10217
10205: Choice Lookup Table
           1   10194
10208: oEmit 18
10210: oGetParam 2
10212: oPushResult
10213: oCall 11827
10215: oPop 1
10217: oJumpForward 10252
10219: oGetParam 1
10221: oChoice 10234
10223: oEmit 16
10225: oGetParam 2
10227: oPushResult
10228: oCall 11827
10230: oPop 1
10232: oJumpForward 10239
10234: Choice Lookup Table
           0   10223
10237: oError 4
10239: oJumpForward 10252
10241: Choice Lookup Table
          24   10219
          23   10183
          21   10172
          20   10161
10250: oError 4
10252: oGetParam 2
10254: oPushResult
10255: oSetResult 21
10257: oPushResult
10258: oNodeGet
10259: oPop 2
10261: oPushResult
10262: oTypeSPush
10263: oPop 1
10265: oTypeSNodeType
10266: oChoice 10281
10268: oInputChoice 10276
10270: oEmit 25
10272: oCall 7867
10274: oJumpForward 10279
10276: Choice Lookup Table
          16   10270
10279: oJumpForward 10284
10281: Choice Lookup Table
          33   10268
10284: oCall 7672
10286: oReturn
10287: oLocalSpace 0
10289: oGetParam 1
10291: oPushResult
10292: oSetResult 1
10294: oPushResult
10295: oCall 10151
10297: oPop 2
10299: oCall 11371
10301: oGetParam 1
10303: oPushResult
10304: oCall 6861
10306: oPop 1
10308: oTypeSPop
10309: oEmit 32
10311: oEmit 26
10313: oReturn
10314: oLocalSpace 0
10316: oGetParam 1
10318: oPushResult
10319: oSetResult 1
10321: oPushResult
10322: oCall 10151
10324: oPop 2
10326: oCall 11371
10328: oGetParam 1
10330: oPushResult
10331: oCall 6861
10333: oPop 1
10335: oTypeSPop
10336: oEmit 33
10338: oEmit 26
10340: oReturn
10341: oLocalSpace 2
10343: oGetAddrLocal 1
10345: oPushResult
10346: oSetResult 0
10348: oAssign
10349: oGetAddrLocal 1
10351: oPushResult
10352: oCall 5199
10354: oPop 1
10356: oInput 42
10358: oCall 9663
10360: oInputChoice 10395
10362: oGetAddrLocal 2
10364: oPushResult
10365: oLabelNew
10366: oAssign
10367: oEmit 68
10369: oGetLocal 2
10371: oPushResult
10372: oEmitLabel
10373: oPop 1
10375: oEmit 77
10377: oGetLocal 1
10379: oPushResult
10380: oEmitLabel
10381: oPop 1
10383: oCall 9663
10385: oEmit 77
10387: oGetLocal 2
10389: oPushResult
10390: oEmitLabel
10391: oPop 1
10393: oJumpForward 10406
10395: Choice Lookup Table
          43   10362
10398: oEmit 77
10400: oGetLocal 1
10402: oPushResult
10403: oEmitLabel
10404: oPop 1
10406: oReturn
10407: oLocalSpace 4
10409: oInput 0
10411: oGetAddrLocal 1
10413: oPushResult
10414: oScopeFindRequire
10415: oAssign
10416: oGetLocal 1
10418: oPushResult
10419: oSetResult 1
10421: oPushResult
10422: oCall 10151
10424: oPop 2
10426: oCall 11371
10428: oInput 4
10430: oCall 5176
10432: oCall 11371
10434: oEmit 26
10436: oGetAddrLocal 2
10438: oPushResult
10439: oLabelNew
10440: oAssign
10441: oGetAddrLocal 3
10443: oPushResult
10444: oLabelNew
10445: oAssign
10446: oEmit 68
10448: oGetLocal 3
10450: oPushResult
10451: oEmitLabel
10452: oPop 1
10454: oGetAddrLocal 4
10456: oPushResult
10457: oLabelNew
10458: oAssign
10459: oEmit 77
10461: oGetLocal 4
10463: oPushResult
10464: oEmitLabel
10465: oPop 1
10467: oInputChoice 10547
10469: oGetLocal 1
10471: oPushResult
10472: oCall 10287
10474: oPop 1
10476: oEmit 77
10478: oGetLocal 3
10480: oPushResult
10481: oEmitLabel
10482: oPop 1
10484: oGetLocal 1
10486: oPushResult
10487: oCall 6861
10489: oPop 1
10491: oTypeSPop
10492: oCall 5176
10494: oCall 11371
10496: oEmit 51
10498: oEmit 69
10500: oGetLocal 2
10502: oPushResult
10503: oEmitLabel
10504: oPop 1
10506: oJumpForward 10553
10508: oGetLocal 1
10510: oPushResult
10511: oCall 10314
10513: oPop 1
10515: oEmit 77
10517: oGetLocal 3
10519: oPushResult
10520: oEmitLabel
10521: oPop 1
10523: oGetLocal 1
10525: oPushResult
10526: oCall 6861
10528: oPop 1
10530: oTypeSPop
10531: oCall 5176
10533: oCall 11371
10535: oEmit 52
10537: oEmit 69
10539: oGetLocal 2
10541: oPushResult
10542: oEmitLabel
10543: oPop 1
10545: oJumpForward 10553
10547: Choice Lookup Table
          46   10508
          45   10469
10552: oEndChoice
10553: oGetLocal 4
10555: oPushResult
10556: oGetLocal 2
10558: oPushResult
10559: oLoopPush
10560: oPop 2
10562: oInput 47
10564: oCall 9663
10566: oEmit 68
10568: oGetLocal 4
10570: oPushResult
10571: oEmitLabel
10572: oPop 1
10574: oEmit 77
10576: oGetLocal 2
10578: oPushResult
10579: oEmitLabel
10580: oPop 1
10582: oLoopPop
10583: oReturn
10584: oLocalSpace 3
10586: oGetAddrLocal 1
10588: oPushResult
10589: oLabelNew
10590: oAssign
10591: oEmit 77
10593: oGetLocal 1
10595: oPushResult
10596: oEmitLabel
10597: oPop 1
10599: oGetAddrLocal 2
10601: oPushResult
10602: oLabelNew
10603: oAssign
10604: oGetLocal 1
10606: oPushResult
10607: oGetLocal 2
10609: oPushResult
10610: oLoopPush
10611: oPop 2
10613: oCall 9663
10615: oInputChoice 10646
10617: oCall 9663
10619: oJumpForward 10652
10621: oGetAddrLocal 3
10623: oPushResult
10624: oCall 5199
10626: oPop 1
10628: oEmit 78
10630: oGetLocal 3
10632: oPushResult
10633: oEmitLabel
10634: oPop 1
10636: oGetLocal 1
10638: oPushResult
10639: oEmitLabel
10640: oPop 1
10642: oJumpForward 10654
10644: oJumpForward 10652
10646: Choice Lookup Table
          50   10621
           5   10617
10651: oEndChoice
10652: oJumpBack 10615
10654: oEmit 77
10656: oGetLocal 2
10658: oPushResult
10659: oEmitLabel
10660: oPop 1
10662: oLoopPop
10663: oReturn
10664: oLocalSpace 2
10666: oGetAddrLocal 1
10668: oPushResult
10669: oLabelNew
10670: oAssign
10671: oEmit 77
10673: oGetLocal 1
10675: oPushResult
10676: oEmitLabel
10677: oPop 1
10679: oGetAddrLocal 2
10681: oPushResult
10682: oCall 5199
10684: oPop 1
10686: oGetLocal 1
10688: oPushResult
10689: oGetLocal 2
10691: oPushResult
10692: oLoopPush
10693: oPop 2
10695: oInput 47
10697: oCall 9663
10699: oEmit 68
10701: oGetLocal 1
10703: oPushResult
10704: oEmitLabel
10705: oPop 1
10707: oEmit 77
10709: oGetLocal 2
10711: oPushResult
10712: oEmitLabel
10713: oPop 1
10715: oLoopPop
10716: oReturn
10717: oLocalSpace 0
10719: oLoopContinueLabel
10720: oPushResult
10721: oSetResult 0
10723: oPushResult
10724: equal_label
10725: oPop 2
10727: oChoice 10742
10729: oError 18
10731: oJumpForward 10748
10733: oEmit 68
10735: oLoopContinueLabel
10736: oPushResult
10737: oEmitLabel
10738: oPop 1
10740: oJumpForward 10748
10742: Choice Lookup Table
           0   10733
           1   10729
10747: oEndChoice
10748: oReturn
10749: oLocalSpace 0
10751: oLoopBreakLabel
10752: oPushResult
10753: oSetResult 0
10755: oPushResult
10756: equal_label
10757: oPop 2
10759: oChoice 10774
10761: oError 18
10763: oJumpForward 10780
10765: oEmit 68
10767: oLoopBreakLabel
10768: oPushResult
10769: oEmitLabel
10770: oPop 1
10772: oJumpForward 10780
10774: Choice Lookup Table
           0   10765
           1   10761
10779: oEndChoice
10780: oReturn
10781: oLocalSpace 8
10783: oGetAddrLocal 1
10785: oPushResult
10786: oCodeNew
10787: oAssign
10788: oGetAddrLocal 2
10790: oPushResult
10791: oLabelNew
10792: oAssign
10793: oGetAddrLocal 3
10795: oPushResult
10796: oLabelNew
10797: oAssign
10798: oGetAddrLocal 4
10800: oPushResult
10801: oGetLocal 3
10803: oAssign
10804: oCall 5176
10806: oGetAddrLocal 5
10808: oPushResult
10809: oTypeSTop
10810: oAssign
10811: oTypeSNodeType
10812: oChoice 10838
10814: oEmit 71
10816: oGetLocal 2
10818: oPushResult
10819: oEmitLabel
10820: oPop 1
10822: oJumpForward 10855
10824: oEmit 72
10826: oGetLocal 2
10828: oPushResult
10829: oEmitLabel
10830: oPop 1
10832: oJumpForward 10855
10834: oError 16
10836: oJumpForward 10855
10838: Choice Lookup Table
          38   10834
          39   10834
          40   10824
          28   10824
          32   10814
          29   10814
          30   10814
10853: oError 17
10855: oInput 40
10857: oInputChoice 10904
10859: oGetAddrLocal 4
10861: oPushResult
10862: oLabelNew
10863: oAssign
10864: oEmit 77
10866: oGetLocal 4
10868: oPushResult
10869: oEmitLabel
10870: oPop 1
10872: oInputChoice 10878
10874: oJumpForward 10896
10876: oJumpForward 10894
10878: Choice Lookup Table
          36   10874
10881: oCall 9663
10883: oInputChoice 10887
10885: oJumpForward 10894
10887: Choice Lookup Table
           5   10885
10890: oInput 36
10892: oJumpForward 10896
10894: oJumpBack 10872
10896: oJumpForward 11020
10898: oJumpForward 11018
10900: oJumpForward 11020
10902: oJumpForward 11018
10904: Choice Lookup Table
          36   10900
          43   10859
          54   10859
10911: oGetAddrLocal 6
10913: oPushResult
10914: oLabelNew
10915: oAssign
10916: oGetLocal 1
10918: oPushResult
10919: oCodePush
10920: oPop 1
10922: oCall 5103
10924: oGetAddrLocal 7
10926: oPushResult
10927: oValueTop
10928: oAssign
10929: oValuePop
10930: oInputChoice 10962
10932: oCall 5103
10934: oGetAddrLocal 8
10936: oPushResult
10937: oValueTop
10938: oAssign
10939: oValuePop
10940: oEmit 75
10942: oGetLocal 7
10944: oPushResult
10945: oEmitInt
10946: oPop 1
10948: oGetLocal 8
10950: oPushResult
10951: oEmitInt
10952: oPop 1
10954: oGetLocal 6
10956: oPushResult
10957: oEmitLabel
10958: oPop 1
10960: oJumpForward 10979
10962: Choice Lookup Table
          21   10932
10965: oEmit 74
10967: oGetLocal 7
10969: oPushResult
10970: oEmitInt
10971: oPop 1
10973: oGetLocal 6
10975: oPushResult
10976: oEmitLabel
10977: oPop 1
10979: oInputChoice 10983
10981: oJumpForward 10988
10983: Choice Lookup Table
          13   10981
10986: oJumpForward 10990
10988: oJumpBack 10922
10990: oCodePop
10991: oInput 12
10993: oEmit 77
10995: oGetLocal 6
10997: oPushResult
10998: oEmitLabel
10999: oPop 1
11001: oCall 9663
11003: oEmit 68
11005: oGetLocal 3
11007: oPushResult
11008: oEmitLabel
11009: oPop 1
11011: oInputChoice 11015
11013: oJumpForward 11018
11015: Choice Lookup Table
           5   11013
11018: oJumpBack 10857
11020: oEmit 77
11022: oGetLocal 2
11024: oPushResult
11025: oEmitLabel
11026: oPop 1
11028: oGetLocal 1
11030: oPushResult
11031: oEmitCode
11032: oPop 1
11034: oEmit 76
11036: oGetLocal 4
11038: oPushResult
11039: oEmitLabel
11040: oPop 1
11042: oEmit 77
11044: oGetLocal 3
11046: oPushResult
11047: oEmitLabel
11048: oPop 1
11050: oReturn
11051: oLocalSpace 1
11053: oInputChoice 11060
11055: oJumpForward 11066
11057: oChangeIntLitToLabelIdent
11058: oJumpForward 11066
11060: Choice Lookup Table
           1   11057
           0   11055
11065: oEndChoice
11066: oGetAddrLocal 1
11068: oPushResult
11069: oScopeCurrent
11070: oPushResult
11071: oScopeFindRequireInScope
11072: oPop 1
11074: oAssign
11075: oGetLocal 1
11077: oPushResult
11078: oSetResult 28
11080: oPushResult
11081: oSetResult 1
11083: oPushResult
11084: oNodeSetBoolean
11085: oPop 3
11087: oEmit 68
11089: oGetLocal 1
11091: oPushResult
11092: oSetResult 22
11094: oPushResult
11095: oNodeGetLabel
11096: oPop 2
11098: oPushResult
11099: oEmitLabel
11100: oPop 1
11102: oReturn
11103: oLocalSpace 0
11105: oCall 9663
11107: oInputChoice 11117
11109: oCall 9663
11111: oJumpForward 11123
11113: oJumpForward 11125
11115: oJumpForward 11123
11117: Choice Lookup Table
          36   11113
           5   11109
11122: oEndChoice
11123: oJumpBack 11107
11125: oReturn
11126: oLocalSpace 0
11128: oCall 11133
11130: oEmit 87
11132: oReturn
11133: oLocalSpace 0
11135: oInputChoice 11253
11137: oCall 5176
11139: oTypeSNodeType
11140: oChoice 11211
11142: oEmit 80
11144: oJumpForward 11234
11146: oEmit 81
11148: oJumpForward 11234
11150: oEmit 30
11152: oEmit 80
11154: oJumpForward 11234
11156: oEmit 82
11158: oJumpForward 11234
11160: oEmit 83
11162: oJumpForward 11234
11164: oError 16
11166: oJumpForward 11234
11168: oEmit 16
11170: oTypeSTop
11171: oPushResult
11172: oSetResult 42
11174: oPushResult
11175: oNodeGetInt
11176: oPop 2
11178: oPushResult
11179: oEmitInt
11180: oPop 1
11182: oEmit 86
11184: oJumpForward 11234
11186: oTypeSTop
11187: oPushResult
11188: oGetGlobal 10
11190: oPushResult
11191: equal_node
11192: oPop 2
11194: oChoice 11200
11196: oEmit 84
11198: oJumpForward 11205
11200: Choice Lookup Table
           1   11196
11203: oEmit 85
11205: oJumpForward 11234
11207: oEmit 85
11209: oJumpForward 11234
11211: Choice Lookup Table
          34   11207
          33   11186
          40   11168
          27   11164
          38   11160
          39   11160
          32   11156
          29   11150
          30   11146
          28   11142
11232: oError 17
11234: oTypeSPop
11235: oInputChoice 11243
11237: oJumpForward 11251
11239: oJumpForward 11249
11241: oJumpForward 11249
11243: Choice Lookup Table
          13   11241
          15   11237
11248: oEndChoice
11249: oJumpBack 11137
11251: oJumpForward 11256
11253: Choice Lookup Table
          14   11137
11256: oReturn
11257: oLocalSpace 0
11259: oReturn
11260: oLocalSpace 0
11262: oReturn
11263: oLocalSpace 0
11265: oScopeCurrent
11266: oPushResult
11267: oSetResult 14
11269: oPushResult
11270: oNodeGetInt
11271: oPop 2
11273: oReturn
11274: oReturn
11275: oLocalSpace 0
11277: oGetParam 1
11279: oPushResult
11280: oSetResult 20
11282: oPushResult
11283: oNodeGet
11284: oPop 2
11286: oPushResult
11287: oSetResult 14
11289: oPushResult
11290: oNodeGetInt
11291: oPop 2
11293: oReturn
11294: oReturn
11295: oLocalSpace 0
11297: oCall 11263
11299: oPushResult
11300: oGetParam 1
11302: oPushResult
11303: oCall 11275
11305: oPop 1
11307: oPushResult
11308: subtract
11309: oPop 2
11311: oReturn
11312: oReturn
11313: oLocalSpace 1
11315: oGetAddrLocal 1
11317: oPushResult
11318: oTypeSNodeType
11319: oAssign
11320: oTypeSPop
11321: oGetLocal 1
11323: oPushResult
11324: oTypeSNodeType
11325: oPushResult
11326: equal_node_type
11327: oPop 2
11329: oChoice 11367
11331: oTypeSNodeType
11332: oChoice 11358
11334: oGetLocal 1
11336: oChoice 11341
11338: oReturn
11339: oJumpForward 11344
11341: Choice Lookup Table
          34   11338
11344: oJumpForward 11363
11346: oGetLocal 1
11348: oChoice 11353
11350: oReturn
11351: oJumpForward 11356
11353: Choice Lookup Table
          33   11350
11356: oJumpForward 11363
11358: Choice Lookup Table
          34   11346
          33   11334
11363: oError 14
11365: oJumpForward 11370
11367: Choice Lookup Table
           0   11331
11370: oReturn
11371: oLocalSpace 0
11373: oTypeSNodeType
11374: oChoice 11378
11376: oJumpForward 11383
11378: Choice Lookup Table
          28   11376
11381: oError 7
11383: oTypeSPop
11384: oReturn
11385: oLocalSpace 0
11387: oTypeSNodeType
11388: oChoice 11392
11390: oJumpForward 11397
11392: Choice Lookup Table
          28   11390
11395: oError 7
11397: oReturn
11398: oLocalSpace 0
11400: oTypeSNodeType
11401: oChoice 11409
11403: oJumpForward 11416
11405: oEmit 30
11407: oJumpForward 11416
11409: Choice Lookup Table
          29   11405
          28   11403
11414: oError 7
11416: oTypeSPop
11417: oReturn
11418: oLocalSpace 0
11420: oTypeSNodeType
11421: oChoice 11436
11423: oJumpForward 11443
11425: oEmit 30
11427: oTypeSPop
11428: oGetGlobal 6
11430: oPushResult
11431: oTypeSPush
11432: oPop 1
11434: oJumpForward 11443
11436: Choice Lookup Table
          29   11425
          28   11423
11441: oError 7
11443: oReturn
11444: oLocalSpace 0
11446: oTypeSNodeType
11447: oChoice 11460
11449: oEmit 30
11451: oTypeSPop
11452: oGetGlobal 6
11454: oPushResult
11455: oTypeSPush
11456: oPop 1
11458: oJumpForward 11463
11460: Choice Lookup Table
          29   11449
11463: oReturn
11464: oLocalSpace 0
11466: oTypeSNodeType
11467: oChoice 11471
11469: oJumpForward 11476
11471: Choice Lookup Table
          30   11469
11474: oError 8
11476: oTypeSPop
11477: oReturn
11478: oLocalSpace 0
11480: oTypeSNodeType
11481: oChoice 11485
11483: oJumpForward 11490
11485: Choice Lookup Table
          30   11483
11488: oError 8
11490: oReturn
11491: oLocalSpace 1
11493: oGetAddrLocal 1
11495: oPushResult
11496: oGetParam 2
11498: oPushResult
11499: oNodeNew
11500: oPop 1
11502: oAssign
11503: oGetLocal 1
11505: oPushResult
11506: oSetResult 17
11508: oPushResult
11509: oGetParam 1
11511: oPushResult
11512: oNodeSetInt
11513: oPop 3
11515: oGetLocal 1
11517: oPushResult
11518: oTypeAdd
11519: oPop 1
11521: oGetLocal 1
11523: oReturn
11524: oReturn
11525: oLocalSpace 1
11527: oGetAddrLocal 1
11529: oPushResult
11530: oGetParam 2
11532: oPushResult
11533: oNodeNew
11534: oPop 1
11536: oAssign
11537: oGetLocal 1
11539: oPushResult
11540: oSetResult 4
11542: oPushResult
11543: oGetParam 1
11545: oPushResult
11546: oNodeSetInt
11547: oPop 3
11549: oGetLocal 1
11551: oReturn
11552: oReturn
11553: oLocalSpace 1
11555: oGetAddrLocal 1
11557: oPushResult
11558: oGetParam 1
11560: oPushResult
11561: oSetResult 35
11563: oPushResult
11564: oNodeGet
11565: oPop 2
11567: oAssign
11568: oGetLocal 1
11570: oPushResult
11571: oNodeNull
11572: oPop 1
11574: oChoice 11630
11576: oGetAddrLocal 1
11578: oPushResult
11579: oSetResult 33
11581: oPushResult
11582: oNodeNew
11583: oPop 1
11585: oAssign
11586: oGetLocal 1
11588: oPushResult
11589: oSetResult 36
11591: oPushResult
11592: oGetParam 1
11594: oPushResult
11595: oNodeSet
11596: oPop 3
11598: oGetLocal 1
11600: oPushResult
11601: oSetResult 17
11603: oPushResult
11604: oSetResult 8
11606: oPushResult
11607: oNodeSetInt
11608: oPop 3
11610: oGetLocal 1
11612: oPushResult
11613: oTypeAdd
11614: oPop 1
11616: oGetParam 1
11618: oPushResult
11619: oSetResult 35
11621: oPushResult
11622: oGetLocal 1
11624: oPushResult
11625: oNodeSet
11626: oPop 3
11628: oJumpForward 11633
11630: Choice Lookup Table
           1   11576
11633: oGetLocal 1
11635: oReturn
11636: oReturn
11637: oLocalSpace 2
11639: oGetParam 1
11641: oPushResult
11642: oNodeType
11643: oPop 1
11645: oChoice 11715
11647: oMININT
11648: oReturn
11649: oJumpForward 11731
11651: oSetResult 0
11653: oReturn
11654: oJumpForward 11731
11656: oSetResult 0
11658: oReturn
11659: oJumpForward 11731
11661: oGetAddrLocal 1
11663: oPushResult
11664: oGetParam 1
11666: oPushResult
11667: oSetResult 40
11669: oPushResult
11670: oNodeGet
11671: oPop 2
11673: oAssign
11674: oGetAddrLocal 2
11676: oPushResult
11677: oGetLocal 1
11679: oPushResult
11680: oSetResult 15
11682: oPushResult
11683: oNodeGetIter
11684: oPop 2
11686: oPushResult
11687: oNodeIterValue
11688: oPop 1
11690: oAssign
11691: oGetLocal 2
11693: oPushResult
11694: oSetResult 22
11696: oPushResult
11697: oNodeGetInt
11698: oPop 2
11700: oReturn
11701: oJumpForward 11731
11703: oGetParam 1
11705: oPushResult
11706: oSetResult 38
11708: oPushResult
11709: oNodeGetInt
11710: oPop 2
11712: oReturn
11713: oJumpForward 11731
11715: Choice Lookup Table
          36   11703
          40   11661
          32   11656
          30   11651
          28   11647
11726: oError 3
11728: oSetResult 0
11730: oReturn
11731: oReturn
11732: oLocalSpace 2
11734: oGetParam 1
11736: oPushResult
11737: oNodeType
11738: oPop 1
11740: oChoice 11810
11742: oMAXINT
11743: oReturn
11744: oJumpForward 11826
11746: oSetResult 1
11748: oReturn
11749: oJumpForward 11826
11751: oSetResult 255
11753: oReturn
11754: oJumpForward 11826
11756: oGetAddrLocal 1
11758: oPushResult
11759: oGetParam 1
11761: oPushResult
11762: oSetResult 40
11764: oPushResult
11765: oNodeGet
11766: oPop 2
11768: oAssign
11769: oGetAddrLocal 2
11771: oPushResult
11772: oGetLocal 1
11774: oPushResult
11775: oSetResult 15
11777: oPushResult
11778: oNodeGetIterLast
11779: oPop 2
11781: oPushResult
11782: oNodeIterValue
11783: oPop 1
11785: oAssign
11786: oGetLocal 2
11788: oPushResult
11789: oSetResult 22
11791: oPushResult
11792: oNodeGetInt
11793: oPop 2
11795: oReturn
11796: oJumpForward 11826
11798: oGetParam 1
11800: oPushResult
11801: oSetResult 39
11803: oPushResult
11804: oNodeGetInt
11805: oPop 2
11807: oReturn
11808: oJumpForward 11826
11810: Choice Lookup Table
          36   11798
          40   11756
          32   11751
          30   11746
          28   11742
11821: oError 3
11823: oSetResult 0
11825: oReturn
11826: oReturn
11827: oLocalSpace 0
11829: oGetParam 1
11831: oPushResult
11832: oSetResult 22
11834: oPushResult
11835: oNodeGetInt
11836: oPop 2
11838: oPushResult
11839: oEmitInt
11840: oPop 1
11842: oReturn
11843: oLocalSpace 1
11845: oGetAddrLocal 1
11847: oPushResult
11848: oSetResult 14
11850: oPushResult
11851: oGetParam 1
11853: oPushResult
11854: oCall 11525
11856: oPop 2
11858: oAssign
11859: oGetLocal 1
11861: oPushResult
11862: oScopeDeclare
11863: oPop 1
11865: oGetLocal 1
11867: oReturn
11868: oReturn
11869: oLocalSpace 1
11871: oGetAddrGlobal 4
11873: oPushResult
11874: oId_mysystem
11875: oAssign
11876: oGetAddrGlobal 5
11878: oPushResult
11879: oSetResult 27
11881: oPushResult
11882: oSetResult 4
11884: oPushResult
11885: oCall 11491
11887: oPop 2
11889: oAssign
11890: oGetAddrGlobal 6
11892: oPushResult
11893: oSetResult 28
11895: oPushResult
11896: oSetResult 4
11898: oPushResult
11899: oCall 11491
11901: oPop 2
11903: oAssign
11904: oGetAddrGlobal 7
11906: oPushResult
11907: oSetResult 30
11909: oPushResult
11910: oSetResult 1
11912: oPushResult
11913: oCall 11491
11915: oPop 2
11917: oAssign
11918: oGetAddrGlobal 8
11920: oPushResult
11921: oSetResult 31
11923: oPushResult
11924: oSetResult 1
11926: oPushResult
11927: oCall 11491
11929: oPop 2
11931: oAssign
11932: oGetAddrGlobal 9
11934: oPushResult
11935: oSetResult 32
11937: oPushResult
11938: oSetResult 1
11940: oPushResult
11941: oCall 11491
11943: oPop 2
11945: oAssign
11946: oGetAddrGlobal 10
11948: oPushResult
11949: oGetGlobal 9
11951: oPushResult
11952: oCall 11553
11954: oPop 1
11956: oAssign
11957: oGetAddrGlobal 11
11959: oPushResult
11960: oSetResult 29
11962: oPushResult
11963: oSetResult 1
11965: oPushResult
11966: oCall 11491
11968: oPop 2
11970: oAssign
11971: oGetAddrGlobal 12
11973: oPushResult
11974: oSetResult 34
11976: oPushResult
11977: oSetResult 8
11979: oPushResult
11980: oCall 11491
11982: oPop 2
11984: oAssign
11985: oGetGlobal 12
11987: oPushResult
11988: oSetResult 36
11990: oPushResult
11991: oGetGlobal 11
11993: oPushResult
11994: oNodeSet
11995: oPop 3
11997: oGetAddrGlobal 13
11999: oPushResult
12000: oSetResult 38
12002: oPushResult
12003: oSetResult 256
12005: oPushResult
12006: oCall 11491
12008: oPop 2
12010: oAssign
12011: oGetAddrGlobal 14
12013: oPushResult
12014: oSetResult 39
12016: oPushResult
12017: oSetResult 256
12019: oPushResult
12020: oCall 11491
12022: oPop 2
12024: oAssign
12025: oGetGlobal 14
12027: oPushResult
12028: oSetResult 41
12030: oPushResult
12031: oSetResult 255
12033: oPushResult
12034: oNodeSetInt
12035: oPop 3
12037: oGetAddrLocal 1
12039: oPushResult
12040: oSetResult 18
12042: oPushResult
12043: oId_File
12044: oPushResult
12045: oCall 11525
12047: oPop 2
12049: oAssign
12050: oGetLocal 1
12052: oPushResult
12053: oSetResult 21
12055: oPushResult
12056: oGetGlobal 5
12058: oPushResult
12059: oNodeSet
12060: oPop 3
12062: oGetLocal 1
12064: oPushResult
12065: oScopeDeclare
12066: oPop 1
12068: oGetAddrLocal 1
12070: oPushResult
12071: oSetResult 18
12073: oPushResult
12074: oId_Integer
12075: oPushResult
12076: oCall 11525
12078: oPop 2
12080: oAssign
12081: oGetLocal 1
12083: oPushResult
12084: oSetResult 21
12086: oPushResult
12087: oGetGlobal 6
12089: oPushResult
12090: oNodeSet
12091: oPop 3
12093: oGetLocal 1
12095: oPushResult
12096: oScopeDeclare
12097: oPop 1
12099: oGetAddrLocal 1
12101: oPushResult
12102: oSetResult 18
12104: oPushResult
12105: oId_Boolean
12106: oPushResult
12107: oCall 11525
12109: oPop 2
12111: oAssign
12112: oGetLocal 1
12114: oPushResult
12115: oSetResult 21
12117: oPushResult
12118: oGetGlobal 7
12120: oPushResult
12121: oNodeSet
12122: oPop 3
12124: oGetLocal 1
12126: oPushResult
12127: oScopeDeclare
12128: oPop 1
12130: oGetAddrLocal 1
12132: oPushResult
12133: oSetResult 18
12135: oPushResult
12136: oId_Char
12137: oPushResult
12138: oCall 11525
12140: oPop 2
12142: oAssign
12143: oGetLocal 1
12145: oPushResult
12146: oSetResult 21
12148: oPushResult
12149: oGetGlobal 9
12151: oPushResult
12152: oNodeSet
12153: oPop 3
12155: oGetLocal 1
12157: oPushResult
12158: oScopeDeclare
12159: oPop 1
12161: oGetAddrLocal 1
12163: oPushResult
12164: oSetResult 18
12166: oPushResult
12167: oId_Byte
12168: oPushResult
12169: oCall 11525
12171: oPop 2
12173: oAssign
12174: oGetLocal 1
12176: oPushResult
12177: oSetResult 21
12179: oPushResult
12180: oGetGlobal 11
12182: oPushResult
12183: oNodeSet
12184: oPop 3
12186: oGetLocal 1
12188: oPushResult
12189: oScopeDeclare
12190: oPop 1
12192: oGetAddrLocal 1
12194: oPushResult
12195: oSetResult 18
12197: oPushResult
12198: oId_Pointer
12199: oPushResult
12200: oCall 11525
12202: oPop 2
12204: oAssign
12205: oGetLocal 1
12207: oPushResult
12208: oSetResult 21
12210: oPushResult
12211: oGetGlobal 12
12213: oPushResult
12214: oNodeSet
12215: oPop 3
12217: oGetLocal 1
12219: oPushResult
12220: oScopeDeclare
12221: oPop 1
12223: oGetAddrLocal 1
12225: oPushResult
12226: oSetResult 18
12228: oPushResult
12229: oId_ShortString
12230: oPushResult
12231: oCall 11525
12233: oPop 2
12235: oAssign
12236: oGetLocal 1
12238: oPushResult
12239: oSetResult 21
12241: oPushResult
12242: oGetGlobal 14
12244: oPushResult
12245: oNodeSet
12246: oPop 3
12248: oGetLocal 1
12250: oPushResult
12251: oScopeDeclare
12252: oPop 1
12254: oGetAddrLocal 1
12256: oPushResult
12257: oSetResult 16
12259: oPushResult
12260: oId_True
12261: oPushResult
12262: oCall 11525
12264: oPop 2
12266: oAssign
12267: oGetLocal 1
12269: oPushResult
12270: oSetResult 21
12272: oPushResult
12273: oGetGlobal 7
12275: oPushResult
12276: oNodeSet
12277: oPop 3
12279: oGetLocal 1
12281: oPushResult
12282: oSetResult 22
12284: oPushResult
12285: oSetResult 1
12287: oPushResult
12288: oNodeSetInt
12289: oPop 3
12291: oGetLocal 1
12293: oPushResult
12294: oScopeDeclare
12295: oPop 1
12297: oGetAddrLocal 1
12299: oPushResult
12300: oSetResult 16
12302: oPushResult
12303: oId_False
12304: oPushResult
12305: oCall 11525
12307: oPop 2
12309: oAssign
12310: oGetLocal 1
12312: oPushResult
12313: oSetResult 21
12315: oPushResult
12316: oGetGlobal 7
12318: oPushResult
12319: oNodeSet
12320: oPop 3
12322: oGetLocal 1
12324: oPushResult
12325: oSetResult 22
12327: oPushResult
12328: oSetResult 0
12330: oPushResult
12331: oNodeSetInt
12332: oPop 3
12334: oGetLocal 1
12336: oPushResult
12337: oScopeDeclare
12338: oPop 1
12340: oGetAddrLocal 1
12342: oPushResult
12343: oSetResult 16
12345: oPushResult
12346: oId_Nil
12347: oPushResult
12348: oCall 11525
12350: oPop 2
12352: oAssign
12353: oGetLocal 1
12355: oPushResult
12356: oSetResult 21
12358: oPushResult
12359: oGetGlobal 12
12361: oPushResult
12362: oNodeSet
12363: oPop 3
12365: oGetLocal 1
12367: oPushResult
12368: oSetResult 22
12370: oPushResult
12371: oSetResult 0
12373: oPushResult
12374: oNodeSetInt
12375: oPop 3
12377: oGetLocal 1
12379: oPushResult
12380: oScopeDeclare
12381: oPop 1
12383: oGetAddrGlobal 15
12385: oPushResult
12386: oId_Ord
12387: oPushResult
12388: oCall 11843
12390: oPop 1
12392: oAssign
12393: oGetAddrGlobal 16
12395: oPushResult
12396: oId_Chr
12397: oPushResult
12398: oCall 11843
12400: oPop 1
12402: oAssign
12403: oGetAddrGlobal 17
12405: oPushResult
12406: oId_Pred
12407: oPushResult
12408: oCall 11843
12410: oPop 1
12412: oAssign
12413: oGetAddrGlobal 18
12415: oPushResult
12416: oId_Succ
12417: oPushResult
12418: oCall 11843
12420: oPop 1
12422: oAssign
12423: oReturn
