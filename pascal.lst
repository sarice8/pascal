   2: title: 'Pascal Compiler 1.1.5 -- Jan 01 ''90';
         
      %
      %  Pascal.ssl
      %
      %  Pascal Compiler for the Amiga, by Steve Rice.
      %
      %  HISTORY
      %    11Sep89   First version, framework of parser.
      %    18Sep89   Added some semantic mechanisms.
      %    21Sep89   Added simple type references; expressions generate code.
      %    22Sep89   Allocate variable addresses as they're declared.
      %    24Sep89   Added arrays, pointers.
      %    27Sep89   Added for statement.
      %    23Oct89   Fixed for statement, so CYCLE goes to next step.
      %    01Jan90   Added string literals
      %    09Sep22   I have returned.  Migrate symbol table to schema, to ease development.
      %    01Oct22   Language: Switch from cycle/exit (Mac Pascal extension) to continue/break (Borland).
      %
      %  NOTES
      %    -  The 'value' of a var symbol is its allocated address.
      %    -  References to vars of intrinsic types, and pointer types,
      %       pushes the value of the var on the expr stack.  Referenecs to
      %       vars of compound types (arrays, records...) pushes the address
      %       on the expr stack.
      %    -  Just as there is only one type table entry for a given (named) type,
      %       there is only one type table entry for a pointer to a named type.
      %       When a pointer type is declared, a field in the TT entry of the
      %       type pointed to will be set to indicate the TT entry of the pointer
      %       to that type (0 means none defined yet).  When evaluating the
      %       expression @x, the type in that field in the entry for the type of x
      %       will be used (unless it's 0, in which case a new TT entry will be
      %       created).
      %
      %
      %  MISSING
      %
      %    - Consider non-ISO extensions.  e.g. 
      %      Dynamic arrays.  Objects.  But, perhaps stick to my old goal, standard Pascal.
      %
      %  PASCAL DOCS
      %      Here's some handy language material:
      %      https://www.freepascal.org/docs-html/ref/ref.html
      %      https://www.freepascal.org/docs-html/prog/prog.html
      %      https://en.wikipedia.org/wiki/Turbo_Pascal
      %      https://en.wikipedia.org/wiki/Pascal_(programming_language)#Standards
      %      http://www.standardpascaline.org/
      %
      
   2: input:
   2:    pIdent
   2:    pIntLit
   2:    pDoubleLit
   2:    pStrLit
   2:    pCharLit
   2:    pAssign       ':='
   2:    pSemiColon    ';'
   2:    pEqual        '='
   2:    pNotEqual     '<>'
   2:    pLess         '<'
   2:    pGreater      '>'
   2:    pLessEqual    '<='
   2:    pGreaterEqual '>='
   2:    pColon        ':'
   2:    pComma        ','
   2:    pLParen       '('
   2:    pRParen       ')'
   2:    pLSquare      '['
   2:    pRSquare      ']'
   2:    pCarat        '^'
   2:    pAt           '@'
   2:    pDot          '.'
   2:    pDotDot       '..'
   2:    pTimes        '*'
   2:    pDivide       '/'
   2:    pPlus         '+'
   2:    pMinus        '-'
   2:    pEof
   2:    pInvalid
      
      %  keywords  (built-in types 'integer', 'byte', 'char', etc, are not keywords,
      %             type constructors 'array', 'record', 'set' are keywords,
      %             pseudo-procedures 'writeln', 'readln' are keywords)
      %
      %             forward/external/name/cdecl appear in method modifiers, in fpc grammar.
      %             I'm making them keywords to simplify parsing, but could reconsider.
      
   2:    pProgram
   2:    pProcedure
   2:    pFunction
   2:    pConst
   2:    pType
   2:    pVar
   2:    pLabel
   2:    pBegin
   2:    pEnd
   2:    pArray
   2:    pRecord
   2:    pSet
   2:    pOf
   2:    pIf
   2:    pThen
   2:    pElse
   2:    pFor
   2:    pTo
   2:    pDownto
   2:    pDo
   2:    pWhile
   2:    pRepeat
   2:    pUntil
   2:    pContinue
   2:    pBreak
   2:    pCase
   2:    pOtherwise
   2:    pGoto
   2:    pAnd
   2:    pOr
   2:    pNot
   2:    pUses
   2:    pUnit
   2:    pInterface
   2:    pImplementation
   2:    pInitialization
   2:    pFinalization
   2:    pWriteln
   2:    pWrite
   2:    pReadln
   2:    pRead
      
   2:    pForward
   2:    pExternal
   2:    pName
   2:    pCdecl
   2:    ;
      
      
   2: output:
      
      %  Instructions for a stack machine (all vars are 32-bit integers)
      
   2:    tPushGlobalI      % <ptr> - push int value read from ptr
   2:    tPushGlobalB      % <ptr> - push byte value read from ptr
   2:    tPushGlobalP      % <ptr> - push ptr value read from ptr
   2:    tPushLocalI       % <offset> - push int value read from local var in current scope
   2:    tPushLocalB       % <offset> - push byte value read from local var in current scope
   2:    tPushLocalP       % <offset> - push ptr value read from local var in current scope
   2:    tPushParamI       % <offset> - push int value read from param in current scope
   2:    tPushParamB       % <offset> - push byte value read from param in current scope
   2:    tPushParamP       % <offset> - push ptr value read from param in current scope
   2:    tPushUpLocalI     % <uplevels> <offset> - push int value read from local var in a parent static scope
   2:    tPushUpLocalB     % <uplevels> <offset> - push byte value read from local var in a parent static scope
   2:    tPushUpLocalP     % <uplevels> <offset> - push ptr value read from local var in a parent static scope
   2:    tPushUpParamI     % <uplevels> <offset> - push int value read from param in a parent static scope
   2:    tPushUpParamB     % <uplevels> <offset> - push byte value read from param in a parent static scope
   2:    tPushUpParamP     % <uplevels> <offset> - push ptr value read from param in a parent static scope
   2:    tPushConstI       % <int> - push int value on stack (NOTE, used for BOOLEAN too)
   2:    tPushConstD       % <double> - push double value on stack
   2:    tPushAddrGlobal   % <offset> - push ptr to global var
   2:    tPushAddrLocal    % <offset> - push ptr to local var
   2:    tPushAddrParam    % <offset> - push ptr to formal param (used by method to see its param)
   2:    tPushAddrActual   % <offset> - push ptr to actual param, in actuals space (used by caller)
   2:    tPushAddrUpLocal  % <uplevels> <offset> - push ptr to local var in a parent static scope
   2:    tPushAddrUpParam  % <uplevels> <offset> - push ptr to formal param in a parent static scope
   2:    tSwap             % swap the top two entries on the stack
   2:    tFetchI           % pop ptr from stack, and push int value it points to
   2:    tFetchB           %    "      "      "     "     byte  "   "    "
   2:    tFetchP           %    "      "      "     "     ptr   "   "    "   
   2:    tAssignI          % assign int value on top of stack to addr under it (pop both)
   2:    tAssignB          %   "    byte   "    "   "  "   "    "    "   "   "
   2:    tAssignP          %   "    ptr    "    "   "  "   "    "    "   "   "
   2:    tAssignD          %   "    double "    "   "  "   "    "    "   "   "
   2:    tCopy             % <#bytes> - copy bytes.  tos=src, 2nd=dest (pop 2)
   2:    tCastBtoI         % zero-extend uint8_t to int32_t
   2:    tCastItoB         % truncate int32_t to uint8_t
   2:    tIncI             % increment int value on top of expr stack
   2:    tDecI             % decrement int value on top of expr stack
   2:    tMultI            % multiply top two integers (replacing with result)
   2:    tDivI
   2:    tAddPI            % add ptr (2nd value) and int (top value), resulting in a ptr
   2:    tAddI
   2:    tSubP
   2:    tSubPI
   2:    tSubI
   2:    tNegI             % top entry *= -1
   2:    tMultD            % operations on double-precision floating point values
   2:    tDivD
   2:    tAddD
   2:    tSubD
   2:    tNegD
   2:    tNot              % negate top boolean
   2:    tEqualB
   2:    tNotEqualB
   2:    tGreaterB         % B is uint8_t, so these are unsigned comparisons
   2:    tLessB
   2:    tGreaterEqualB
   2:    tLessEqualB
   2:    tEqualI           % top two entries equal? (pop 2, push 1) (true=1)
   2:    tNotEqualI        %    NOTE, these all work for booleans too, but I'm moving to tEqualB etc for those
   2:    tGreaterI         % 2nd entry greater than top entry? (pop 2, push answer)
   2:    tLessI  
   2:    tGreaterEqualI
   2:    tLessEqualI
   2:    tEqualP           % two two pointer values equal? (pop 2, push 1) (true=1)
   2:    tNotEqualP
   2:    tGreaterP
   2:    tLessP
   2:    tGreaterEqualP
   2:    tLessEqualP
   2:    tGreaterD         % double comparisions.  (equality uses EqualP, at least for now)
   2:    tLessD
   2:    tGreaterEqualD
   2:    tLessEqualD
   2:    tAllocActuals     % <#bytes> - make space on call stack for actual params (adjusting call stack sp)
   2:    tAllocActualsCdecl  % <#bytes> - starting a call to a cdecl method.  tcode still describes my own calling convention.
   2:    tFreeActuals      % <#bytes> - discard space on call stack allocated by tAllocActuals
   2:    tCall             % <label#>
   2:    tCallCdecl        % <label#> - call a method using native (C) calling convention. Only supported for extern labels.
   2:    tReturn
   2:    tEnter            % <#bytes> - start a stack frame on the call stack, reserving #bytes of local variable space
   2:    tJump             % <label#>
   2:    tJumpTrue         % <label#>  (pops top of stack, jumps if true)
   2:    tJumpFalse        % <label#>  (pops top of stack, jumps if false)
   2:    tJumpCaseB        % <label#>  pops uint8_t, jumps to case indicated by table at label (consisting of tCase, tCaseRange, tCaseEnd)
   2:    tJumpCaseI        % <label#>  pops integer, jumps to case indicated by table at label
   2:    tJumpCaseS        % <label#>  pops pointer to ShortString, jumps to case indicated by table at label
   2:    tCase             % <int> <label#>  - case table entry: if match int, goto label.  For tJumpCaseS, int is offset into global data.
   2:    tCaseRange        % <lowint> <highint> <label#>  - case table entry: if lowint <= value <= highint, goto label.  For tJumpCaseS, offsets into global.
   2:    tCaseEnd          % <label#> - end of case table.  Label points to no-match code (otherwise clause or end of statement).
   2:    tLabel            % <label#> - define label# at the current address
   2:    tLabelAlias       % <label#> <aliasToLabel#> - defines label to be an alias of another label
   2:    tLabelExtern      % <label#> <offsetToStrLit> - defines label to mean an extern symbol, whose name is in global data
   2:    tWriteI           % for writeln : write integer on tos, pop
   2:    tWriteBool        %  "     "    : write TRUE/FALSE, pop
   2:    tWriteChar        %  "     "    : write char, pop
   2:    tWriteShortStr    %  "     "    : write ShortString whose addr is on tos, pop
   2:    tWritePChar       %  "     "    : write a null-terminated string whose addr is on tos, pop
   2:    tWriteP           %  "     "    : write ptr var whose addr is on tos, pop
   2:    tWriteEnum        %  "     "    : write enum name.  Name table on tos, value under it, pop both
   2:    tWriteD           %  "     "    : write double-precision floating point value on tos, pop
   2:    tWriteCR          %  "     "    : write cr
   2:    tReadI            % for readln : pointer to integer on tos.  Assign read value to it, and pop
   2:    tReadChar         %  "     "   : pointer to char on tos.  Asign read value to it, and pop
   2:    tReadShortStr     % <capacity>  "     "   : pointer to ShortString on tos, and given max capacity.  Assign read value to it, and pop
   2:    tReadCR           %  "     "   : read the end-of-line.  Will accept any platform's eoln sequence.
   2:    tFile             % <file#> - pascal source file id, for debugging.  I haven't decided yet how I will communicate the corresponding filename.
   2:    tLine             % <line#> - pascal source line number, for debugging
      
      %  Other:
      
   2:    tSpace            % emit a hole, to be patched later
   2:    ;
      
   2: error:
   2:    eBadStatement
   2:    eNotConst
   2:    eNotType
   2:    eNotOrdinalType
   2:    eNotVar
   2:    eNotIntVar
   2:    eNotValue
   2:    eNotInteger
   2:    eNotBoolean
   2:    eNotDouble
   2:    eNotPointer
   2:    eNotArray
   2:    eNotRecord
   2:    eNotRecordField
   2:    eTooManySubscripts
   2:    eTypeMismatch
   2:    eMissingParameter
   2:    eNotImplemented
   2:    eNotAllowed
   2:    eNotInALoop
   2:    eRecordEmpty
   2:    eNotCurrentFunction
   2:    eAlreadyDefined
   2:    eOnlyOneVarCanBeInitialized
   2:    eExternalMethodCannotBeNested
   2:    eCantFindUnitFile
   2:    eInternalScopeMismatch
   2:    eEnumValueNotAscending
   2:    eUsedButNotDefined
   2:    eCantUsePredSuccOnEnumWithValueGaps
   2:    eCantDereference
   2:    eSizeMismatch
   2:    eTypeNameNotAllowedHere
   2:    ;
      
   2: include 'pascal_schema.ssl'
      
      % Generated automatically by schema
      
   2: type node_type:
   2: 	nINVALID
   2: 	Object
   2: 	nWorkspace
   2: 	nModule
   2: 	nProgram
   2: 	nUnit
   2: 	nUnitImpl
   2: 	nScope
   2: 	nDeclaration
   2: 	nIdent
   2: 	nUnitRef
   2: 	nMethod
   2: 	nProc
   2: 	nFunc
   2: 	nBuiltInFunc
   2: 	nBuiltInProc
   2: 	nConst
   2: 	nEnumValue
   2: 	nConstStr
   2: 	nConstDouble
   2: 	nTypeDecl
   2: 	nVar
   2: 	nGlobalVar
   2: 	nLocalVar
   2: 	nRecordField
   2: 	nParam
   2: 	nTypedConst
   2: 	nLabel
   2: 	nType
   2: 	nFileType
   2: 	nByteType
   2: 	nIntegerType
   2: 	nSingleType
   2: 	nDoubleType
   2: 	nBooleanType
   2: 	nBooleanFlowType
   2: 	nCharType
   2: 	nPointerType
   2: 	nUniversalPointerType
   2: 	nArrayType
   2: 	nSubrangeType
   2: 	nRecordType
   2: 	nStrLitType
   2: 	nShortStringType
   2: 	nEnumType
   2: 	nSetType
   2: 	;
      
   2: type node_attribute:
   2: 	qINVALID
   2: 	qUnits
   2: 	qProgram
   2: 	qGlobalSize
   2: 	qIdent
   2: 	qUsedUnits
   2: 	qChildScope
   2: 	qMainRoutineScope
   2: 	qImpl
   2: 	qPublicScope
   2: 	qPrivateScope
   2: 	qInitLabel
   2: 	qFinalLabel
   2: 	qInitRoutineScope
   2: 	qLevel
   2: 	qDecls
   2: 	qExtends
   2: 	qSize
   2: 	qAllocMode
   2: 	qInitCode
   2: 	qParentScope
   2: 	qType
   2: 	qValue
   2: 	qParams
   2: 	qBodyDefined
   2: 	qExternal
   2: 	qExternalName
   2: 	qCdecl
   2: 	qUsed
   2: 	qOldParams
   2: 	qOldType
   2: 	qResultOffset
   2: 	qNameOffset
   2: 	qValueStr
   2: 	qValueDouble
   2: 	qInOut
   2: 	qDefined
   2: 	qPointerType
   2: 	qBaseType
   2: 	qIndexType
   2: 	qLow
   2: 	qHigh
   2: 	qScope
   2: 	qCapacity
   2: 	qNameTable
   2: 	qHasGap
   2: 	;
      
      
   2: type Node:     % A pointer to a node in the schema database (symbol database)
   2:    Null = 0
   2:    ;
      
   2: type NodeIter:   % An iterator over nodes in a list, in the schema database
   2:    NullIter = 0
   2:    ;
      
   2: type NodeVec:  % A pointer to a vector of Node.  See mechanism node_vec_mech
   2:    NullVec = 0
   2:    ;
      
   2: type boolean:
   2:    false    = 0
   2:    true     = 1;
      
   2: type double:
   2:    doubleZero = 0
   2:    ;
      
   2: type Label:
   2:    labelNull = 0;
      
      % An output code stream.
   2: type Code:
   2:    codeNull = 0
   2:    codeDefault = 1
   2:    ;
      
      % A string
   2: type String:
   2:    stringNull = 0
   2:    ;
      
      % allocation modes for oScopeBegin
   2: type AllocMode:
   2:    allocGlobal = 0  % allocate from global data
   2:    allocDown        % allocate down the stack
   2:    allocUp          % allocate up the stack
   2:    ;
      
      % Some general schema node operations.
      % node_type and node_attribute are defined in generated file pascal_schema.ssl included above.
      %
   2: mechanism node_mech:
   2:     oNodeNew (node_type) >> Node         % create new node
   2:     oNodeSet (Node, node_attribute, Node)   % set Node attribute of node
   2:     oNodeSetDouble (Node, node_attribute, double)   % set double attribute
   2:     oNodeSetString (Node, node_attribute, String)
   2:     oNodeSetInt (Node, node_attribute, int) % set int attribute of node
   2:     oNodeSetBoolean (Node, node_attribute, boolean)
   2:     oNodeSetLabel( Node, node_attribute, Label )  % set Label attribute of node
   2:     oNodeSetCode( Node, node_attribute, Code )    % set Code attribute of node
   2:     oNodeAddLast( Node, node_attribute, Node value )  % append to a List attribute of node
   2:     oNodeGet (Node, node_attribute) >> Node    % get Node attribute of node
   2:     oNodeGetDouble (Node, node_attribute) >> double
   2:     oNodeGetString (Node, node_attribute) >> String
   2:     oNodeGetInt (Node, node_attribute) >> int  % get int attribute of node
   2:     oNodeGetBoolean (Node, node_attribute) >> boolean  % get int attribute of node
   2:     oNodeGetLabel (Node, node_attribute) >> Label      % get Label attribute of node
   2:     oNodeGetCode (Node, node_attribute) >> Code        % get code stream attribute of node
   2:     oNodeNull (Node) >> boolean          % is node null?
   2:     oNodeFind (Node, node_attribute listAttr, node_attribute valueAttr, int value) >> Node  % find node with value in list
   2:     oNodeGetIter (Node, node_attribute) >> NodeIter   % get an iterator over nodes in a List attribute
   2:     oNodeGetIterLast (Node, node_attribute) >> NodeIter  % get an iterator over nodes in a List, starting at last
   2:     oNodeIterValue (NodeIter) >> Node             % the node that iter is referring to (NodeNull if no more nodes)
   2:     oNodeIterNext (inout NodeIter)                % advance iterator through list
   2:     oNodeIterPrev (inout NodeIter)                % advance iterator backwards through list
   2:     oNodeType (Node) >> node_type        % return node type of node
   2:     oNodeEqual (Node, Node) >> boolean   % compare two nodes for equality
                                               % (i.e. same node, not just same contents)
   2:     ;
      
      
      % Manipulate a temporary vector of Node
      %
   2: mechanism node_vec_mech:
   2:     oNodeVecNew >> NodeVec
   2:     oNodeVecDelete( NodeVec nv )
   2:     oNodeVecAppend( NodeVec nv, Node n )
   2:     oNodeVecSize( NodeVec nv ) >> int                % how many elements
   2:     oNodeVecElement( NodeVec nv, int idx ) >> Node   % element at index idx (0..size-1)
   2:     ;
      
      
      
   2: mechanism emit_mech:
   2:     oEmitInt( int )              % emit int into the generated code
   2:     oEmitDouble( double )        % emit double into the generated code
   2:     oEmitLabel( Label )
   2:     oEmitCode( Code )            % append a code stream to the current code stream
   2:     Here >> int                  % current address in the generated code
                                       %   (only usable in the default code stream)
   2:     oPatch( int addr, int val )  % patch an int into address in the generated code
                                       %   (only usable in the default code stream)
   2:     ;
      
   2: mechanism math:
   2:     inc (inout int)
   2:     dec (inout int)
   2:     negate (int) >> int
   2:     add( int x, int y ) >> int
   2:     subtract( int x, int y ) >> int     % x - y
   2:     multiply( int x, int y ) >> int     % x * y
   2:     equal( int x, int y ) >> boolean
   2:     equal_zero (int) >> boolean
   2:     equal_node( Node, Node ) >> boolean
   2:     equal_string( String, String ) >> boolean
   2:     equal_node_type (node_type, node_type) >> boolean     % Want equal_<type> for every type
   2:     equal_label( Label, Label ) >> boolean
   2:     equal_code( Code, Code ) >> boolean
   2:     greater( int x, int y ) >> boolean
   2:     oMININT >> int    % the minimum 32-bit integer.
   2:     oMAXINT >> int    % the maximum 32-bit integer.
   2:     ;
      
   2: mechanism more_builtins:      % These should be built-in SSL operations
   2:     TOKEN_VALUE >> int        % value of just accepted token, e.g. IntLit token
   2:     TOKEN_VALUE_DOUBLE >> double
   2:     LAST_ID >> int            % id number of last accepted identifier
   2:     ID_STRING( int id ) >> String       % text name of identifier with given id
   2:     CURRENT_STRLIT >> String            % text value of just-accepted string literal
   2:     UNACCEPT_TOKEN            % Unaccept the last accepted token.  The next input, inputchoice will see it again.
   2:     ;
      
   2: mechanism workspace_mech:
   2:     oWorkspaceNew >> Node
   2:     ;
      
   2: mechanism scope_mech:
   2:     oScopeBegin( int level, AllocMode )  % create a new scope. Subsequent declarations will go here.
                                               %  level = static scope depth (0 = globals)
   2:     oScopeEnter( Node scope )            % enter an existing scope.
   2:     oScopeEnd                            % end current scope. Subsequent declarations will go to previous scope.
   2:     oScopeCurrent >> Node                % returns current scope
   2:     oScopeDeclare( Node decl )           % add declaration to current scope.
   2:     oScopeDeclareAlloc( Node decl )      % add declaration to current scope, and allocate space according to its type
   2:     oScopeAllocType( Node theType ) >> int   % allocate space for type in current scope, and return its address
   2:     oScopeAlloc( int size, int align ) >> int % allocate bytes, with given alignment in bytes 
   2:     oScopeFind >> Node                   % find declaration of last accepted identifier.  Returns Null if not found.
   2:     oScopeFindRequire >> Node            % find declaration of last accepted identifier.  Error if not found.
   2:     oScopeFindInCurrentScope >> Node     % find declaration of last accepted identifier, only within the current scope.  Null if not found.
   2:     oScopeFindRequireInScope( Node scope ) >> Node  % find decl of last accepted identifier, only within the given scope.  Error it not found.
   2:     ;
      
   2: mechanism type_mech:
   2:     oTypeAdd( Node node )     % add the given nType to the type table
   2:     ;
      
   2: mechanism type_stack_mech:
   2:     oTypeSPush( Node node )
   2:     oTypeSPop
   2:     oTypeSTop >> Node
   2:     oTypeSNodeType >> node_type          % node_type of the node on top of type stack, skipping subranges
   2:     ;
      
      
   2: mechanism id_mech:
          % gets/adds a predefined id to the scanner's id table, and returns the id code
   2:     oId_mysystem >> int
   2:     oId_ShortStringAppendShortString >> int
   2:     oId_ShortStringAppendChar >> int
   2:     oId_ShortStringCmp >> int
   2:     oId_File >> int
   2:     oId_Integer >> int
   2:     oId_Boolean >> int
   2:     oId_Char >> int
   2:     oId_Byte >> int
   2:     oId_Single >> int
   2:     oId_Double >> int
   2:     oId_Pointer >> int
   2:     oId_ShortString >> int
   2:     oId_True >> int
   2:     oId_False >> int
   2:     oId_Nil >> int
   2:     oId_Ord >> int
   2:     oId_Chr >> int
   2:     oId_Pred >> int
   2:     oId_Succ >> int
   2:     oId_Sizeof >> int
   2:     oChangeIntLitToLabelIdent    % change current token from pIntLit to pIdent "_label_<intlit>"
   2:     ;
      
      
      
   2: mechanism label_mech:
   2:    oLabelNew >> Label
   2:    ;
      
   2: mechanism code_mech:
   2:    oCodeNew >> Code         % create a new empty code stream
   2:    oCodePush( Code )        % change the current output code stream to the given one
   2:    oCodePop                 % restore the current code stream to the previous one
   2:    oCodeDiscard( Code )     % discard the given code stream
   2:    ;
      
   2: mechanism include_mech:
   2:    oIncludeUnitFile( int id ) >> boolean  % search for <unit>.pas and include it.
                                                % returns false if can't find.
   2:    oIncludeEnd              % stop including the current file
   2:    ;
      
      
   2: mechanism count :
   2:    oCountPush(int)          % start a new counter, with initial value
   2:    oCountInc
   2:    oCountDec
   2:    oCountIsZero >> boolean
   2:    oCountPop;
      
      
   2: mechanism value :              % value stack, to calc. const expr's
   2:    oValuePush(int)             % push an explicit int lit
   2:    oValuePushDouble(double)    % push a double onto value stack
   2:    oValuePushString(String)    % push string onto value stack
   2:    oValueTop >> int            % get top value on value stack
   2:    oValueTopDouble >> double
   2:    oValueTopString >> String
   2:    oValueSwap                  % swap top two
   2:    oValuePop
   2:    oValueCharToString          % convert top value from char to string
   2:    oValueIntToDouble
         
   2:    oValueNegate                % negate top numeric value
   2:    oValueEqual
   2:    oValueNotEqual
   2:    oValueLess
   2:    oValueGreater
   2:    oValueLessEqual
   2:    oValueGreaterEqual
      
   2:    oValueNegateD               % operations on double values
   2:    oValueEqualD
   2:    oValueNotEqualD
   2:    oValueLessD
   2:    oValueGreaterD
   2:    oValueLessEqualD
   2:    oValueGreaterEqualD
      
   2:    oValueOr                    % boolean or
   2:    oValueAnd
   2:    oValueNot                   % boolean not
      
   2:    oValueAdd
   2:    oValueSub
   2:    oValueMult
   2:    oValueDiv
      
   2:    oValueAddD
   2:    oValueSubD
   2:    oValueMultD
   2:    oValueDivD
      
   2:    oValueStringCmp             % compare top two strings. replace with negative, 0, or positive
   2:    oValueStringConcat
   2:    ;
      
   2: mechanism string :
   2:    oStringAllocLit( String ) >> int      % alloc global space for strlit, return address
   2:    oStringAllocShortStringLit( String ) >> int  % alloc global space for ShortString, return address
   2:    ;
      
      % track labels for the loop we're in, if any
   2: mechanism loop_mech:
   2:    oLoopPush( Label continueLabel, Label breakLabel )
   2:    oLoopContinueLabel >> Label
   2:    oLoopBreakLabel >> Label
   2:    oLoopPop
   2:    ;
      
      % for hacky debugging
   2: mechanism msg_mech:
   2:    oMsg( int num )             % print message "oMsg <num>"
   2:    oMsgTrace( int num )        % print message "oMsg <num>" followed by ssl traceback
   2:    oMsgNode( Node node )       % print node
   2:    oMsgNodeLong( Node node )   % print node with more detail
   2:    oMsgNodeVec( NodeVec vec )  % print node vec
   2:    ;
      
      
   2: rules
      
      % ----------------------------- Global Variables ----------------------------
      
   2: Node    workspace              % root of database
   2: Node    globalScope            % scope for globals in the current module
   2: Node    initScope              % scope for temporaries global var init,
                                     % and program main stmt / unit initialization stmts
      
   2: int     mysystemId               % id of identifier "mysystem"
      
      % built-in nTypes
   2: Node    FileType
   2: Node    IntegerType
   2: Node    BooleanType
   2: Node    BooleanFlowType
   2: Node    CharType
   2: Node    PCharType
   2: Node    ByteType
   2: Node    SingleType
   2: Node    DoubleType
   2: Node    UniversalPointerType
   2: Node    StrLitType
   2: Node    ShortStringType
      
      % nBuiltInFunc
   2: Node    BuiltIn_Ord
   2: Node    BuiltIn_Chr
   2: Node    BuiltIn_Pred
   2: Node    BuiltIn_Succ
   2: Node    BuiltIn_Sizeof
      
      % Declarations in unit mysystem that the compiler may refer to directly.
      
   2: Node    System_ShortStringAppendShortString
   2: Node    System_ShortStringAppendChar
   2: Node    System_ShortStringCmp
      
      
      % Expr has a corner case flag, needed for sizeof()
   2: boolean flagExprAllowTypeName
      
      
      % -------------------------- Forward Declarations -------------------------
      
   2: Block( node_type varNodeType, Label labelForBody );
   2: BlockDecls( node_type varNodeType );
   2: BlockStmt( Label labelForBody, Node varScope, boolean isMain );
   2: VarDecl( node_type varNodeType );
   2: newType( node_type nt, int size ) >> Node;
   2: newIdent( node_type nt, int id ) >> Node;
   2: EmitValue( Node decl );
   2: TypeRef( out Node theType );
   2: EnumTypeRef( out Node resultType );
   2: PointerTypeTo( Node theType ) >> Node;
   2: OrdinalLow( Node theType ) >> int;
   2: OrdinalHigh( Node theType ) >> int;
   2: AssignStmt( Node decl );
   2: BooleanExprControlFlow( out Label falseLabel );
   2: ExprAllowFlow( out Label falseLabel );
   2: BoolExprAllowFlow( out Label falseLabel );
   2: BoolTermAllowFlow( out Label falseLabel );
   2: BoolFactorAllowFlow( out Label falseLabel );
   2: ArithExprAllowFlow( out Label falseLabel );
   2: TermAllowFlow( out Label falseLabel );
   2: FactorAllowFlow( out Label falseLabel );
   2: PrimaryAllowFlow( out Label falseLabel );
      
   2: VarExpr( Node decl );
   2: LValueFromDecl( Node decl, boolean writeable );
   2: LValueVar( Node decl, boolean writeable );
   2: IncVar( Node decl );
   2: DecVar( Node decl );
      
   2: FlowToVal( inout Label falseLabel );
   2: ValToFlow( out Label falseLabel );
   2: MoveIntoTempShortString >> int;
      
   2: DeclLevel( Node decl ) >> int;
   2: DeclUpLevels( Node decl ) >> int;
      
      % ----------------------------- Start ----------------------------
      
   2: MainRule:
   4:    @Program
   7:    ;
      
   7: include 'pascal_unit.ssl'
      
      %
      %  Pascal Compiler
      %
      
      % ------------------------------ Units -----------------------------
      
      
      % The uses clause is a list of units required by the user program or unit.
      % We will find and compile the named units (unless already loaded).
      % We do not make the unit interface visible to the user, the caller will do so later.
   7: UsesClause( Node user ):
   9:    {
   9:       pIdent
  11:       @Uses( LAST_ID, user )
  20:       [
  20:          | ',' :
  22:          | * :  >
  29:       ]
  29:    }   
  31:    ';'
  34:    ;
      
      
      % Process an implicit "uses mysystem" in every module, except in the mysystem unit itself.
      % (I'm calling the unit mysystem rather than system, so fpc doesn't use it to replace its own system unit.)
      %
  34: UsesMySystem( Node user ):
  36:    [ equal( oNodeGetInt( user, qIdent ), mysystemId )
  53:       | true :  >>
  55:       | * :
  60:    ]
  60:    @Uses( mysystemId, user )
  71:    ;
      
      
      % After processing the mysystem unit interface, grab certain declarations from it
      % that the compiler may want to refer to later.
      %
  71: FindSelectSystemDecls( Node unit ):
  73:    [ equal( oNodeGetInt( unit, qIdent ), mysystemId )
  90:       | true :
  91:          System_ShortStringAppendShortString = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendShortString )
 108:          System_ShortStringAppendChar = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringAppendChar )
 125:          System_ShortStringCmp = oNodeFind( oScopeCurrent, qDecls, qIdent, oId_ShortStringCmp )
 142:       | * :
 147:    ]
 148:    ;
      
      
      % The given user module uses a unit with the given id,
      % which may or may not have been loaded already.
      %
 148: Uses( int id, Node user ):
 150:    Node unit = @FindOrCompileUnit( id )
 161:    [ equal_node( unit, Null )
 171:       | false :
 172:          oNodeAddLast( user, qUsedUnits, unit )
      
               % Put a declaration in the current scope, naming the unit and pointing to it.
               % This is to allow references to  <unit>.<identifier_in_unit>
 184:          Node unitRef = oNodeNew( nUnitRef )
 194:          oNodeSetInt( unitRef, qIdent, oNodeGetInt( unit, qIdent ) )
 213:          oNodeSet( unitRef, qPublicScope, oNodeGet( unit, qPublicScope ) )
 232:          oScopeDeclare( unitRef )
 238:       | * :
 243:    ];
      
      
      % If the given decl is for an nUnitRef, the program is using syntax <unit>.<identifier>
      % Parse the rest of that to find the intended decl.
      %
 244: ResolveUnitRef( inout Node decl ):
 246:    [ oNodeType( decl )
 253:       | nUnitRef :
 254:          Node scope = oNodeGet( decl, qPublicScope )
 267:          '.'
 269:          pIdent
 271:          decl = oScopeFindRequireInScope( scope )
 281:       | * :
 286:    ];
      
      
 287: EnterUsedUnits( Node user ):
         % Make the used units' public scopes directly visible.
         % This is done after the units are all compiled, so they don't interfere with each other incorrectly.
         % Units later in the list have priority.
 289:    NodeIter unitIt = oNodeGetIter( user, qUsedUnits )
 302:    {
 302:       Node unit = oNodeIterValue( unitIt )
 312:       [ oNodeNull( unit )
 319:          | false :
 320:             oScopeEnter( oNodeGet( unit, qPublicScope ) )
 333:          | * :
 338:             >
 340:       ]
 340:       oNodeIterNext( unitIt )
 346:    }
 349:    ;
      
 349: EndUsedUnits( Node user ):
         % Leave the units' public scopes, so no longer visible.
 351:    NodeIter unitIt = oNodeGetIterLast( user, qUsedUnits )
 364:    {
 364:       Node unit = oNodeIterValue( unitIt )
 374:       [ oNodeNull( unit )
 381:          | false :
                  % Consistency check.  Make sure our scope enter / end have lined up correctly.
 382:             [ oNodeEqual( oScopeCurrent, oNodeGet( unit, qPublicScope ) )
 398:                | true :
 399:                | false :  #eInternalScopeMismatch
 403:             ]
 411:             oScopeEnd
 412:          | * :
 417:             >
 419:       ]
 419:       oNodeIterPrev( unitIt )
 425:    }
 428:    ;
      
      
 428: FindOrCompileUnit( int id ) >> Node:
         % We might have this unit loaded already
 430:    Node unit = oNodeFind( workspace, qUnits, qIdent, id )
 449:    [ equal_node( unit, Null )
 459:       | false :  >> unit
 463:       | * :
 468:    ]
      
         % If not, search for the source file on disk
 468:    boolean ok = oIncludeUnitFile( id )
 478:    [ ok
 481:       | false :  #eCantFindUnitFile  >> Null
 487:       | * :
 492:    ]
      
         % compile it, adding it into the workspace
         % then return it.
 492:    unit = @Unit
      
         % TO DO: ensure we are at pEof
         % end the include
 498:    oIncludeEnd
 499:    >> unit;
      
      
      
 503: Unit >> Node:
 505:    pUnit
 507:    pIdent
 509:    Node unit = oNodeNew( nUnit )
 519:    oNodeSetInt( unit, qIdent, LAST_ID )
 530:    Node unitImpl = oNodeNew( nUnitImpl )
 540:    oNodeSetInt( unitImpl, qIdent, LAST_ID )
 551:    oNodeSet( unit, qImpl, unitImpl )
 563:    ';'
      
         % mandatory sections
      
 565:    pInterface
 567:    @UsesMySystem( unit )
 574:    [
 574:       | pUses :   @UsesClause( unit )
 583:       | * :
 588:    ]
 588:    @EnterUsedUnits( unit )
      
 595:    oScopeBegin( 0, allocGlobal )
 604:    oNodeSet( unit, qPublicScope, oScopeCurrent )
 615:    globalScope = oScopeCurrent
      
         % A scope for temporaries needed by variable initialization
 620:    oScopeBegin( 0, allocDown )
 629:    initScope = oScopeCurrent
 634:    oNodeSet( unit, qInitRoutineScope, initScope )
 646:    oScopeEnd
      
 647:    @UnitInterface( unit )
 654:    oScopeEnd  % interface scope
      
 655:    pImplementation
 657:    @UsesMySystem( unitImpl )
 664:    [
 664:       | pUses :   @UsesClause( unitImpl )
 673:       | * :
 678:    ]
 678:    @EnterUsedUnits( unitImpl )
         % re-enter interface scope after impl's uses.  interface still has priority.
 685:    oScopeEnter( oNodeGet( unit, qPublicScope ) )
         
 698:    oScopeBegin( 0, allocGlobal )
 707:    oNodeSet( unit, qPrivateScope, oScopeCurrent )
 718:    oNodeSet( oScopeCurrent, qExtends, oNodeGet( unit, qPublicScope ) )
 736:    globalScope = oScopeCurrent
 741:    @UnitImplementation( unit )
      
 748:    [
 748:       | pInitialization :  @UnitInitialization( unit, true )   % init routine with statements from init section
 760:       | * :                @UnitInitialization( unit, false )  % implicit init routine
 775:    ]
 775:    [
 775:       | pFinalization :  @UnitFinalization( unit, true )
 787:       | * :              @UnitFinalization( unit, false )   % implicit final routine, may be handy later
 802:    ]
 802:    pEnd  '.'
      
 806:    oScopeEnd  % impl scope
 807:    oScopeEnd  % interface scope
 808:    @EndUsedUnits( unitImpl )  % used units scopes
 815:    @EndUsedUnits( unit )
 822:    oNodeAddLast( workspace, qUnits, unit )
 834:    >> unit;
      
      
 838: UnitInterface( Node unit ):
 840:    {[
 840:       | pConst :     @ConstDecl
 844:       | pType :      @TypeDecl
 848:       | pVar :       @VarDecl( nGlobalVar )
            % label declaration not allowed in interface
      
 857:       | pProcedure :
 859:          Node decl = @ProcHeaderDecl
               % despite syntax diagrams, fpc does allow external clause on methods in unit interface,
               % even though this clause is an alternative for the body statement.
 865:          [
 865:             | pExternal :
 867:                @ExternalDecl( decl )
 874:                ';'
 876:             | * :
 881:          ]
      
 881:       | pFunction :
 883:          Node decl = @FuncHeaderDecl
 889:          [
 889:             | pExternal :
 891:                @ExternalDecl( decl )
 898:                ';'
 900:             | * :
 905:          ]
      
 905:       | * :          >
 920:    ]}
 922:    @FindSelectSystemDecls( unit )
 930:    ;
      
 930: UnitImplementation( Node unit ):
 932:    @BlockDecls( nGlobalVar )
 940:    ;
      
      
 940: UnitInitialization( Node unit, boolean hasStmts ):
 942:    Label label = oLabelNew
 947:    .tLabel  oEmitLabel( label )
 955:    oNodeSetLabel( unit, qInitLabel, label )
      
 967:    int patchLS
 967:    .tEnter  patchLS = Here  .tSpace
      
         % insert any code for initialization of this unit's variables.
         
 976:    Node scope
 976:    Code initCode
      
 976:    scope = oNodeGet( unit, qPublicScope )
 989:    initCode = oNodeGetCode( scope, qInitCode )
1002:    oEmitCode( initCode )
1008:    oNodeSetCode( scope, qInitCode, codeNull )
      
1020:    scope = oNodeGet( unit, qPrivateScope )
1033:    initCode = oNodeGetCode( scope, qInitCode )
1046:    oEmitCode( initCode )
1052:    oNodeSetCode( scope, qInitCode, codeNull )
      
1064:    oScopeEnter( oNodeGet( unit, qInitRoutineScope ) )
      
1077:    [ hasStmts
1080:       | true :     
1081:          @Statement
1083:          {[
1083:             | ';' :  @Statement
1087:             | * :    >
1094:          ]}
1096:       | * :
1101:    ]
      
1101:    .tReturn
      
1103:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1115:    oPatch( patchLS, localSpace )
1124:    oScopeEnd   % init routine scope, for temporaries
1126:    ;
      
      
1126: UnitFinalization( Node unit, boolean hasStmts ):
1128:    Label label = oLabelNew
1133:    .tLabel  oEmitLabel( label )
1141:    oNodeSetLabel( unit, qFinalLabel, label )
      
1153:    int patchLS
1153:    .tEnter  patchLS = Here  .tSpace
      
         % final routine scope, for temporaries
1162:    oScopeBegin( 0, allocDown )
      
1171:    [ hasStmts
1174:       | true :     
1175:          @Statement
1177:          {[
1177:             | ';' :  @Statement
1181:             | * :    >
1188:          ]}
1190:       | * :
1195:    ]
      
1195:    .tReturn
      
1197:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
1209:    oPatch( patchLS, localSpace )
1218:    oScopeEnd   % final routine scope, for temporaries
1220:    ;
      
      
1220: InitializeUnits:
         % call init routine of each loaded unit, in the order they were loaded
         % (used directly or indirectly by the main program).
1222:    NodeIter it = oNodeGetIter( workspace, qUnits )
1235:    {
1235:       Node unit = oNodeIterValue( it )
1245:       [ oNodeNull( unit )
1252:          | true :  >
1255:          | false :
1257:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1265:             .tCall  oEmitLabel( oNodeGetLabel( unit, qInitLabel ) )
1280:             .tFreeActuals  oEmitInt( 0 )
1288:             oNodeIterNext( it )
1294:       ]
1302:    };
      
      
1305: FinalizeUnits:
1307:    NodeIter it = oNodeGetIterLast( workspace, qUnits )
1320:    {
1320:       Node unit = oNodeIterValue( it )
1330:       [ oNodeNull( unit )
1337:          | true :  >
1340:          | false :
1342:             .tAllocActuals  oEmitInt( 0 )  % not sure I need this. maybe for stack alignment.
1350:             .tCall  oEmitLabel( oNodeGetLabel( unit, qFinalLabel ) )
1365:             .tFreeActuals  oEmitInt( 0 )
1373:             oNodeIterPrev( it )
1379:       ]
1387:    };
      
1390: include 'pascal_decl.ssl'
      %
      % Pascal Compiler
      %
      
      % ----------------------------- Declarations ----------------------------
      
      
      
      % modifers that may appear on a proc/function declaration.
      %
1390: MethodModifiers( Node decl ):
1392:    {[
1392:       | pCdecl :
1394:          oNodeSetBoolean( decl, qCdecl, true )
1406:          ';'
      
1408:       | * : >
1415:    ]}
1418:    ;
      
      
      % external method resides in an external object file
      % (or in my system, the built-in runtime library).
      % The method has a label, as usual, which callers will use.
      % But we define that label with .tLabelExtern rather than .tLabel.
      %
      % Note this is fpc syntax.  I'm not sure about other Pascals.
      %
1418: ExternalDecl( Node decl ):
1420:    [ equal_zero( @DeclLevel( decl ) )
1432:       | false :  #eExternalMethodCannotBeNested
1435:       | * :
1440:    ]
1440:    oNodeSetBoolean( decl, qExternal, true )
1452:    [
1452:       | pStrLit :
               % that was the optional library name containing the method.
               % TO DO: I'm currently ignoring this.
1454:          [
1454:             | pName :
1456:                pStrLit
                     % that was the optional method name defined in that library,
                     % which might differ from the Pascal name.
1458:                oNodeSetString( decl, qExternalName, CURRENT_STRLIT )
1469:             | * :
1474:          ]
1474:       | * :
1479:    ]
1479:    @DefineExternLabel( decl )
1487:    ;
      
      
1487: ProcHeaderDecl >> Node:
1489:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1491:    boolean redeclaring = false
1497:    Node decl = oScopeFindInCurrentScope
      
1502:    [ oNodeNull( decl )
1509:       | true :
               % first declaration
1510:          decl = @newIdent( nProc, LAST_ID )
1523:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1534:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1536:          redeclaring = true
1542:          [ oNodeGetBoolean( decl, qBodyDefined )
1552:             | true : #eAlreadyDefined
1555:             | * :
1560:          ]
1560:          [ oNodeGetBoolean( decl, qExternal )
1570:             | true : #eAlreadyDefined
1573:             | * :
1578:          ]
1578:          [ oNodeType( decl )
1585:             | nProc :
1586:             | * : #eAlreadyDefined   % wrong kind
1593:          ]
               % Move the existing param scope aside, so we can check that the
               % new one is consistent.  And, the body will want to see the new one
               % since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
1593:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
1612:          oNodeSet( decl, qParams, Null )
1624:    ]
      
1632:    int level = @ScopeLevel
1638:    boolean nested = greater( level, 0 )
1651:    inc( level )
1657:    oScopeBegin( level, allocUp )
1666:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
1671:    [ nested
1674:       | true :
1675:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
1690:       | * :
1695:    ]
      
1695:    @FormalArgDecl
1697:    oNodeSet( decl, qParams, paramScope )
1709:    oScopeEnd
1710:    ';'
      
1712:    [ redeclaring
1715:       | false : oScopeDeclare( decl )
1722:       | true :  % TO DO: check that qParams is consistent with qOldParams
1724:    ]
      
1732:    @MethodModifiers( decl )
1739:    >> decl;
      
      
1743: ProcDecl:
1745:    Node decl = @ProcHeaderDecl
      
         % Body may be a statement, "forward", "external".
         % Note, this syntax is based on FPC, and I'm not sure if other Pascals are similar.
         % FPC says that forward, external, cdecl, name, etc are not reserved words -
         % I think this means the user may declare other things with those names, but if so the
         % original meaning is lost.  I'll make them keywords for simplicity, for now
         % (just not too happy about "name").
      
1751:    [
1751:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
1753:       | pExternal : @ExternalDecl( decl )
      
1762:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
1769:          Node paramScope = oNodeGet( decl, qParams )
1782:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the proc
1788:          int level = oNodeGetInt( paramScope, qLevel )
1801:          oScopeBegin( level, allocDown )
1810:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
1821:          Label label = oNodeGetLabel( decl, qValue )
1834:          @Block( nLocalVar, label )
1844:          oNodeSetBoolean( decl, qBodyDefined, true )
1856:          oScopeEnd
      
1857:          oScopeEnd  % paramScope
1858:    ]
1858:    ';';
      
      
      
1861: FuncHeaderDecl >> Node:
1863:    pIdent
      
         % If we already have a forward declaration, we'll modify that decl
         % instead of creating a second symbol table entry.
         % (Alternatively could delete or hide the old entry.)
1865:    boolean redeclaring = false
1871:    Node decl = oScopeFindInCurrentScope
      
1876:    [ oNodeNull( decl )
1883:       | true :
               % first declaration
1884:          decl = @newIdent( nFunc, LAST_ID )
1897:          oNodeSetLabel( decl, qValue, oLabelNew )
      
1908:       | false :
               % we already have a declaration.
               % Keep it, and its label.
1910:          redeclaring = true
1916:          [ oNodeGetBoolean( decl, qBodyDefined )
1926:             | true : #eAlreadyDefined
1929:             | * :
1934:          ]
1934:          [ oNodeType( decl )
1941:             | nFunc :
1942:             | * : #eAlreadyDefined   % wrong kind
1949:          ]
               % Move the existing param scope and return value aside,
               % so we can check that the new one is consistent.
               % And, the body will want to see the new one since the names might differ.
               % TO DO: If qOldParams already set, we have multiple forward decls,
               % which I believe is supposed to be an error.
1949:          oNodeSet( decl, qOldParams, oNodeGet( decl, qParams ) )
1968:          oNodeSet( decl, qParams, Null )
1980:          oNodeSet( decl, qOldType, oNodeGet( decl, qType ) )
1999:          oNodeSet( decl, qType, Null )
2011:    ]
      
2019:    int level = @ScopeLevel
2025:    boolean nested = greater( level, 0 )
2038:    inc( level )
2044:    oScopeBegin( level, allocUp )
2053:    Node paramScope = oScopeCurrent
      
         % A nested method has a hidden first param for the parent static scope.
         % This won't appear in the param decls list, just reserve space for it.
         % It's first so the static chain is always at a fixed offset from the frame pointer.
2058:    [ nested
2061:       | true :
2062:          int offset = oScopeAllocType( @PointerTypeTo( IntegerType ) )   % arbitrary ptr type
2077:       | * :
2082:    ]
      
2082:    @FormalArgDecl
2084:    oNodeSet( decl, qParams, paramScope )
      
2096:    ':'
      
2098:    Node theType
2098:    @TypeRef( theType )
2105:    oNodeSet( decl, qType, theType )
      
         % The function's param space gets an additional pointer,
         % which will point to a temporary in the caller's scope.
         % This pointer is essentially a VAR param, but I won't create an nParam for it.
      
2117:    Node ptrType = @PointerTypeTo( theType )
2128:    oNodeSetInt( decl, qResultOffset, oScopeAllocType( ptrType ) )
2144:    oScopeEnd
2145:    ';'
      
2147:    [ redeclaring
2150:       | false : oScopeDeclare( decl )
2157:       | true :  % TO DO: check that qParams is consistent with qOldParams
                      % and qType is consistent with qOldType
2159:    ]
      
2167:    @MethodModifiers( decl )
      
2174:    >> decl;
      
      
2178: FuncDecl:
2180:    Node decl = @FuncHeaderDecl
      
         % Body may be a statement, "forward", "external".
2186:    [
2186:       | pForward :
               % Nothing to do.  We simply won't set qBodyDefined.
      
2188:       | pExternal : @ExternalDecl( decl )
      
2197:       | * :
               % Body statement
      
               % Enter the params scope again, so params are visible in body.
               % TO DO: Perhaps I could mark the scope read-only at this point.
2204:          Node paramScope = oNodeGet( decl, qParams )
2217:          oScopeEnter( paramScope )
      
               % Start scope for declarations within the func
2223:          int level = oNodeGetInt( paramScope, qLevel )
2236:          oScopeBegin( level, allocDown )
2245:          oNodeSet( decl, qChildScope, oScopeCurrent )
      
2256:          Label label = oNodeGetLabel( decl, qValue )
2269:          @Block( nLocalVar, label )
2279:          oNodeSetBoolean( decl, qBodyDefined, true )
2291:          oScopeEnd
      
2292:          oScopeEnd  % paramScope
2293:    ]
2293:    ';';
      
      
2296: FormalArgDecl:
2298:    [
2298:       | '(' :
2300:          {
2300:             NodeVec decls = oNodeVecNew
2305:             Node decl
2305:             boolean isInOut = false
      
2311:             [
2311:                | pVar : isInOut = true
2319:                | * :
2324:             ]
      
2324:             {  pIdent
      
2326:                decl = @newIdent( nParam, LAST_ID )
2339:                oNodeSetBoolean( decl, qInOut, isInOut )
2351:                oNodeVecAppend( decls, decl )
      
2360:                [
2360:                   | ':' : >
2364:                   | ',' :
2366:                ]
2374:             }
      
2376:             Node theType
2376:             @TypeRef( theType )
      
                  % VAR param is declared with its given type, but allocated as a pointer.
2383:             Node allocType
2383:             [ isInOut
2386:                | true :   allocType = @PointerTypeTo( theType )
2398:                | * :      allocType = theType
2409:             ]
      
2409:             int i = 0
2415:             {[ equal( i, oNodeVecSize( decls ) )
2429:                | false :
2430:                   decl = oNodeVecElement( decls, i )
      
2443:                   oNodeSet( decl, qType, theType )
2455:                   oScopeDeclare( decl )
2461:                   oNodeSetInt( decl, qValue, oScopeAllocType( allocType ) )
2477:                   inc( i )
2483:                | * :
2488:                   >
2490:             ]}
      
2492:             oNodeVecDelete( decls )
      
2498:             [
2498:                | ')' : >
2502:                | ';' :
2504:             ]
2512:          }
2514:       | * :
2519:    ];
      
      
2520: ConstDecl:
2522:    {[
2522:       | pIdent :
2524:          [
2524:             | ':' :
2526:                @TypedConstDecl
2528:             | * :
2533:                @TrueConstDecl
2535:          ]
2535:       | * :
2540:          >
2542:    ]};
      
      
      % Parse a true constant declaration (as opposed to a typed const declaration).
      % The "true constant" terminology comes from Delphi docs.  It refers to a const that is
      % evaluated at compile time, rather than at program startup time.
      %
      % We've just accepted the identifier.
      %
2545: TrueConstDecl:
2547:    int id = LAST_ID
2552:    '='
      
2554:    @ConstExpr
      
2556:    Node decl
2556:    [ oTypeSNodeType
2558:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType,
2559:         nPointerType, nUniversalPointerType :
2559:          decl = @newIdent( nConst, id )
2573:          oNodeSetInt( decl, qValue, oValueTop )
2584:       | nDoubleType :
2586:          decl = @newIdent( nConstDouble, id )
2600:          oNodeSetDouble( decl, qValueDouble, oValueTopDouble )
2611:       | nStrLitType :
2613:          decl = @newIdent( nConstStr, id )
2627:          oNodeSetString( decl, qValueStr, oValueTopString )
2638:       | * :  #eNotAllowed
2661:    ]
2661:    oValuePop
2662:    oNodeSet( decl, qType, oTypeSTop )
2673:    oTypeSPop
2674:    oScopeDeclare( decl )
2680:    ';'
2683:    ;
      
      
      % Parse a typed const declaration.
      % We've just accepted the identifier and ':'
      %
2683: TypedConstDecl:
2685:    Node decl = @newIdent( nTypedConst, LAST_ID )
      
2698:    Node theType
2698:    @TypeRef( theType )
2705:    oNodeSet( decl, qType, theType )
      
         % Array and record consts are allocated in global memory,
         % with global offset stored as decl value.
         % Scalar consts are not allocated in memory, and their value is
         % stored directly as the decl value, as I do with "true constants".
         %
         % TO DO: I probably should store scalar consts in memory too, in case somebody
         % wants to get a pointer to them.  And anyway, typed constants can't be used in
         % constant expressions, so less need to store value in decl node.
      
         % TO DO: skip subranges, similar to oTypeSNodeType.
2717:    [ oNodeType( theType )
2724:       | nBooleanType, nByteType, nCharType, nIntegerType, nEnumType,
2725:         nPointerType, nUniversalPointerType :
               % Parse expression and store value in decl
2725:          '='
      
2727:          oTypeSPush( theType )
2733:          @ConstExpr
2735:          @ConstCoerceType
      
2737:          oNodeSetInt( decl, qValue, oValueTop )
2748:          oValuePop
2749:          oTypeSPop
2750:          oScopeDeclare( decl )
2756:          ';'
      
2758:       | nShortStringType, nFileType :
2760:          #eNotImplemented
      
2762:       | nArrayType, nRecordType :
               % Allocate global space, store address in decl.
               % Push into global scope init code stream (since we'll be issuing code
               % rather than creating static data, at the moment).
               % Parse expression and store in global memory.
2764:          oScopeEnter( globalScope )
2770:          int addr = oScopeAllocType( theType )
2780:          oScopeEnd
2781:          oCodePush( @GetOrCreateInitCode( globalScope ) )
2792:          oNodeSetInt( decl, qValue, addr )
2804:          '='
2806:          @TypedConstInit( theType, addr )
2816:          oCodePop
2817:          oScopeDeclare( decl )
2823:          ';'
2825:    ]
2852:    ;
      
      
      % Parse the initial value of a constant that's being stored in global memory.
      % (An array or record constant, and recursively all its elements.)
      % Given the type, and the address in global memory for the const value.
      % The caller has already pushed into the global init code stream.
      %
2852: TypedConstInit( Node theType, int addr ):
      
         % TO DO: skip subranges, similar to oTypeSNodeTYpe
2854:    [ oNodeType( theType )
2861:       | nArrayType :
2862:          Node baseType = oNodeGet( theType, qBaseType )
2875:          Node indexType = oNodeGet( theType, qIndexType )
2888:          int low = @OrdinalLow( indexType )
2899:          int high = @OrdinalHigh( indexType )
2910:          int elementSize = oNodeGetInt( baseType, qSize )
      
2923:          '('
               % Loop over elements
2925:          int i = low
2931:          {
2931:             @TypedConstInit( baseType, addr )
2941:             [ equal( i, high )
2951:                | true : >
2954:                | false :
2956:             ]
2964:             ','
2966:             addr = add( addr, elementSize )
2979:             inc( i )
2985:          }
2987:          ')'
      
2989:       | nRecordType :
2991:          '('
2993:          Node fieldScope = oNodeGet( theType, qScope )
               % Loop over zero or more named fields.  It's not necessary to name them all.
               % fpc says the names that are given should be in order, but I'm not requiring that.
               % Since this is global memory, uninitialized fields will be left as 0.
3006:          {
3006:             [
3006:                | pIdent :
3008:                | * :  >
3015:             ]
3015:             Node field = oScopeFindRequireInScope( fieldScope )
3025:             ':'
3027:             Node fieldType = oNodeGet( field, qType )
3040:             int fieldAddr = add( addr, oNodeGetInt( field, qValue ) )
3060:             @TypedConstInit( fieldType, fieldAddr )
3070:             [
3070:                | ';' :
3072:                | * :  >
3079:             ]
3079:          }
3081:          ')'
      
3083:       | nBooleanType, nByteType, nCharType:
3085:          .tPushAddrGlobal  oEmitInt( addr )
3093:          oTypeSPush( theType )
3099:          @ConstExpr
3101:          @ConstCoerceType
3103:          .tPushConstI  oEmitInt( oValueTop )
3110:          oValuePop
3111:          oTypeSPop
3112:          .tAssignB
      
3114:       | nIntegerType, nEnumType:
3116:          .tPushAddrGlobal  oEmitInt( addr )
3124:          oTypeSPush( theType )
3130:          @ConstExpr
3132:          @ConstCoerceType
3134:          .tPushConstI  oEmitInt( oValueTop )
3141:          oValuePop
3142:          oTypeSPop
3143:          .tAssignI
      
3145:       | nDoubleType:
3147:          #eNotImplemented
      
3149:       | nPointerType, nUniversalPointerType :
3151:          .tPushAddrGlobal  oEmitInt( addr )
3159:          oTypeSPush( theType )
3165:          @ConstExpr
3167:          @ConstCoerceType
3169:          .tPushConstI  oEmitInt( oValueTop )   % only allowing ptr constant Nil so don't need tPushConstP or link redirection
3176:          oValuePop
3177:          oTypeSPop
3178:          .tAssignP
      
3180:       | nShortStringType, nFileType :
3182:          #eNotImplemented
3184:    ]
3213:    ;
      
      
3213: TypeDecl:
3215:    {[
3215:       | pIdent :
3217:          Node decl = @newIdent( nTypeDecl, LAST_ID )
3230:          '='
3232:          Node theType
3232:          @TypeRef( theType )
3239:          oNodeSet( decl, qType, theType )
3251:          oScopeDeclare( decl )
3257:          ';'
3259:       | * :
3264:          >
3266:    ]};
      
3269: VarDecl( node_type varNodeType ):
3271:    {[
3271:       | pIdent :
3273:          NodeVec decls = oNodeVecNew
3278:          Node decl
3278:          {
3278:             decl = @newIdent( varNodeType, LAST_ID )
3291:             oNodeVecAppend( decls, decl )
3300:             [
3300:                | ',' :
3302:                   pIdent
3304:                | * :
3309:                   >
3311:             ]
3311:          }
3313:          ':'
3315:          Node theType
3315:          @TypeRef( theType )
      
3322:          int i = 0
3328:          {[ equal( i, oNodeVecSize( decls ) )
3342:             | false :
3343:                decl = oNodeVecElement( decls, i )
3356:                oNodeSet( decl, qType, theType )
3368:                oScopeDeclareAlloc( decl )
3374:                inc( i )
3380:             | * :
3385:               >
3387:          ]}
      
               % optional initialization
3389:          [
3389:             | '=' :
3391:                [ oNodeVecSize( decls )
3398:                   | 1 :
3399:                   | * :  #eOnlyOneVarCanBeInitialized
3406:                ]
      
                     % we need an initCode stream for this scope
3406:                Code initCode = @GetOrCreateInitCode( oScopeCurrent )
3416:                oCodePush( initCode )
      
                     % currently the global level has two scopes:
                     % the one for declarations e.g. vars and methods,
                     % and a second one for temporaries needed by the main block stmt.
                     % During evaluation of the init expr, we need to be in the 2nd scope
                     % in case the expression requires temporaries
                     % (so the temporaries get allocated in the right scope).
                     % TO DO: Maybe I should make the global scope the special case, instead.
3422:                boolean changedScope = false
3428:                [ equal_zero( @ScopeLevel )
3435:                   | true : oScopeEnter( initScope )
3442:                            changedScope = true
3448:                   | * :
3453:                ]
                     % generate assignment in initCode stream
3453:                @LValueVar( decl, true )
3463:                @Expr
3465:                @CoerceType
3467:                @Assign
3469:                [ changedScope
3472:                   | true : oScopeEnd
3474:                   | * :
3479:                ]
3479:                oCodePop
                   
3480:             | * :
3485:          ]
      
3485:          oNodeVecDelete( decls )
3491:          ';'
3493:       | * :
3498:          >
3500:    ]};
      
      
      % Parse a list of label declarations.
      % We'll create a tcode label at declaration time, for each user label.
      % If the user label is an integer, we'll record it as _label_<int> in the decl.
      %
3503: LabelDecl:
3505:    {
3505:       Node decl
3505:       [
3505:          | pIdent :
3507:          | pIntLit :
                  % Replace token with identifier "_label_<intlit>"
3509:             oChangeIntLitToLabelIdent
3510:       ]
3518:       decl = @newIdent( nLabel, LAST_ID )
            % TO DO: ensure not already declared in this scope.
            %        Or maybe that can be part of oScopeDeclare.
3531:       Label label = oLabelNew
3536:       oNodeSetLabel( decl, qValue, label )
3548:       oScopeDeclare( decl )
3554:       [
3554:          | ',' :
3556:          | * :
3561:             >
3563:       ]
3563:    }
3565:    ';'
3568:    ;
3568: include 'pascal_constexpr.ssl'
      %
      % Pascal Compiler
      %
      
      % --------------------------- Const Expressions --------------------------
      
      
      % Constant expressions are evaluated at compile time.
      % They are limited to constant literals, declared constants (not including TypedConstants!)
      % and a small selection of built-in functions. 
      %
      % The value of a constant expression is left on the Value Stack.
      % The type is left on the Type Stack.
      
3568: ConstExpr:
3570:    @ConstBoolExpr
3572:    {[
3572:       | '=' :
3574:          @ConstBoolTerm
3576:          @ConstMatchTypes
3578:          [ oTypeSNodeType
3580:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueEqual
3589:             | nDoubleType :   oValueEqualD
3592:             | * :             oValueEqual
3600:          ]
3600:          oTypeSPop  oTypeSPush( BooleanType )
3607:       | '<>' :
3609:          @ConstBoolExpr
3611:          @ConstMatchTypes
3613:          [ oTypeSNodeType
3615:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueNotEqual
3624:             | nDoubleType :   oValueNotEqualD
3627:             | * :             oValueNotEqual
3635:          ]
3635:          oTypeSPop  oTypeSPush( BooleanType )
3642:       | '<' :
3644:          @ConstBoolExpr
3646:          @ConstMatchTypes
3648:          [ oTypeSNodeType
3650:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueLess
3659:             | nDoubleType :   oValueLessD
3662:             | * :             oValueLess
3670:          ]
3670:          oTypeSPop  oTypeSPush( BooleanType )
3677:       | '>' :
3679:          @ConstBoolExpr
3681:          @ConstMatchTypes
3683:          [ oTypeSNodeType
3685:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueGreater
3694:             | nDoubleType :   oValueGreaterD
3697:             | * :             oValueGreater
3705:          ]
3705:          oTypeSPop  oTypeSPush( BooleanType )
3712:       | '<=' :
3714:          @ConstBoolExpr
3716:          @ConstMatchTypes
3718:          [ oTypeSNodeType
3720:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueLessEqual
3729:             | nDoubleType :   oValueLessEqualD
3732:             | * :             oValueLessEqual
3740:          ]
3740:          oTypeSPop  oTypeSPush( BooleanType )
3747:       | '>=' :
3749:          @ConstBoolExpr
3751:          @ConstMatchTypes
3753:          [ oTypeSNodeType
3755:             | nStrLitType :   oValueStringCmp  oValuePush( 0 )  oValueGreaterEqual
3764:             | nDoubleType :   oValueGreaterEqualD
3767:             | * :             oValueGreaterEqual
3775:          ]
3775:          oTypeSPop  oTypeSPush( BooleanType )
3782:       | * :  >
3799:    ]};
      
      
      % Same as ConstExpr, but allow a typename as a primary.
      % This is for use within sizeof().
      % The value produced by that primary is bogus, but doesn't matter.
      %
3802: ConstExprAllowTypeName:
3804:    boolean oldAllowTypeName = flagExprAllowTypeName
3810:    flagExprAllowTypeName = true
3816:    @ConstExpr
3818:    flagExprAllowTypeName = oldAllowTypeName
3825:    ;
      
      
3825: ConstBoolExpr:
3827:    @ConstBoolTerm
3829:    {[
3829:       | pOr :
3831:          @ConstRequireBool
3833:          @ConstBoolTerm
3835:          @ConstRequireBoolPop
3837:          oValueOr
3838:       | * :  >
3845:    ]};
      
      
3848: ConstBoolTerm:
3850:    @ConstBoolFactor
3852:    {[
3852:       | pAnd :
3854:          @ConstRequireBool
3856:          @ConstBoolFactor
3858:          @ConstRequireBoolPop
3860:          oValueAnd
3861:       | * :  >
3868:    ]};
      
      
3871: ConstBoolFactor:
3873:    [
3873:       | pNot :
3875:          @ConstBoolFactor
3877:          @ConstRequireBool
3879:          oValueNot
3880:       | * :
3885:          @ConstArithExpr
3887:    ];
      
      
3888: ConstArithExpr:
3890:    @ConstTerm
3892:    {[
3892:       | '+' :
3894:          @ConstTerm
3896:          @ConstMatchTypes
3898:          [ oTypeSNodeType
3900:             | nStrLitType :   oValueStringConcat
3902:             | nDoubleType :   oValueAddD
3905:             | * :             oValueAdd
3913:          ]
3913:       | '-' :
3915:          @ConstTerm
3917:          @ConstMatchTypes
3919:          [ oTypeSNodeType
3921:             | nStrLitType :   #eNotAllowed
3924:             | nDoubleType :   oValueSubD
3927:             | * :             oValueSub
3935:          ]
3935:       | * :  >
3944:    ]};
      
      
3947: ConstTerm:
3949:    @ConstFactor
3951:    {[
3951:       | pTimes :
3953:          @ConstFactor
3955:          @ConstMatchTypes
3957:          [ oTypeSNodeType
3959:             | nStrLitType :   #eNotAllowed
3962:             | nDoubleType :   oValueMultD
3965:             | * :             oValueMult
3973:          ]
3973:       | pDivide :
3975:          @ConstFactor
3977:          @ConstMatchTypes
3979:          [ oTypeSNodeType
3981:             | nStrLitType :   #eNotAllowed
3984:             | nDoubleType :   oValueDivD
3987:             | * :             oValueDiv
3995:          ]
3995:       | * :  >
4004:    ]};
      
      
4007: ConstFactor:
4009:    [
4009:       | pPlus :
4011:          @ConstPrimary
4013:       | pMinus :
4015:          @ConstPrimary
4017:          [ oTypeSNodeType
4019:             | nStrLitType :   #eNotAllowed
4022:             | nDoubleType :   oValueNegateD
4025:             | * :             oValueNegate
4033:          ]
4033:       | * :
4040:          @ConstPrimary
4042:    ];
      
      
4043: ConstPrimary:
4045:    [
4045:       | pIntLit :
4047:          oValuePush( TOKEN_VALUE )
4052:          oTypeSPush( IntegerType )
4058:       | pCharLit :
4060:          oValuePush( TOKEN_VALUE )
4065:          oTypeSPush( CharType )
4071:       | pDoubleLit :
4073:          oValuePushDouble( TOKEN_VALUE_DOUBLE )
4078:          oTypeSPush( DoubleType )
4084:       | pStrLit :
4086:          oValuePushString( CURRENT_STRLIT )
4091:          oTypeSPush( StrLitType )
4097:       | '(' :
4099:          @ConstExpr
4101:          ')'
4103:       | pIdent :
4105:          Node decl = oScopeFindRequire
4110:          @ResolveUnitRef( decl )
4117:          [ oNodeType( decl )
4124:             | nBuiltInFunc :
4125:                @ConstBuiltInFunc( decl )
4132:             | nConst :
4134:                oValuePush( oNodeGetInt( decl, qValue ) )
4147:                oTypeSPush( oNodeGet( decl, qType ) )
4160:             | nConstStr :
4162:                oValuePushString( oNodeGetString( decl, qValueStr ) )
4175:                oTypeSPush( oNodeGet( decl, qType ) )
4188:             | nEnumValue :
4190:                oValuePush( oNodeGetInt( decl, qValue ) )
4203:                oTypeSPush( oNodeGet( decl, qType ) )
4216:             | nTypeDecl :
                     % A type cast, or a typename primary when within sizeof()
4218:                oTypeSPush( oNodeGet( decl, qType ) )
4231:                [
4231:                   | '(' :
                           % Type cast
4233:                      @ConstExpr
4235:                      ')'
4237:                      @ConstCastType
                           % Constexprs are not compound types or dereferenceable pointers (I believe)
                           % so no need to check for additional suffixes here as we do in PrimaryAllowCF
4239:                   | * :
                           % Not a type cast
                           % A raw typename is only allowed in expressions within sizeof
4244:                      [ flagExprAllowTypeName
4247:                         | true :
                                 % The value we produce is bogus.  Only the type stack matters.
4248:                            oValuePush( 0 )
4254:                         | * :   #eTypeNameNotAllowedHere
4261:                      ]
4261:                ]
      
4261:             | * :
4274:                #eNotConst
4276:                oValuePush( 0 )
4282:                oTypeSPush( IntegerType )
4288:          ]
4288:       | '@' :
4290:          #eNotImplemented
4292:          oValuePush( 0 )
4298:          oTypeSPush( UniversalPointerType )
4304:       | * :
4321:          #eNotConst
4323:          oValuePush( 0 )
4329:          oTypeSPush( IntegerType )
4335:    ];
      
4336: ConstRequireBoolPop:
4338:    [ oTypeSNodeType
4340:       | nBooleanType :
4341:       | * :          #eNotBoolean
4348:    ]
4348:    oTypeSPop;
      
      
4350: ConstRequireBool:
4352:    [ oTypeSNodeType
4354:       | nBooleanType :
4355:       | * :          #eNotBoolean
4362:    ];
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      % The types refer to constant values on the Value Stack,
      % so any implicit conversion would occur there, not in code.
      %
      % Some implicit conversion is allowed for either of the types.
      % See also ConstCoerceType where only the top type may change.
      %
4363: ConstMatchTypes:
4365:    node_type nt = oTypeSNodeType
4370:    oTypeSPop
4371:    [ equal_node_type( nt, oTypeSNodeType )
4380:       | false :
               % Some implicit conversion is allowed even here
4381:          [ oTypeSNodeType
4383:             | nPointerType :
4384:                [ nt
4387:                   | nUniversalPointerType :  >>
4389:                   | * :
4394:                ]
4394:             | nUniversalPointerType :
4396:                [ nt
4399:                   | nPointerType :  >>
4401:                   | * :
4406:                ]
4406:             | nStrLitType :
4408:                [ nt
4411:                   | nCharType :
4412:                      oValueCharToString
4413:                      >>
4414:                   | * :
4419:                ]
4419:             | nCharType :
4421:                [ nt
4424:                   | nStrLitType :
4425:                      oValueSwap
4426:                      oValueCharToString
4427:                      oValueSwap
4428:                      oTypeSPop
4429:                      oTypeSPush( StrLitType )
4435:                      >>
4436:                   | * :
4441:                ]
4441:             | * :
4452:          ]
4452:          #eTypeMismatch
4454:       | * :
4459:    ];
      
      
      % Given a constant value on the value stack, its type on the type stack,
      % and the desired type under it on the type stack.
      % Perform any necessary implicit conversions so the value is the desired type.
      % Pop the top type, leaving only the desired type.
      %
4460: ConstCoerceType:
4462:    node_type nt = oTypeSNodeType
4467:    oTypeSPop
4468:    [ equal_node_type( nt, oTypeSNodeType )
4477:       | false :
               % Can we implicitly convert the value to the desired type?
4478:          [ oTypeSNodeType
4480:             | nIntegerType :
4481:                [ nt
4484:                   | nByteType :  >>
4486:                   | * :
4491:                ]
4491:             | nByteType :
4493:                [ nt
4496:                   | nIntegerType :  >>
4498:                   | * :
4503:                ]
4503:             | nPointerType :
4505:                [ nt
4508:                   | nUniversalPointerType :  >>
4510:                   | * :
4515:                ]
4515:             | nUniversalPointerType :
4517:                [ nt
4520:                   | nPointerType :  >>
4522:                   | * :
4527:                ]
4527:             | nStrLitType :
4529:                [ nt
4532:                   | nCharType :
4533:                      oValueCharToString
4534:                      >>
4535:                   | * :
4540:                ]
4540:             | nShortStringType :
4542:                [ nt
4545:                   | nStrLitType :  >>
4547:                   | nCharType :
4549:                      oValueCharToString
4550:                      >>
4551:                   | * :
4558:                ]
4558:             | * :
4573:          ]
4573:          #eTypeMismatch
4575:       | * :
4580:    ];
      
      
      % Given a constant value on the value stack, its type on the type stack,
      % and the desired type under it on the type stack.
      % Perform any necessary conversions so the value is cast to the desired type.
      % Pop the top type, leaving only the desired type.
      %
      % This is stronger than ConstCoerceType, since it isn't limited to implicit conversions.
      % There are still going to be limits on what is allowed though.
      %
4581: ConstCastType:
4583:    node_type nt = oTypeSNodeType
4588:    oTypeSPop
4589:    [ equal_node_type( nt, oTypeSNodeType )
4598:       | false :
               % Can we cast the value to the desired type?
4599:          [ oTypeSNodeType
4601:             | nIntegerType, nEnumType :
4602:                [ nt
4605:                   | nByteType, nCharType, nBooleanType :  >>
4607:                   | nIntegerType, nEnumType :  >>
                        % TO DO: do we allow explicit cast of double to integer?
                        %  Or does the user have to call trunc() / round()?
4610:                   | * :
4623:                ]
4623:             | nByteType, nCharType, nBooleanType :
4625:                [ nt
4628:                   | nByteType, nCharType, nBooleanType :  >>
4630:                   | nIntegerType, nEnumType :  >>
4633:                   | * :
4646:                ]
4646:             | nDoubleType :
4648:                [ nt
4651:                   | nByteType, nCharType, nBooleanType, nIntegerType, nEnumType :
4652:                      oValueIntToDouble
4653:                      >>
4654:                   | nDoubleType :  >>
4657:                   | * :
4672:                ]
4672:             | nPointerType :
4674:                [ nt
4677:                   | nUniversalPointerType :  >>
4679:                   | * :
4684:                ]
4684:             | nUniversalPointerType :
4686:                [ nt
4689:                   | nPointerType :  >>
4691:                   | * :
4696:                ]
4696:             | nStrLitType :
4698:                [ nt
4701:                   | nCharType :
4702:                      oValueCharToString
4703:                      >>
4704:                   | * :
4709:                ]
4709:             | nShortStringType :
4711:                [ nt
4714:                   | nStrLitType :  >>
4716:                   | nCharType :
4718:                      oValueCharToString
4719:                      >>
4720:                   | * :
4727:                ]
4727:             | * :
4750:          ]
4750:          #eTypeMismatch
4752:       | * :
4757:    ];
      
      
      % These are the methods that Pascal allows in a constant expression:
      %   Abs( x: integer_or_real ) : integer_or_real
      %   Round( x: real ) : integer
      %   Trunc( x: real ) : integer
      %   Chr( x: integer ) : char
      %   Ord( x: ordinal ) : integer
      %   Length( s: string ) : integer
      %   Pred( x: ordinal ) : ordinal
      %   Succ( x: ordinal ) : ordinal
      %   SizeOf( var, expr, or typename ) : integer
      %   Odd( x: integer ) : boolean  - true if the argument is odd
      %
4758: ConstBuiltInFunc( Node method ):
      
         % Ord(x)
4760:    [ oNodeEqual( method, BuiltIn_Ord )
4770:       | true :
4771:          '('
4773:          @ConstExpr
4775:          ')'
4777:          [ oTypeSNodeType
4779:             | nIntegerType, nEnumType :
4780:             | nBooleanType, nByteType, nCharType :
4782:             | * :  #eTypeMismatch
4797:          ]
4797:          oTypeSPop
4798:          oTypeSPush( IntegerType )
4804:          ')'
4806:          >>
4807:       | * :
4812:    ]
      
         % Chr(x)
4812:    [ oNodeEqual( method, BuiltIn_Chr )
4822:       | true :
4823:          '('
4825:          @ConstExpr
4827:          ')'
4829:          [ oTypeSNodeType
4831:             | nIntegerType :
4832:             | nByteType :
4834:             | * :  #eTypeMismatch
4843:          ]
4843:          oTypeSPop
4844:          oTypeSPush( CharType )
4850:          ')'
4852:          >>
4853:       | * :
4858:    ]
      
         % Pred(x)
4858:    [ oNodeEqual( method, BuiltIn_Pred )
4868:       | true :
4869:          '('
4871:          @ConstExpr
4873:          [ oTypeSNodeType
4875:             | nEnumType :
4876:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
4885:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
4888:                   | * :
4893:                ]
4893:             | * :  #eTypeMismatch
4900:          ]
4900:          oValuePush( 1 )  oValueSub
4907:          ')'
4909:          >>
4910:       | * :
4915:    ]
      
         % Succ(x)
4915:    [ oNodeEqual( method, BuiltIn_Succ )
4925:       | true :
4926:          '('
4928:          @ConstExpr
4930:          [ oTypeSNodeType
4932:             | nEnumType :
4933:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
4942:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
4945:                   | * :
4950:                ]
4950:             | * :  #eTypeMismatch
4957:          ]
4957:          oValuePush( 1 )  oValueAdd
4964:          ')'
4966:          >>
4967:       | * :
4972:    ]
      
         % Sizeof(x)
4972:    [ oNodeEqual( method, BuiltIn_Sizeof )
4982:       | true :
4983:          '('
               % Parse expression but only for its type.
               % And, allow use of typename as a primary in the expression.
4985:          @ConstExprAllowTypeName
4987:          oValuePop
4988:          Node theType = oTypeSTop
4993:          oTypeSPop
4994:          oValuePush( oNodeGetInt( theType, qSize ) )
5007:          oTypeSPush( IntegerType )
5013:          ')'
5015:          >>
5016:       | * :
5021:    ]
      
5021:    #eNotImplemented
5024:    ;
      
      
5024: include 'pascal_expr.ssl'
      %
      % Pascal Compiler
      %
      
      
      % ------------------------------ Expressions -----------------------------
      
      
      % There are two wrappers leading into expression parsing:
      %   Expr()
      %   BooleanExprControlFlow( out Label falseLabel )
      %
      % Expr always produces a value on the runtime expr stack,
      % and pushes its type on the type stack.
      %
      % BooleanExprControlFlow always generates control-flow code.
      % It does not push a value on the runtime expr stack.
      % It does not push a type on the type stack.
      % The control flow code ends up at Here if the expr is true,
      % and jumps to falseLabel if the expr is false.
      % This rule allocates falseLabel, and passes it back.
      % The caller will need to define its location.
      %
      % The internal methods of expr parsing may produce a mix of
      % values and control flow, depending on the operators seen.
      % We don't always do one or the other, hoping to be efficient for
      % cases like   "func_call( bool_var1, bool_var2 )"
      % as well as  "if bool_expr1 or bool_expr2 then ...".
      % If a subexpression rule produces control flow, it will allocate a
      % falseLabel and pass it back up.  And it will push the
      % result type as BooleanFlowType, to distinguish from BooleanType
      % which corresponds with a boolean value on the expr stack.
      % 
      % Note that my expression parsing is broken into more levels than
      % grammars describe for Pascal precedence levels.  This follows my
      % original parser implementation.  I think my rationale was that
      % operators from the levels that I split up couldn't have been
      % mixed anyway, since they require different data types
      % (e.g. boolean vs int/real).  And splitting them up simplified
      % my code.  But, I should revisit this.
      %
      
      
      % Public entry point:
      %
      % Parse an expression, leaving a value on the runtime expr stack
      % and its type on the type stack.
      %
      % This rule does not export control flow (though it may generate
      % control flow internally for subexpressions).
      %
5024: Expr:
5026:    Label falseLabel = labelNull
      
5032:    @ExprAllowFlow( falseLabel )
5039:    @FlowToVal( falseLabel );
      
      
      % Public entry point:
      %
      % Parse an expression, just like Expr,
      % but also allows type names as Primary elements of the expression.
      % This is for use by sizeof().
      % The value produced by that primary is bogus, but this is ok because the
      % caller (sizeof) is going to discard all generated code for the expression.
      % It's only interested in the type produced by the expression.
      %
5047: ExprAllowTypeName:
5049:    boolean oldAllowTypeName = flagExprAllowTypeName
5055:    flagExprAllowTypeName = true
5061:    @Expr
5063:    flagExprAllowTypeName = oldAllowTypeName
5070:    ;
      
      
      % Public entry point:
      %
      % Parse a Boolean expression, producing control flow code rather than a value.
      % Does not leave a value on the runtime expr stack.
      % Does not leave a type on the type stack.
      %
      % If the expression is true, the code will fall through to the end (Here).
      % If the expression is false, the code will jump to the given falseLabel,
      % which this rule will allocate but not define the location for.
      % The caller must do so.
      %
5070: BooleanExprControlFlow( out Label falseLabel ):
5072:    @ExprAllowFlow( falseLabel )
5079:    [ oTypeSNodeType
5081:       | nBooleanFlowType :
5082:       | nBooleanType :
               % convert value to control flow
5084:          falseLabel = oLabelNew
5089:          .tJumpFalse  oEmitLabel( falseLabel )
5097:       | * :
5104:          #eNotBoolean
5106:    ]
5106:    oTypeSPop;
      
      
      % If the current expr result is control flow, convert it to a value.
      % falseLabel is the label that had been used by the control flow.
      % On return it will be set to labelNull.
      %
5108: FlowToVal( inout Label falseLabel ):
5110:    [ oTypeSNodeType
5112:       | nBooleanFlowType :
5113:          Label doneLabel = oLabelNew
5118:          .tPushConstI  oEmitInt( 1 )
5126:          .tJump  oEmitLabel( doneLabel )
5134:          .tLabel  oEmitLabel( falseLabel )
5142:          .tPushConstI  oEmitInt( 0 )
5150:          .tLabel  oEmitLabel( doneLabel )
5158:          oTypeSPop
5159:          oTypeSPush( BooleanType )
5165:          falseLabel = labelNull
5171:       | * :
5176:    ];
      
      
      % If the current expr result is boolean value, convert it to control flow.
      % falseLabel will be allocated by this rule and passed back.
      % The caller must define its location.
      %
5177: ValToFlow( out Label falseLabel ):
5179:    [ oTypeSNodeType
5181:       | nBooleanType :
5182:          falseLabel = oLabelNew
5187:          .tJumpFalse  oEmitLabel( falseLabel )
5195:          oTypeSPop
5196:          oTypeSPush( BooleanFlowType )
5202:       | * :
5207:    ];
      
      
      % Parse an expression.  It may produce a value on the expr stack,
      % or control flow, depending on what's seen in the expression.
      % Leaves the expression type on the type stack.
      %
      % If the expression produces control flow, the expression type will be
      % nBooleanFlowType.  In this case, a true value falls through to Here,
      % and a false value jumps to falseLabel.  This rule will allocate falseLabel
      % and return it, but will not define its location; the caller must do so.
      %
      % If the expression produces a value, the value will be left on the
      % expression stack, and the type will be some type other than nBooleanFlowType.
      % In this case, falseLabel is ignored.
      %
5208: ExprAllowFlow( out Label falseLabel ):
5210:    @BoolExprAllowFlow( falseLabel )
5217:    {[
5217:       | '=' :
5219:          @FlowToVal( falseLabel )
5226:          @PromoteToIntOptional
5228:          @BoolExprAllowFlow( falseLabel )
5235:          @FlowToVal( falseLabel )
5242:          @PromoteToIntOptional
5244:          @MatchTypes
5246:          [ oTypeSNodeType
5248:             | nBooleanType, nCharType :     .tEqualB
5251:             | nIntegerType, nEnumType :     .tEqualI
5255:             | nPointerType, nUniversalPointerType :    .tEqualP
5259:             | nShortStringType, nStrLitType :
5261:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tEqualI
5273:             | * :                           #eNotAllowed
5294:          ]
5294:          oTypeSPop
5295:          oTypeSPush( BooleanType )
      
5301:       | '<>' :
5303:          @FlowToVal( falseLabel )
5310:          @PromoteToIntOptional
5312:          @BoolExprAllowFlow( falseLabel )
5319:          @FlowToVal( falseLabel )
5326:          @PromoteToIntOptional
5328:          @MatchTypes
5330:          [ oTypeSNodeType
5332:             | nBooleanType, nCharType :     .tNotEqualB
5335:             | nIntegerType, nEnumType :     .tNotEqualI
5339:             | nPointerType, nUniversalPointerType :    .tNotEqualP
5343:             | nShortStringType, nStrLitType :
5345:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tNotEqualI
5357:             | * :                           #eNotAllowed
5378:          ]
5378:          oTypeSPop
5379:          oTypeSPush( BooleanType )
      
5385:       | '<' :
5387:          @FlowToVal( falseLabel )
5394:          @PromoteToIntOptional
5396:          @BoolExprAllowFlow( falseLabel )
5403:          @FlowToVal( falseLabel )
5410:          @PromoteToIntOptional
5412:          @MatchTypes
5414:          [ oTypeSNodeType
5416:             | nBooleanType, nCharType :     .tLessB
5419:             | nIntegerType, nEnumType :     .tLessI
5423:             | nPointerType, nUniversalPointerType :   .tLessP
5427:             | nShortStringType, nStrLitType :
5429:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessI
5441:             | * :                           #eNotAllowed
5462:          ]
5462:          oTypeSPop
5463:          oTypeSPush( BooleanType )
      
5469:       | '>' :
5471:          @FlowToVal( falseLabel )
5478:          @PromoteToIntOptional
5480:          @BoolExprAllowFlow( falseLabel )
5487:          @FlowToVal( falseLabel )
5494:          @PromoteToIntOptional
5496:          @MatchTypes
5498:          [ oTypeSNodeType
5500:             | nBooleanType, nCharType :     .tGreaterB
5503:             | nIntegerType, nEnumType :     .tGreaterI
5507:             | nPointerType, nUniversalPointerType :   .tGreaterP
5511:             | nShortStringType, nStrLitType :
5513:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterI
5525:             | * :                           #eNotAllowed
5546:          ]
5546:          oTypeSPop
5547:          oTypeSPush( BooleanType )
      
5553:       | '<=' :
5555:          @FlowToVal( falseLabel )
5562:          @PromoteToIntOptional
5564:          @BoolExprAllowFlow( falseLabel )
5571:          @FlowToVal( falseLabel )
5578:          @PromoteToIntOptional
5580:          @MatchTypes
5582:          [ oTypeSNodeType
5584:             | nBooleanType, nCharType :     .tLessEqualB
5587:             | nIntegerType, nEnumType :     .tLessEqualI
5591:             | nPointerType, nUniversalPointerType :   .tLessEqualP
5595:             | nShortStringType, nStrLitType :
5597:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tLessEqualI
5609:             | * :                           #eNotAllowed
5630:          ]
5630:          oTypeSPop
5631:          oTypeSPush( BooleanType )
      
5637:       | '>=' :
5639:          @FlowToVal( falseLabel )
5646:          @PromoteToIntOptional
5648:          @BoolExprAllowFlow( falseLabel )
5655:          @FlowToVal( falseLabel )
5662:          @PromoteToIntOptional
5664:          @MatchTypes
5666:          [ oTypeSNodeType
5668:             | nBooleanType, nCharType :     .tGreaterEqualB
5671:             | nIntegerType, nEnumType :     .tGreaterEqualI
5675:             | nPointerType, nUniversalPointerType :   .tGreaterEqualP
5679:             | nShortStringType, nStrLitType :
5681:                @ShortStringCmp  .tPushConstI  oEmitInt( 0 )  .tGreaterEqualI
5693:             | * :                           #eNotAllowed
5714:          ]
5714:          oTypeSPop
5715:          oTypeSPush( BooleanType )
      
5721:       | * :
5736:          >
5738:    ]};
      
      
5741: BoolExprAllowFlow( out Label falseLabel ):
5743:    Label trueLabel = labelNull
      
5749:    @BoolTermAllowFlow( falseLabel )
5756:    {[
5756:       | pOr :
5758:          [ oTypeSNodeType
5760:             | nBooleanFlowType :
                     % We are true here. Jump ahead to done
5761:                [ equal_label( trueLabel, labelNull )
5771:                   | true :  trueLabel = oLabelNew
5777:                   | * :
5782:                ]
5782:                .tJump  oEmitLabel( trueLabel )
5790:             | nBooleanType :
5792:                @ValToFlow( falseLabel )
                     % We are true here. Jump ahead to done
5799:                [ equal_label( trueLabel, labelNull )
5809:                   | true :  trueLabel = oLabelNew
5815:                   | * :
5820:                ]
5820:                .tJump  oEmitLabel( trueLabel )
5828:             | * : #eNotBoolean
5837:          ]
5837:          oTypeSPop
      
               % false in previous term will jump here, to try this alternative term
5838:          .tLabel  oEmitLabel( falseLabel )
      
               % we'll get a new falseLabel for this term
5846:          falseLabel = labelNull
5852:          @BoolTermAllowFlow( falseLabel )
      
5859:          [ oTypeSNodeType
5861:             | nBooleanFlowType :
5862:             | nBooleanType :
5864:                @ValToFlow( falseLabel )
5871:             | * : #eNotBoolean
5880:          ]
      
5880:          oTypeSPop
5881:          oTypeSPush( BooleanFlowType )
      
5887:       | * :
5892:          >
5894:    ]}
      
         % any short-circuit trues jump here to the end
5896:    [ equal_label( trueLabel, labelNull )
5906:       | false :
5907:          .tLabel  oEmitLabel( trueLabel )
5915:       | * :
5920:    ]
5921:    ;
      
      
5921: BoolTermAllowFlow( out Label falseLabel ):
5923:    Label overallFalseLabel = labelNull
      
5929:    @BoolFactorAllowFlow( falseLabel )
5936:    {[
5936:       | pAnd :
5938:          [ oTypeSNodeType
5940:             | nBooleanFlowType :
5941:             | nBooleanType :
5943:                @ValToFlow( falseLabel )
5950:             | * :
5957:                #eNotBoolean
5959:          ]
5959:          oTypeSPop
      
               % We're going to have a different falseLabel for each term,
               % because we let each rule allocate its own (rather than accepting labels passed in).
               % And in this case we want them all to go to the same place,
               % to be determined by the caller.
               %
               % I'll allow for label aliases.  This will be more optimal than generating
               % multiple private false-handling code segments, that the true path would have to
               % jump around.  That would be hard to eliminate afterwards.
      
5960:          [ equal_label( overallFalseLabel, labelNull )
5970:             | true :
5971:                overallFalseLabel = oLabelNew
5976:                .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( overallFalseLabel )
5990:                falseLabel = overallFalseLabel
5996:             | * :
6001:          ]
      
6001:          Label factorFalseLabel = labelNull
6007:          @BoolFactorAllowFlow( factorFalseLabel )
      
6014:          [ oTypeSNodeType
6016:             | nBooleanFlowType :
6017:             | nBooleanType :
6019:                @ValToFlow( factorFalseLabel )
6026:             | * : #eNotBoolean
6035:          ]
6035:         .tLabelAlias  oEmitLabel( factorFalseLabel )  oEmitLabel( overallFalseLabel )
      
6049:       | * :
6054:          >
6056:    ]};
      
      
6059: BoolFactorAllowFlow( out Label falseLabel ):
6061:    [
6061:       | pNot :
6063:          Label factorFalseLabel = labelNull
      
6069:          @BoolFactorAllowFlow( factorFalseLabel )
6076:          [ oTypeSNodeType
6078:             | nBooleanFlowType :
                     % We have control flow, and are sitting at the point that has value false.
6079:                falseLabel = oLabelNew
6084:                .tJump  oEmitLabel( falseLabel )
                     % The true path jumps here
6092:                .tLabel  oEmitLabel( factorFalseLabel )
      
6100:             | nBooleanType :
                     % I have a value.  I'll leave it as a value, rather than create control flow.
                     % See how this goes.
6102:                .tNot
      
6104:             | * : #eNotBoolean
6113:          ]
      
6113:       | * :
6118:          @ArithExprAllowFlow( falseLabel )
6125:    ];
      
      
6126: ArithExprAllowFlow( out Label falseLabel ):
6128:    boolean first = true
6134:    int tempStrOffset
      
6134:    @TermAllowFlow( falseLabel )
6141:    {[
6141:       | '+' :
6143:          [ oTypeSNodeType
6145:             | nIntegerType, nByteType :
6146:                @PromoteToIntPop
6148:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
      
6155:                [ oTypeSNodeType
6157:                   | nPointerType, nUniversalPointerType :
                           % int + ptr
6158:                      .tSwap
                           % leave only the ptr type on the type stack (int was already popped above)
6160:                      @PointerAddition
6162:                   | * :
6169:                      @PromoteToInt
6171:                      .tAddI
6173:                ]
      
6173:             | nDoubleType :
6175:                @TermAllowFlow( falseLabel )
6182:                @PromoteToDoublePop
6184:                .tAddD
      
6186:             | nShortStringType, nStrLitType, nCharType :
                     % String concatenation
6188:                [ first
6191:                   | true :  % move into a temp string, so subsequent term(s) can further modify it.
6192:                             tempStrOffset = @MoveIntoTempShortString
6198:                             first = false
6204:                   | * :
6209:                ]
6209:                @TermAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6216:                [ oTypeSNodeType
6218:                   | nShortStringType, nStrLitType :
6219:                      @ShortStringAppendShortString
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6221:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6229:                      oTypeSPush( ShortStringType )
6235:                   | nCharType :
6237:                      @ShortStringAppendChar
                           % Have to re-push the temp string.
                           % If we ever have .tDup then the append method could do it and we wouldn't need this
6239:                      .tPushAddrLocal  oEmitInt( tempStrOffset )
6247:                      oTypeSPush( ShortStringType )
6253:                   | * :
6262:                      #eTypeMismatch
6264:                      oTypeSPop
6265:                ]
      
6265:             | nPointerType, nUniversalPointerType :
6267:                @TermAllowFlow( falseLabel )   % actually not allowing CF
6274:                @PromoteToIntPop
6276:                @PointerAddition
      
6278:             | * :
6297:                #eNotAllowed
6299:          ]
      
6299:       | '-' :
6301:          [ oTypeSNodeType
6303:             | nIntegerType, nByteType :
6304:                @PromoteToIntPop
6306:                @TermAllowFlow( falseLabel )
6313:                @PromoteToInt
6315:                .tSubI
      
6317:             | nDoubleType :
6319:                @TermAllowFlow( falseLabel )
6326:                @PromoteToDoublePop
6328:                .tSubD
      
6330:             | nPointerType, nUniversalPointerType :
6332:                @TermAllowFlow( falseLabel )
6339:                [ oTypeSNodeType
6341:                   | nIntegerType, nByteType :
6342:                      @PromoteToIntPop
6344:                      @PointerSubInt
6346:                   | nPointerType, nUniversalPointerType :
6348:                      @MatchTypes
6350:                      @PointerSubPointer
6352:                   | * :
6363:                      #eNotAllowed
6365:                ]
      
6365:             | * :  #eNotAllowed
      
6380:          ]
6380:       | * :
6387:          >
6389:    ]};
      
      
6392: TermAllowFlow( out Label falseLabel ):
6394:    @FactorAllowFlow( falseLabel )
6401:    {[
6401:       | '*' :
6403:          [ oTypeSNodeType
6405:             | nIntegerType, nByteType :
6406:                @PromoteToIntPop
6408:                @FactorAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6415:                @PromoteToInt
6417:                .tMultI
      
6419:             | nDoubleType :
6421:                @FactorAllowFlow( falseLabel )
6428:                @PromoteToDoublePop
6430:                .tMultD
      
6432:             | * :
6441:                #eNotAllowed
6443:          ]
      
6443:       | '/' :
6445:          [ oTypeSNodeType
6447:             | nIntegerType, nByteType :
6448:                @PromoteToIntPop
6450:                @FactorAllowFlow( falseLabel )
6457:                @PromoteToInt
6459:                .tDivI
      
6461:             | nDoubleType :
6463:                @FactorAllowFlow( falseLabel )
6470:                @PromoteToDoublePop
6472:                .tDivD
      
6474:             | * :
6483:                #eNotAllowed
6485:          ]
      
6485:       | * :
6492:          >
6494:    ]};
      
      
6497: FactorAllowFlow( out Label falseLabel ):
6499:    [
6499:       | '+' :
6501:          @PrimaryAllowFlow( falseLabel )  % actually not allowing CF, will be caught by type check
6508:          [ oTypeSNodeType
6510:             | nIntegerType, nByteType :
6511:             | nDoubleType :
6513:             | * :
6522:                #eNotAllowed
6524:          ]
6524:       | '-' :
6526:          @PrimaryAllowFlow( falseLabel )
6533:          [ oTypeSNodeType
6535:             | nIntegerType, nByteType :
                     % It's probably fair to promote byte to int, since byte is unsigned
6536:                @PromoteToInt
6538:                .tNegI
6540:             | nDoubleType :
6542:                .tNegD
6544:             | * :
6553:                #eNotAllowed
6555:          ]
6555:       | * :
6562:          @PrimaryAllowFlow( falseLabel )
6569:    ];
      
      
6570: PrimaryAllowFlow( out Label falseLabel ):
6572:    [
6572:       | pIntLit :
6574:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6581:          oTypeSPush( IntegerType )
      
6587:       | pCharLit :
6589:          .tPushConstI  oEmitInt( TOKEN_VALUE )
6596:          oTypeSPush( CharType )
      
6602:       | pDoubleLit :
6604:          .tPushConstD  oEmitDouble( TOKEN_VALUE_DOUBLE )
6611:          oTypeSPush( DoubleType )
      
6617:       | '(' :
6619:          @ExprAllowFlow( falseLabel )
6626:          ')'
      
6628:       | pStrLit :
6630:          int addr = oStringAllocShortStringLit( CURRENT_STRLIT )     % store in global data
6639:          .tPushAddrGlobal oEmitInt( addr )
               % TO DO: consider defining a ShortString type with the exact capacity used.
               % But, I don't think it should matter here, since nobody should be assigning to this string.
6647:          oTypeSPush( StrLitType )
               % This seems unlikely, but the strlit may be followed by
               % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
               % First, advance the pointer by index if any
6653:          @LValueIndexes
               % get final value of dereferencing, if any
6655:          @FetchVar
      
6657:       | pIdent :
6659:          Node decl = oScopeFindRequire
6664:          @ResolveUnitRef( decl )
6671:          Node theType
      
6671:          [ oNodeType( decl )
6678:             | nFunc :
6679:                @Call( decl )
      
6686:             | nBuiltInFunc :
6688:                @CallBuiltInFunc( decl )
      
6695:             | nConst, nEnumValue :
6697:                theType = oNodeGet( decl, qType )
6710:                oTypeSPush( theType )
6716:                [ oTypeSNodeType
6718:                   | nIntegerType, nEnumType, nBooleanType, nCharType, nByteType :
6719:                      .tPushConstI @EmitValue( decl )
6728:                   | nPointerType, nUniversalPointerType :
                           % We have one pointer const, Nil.  It's pushed as I.
                           % Sign-extending I to P won't hurt since it's 0.
6730:                      .tPushConstI @EmitValue( decl )
6739:                   | * :
6756:                      #eNotImplemented
6758:                ]
      
6758:             | nConstDouble :
6760:                theType = oNodeGet( decl, qType )
6773:                oTypeSPush( theType )
6779:                [ oTypeSNodeType
6781:                   | nDoubleType :
6782:                      .tPushConstD  oEmitDouble( oNodeGetDouble( decl, qValueDouble ) )
6797:                   | * :
6802:                      #eNotImplemented
6804:                ]
                     
6804:             | nConstStr :
                     % This is a non-typed const defined as a strlit.
                     % So far, the value is held in the compiler's symbol table.
                     % Referencing the constant in the code will work the same as directly giving a strlit.
                     % (See pStrLit above).  We store the strlit in global memory, and set expr type to StrLitType.
      
                     % Storage in global memory only happens the first time the const is referenced.
                     % The global offset is stored in qValue.
6806:                int addr = oNodeGetInt( decl, qValue )
6819:                [ equal_zero( addr )
6826:                   | true :
6827:                      addr = oStringAllocShortStringLit( oNodeGetString( decl, qValueStr ) )
6844:                      oNodeSetInt( decl, qValue, addr )
6856:                   | * :
6861:                ]
6861:                .tPushAddrGlobal oEmitInt( addr )
6869:                oTypeSPush( StrLitType )
                     % This seems unlikely, but the strlit may be followed by
                     % array indexing.  Handle this the same way we would with a variable expression (see VarExpr)
                     % First, advance the pointer by index if any
6875:                @LValueIndexes
                     % get final value of dereferencing, if any
6877:                @FetchVar
      
6879:             | nGlobalVar, nLocalVar, nParam, nTypedConst :
6881:                @VarExpr( decl )
      
6888:             | nTypeDecl :
                     % A type name.
                     % This is normally a type cast.
                     % Or, if Expr is running within sizeof(), we do also allow type names as primaries.
6890:                oTypeSPush( oNodeGet( decl, qType ) )
6903:                [
6903:                   | '(' : 
                           % Type cast
6905:                      @Expr
6907:                      ')'
6909:                      @CastType
      
                           % The expression can be further modified after the typecast.
                           % This is taken from VarExpr.  Try to consolidate.
      
6911:                      [ oTypeSNodeType
6913:                         | nPointerType, nUniversalPointerType :
6914:                            [
6914:                               | '^' :             % dereferenced
6916:                                  oTypeSPop
6917:                                  oTypeSPush( oNodeGet( theType, qBaseType ) )
6930:                                  @LValueIndexes
6932:                                  @FetchVar
6934:                               | '[' :             % dereferencing pointer like an array [0..] of baseType
6936:                                  @PointerArraySubscript
                                       % modify addr for any subsequent subscripts, field references, etc
6938:                                  @LValueIndexes
6940:                                  @FetchVar
6942:                               | * :               % just ptr value alone
6949:                            ]
      
6949:                         | nArrayType, nRecordType, nShortStringType :
                                 % So far we would have the addr of the compound value.
                                 % Modify addr for subscripts, field references, etc
6951:                            @LValueIndexes
                                 % get final value, if no longer compound
6953:                            @FetchVar
      
6955:                         | *:
6968:                      ]
      
6968:                   | * :
                           % Not a type cast
                           % A raw typename is only allowed in expressions within sizeof
6973:                      [ flagExprAllowTypeName
6976:                         | true :
                                 % The value we produce is bogus.  The caller will discard all code.
                                 % Only the type stack matters.
6977:                            .tPushConstI  oEmitInt( 0 )
6985:                         | * :    #eTypeNameNotAllowedHere
6992:                      ]
6992:                ]
      
6992:             | * :
7017:                #eNotValue
7019:                oTypeSPush( IntegerType )
7025:          ]
      
7025:       | '@' :        % @var -- pointer to var
7027:          pIdent
      
7029:          Node decl = oScopeFindRequire
7034:          @ResolveUnitRef( decl )
7041:          Node theType
      
               % writeable is false because we're not on the left hand side of an assignment,
               % or passing into a var parameter.  So it's ok to take the address of a typed const.
7041:          @LValueFromDecl( decl, false )
      
               % The above leaves the pointed-to type on type stack.
               % Replace with ptr-to-<type>.
7051:          theType = oTypeSTop
7056:          oTypeSPop
7057:          Node ptrType = @PointerTypeTo( theType )
7068:          oTypeSPush( ptrType )
      
7074:       | * :
7091:          #eNotValue
7093:          oTypeSPush( IntegerType )
7099:    ];
      
      
      % Parse a variable expression, given the declaration of the
      % just-accepted identifier.
      % Leaves the value on the expression stack, and type on the type stack.
      %
7100: VarExpr( Node decl ):
7102:    Node theType = oNodeGet( decl, qType )
         % how many levels up the static scope? Will ignore for globals.
7115:    int uplevels = @DeclUpLevels( decl )
      
7126:    oTypeSPush( theType )
7132:    [ oTypeSNodeType
7134:       | nIntegerType, nEnumType :
7135:          [ oNodeType( decl )
7142:             | nGlobalVar, nTypedConst :   .tPushGlobalI  @EmitValue( decl )
7152:             | nLocalVar :
7154:                [ equal_zero( uplevels )
7161:                   | true :  .tPushLocalI  @EmitValue( decl )
7171:                   | * :     .tPushUpLocalI  oEmitInt( uplevels )  @EmitValue( decl )
7191:                ]
7191:             | nParam :
7193:                [ oNodeGetBoolean( decl, qInOut )
7203:                   | true :    % VAR param points to the var.  Auto dereference.
7204:                      [ equal_zero( uplevels )
7211:                         | true :  .tPushParamP  @EmitValue( decl )
7221:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7241:                      ]
7241:                      .tFetchI
7243:                   | * :
7248:                      [ equal_zero( uplevels )
7255:                         | true :  .tPushParamI  @EmitValue( decl )
7265:                         | * :     .tPushUpParamI  oEmitInt( uplevels )  @EmitValue( decl )
7285:                      ]
7285:                ]
7285:          ]
      
7297:       | nBooleanType, nByteType, nCharType :
7299:          [ oNodeType( decl )
7306:             | nGlobalVar, nTypedConst :   .tPushGlobalB  @EmitValue( decl )
7316:             | nLocalVar :
7318:                [ equal_zero( uplevels )
7325:                   | true :  .tPushLocalB  @EmitValue( decl )
7335:                   | * :     .tPushUpLocalB  oEmitInt( uplevels )  @EmitValue( decl )
7355:                ]
7355:             | nParam :
7357:                [ oNodeGetBoolean( decl, qInOut )
7367:                   | true :    % VAR param points to the var.  Auto dereference.
7368:                      [ equal_zero( uplevels )
7375:                         | true :  .tPushParamP  @EmitValue( decl )
7385:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7405:                      ]
7405:                      .tFetchB
7407:                   | * :
7412:                      [ equal_zero( uplevels )
7419:                         | true :  .tPushParamB  @EmitValue( decl )
7429:                         | * :     .tPushUpParamB  oEmitInt( uplevels )  @EmitValue( decl )
7449:                      ]
7449:                ]
7449:          ]
      
7461:       | nFileType :
7463:          #eNotImplemented
      
7465:       | nPointerType, nUniversalPointerType, nDoubleType :
               % Note we're using this code for reading double vars too.
               % P is the correct size, and no differences are needed at the moment.
7467:          [ oNodeType( decl )
7474:             | nGlobalVar, nTypedConst :   .tPushGlobalP @EmitValue( decl )
7484:             | nLocalVar :
7486:                [ equal_zero( uplevels )
7493:                   | true :  .tPushLocalP  @EmitValue( decl )
7503:                   | * :     .tPushUpLocalP  oEmitInt( uplevels )  @EmitValue( decl )
7523:                ]
7523:             | nParam :
7525:                [ oNodeGetBoolean( decl, qInOut )
7535:                   | true :    % VAR param points to the var.  Auto dereference.
7536:                      [ equal_zero( uplevels )
7543:                         | true :  .tPushParamP  @EmitValue( decl )
7553:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7573:                      ]
7573:                      .tFetchP
7575:                   | * :
7580:                      [ equal_zero( uplevels )
7587:                         | true :  .tPushParamP  @EmitValue( decl )
7597:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7617:                      ]
7617:                ]               
7617:          ]
7629:          [
7629:             | '^' :             % dereferenced
7631:                oTypeSPop
7632:                oTypeSPush( oNodeGet( theType, qBaseType ) )
7645:                @LValueIndexes
7647:                @FetchVar
7649:             | '[' :             % dereferencing pointer like an array [0..] of baseType
7651:                @PointerArraySubscript
                     % modify addr for any subsequent subscripts, field references, etc
7653:                @LValueIndexes
7655:                @FetchVar
7657:             | * :               % just ptr value alone
7664:          ]
      
7664:       | nArrayType, nRecordType, nShortStringType :
               % compound type
               % first, push addr of start of var
7666:          [ oNodeType( decl )
7673:             | nGlobalVar, nTypedConst :   .tPushAddrGlobal @EmitValue( decl )
7683:             | nLocalVar :
7685:                [ equal_zero( uplevels )
7692:                   | true :  .tPushAddrLocal  @EmitValue( decl )
7702:                   | * :     .tPushAddrUpLocal  oEmitInt( uplevels )  @EmitValue( decl )
7722:                ]
7722:             | nParam :
7724:                [ oNodeGetBoolean( decl, qInOut )
7734:                   | true :    % VAR param points to the var.  Auto dereference.
7735:                      [ equal_zero( uplevels )
7742:                         | true :  .tPushParamP  @EmitValue( decl )
7752:                         | * :     .tPushUpParamP  oEmitInt( uplevels )  @EmitValue( decl )
7772:                      ]
7772:                   | * :
7777:                      [ equal_zero( uplevels )
7784:                         | true :  .tPushAddrParam  @EmitValue( decl )
7794:                         | * :     .tPushAddrUpParam  oEmitInt( uplevels )  @EmitValue( decl )
7814:                      ]
7814:                ]
7814:          ]
               % modify addr for subscripts, field references, etc
7826:          @LValueIndexes
               % get final value
7828:          @FetchVar
7830:    ];
      
      
      % Addr of start of var is on expr stack; type is on type stack.
      % Replace expr stack with value of var.
      % (In the case of compound vars, this remains as the addr of the var).
      
7859: FetchVar:
7861:    [ oTypeSNodeType
7863:       | nIntegerType, nEnumType :  .tFetchI
7866:       | nBooleanType, nByteType, nCharType :  .tFetchB
7870:       | nFileType :   #eNotImplemented
7874:       | nPointerType :             .tFetchP
7878:       | nUniversalPointerType :    #eCantDereference
7882:       | nArrayType, nRecordType, nStrLitType, nShortStringType :  % compound type; leave as addr
7884:    ];
      
      
      % Addr of start of var is already on run stack, and type is on type stack.
      % Read subscripts, record fields, etc, to get final addr on run stack, and final type
      % on type stack.
      
7913: LValueIndexes:
7915:    {[
7915:       | '[' :
7917:          [ oTypeSNodeType
7919:             | nArrayType :    @ArraySubscripts
7922:             | nPointerType :  @PointerArraySubscript
7926:             | nStrLitType, nShortStringType :  @ShortStringArraySubscript
7930:             | * :             #eNotArray
7943:          ]
7943:       | '.' :       @RecordFieldRef
7947:       | '^' :       @PointerDeref   % TO DO: I suspect I don't have logic right here
                                          % about precondition and using .tFetchP
                                          % Ideally this should take over for the ^ in VarExpr too.
7951:       | * :         >
7962:    ]};
      
      
7965: ArraySubscripts:
7967:    [ oTypeSNodeType
7969:       | nArrayType :
7970:       | * :       #eNotArray
7977:    ]
7977:    {
7977:       [ oTypeSNodeType
7979:          | nArrayType :
7980:          | * :    #eTooManySubscripts
7987:       ]
      
            % low subscript of this dimension
7987:       int low = @OrdinalLow( oNodeGet( oTypeSTop, qIndexType ) )
      
            % replace type stack with next dimension, or OF type
8004:       Node baseType
8004:       baseType = oNodeGet( oTypeSTop, qBaseType )
8016:       oTypeSPop
8017:       oTypeSPush( baseType )
      
8023:       @Expr
8025:       @RequireIntPop
            % adjust for low subscript
8027:       [ equal_zero( low )
8034:          | false :
8035:             .tPushConstI oEmitInt( low ) .tSubI
8045:          | * :
8050:       ]
      
            % multiply by element size
8050:       int size = oNodeGetInt( baseType, qSize )
8063:       [ equal( size, 1 )
8073:          | false :
8074:             .tPushConstI oEmitInt( size ) .tMultI
8084:          | * :
8089:       ]
      
            % update start address
8089:       .tAddPI
8091:       [
8091:          | ']' :  >
8095:          | ',' :
8097:       ]
8105:    };
      
      
      % pointer[index] - similar to array[index] where index counts from 0.
      % On entry, the pointer value is on the stack, and pointer type is on the type stack.
      % We've already accepted the '['.
      % On exit, the address of the pointed-to element is on the stack,
      % and the element type is on the type stack.
      %
8108: PointerArraySubscript:
8110:    [ oTypeSNodeType
8112:       | nPointerType :
8113:       | * :    #eCantDereference
8120:    ]
         % replace type stack with base type
8120:    Node baseType = oNodeGet( oTypeSTop, qBaseType )
8132:    oTypeSPop
8133:    oTypeSPush( baseType )
         
8139:    @Expr
8141:    @RequireIntPop
         % multiply by element size
8143:    int size = oNodeGetInt( baseType, qSize )
8156:    [ equal( size, 1 )
8166:       | false :
8167:          .tPushConstI  oEmitInt( size )  .tMultI
8177:       | * :
8182:    ]
         % update start address
8182:    .tAddPI
8184:    ']';
      
      
      % Specialization of array indexing for ShortString.
      % We treat the starting index as 0 so that str[1] sees the first string char,
      % past the length byte.
      %
8187: ShortStringArraySubscript:
8189:    [ oTypeSNodeType
8191:       | nStrLitType, nShortStringType :
8192:       | * :    #eCantDereference
8201:    ]
8201:    oTypeSPop
8202:    oTypeSPush( CharType )
8208:    @Expr
8210:    @RequireIntPop
8212:    .tAddPI
8214:    ']';
      
      
8217: RecordFieldRef:
8219:    [ oTypeSNodeType
8221:       | nRecordType :
8222:       | * :    #eNotRecord
8229:    ]
8229:    oScopeEnter( oNodeGet( oTypeSTop, qScope ) )
8241:    pIdent
8243:    Node field = oScopeFindRequire
         % oScopeFind searches all open scopes, so make sure we found nRecordField
         % which could only be seen in the local scope we entered above.
8248:    [ oNodeType( field )
8255:       | nRecordField :
8256:       | * :   #eNotRecordField
8263:    ]
8263:    oScopeEnd
8264:    int offset = oNodeGetInt( field, qValue )
8277:    [ equal_zero( offset )
8284:       | false :
8285:          .tPushConstI oEmitInt( offset ) .tAddPI
8295:       | * :
8300:    ]
      
         % replace the type on the type stack, with the field type
8300:    oTypeSPop
8301:    oTypeSPush( oNodeGet( field, qType ) )
8315:    ;
      
      
      % On entry, expr stack has ptr, and integer index above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr advanced to that index
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
8315: PointerAddition:
8317:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8329:    int elementSize = oNodeGetInt( elementType, qSize )
8342:    [ equal( elementSize, 1 )
8352:       | false :
8353:          .tPushConstI  oEmitInt( elementSize )
8361:          .tMultI
8363:       | * :
8368:    ]
8368:    .tAddPI
8371:    ;
      
      
      % On entry, expr stack has ptr, and integer above it.
      % The type stack has just the pointer type.
      % Pop those, and push the ptr decremented by that integer
      % (scaled by the pointed-to element size).
      % Leaves the pointer type on the type stack.
      %
8371: PointerSubInt:
8373:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8385:    int elementSize = oNodeGetInt( elementType, qSize )
8398:    [ equal( elementSize, 1 )
8408:       | false :
8409:          .tPushConstI  oEmitInt( elementSize )
8417:          .tMultI
8419:       | * :
8424:    ]
8424:    .tSubPI
8427:    ;
      
      
      % On entry, expr stack has two pointers, P1 and P2 above it.
      % The type stack has the type of P1.  (The type of P2 was already matched to P1.)
      % Replace the pointers on the expression stack with P1 - P2, scaled by the
      % pointed-to element size.  Type stack switched to integer.
      % 
8427: PointerSubPointer:
8429:    .tSubP
8431:    Node elementType = oNodeGet( oTypeSTop, qBaseType )
8443:    int elementSize = oNodeGetInt( elementType, qSize )
8456:    [ equal( elementSize, 1 )
8466:       | false :
8467:          .tPushConstI  oEmitInt( elementSize )
8475:          .tDivI
8477:       | * :
8482:    ]
8482:    oTypeSPop
8483:    oTypeSPush( IntegerType )
8490:    ;
      
      % ptr deref on left side, i.e. BEFORE addr of ptr var is on stack,
      %                              AFTER addr of thing pointed to is on stack
8490: PointerDeref:
8492:    [ oTypeSNodeType
8494:       | nPointerType :
8495:       | nUniversalPointerType :   #eCantDereference
8499:       | * :       #eNotPointer
8508:    ]
8508:    .tFetchP           % now addr on stack is addr of what we're pointing to
      
8510:    Node theType = oTypeSTop
8515:    oTypeSPop
8516:    oTypeSPush( oNodeGet( theType, qBaseType ) )
8530:    ;
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to coerce the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      % This is used for assignment.
      %
8530: CoerceType:
8532:    node_type nt = oTypeSNodeType
8537:    Node given = oTypeSTop
8542:    oTypeSPop
8543:    [ equal_node_type( nt, oTypeSNodeType )
8552:       | false :
               % Can we implicitly convert the value to the desired type?
8553:          [ oTypeSNodeType
8555:             | nIntegerType :
8556:                [ nt
8559:                   | nByteType :   .tCastBtoI  >>
8563:                   | * :
8568:                ]
8568:             | nByteType :
8570:                [ nt
8573:                   | nIntegerType :   .tCastItoB  >>
8577:                   | * :
8582:                ]
8582:             | nPointerType :
8584:                [ nt
8587:                   | nUniversalPointerType :  >>
8589:                   | nStrLitType :
8591:                      [ equal_node( oTypeSTop, PCharType )
8600:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8601:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8612:                         | * :
8617:                      ]
8617:                   | * :
8624:                ]
8624:             | nUniversalPointerType :
8626:                [ nt
8629:                   | nPointerType :  >>
8631:                   | * :
8636:                ]
8636:             | nShortStringType :
8638:                [ nt
8641:                   | nStrLitType :  >>
8643:                   | nCharType :
                           % Store char as a temp ShortString.
8645:                      oTypeSPush( CharType )
8651:                      int tempOffset = @MoveIntoTempShortString
8657:                      oTypeSPop
8658:                      >>
8659:                   | * :
8666:                ]
8666:             | * :
8679:          ]
8679:          #eTypeMismatch
8681:       | * :
8686:    ];
      
      
      % The expr stack contains a value whose type is on top of the type stack.
      % Generate code to cast the value to the type under it in the type stack
      % (pop the type stack, leaving only the desired type).
      %
      % This is stronger than CoerceType, since it isn't limited to implicit conversions.
      % There are still going to be limits on what is allowed though.
      %
8687: CastType:
8689:    node_type nt = oTypeSNodeType
8694:    oTypeSPop
8695:    [ equal_node_type( nt, oTypeSNodeType )
8704:       | false :
               % Can we cast the value to the desired type?
8705:          [ oTypeSNodeType
8707:             | nIntegerType, nEnumType :
8708:                [ nt
8711:                   | nByteType, nCharType, nBooleanType :   .tCastBtoI  >>
8715:                   | nIntegerType, nEnumType :   >>
8718:                   | * :
8731:                ]
8731:             | nByteType, nCharType, nBooleanType :
8733:                [ nt
8736:                   | nByteType, nCharType, nBooleanType :   >>
8738:                   | nIntegerType, nEnumType :   .tCastItoB  >>
8743:                   | * :
8756:                ]
8756:             | nPointerType :
8758:                [ nt
8761:                   | nUniversalPointerType :  >>
8763:                   | nStrLitType :
8765:                      [ equal_node( oTypeSTop, PCharType )
8774:                         | true :
                                 % PChar := 'strlit' i.e. point at strlit[1]
8775:                            .tPushConstI  oEmitInt(1)  .tAddPI  >>
8786:                         | * :
8791:                      ]
8791:                   | * :
8798:                ]
8798:             | nUniversalPointerType :
8800:                [ nt
8803:                   | nPointerType :  >>
8805:                   | * :
8810:                ]
8810:             | nShortStringType :
8812:                [ nt
8815:                   | nStrLitType :  >>
8817:                   | nCharType :
                           % Store char as a temp ShortString.
8819:                      oTypeSPush( CharType )
8825:                      int tempOffset = @MoveIntoTempShortString
8831:                      oTypeSPop
8832:                      >>
8833:                   | * :
8840:                ]
8840:             | * :
8859:          ]
8859:          #eTypeMismatch
8861:       | * :
8866:    ];
      
      
      
      % Require that the top two types on the type stack are matching (ignoring subranges).
      % Pop one of them, leaving only one.
      %
8867: MatchTypes:
8869:    node_type nt = oTypeSNodeType
8874:    oTypeSPop
8875:    [ equal_node_type( nt, oTypeSNodeType )
8884:       | false :
               % Some implicit conversion is allowed even here
8885:          [ oTypeSNodeType
8887:             | nPointerType :
8888:                [ nt
8891:                   | nUniversalPointerType :  >>
8893:                   | * :
8898:                ]
8898:             | nUniversalPointerType :
8900:                [ nt
8903:                   | nPointerType :  >>
8905:                   | * :
8910:                ]
8910:             | * :
8917:          ]
8917:          #eTypeMismatch
8919:       | * :
8924:    ];
      
      
      % Require that the top type on the type stack is integer (ignoring subranges).
      % Pop it.
      %
8925: RequireIntPop:
8927:    [ oTypeSNodeType
8929:       | nIntegerType :
8930:       | * :          #eNotInteger
8937:    ]
8937:    oTypeSPop;
      
8939: RequireInt:
8941:    [ oTypeSNodeType
8943:       | nIntegerType :
8944:       | * :          #eNotInteger
8951:    ];
      
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Pop the type stack.
      %
8952: PromoteToIntPop:
8954:    [ oTypeSNodeType
8956:       | nIntegerType :
8957:       | nByteType :        .tCastBtoI
8961:       | * :                #eNotInteger
8970:    ]
8970:    oTypeSPop;
      
      % Convert the top value to integer (if it isn't already).
      % It must be implicitly convertable to integer.
      % Leave integer on the type stack.
      %
8972: PromoteToInt:
8974:    [ oTypeSNodeType
8976:       | nIntegerType :
8977:       | nByteType :        .tCastBtoI
8981:                            oTypeSPop
8982:                            oTypeSPush( IntegerType )
8988:       | * :                #eNotInteger
8997:    ];
      
      
      % If the top value is implicitly convertable to integer, do so.
      % Otherwise leave it as-is.
      %
8998: PromoteToIntOptional:
9000:    [ oTypeSNodeType
9002:       | nByteType :        .tCastBtoI
9005:                            oTypeSPop
9006:                            oTypeSPush( IntegerType )
9012:       | * :
9017:    ];
      
      % Convert the top value to double (if it isn't already).
      % It must be implicitly convertable to double.
      % Pop the type stack.
      %
9018: PromoteToDoublePop:
9020:    [ oTypeSNodeType
9022:       | nDoubleType :
9023:       | nIntegerType, nByteType :   #eNotImplemented
9027:       | * :                         #eNotDouble
9038:    ]
9038:    oTypeSPop;
      
      
9040: RequireBoolPop:
9042:    [ oTypeSNodeType
9044:       | nBooleanType :
9045:       | * :          #eNotBoolean
9052:    ]
9052:    oTypeSPop;
      
9054: RequireBool:
9056:    [ oTypeSNodeType
9058:       | nBooleanType :
9059:       | * :          #eNotBoolean
9066:    ];
      
      
9067: include 'pascal_stmt.ssl'
      %
      % Pascal Compiler
      %
      
      
      % ------------------------------ Statements -----------------------------
      
9067: Statement:
9069:    [
9069:       | pWriteln :     @WritelnStmt
9073:       | pWrite :       @WriteStmt
9077:       | pReadln :      @ReadlnStmt
9081:       | pRead :        @ReadStmt
9085:       | pIf :          @IfStmt
9089:       | pWhile :       @WhileStmt
9093:       | pFor :         @ForStmt
9097:       | pRepeat :      @RepeatStmt
9101:       | pBreak :       @BreakStmt
9105:       | pContinue :    @ContinueStmt
9109:       | pBegin :       @BeginStmt
9113:       | pIdent :       @LabelOrAssignOrCallStmt
9117:       | pCase :        @CaseStmt
9121:       | pGoto :        @GotoStmt
9125:       | pIntLit :      % should be an integer label
9127:                        oChangeIntLitToLabelIdent
9128:                        @LabelOrAssignOrCallStmt
9130:       | * :            % null statement : don't accept any tokens
9163:    ];
      
      
9164: LabelOrAssignOrCallStmt:
9166:    Node decl = oScopeFindRequire
9171:    @ResolveUnitRef( decl )
9178:    [ oNodeType( decl )
9185:       | nLabel :                          @LabelDefinition( decl )
9193:                                           @Statement
9195:       | nProc :                           @Call( decl )
9204:       | nGlobalVar, nLocalVar, nParam, nTypeDecl :
9206:                                           @AssignStmt( decl )
9213:       | nFunc :                           @AssignResultStmt( decl )
9222:       | * :                               #eBadStatement
9241:    ];
      
      
      % Parse a "label:" prefix in front of a statement.
      %
9242: LabelDefinition( Node decl ):
9244:    [ oNodeGetBoolean( decl, qDefined )
9254:       | true :  #eAlreadyDefined
9257:       | * :
9262:    ]
9262:    .tLabel  oEmitLabel( oNodeGetLabel( decl, qValue ) )
9277:    oNodeSetBoolean( decl, qDefined, true )
9289:    ':'
9292:    ;
      
      
      % Given decl, the just-accepted first identifier on the left hand side.
      %
9292: AssignStmt( Node decl ):
9294:    @LValueFromDecl( decl, true )
9304:    ':=' 
9306:    @Expr
9308:    @CoerceType
9310:    @Assign
9313:    ;
      
      
      % Performs a raw assignment.
      % Given lvalue 2nd on stack, and expr value top of stack (already coerced to the lvalue type),
      % and type of both of these on the type stack,
      % perform the assignment and pop the type off the type stack.
      %
9313: Assign:
9315:    [ oTypeSNodeType
9317:       | nIntegerType, nEnumType :  .tAssignI
9320:       | nBooleanType, nByteType, nCharType :  .tAssignB
9324:       | nDoubleType :  .tAssignD
9328:       | nFileType :   #eNotImplemented
9332:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9336:       | nArrayType, nRecordType, nShortStringType :
                % TO DO: for ShortString, allow destination to be smaller capacity,
                % and truncate the copied value/length.
9338:           int size = oNodeGetInt( oTypeSTop, qSize )
9350:           .tCopy  oEmitInt( size )    % multi-word copy
9358:    ]
9386:    oTypeSPop
9388:    ;
      
      % Given nFunc for the just-accepted identifier on the left hand side.
      % Parse an assignment that represents assignment of the function result.
      %
9388: AssignResultStmt( Node funcDecl ):
         % Only allowed to assign the result of the immediately enclosing function, I think.
9390:    [ oNodeEqual( oNodeGet( funcDecl, qChildScope ), oScopeCurrent )
9406:       | false :   #eNotCurrentFunction
9409:       | * :
9414:    ]
      
         % Result value is stored in the caller's space, via a hidden VAR parameter.
9414:    .tPushParamP  oEmitInt( oNodeGetInt( funcDecl, qResultOffset ) )
9429:    oTypeSPush( oNodeGet( funcDecl, qType ) )
      
9442:    ':='
9444:    @Expr
9446:    @CoerceType
9448:    [ oTypeSNodeType
9450:       | nIntegerType, nEnumType : .tAssignI
9453:       | nBooleanType, nByteType, nCharType :  .tAssignB
9457:       | nDoubleType :  .tAssignD
9461:       | nFileType :   #eNotImplemented
9465:       | nPointerType, nUniversalPointerType :  .tAssignP
            % compound var assigns; addrs of src, dest on stack
9469:       | nArrayType, nRecordType, nShortStringType :
9471:           int size = oNodeGetInt( oTypeSTop, qSize )
9483:           .tCopy  oEmitInt( size )    % multi-word copy
9491:    ]
9519:    oTypeSPop
9521:    ;
      
      
      
      % Parse an lvalue expression, from scratch.
      % This is an expression that may appear on the left side of an assignment.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
9521: LValueExpr( boolean writeable ):
         % Al lvalue expressions start with a variable name,
         % or a type name (for an lvalue typecast).
9523:    pIdent
9525:    Node decl = oScopeFindRequire
9530:    @ResolveUnitRef( decl )
9537:    @LValueFromDecl( decl, writeable )
9548:    ;
      
      
      % Parse an lvalue expression, starting with the decl of the just accepted identifier.
      % Leaves the address of the value on the expr stack,
      % and the type of the value at that address on the type stack.
      % If writeable is false, the expression won't be written to, so may access a
      % typed const.
      %
9548: LValueFromDecl( Node decl, boolean writeable ):
9550:    [ oNodeType( decl )
9557:       | nGlobalVar, nLocalVar, nParam, nTypedConst :
9558:          @LValueVar( decl, writeable )
      
9568:       | nTypeDecl :
               % lvalue typecast
               % This is only allowed if the provided lvalue we're casting from has the same size.
               % No conversion code occurs, it's just a different interpretation of the same bits.
9570:          oTypeSPush( oNodeGet( decl, qType ) )
9583:          '('
9585:          @LValueExpr( writeable )
9592:          ')'
9594:          @LValueCastType
               % There can be further modifications of the lvalue after the cast.
               % This is taken from LValueVar.  Try to consolidate.
9596:          [ oTypeSNodeType
9598:             | nPointerType :
9599:                [
9599:                   | '[' :
                           % dereference the pointer var first
9601:                      .tFetchP
9603:                      @PointerArraySubscript
9605:                   | * :
9610:                ]
9610:             | * :
9615:          ]
               % additional subscripts, if any
9615:          @LValueIndexes
       
9617:       | * :  #eNotVar
9632:    ]
9633:    ;
      
      
      % An lvalue is on the expression stack.
      % The type of the lvalue is on the type stack.
      % The desired type is under it on the type stack.
      % Perform an lvalue cast to the desired type, leaving just that type.
      %
      % An lvalue cast is allowed only if the data size is the same.
      % No conversion code occurs, it's just a different interpretation of the same bits.
      %
9633: LValueCastType:
9635:    node_type nt = oTypeSNodeType
9640:    oTypeSPop
9641:    [ equal_node_type( nt, oTypeSNodeType )
9650:       | false :
               % Can we cast the value to the desired type?
9651:          [ oTypeSNodeType
9653:             | nIntegerType, nEnumType :
9654:                [ nt
9657:                   | nByteType, nCharType, nBooleanType :  #eSizeMismatch  >>
9661:                   | nIntegerType, nEnumType :   >>
9664:                   | * :
9677:                ]
9677:             | nByteType, nCharType, nBooleanType :
9679:                [ nt
9682:                   | nByteType, nCharType, nBooleanType :   >>
9684:                   | nIntegerType, nEnumType :  #eSizeMismatch  >>
9689:                   | * :
9702:                ]
9702:             | nPointerType :
9704:                [ nt
9707:                   | nUniversalPointerType :  >>
9709:                   | * :
9714:                ]
9714:             | nUniversalPointerType :
9716:                [ nt
9719:                   | nPointerType :  >>
9721:                   | * :
9726:                ]
9726:             | nShortStringType :
9728:                [ nt
9731:                   | nStrLitType :  >>
9733:                   | * :
9738:                ]
9738:             | * :
9757:          ]
9757:          #eTypeMismatch
9759:       | * :
9764:    ];
      
      
      
      % Parse an lvalue expression (e.g. left side of an assign statement)
      % that starts with the just-accepted identifier indicated by the given decl.
      % Leaves the lvalue address on the expression stack,
      % and the type of the value at that address on the type stack.
      %
9765: LValueVar( Node decl, boolean writeable ):
9767:    [ oNodeType( decl )
9774:       | nGlobalVar :   .tPushAddrGlobal @EmitValue( decl )
9784:       | nLocalVar :    .tPushAddrLocal @EmitValue( decl )
9795:       | nParam :
9797:          [ oNodeGetBoolean( decl, qInOut )
9807:             | true :   % VAR param points to variable.  No dereference.
9808:                        .tPushParamP @EmitValue( decl )
9817:             | * :      .tPushAddrParam @EmitValue( decl )
9831:          ]
9831:       | nTypedConst :
9833:          [ writeable
9836:             | false :  .tPushAddrGlobal @EmitValue( decl )                       
9846:             | * :      #eNotVar
9853:          ]
9853:       | * :            #eNotVar
9866:    ]
      
9866:    oTypeSPush( oNodeGet( decl, qType ) )
      
         % handle subscripts, if any.
         % There is one case that I'm not fitting into the pattern nicely, so need to
         % check for specially here:  if lvalue var is a pointer variable, and is
         % followed by [index], we need to dereference the pointer variable before applying
         % the index.  This is different from handling of [index] on an rvalue expression.
         % Right now I have LValueIndexes working for both lvalue and rvalue (composite types)
         % so can't easily add this behavior in there.
         % TO DO: probably I need separate rules LValueIndexes and RValueIndexes.
         %    This might also explain my confusion about handling of deref operator in LValueIndexes vs rvalue expr,
         %    and having separate rules might clear that up better.
      
9879:    [ oTypeSNodeType
9881:       | nPointerType :
9882:          [
9882:             | '[' :
                     % dereference the pointer var first
9884:                .tFetchP
9886:                @PointerArraySubscript
9888:             | * :
9893:          ]
9893:       | * :
9898:    ]
         % additional subscripts, if any
9898:    @LValueIndexes
9901:    ;
      
      
9901: IncVar( Node decl ):
9903:    @LValueVar( decl, true )
9913:    @RequireIntPop
9915:    @VarExpr( decl )
9922:    oTypeSPop
9923:    .tIncI
9925:    .tAssignI;
      
9928: DecVar( Node decl ):
9930:    @LValueVar( decl, true )
9940:    @RequireIntPop
9942:    @VarExpr( decl )
9949:    oTypeSPop
9950:    .tDecI
9952:    .tAssignI;
      
      
9955: IfStmt:
9957:    Label falseLabel = labelNull
      
9963:    @BooleanExprControlFlow( falseLabel )
9970:    pThen
9972:    @Statement
9974:    [
9974:       | pElse :
9976:          Label doneLabel = oLabelNew
      
9981:          .tJump  oEmitLabel( doneLabel )
9989:          .tLabel oEmitLabel( falseLabel )
9997:          @Statement
9999:          .tLabel oEmitLabel( doneLabel )
      
10007:       | * :
10012:          .tLabel oEmitLabel( falseLabel )
10020:    ];
      
      
10021: ForStmt:
10023:    pIdent
      
10025:    Node decl = oScopeFindRequire
         % TO DO: disallow use of a compound variable field.
         %        Could do that by disallowing use of LValueIndexes,
         %        or by double-checking the decl's qType here.
         % TO DO: I think I read somewhere that the variable must be in current scope.
10030:    @LValueVar( decl, true )
10040:    @RequireIntPop
      
10042:    ':='
      
10044:    @Expr
10046:    @RequireIntPop
10048:    .tAssignI
      
10050:    Label breakLabel = oLabelNew
      
10055:    Label checkLabel = oLabelNew
10060:    .tJump  oEmitLabel( checkLabel )
      
10068:    Label continueLabel = oLabelNew
10073:    .tLabel  oEmitLabel( continueLabel )
10081:    [
10081:       | pTo :
10083:          @IncVar( decl )
10090:          .tLabel  oEmitLabel( checkLabel )
10098:          @VarExpr( decl )  oTypeSPop
10106:          @Expr
10108:          @RequireIntPop
10110:          .tGreaterI
10112:          .tJumpTrue  oEmitLabel( breakLabel )
10120:       | pDownto :
10122:          @DecVar( decl )
10129:          .tLabel  oEmitLabel( checkLabel )
10137:          @VarExpr( decl )  oTypeSPop
10145:          @Expr
10147:          @RequireIntPop
10149:          .tLessI
10151:          .tJumpTrue  oEmitLabel( breakLabel )
10159:    ]
10167:    oLoopPush( continueLabel, breakLabel )
10176:    pDo
10178:    @Statement
10180:    .tJump  oEmitLabel( continueLabel )
10188:    .tLabel  oEmitLabel( breakLabel )
10196:    oLoopPop;
      
      
10198: RepeatStmt:
10200:    Label continueLabel = oLabelNew
10205:    .tLabel  oEmitLabel( continueLabel )
      
10213:    Label breakLabel = oLabelNew
      
10218:    oLoopPush( continueLabel, breakLabel )
10227:    @Statement
10229:    {[
10229:       | ';' :
10231:          @Statement
10233:       | pUntil :
10235:          Label falseLabel
10235:          @BooleanExprControlFlow( falseLabel )
10242:          .tLabelAlias  oEmitLabel( falseLabel )  oEmitLabel( continueLabel )
10256:          >
10258:    ]}
10268:    .tLabel  oEmitLabel( breakLabel )
10276:    oLoopPop;
      
      
10278: WhileStmt:
10280:    Label continueLabel = oLabelNew
10285:    .tLabel  oEmitLabel( continueLabel )
      
10293:    Label breakLabel
10293:    @BooleanExprControlFlow( breakLabel )
      
10300:    oLoopPush( continueLabel, breakLabel )
10309:    pDo
10311:    @Statement
10313:    .tJump  oEmitLabel( continueLabel )
10321:    .tLabel  oEmitLabel( breakLabel )
10329:    oLoopPop;
      
      
10331: ContinueStmt:                     % NOTE, for repeat..until, skips test (??)
10333:    [ equal_label( oLoopContinueLabel, labelNull )
10342:       | true :
10343:          #eNotInALoop
10345:       | false :
10347:          .tJump  oEmitLabel( oLoopContinueLabel )
10354:    ];
      
      
10363: BreakStmt:
10365:    [ equal_label( oLoopBreakLabel, labelNull )
10374:       | true :
10375:          #eNotInALoop
10377:       | false :
10379:          .tJump  oEmitLabel( oLoopBreakLabel )
10386:    ];
      
      
10395: CaseStmt:
10397:    Code tableCode = oCodeNew
10402:    Label tableLabel = oLabelNew
10407:    Label doneLabel = oLabelNew
10412:    Label otherwiseLabel = doneLabel
10418:    boolean isString = false
      
10424:    @Expr
         % Leave the expr type on the type stack throughout case statement
10426:    [ oTypeSNodeType
10428:       | nBooleanType, nByteType, nCharType :   .tJumpCaseB  oEmitLabel( tableLabel )
10437:       | nIntegerType, nEnumType :              .tJumpCaseI  oEmitLabel( tableLabel )
10447:       | nShortStringType, nStrLitType :        isString = true
10455:                                                .tJumpCaseS  oEmitLabel( tableLabel )
10463:       | * :     #eNotAllowed
10482:    ]
10482:    pOf
      
10484:    {
10484:       [
10484:          | pOtherwise, pElse :
10486:             otherwiseLabel = oLabelNew
10491:             .tLabel  oEmitLabel( otherwiseLabel )
      
                  % A bit tricky:
                  % The otherwise clause allows multiple statements (unlike other cases).
                  % ';' might be separating statements in the otherwise clause,
                  % or might be an optional trailing ; after the last statement.
                  % I have to watch for End to know when the statements stop.
                  % (Note, the otherwise clause is the last part of the case statement.)
10499:             {[
10499:                | pEnd :  >
10503:                | * :
10508:                   @Statement
10510:                   [
10510:                      | ';' :
10512:                      | * :   pEnd  >
10521:                   ]
10521:             ]}
10523:             >
      
10525:          | pEnd :
                  % Reached end with no otherwise clause
10527:             >
      
10529:          | * :
10538:             Label caseLabel = oLabelNew
10543:             oCodePush( tableCode )
10549:             {
10549:                @ConstExpr
10551:                @ConstCoerceType
10553:                int val
10553:                [ isString
10556:                   | true :    val = oStringAllocShortStringLit( oValueTopString )
10566:                   | false :   val = oValueTop
10573:                ]
10581:                oValuePop
10582:                [
10582:                   | '..' :  @ConstExpr
10586:                             @ConstCoerceType
10588:                             int highval
10588:                             [ isString
10591:                                | true :   highval = oStringAllocShortStringLit( oValueTopString )
10601:                                | false :  highval = oValueTop
10608:                             ]
10616:                             oValuePop
10617:                             .tCaseRange  oEmitInt( val )  oEmitInt( highval )  oEmitLabel( caseLabel )
10637:                   | * :     .tCase  oEmitInt( val )  oEmitLabel( caseLabel )
10656:                ]
10656:                [
10656:                   | ',' :
10658:                   | * :  >
10665:                ]
10665:             }
10667:             oCodePop
10668:             ':'
10670:             .tLabel  oEmitLabel( caseLabel )
10678:             @Statement
10680:             .tJump  oEmitLabel( doneLabel )
                  % Swallow optional trailing ';'
10688:             [
10688:                | ';' :
10690:                | * :
10695:             ]
                  
10695:       ]
         
10695:    }
      
10697:    .tLabel  oEmitLabel( tableLabel )
10705:    oEmitCode( tableCode )
10711:    .tCaseEnd  oEmitLabel( otherwiseLabel )
10719:    .tLabel  oEmitLabel( doneLabel )
10727:    oTypeSPop
10729:    ;
      
      
10729: GotoStmt:
10731:    [
10731:       | pIdent :
10733:       | pIntLit :
               % Replace token with identifier "_label_<intlit>"
10735:          oChangeIntLitToLabelIdent
10736:    ]
      
         % Some pascals have rules about where you can jump (to a sibling statement or
         % higher level statement in the block, but not into a lower lower level statement.)
         % fpc just says "jumping into a nested statement can have strange effects."
         % I'm going to follow that and not prohibit any goto, as long as it's in the same block.
      
         % Label must be declared in the same block (same scope) it is used.
         % Some pascals allow non-local goto, but we do not.
         % That would require more tracking of dynamic scope, to unwind stack.
         % Note: in main program statement, this relies on the temporaries scope extending
         %  the main scope (where a label declaration would occur).
10744:    Node decl = oScopeFindRequireInScope( oScopeCurrent )
10753:    oNodeSetBoolean( decl, qUsed, true )
10765:    .tJump  oEmitLabel( oNodeGetLabel( decl, qValue ) )
10781:    ;
      
      
10781: BeginStmt:
10783:    @Statement
10785:    {[
10785:       | ';' :   @Statement
10789:       | pEnd :  >
10793:    ]};
      
      
10804: WritelnStmt:
10806:    @WriteStmt
10808:    .tWriteCR;
      
      
10811: WriteStmt:
10813:    [
10813:       | '(' :
10815:          {
10815:             @Expr
10817:             [ oTypeSNodeType
10819:                | nIntegerType :             .tWriteI
10822:                | nBooleanType :             .tWriteBool
10826:                | nByteType :                .tCastBtoI  .tWriteI
10832:                | nCharType :                .tWriteChar
10836:                | nDoubleType :              .tWriteD
10840:                | nShortStringType, nStrLitType :   .tWriteShortStr
10844:                | nFileType :                #eNotImplemented
10848:                | nEnumType :
                        % write name via table lookup
10850:                   .tPushAddrGlobal  oEmitInt( oNodeGetInt( oTypeSTop, qNameTable ) )
10864:                   .tWriteEnum
10866:                | nPointerType :
10868:                   [ equal_node( oTypeSTop, PCharType )
10877:                      | true :               .tWritePChar
10880:                      | * :                  .tWriteP
10887:                   ]
10887:                | nUniversalPointerType :    .tWriteP
10891:                | * :                        #eNotAllowed
10918:             ]
10918:             oTypeSPop
10919:             [
10919:                | ')' : >
10923:                | ',' :
10925:             ]
10933:          }
10935:       | * :
10940:    ];
      
      
10941: ReadlnStmt:
10943:    @ReadStmt
10945:    .tReadCR;
      
      
10948: ReadStmt:
10950:    [
10950:       | '(' :
10952:          {
10952:             @LValueExpr( true )
10959:             [ oTypeSNodeType
10961:                | nIntegerType :      .tReadI
10964:                | nCharType :         .tReadChar
10968:                | nShortStringType :  
10970:                    int capacity = subtract( oNodeGetInt( oTypeSTop, qSize ), 1 )
10989:                    .tReadShortStr  oEmitInt( capacity )
10997:                | * :                 #eNotAllowed
11008:             ]
11008:             oTypeSPop
11009:             [
11009:                | ')' : >
11013:                | ',' :
11015:             ]
11023:          }
11025:       | * :
11030:    ];
11031: include 'pascal_str.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ String Operations -----------------------------
      
      
      % Given a ShortString, StrLit, or Char on the expression stack
      % (and type on the type stack).  Move the value into a new temporary ShortString.
      % Leave that temp string and type on the stacks.
      % Also returns the offset of the temp string.
      %
11031: MoveIntoTempShortString >> int:
11033:    int tempOffset = oScopeAllocType( ShortStringType )
         % copy the value
11043:    [ oTypeSNodeType
11045:       | nShortStringType, nStrLitType :
11046:          .tPushAddrLocal  oEmitInt( tempOffset )
               % put temp addr under value addr
11054:          .tSwap
               % TO DO: we could just copy length + 1, but tCopy takes a fixed #bytes
11056:          .tCopy  oEmitInt( oNodeGetInt( ShortStringType, qSize ) )
11071:       | nCharType :
               % temp[0] = 1
11073:          .tPushAddrLocal  oEmitInt( tempOffset )
11081:          .tPushConstI  oEmitInt( 1 )
11089:          .tAssignB
               % temp[1] = value
11091:          .tPushAddrLocal  oEmitInt( add( tempOffset, 1 ) )
11106:          .tSwap
11108:          .tAssignB
11110:       | * :   #eTypeMismatch
11121:    ]
11121:    oTypeSPop
         % Leave the temp ShortString on the expr stack and type stack
11122:    .tPushAddrLocal  oEmitInt( tempOffset )
11130:    oTypeSPush( ShortStringType )
11136:    >> tempOffset;
      
      
      % Top of expr stack / type stack is ShortString B.
      % Under it is ShortString A.
      % Change A to append the contents of B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
11140: ShortStringAppendShortString:
         % TO DO: ideally I would do this directly with tcode.  But I think I need some more
         % enhancements for that to work well.   Meanwhile, generate a call to a method.
         % For the moment, I'll implement the method in Pascal, in the mysystem unit.
11142:    .tAllocActuals  oEmitInt( 16 )
11150:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
11162:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
11174:    .tCall   @EmitValue( System_ShortStringAppendShortString )
         % TO DO: Ideally I would leave A on the expr stack / type stack.
         %  But I can't really do that without dup, which I hesitate to add.
         %  I'll have the caller push A again themselves.
11183:    .tFreeActuals  oEmitInt( 16 )
11191:    oTypeSPop
11192:    oTypeSPop
11194:    ;
      
      % Top of expr stack / type stack is Char B.
      % Under it is ShortString A.
      % Change A to append char B to it (truncating if necessary).
      % Removes both A and B from the expr stack / type stack.
      %
11194: ShortStringAppendChar:
         % Note at the moment I don't align params
11196:    .tAllocActuals  oEmitInt( 12 )
11204:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignB
11216:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
11228:    .tCall  @EmitValue( System_ShortStringAppendChar )
11237:    .tFreeActuals  oEmitInt( 12 )
11245:    oTypeSPop
11246:    oTypeSPop
11248:    ;
      
      % Expr stack has ShortString A, and ShortString B above it.
      % Type stack has just the type of ShortString A.
      % Replaces the expr stack with the integer value of string comparison:
      % -1 if A < B,  0 if A = B,  1 if A > B
      % Leaves Integer on the type stack.
      %
      % TO DO: kind of annoying that we need to hardcode the fact that the called method is cdecl extern.
      %   It would be nicer if that was noted only in the label.
      %   Alternatively, use a utility method in SSL to generate the appropriate call,
      %   given the method decl.
      %
11248: ShortStringCmp:
11250:    .tAllocActualsCdecl  oEmitInt( 24 )
11258:    .tPushAddrActual  oEmitInt( 8 )  .tSwap  .tAssignP
11270:    .tPushAddrActual  oEmitInt( 0 )  .tSwap  .tAssignP
11282:    int tempOffset = oScopeAllocType( IntegerType )
11292:    .tPushAddrActual  oEmitInt( 16 )  .tPushAddrLocal  oEmitInt( tempOffset )  .tAssignP
11310:    .tCallCdecl  @EmitValue( System_ShortStringCmp )
11319:    .tPushLocalI  oEmitInt( tempOffset )
11327:    .tFreeActuals  oEmitInt( 24 )
11335:    oTypeSPop
11336:    oTypeSPush( IntegerType )
11343:    ;
11343: include 'pascal_call.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ Method Calls -----------------------------
      
      
      % Parse a call, given an nProc or nFunc for the just-accepted identifier.
      % If a func, this will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
11343: Call( Node method ):
11345:    oNodeSetBoolean( method, qUsed, true )
      
         % If the method has a cdecl modifier, the back end will need to use the native
         % calling convention, instead of my own.  But, the convention varies by platform,
         % so the front end won't assume what it needs.  I'll still generate the normal tcode
         % that copies values into actuals space on the stack.
         % However, to help the back end, I will at least use a different instruction for the
         % allocation of the actuals space, and for the actual call.
         %
         % p.s. I only support cdecl on external methods, because I don't have a way
         % to let my own Pascal methods read params passed in with the cdecl calling convention.
         %
11357:    boolean cdecl = oNodeGetBoolean( method, qCdecl )
      
         % If this is a function, we will allocate a temporary
         % in the current scope, to hold the result value.
         % And pass a pointer to that temporary as an extra parameter.
11370:    Node resultType
11370:    int tempOffset
      
11370:    boolean isFunc = equal_node_type( oNodeType( method ), nFunc )
      
11387:    [ isFunc
11390:       | true :
11391:          resultType = oNodeGet( method, qType )
11404:          tempOffset = oScopeAllocType( resultType )
               % TO DO: we could manage temp allocation, so temp space can be reused
               %        by different code branches.
11414:       | * :
11419:    ]
         
      
11419:    Node paramScope = oNodeGet( method, qParams )
11432:    int actualsSize = oNodeGetInt( paramScope, qSize )
11445:    [ cdecl
11448:       | true : .tAllocActualsCdecl  oEmitInt( actualsSize )
11457:       | false :  .tAllocActuals  oEmitInt( actualsSize )
11467:    ]
      
         % If method is nested, it takes a hidden first parameter:
         % a pointer to the frame of the static scope in which the method is declared.
         % The location of a scope's frame is equivalent to offset 0 in the scope's locals space
         % (since local offsets are relative to the scope's frame pointer).
         %
         % The nested method may be in a higher scope (upLevels > 1),
         % or a sibling of the method we're in (upLevels = 1),
         % or an immediate child of the current method (upLevels = 0).
         %
         % To understand the upLevels computation, remember that a method's declaration
         % and its contents (variables, nested functions, and body statement)
         % are in two different scopes.
      
11475:    [ greater( @DeclLevel( method ), 0 )
11490:       | true :
11491:          .tPushAddrActual  oEmitInt( 0 )    % hidden param is at param offset 0
11499:          .tPushAddrUpLocal  oEmitInt( @DeclUpLevels( method ) )  oEmitInt( 0 )
11518:          .tAssignP
11520:       | * :
11525:    ]
      
      
11525:    NodeIter paramIter = oNodeGetIter( paramScope, qDecls )
11538:    Node param = oNodeIterValue( paramIter )
11548:    [
11548:       | '(' :
            
11550:          {
11550:             [ oNodeNull( param )
11557:                | true : >
11560:                | * :
11565:             ]
      
11565:             int offset = oNodeGetInt( param, qValue )
      
                  % Assign actual value to spot in actuals space
11578:             .tPushAddrActual oEmitInt( offset )
11586:             oTypeSPush( oNodeGet( param, qType ) )
      
11599:             [ oNodeGetBoolean( param, qInOut )
11609:                | true :   % A VAR param.
                                % The actual is a pointer to the value.
                                % The type on the type stack (pushed above) is for the pointed-to value.
      
11610:                           @LValueExpr( true )
                                % Addr of the referenced variable is on the expr stack,
                                % type of the variable is on the type stack.
      
                                % Match types more exactly. It's not sufficient to be assign compatible
                                % since the method will be assigning to the actual using the param type.
                                % Maybe something like type contents must match, incl subrange bounds.
11617:                           @MatchTypes
      
11619:                           .tAssignP
      
11621:                | false :  @Expr
11625:                           @CoerceType
                                
                                % Assign to offset in actuals space
      
11627:                           [ oTypeSNodeType
11629:                              | nIntegerType, nEnumType : .tAssignI
11632:                              | nBooleanType, nByteType, nCharType :  .tAssignB
11636:                              | nDoubleType :  .tAssignD
11640:                              | nFileType :   #eNotImplemented
11644:                              | nPointerType, nUniversalPointerType :  .tAssignP
11648:                              | nArrayType, nRecordType, nShortStringType :
                                       % compound types: copy value into actuals space
11650:                                  int size = oNodeGetInt( oTypeSTop, qSize )
11662:                                  .tCopy  oEmitInt( size )    % multi-word copy
11670:                           ]
11698:             ]
11706:             oTypeSPop
      
11707:             oNodeIterNext( paramIter )
11713:             param = oNodeIterValue( paramIter )
11723:             [ oNodeNull( param )
11730:                | true :  >
11733:                | false :
11735:             ]
      
11743:             ','
11745:          }
      
11747:          ')'
      
11749:       | * :
11754:    ]
      
11754:    [ oNodeNull( param )
11761:       | false :    #eMissingParameter
11764:       | * :
11769:    ]
      
11769:    [ isFunc
11772:       | true :
               % Pass result temp as an additional VAR parameter.
11773:          .tPushAddrActual oEmitInt( oNodeGetInt( method, qResultOffset ) )
11788:          .tPushAddrLocal  oEmitInt( tempOffset )
11796:          .tAssignP
11798:       | * :
11803:    ]
      
11803:    [ cdecl
11806:       | true :
11807:          .tCallCdecl  @EmitValue( method )
11816:       | false :
11818:          .tCall   @EmitValue( method )
11827:    ]
      
11835:    [ isFunc
11838:       | true :
               % push return value from temp
11839:          oTypeSPush( resultType )
      
11845:          [ oTypeSNodeType
11847:             | nIntegerType, nEnumType :   .tPushLocalI  oEmitInt( tempOffset )
11856:             | nBooleanType, nByteType, nCharType :   .tPushLocalB  oEmitInt( tempOffset )
11866:             | nFileType :  #eNotImplemented
11870:             | nPointerType, nUniversalPointerType :   .tPushLocalP  oEmitInt( tempOffset )
11880:             | nArrayType, nRecordType, nShortStringType :   % compound type: push address
11882:                                .tPushAddrLocal  oEmitInt( tempOffset )
11890:          ]
11916:       | * :
11921:    ]
         
11921:    .tFreeActuals  oEmitInt( actualsSize )
11930:    ;
      
      
      
      % Called on first use of an extern method
      %
11930: DefineExternLabel( Node method ):
         % The extern name might be given explicitly, otherwise the pascal method name.
11932:    int strAddr
11932:    String externalName = oNodeGetString( method, qExternalName )
11945:    [ equal_string( externalName, stringNull )
11955:       | true :
11956:          strAddr = oStringAllocLit( ID_STRING( oNodeGetInt( method, qIdent ) ) )
11977:       | false :
11979:          strAddr = oStringAllocLit( externalName )
11989:    ]
11997:    .tLabelExtern  @EmitValue( method )  oEmitInt( strAddr )
12013:    ;
      
      
      
      % Parse a call to a built-in function, identified by the just-accepted identifier.
      % This will also generate the code to push the return value on the expr stack,
      % and push the return type on the type stack.
      %
12013: CallBuiltInFunc( Node method ):
      
         % Ord(x)
12015:    [ oNodeEqual( method, BuiltIn_Ord )
12025:       | true :
               % parameter is any scalar type (including boolean, enum, char)
               % result is integer
12026:          '('
12028:          @Expr
12030:          [ oTypeSNodeType
12032:             | nIntegerType, nEnumType :
12033:             | nBooleanType, nByteType, nCharType :  .tCastBtoI
12037:             | * :  #eTypeMismatch
12052:          ]
12052:          oTypeSPop
12053:          oTypeSPush( IntegerType )
12059:          ')'
12061:          >>
12062:       | * :
12067:    ]
      
         % Chr(x)
12067:    [ oNodeEqual( method, BuiltIn_Chr )
12077:       | true :
               % parameter is integer
               % result is char
12078:          '('
12080:          @Expr
12082:          [ oTypeSNodeType
12084:             | nIntegerType :    .tCastItoB
12087:             | nByteType :
12089:             | * :  #eTypeMismatch
12098:          ]
12098:          oTypeSPop
12099:          oTypeSPush( CharType )
12105:          ')'
12107:          >>
12108:       | * :
12113:    ]
      
         % Pred(x)
12113:    [ oNodeEqual( method, BuiltIn_Pred )
12123:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
12124:          '('
12126:          @Expr
12128:          [ oTypeSNodeType
12130:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
12131:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
12140:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
12143:                   | * :
12148:                ]
12148:             | * :  #eTypeMismatch
12155:          ]
12155:          .tDecI
12157:          ')'
12159:          >>
12160:       | * :
12165:    ]
      
         % Succ(x)
12165:    [ oNodeEqual( method, BuiltIn_Succ )
12175:       | true :
               % parameter is any enum type, as long as it has values 0..N-1
               % result is the same enum type
12176:          '('
12178:          @Expr
12180:          [ oTypeSNodeType
12182:             | nEnumType :
                     % TO DO: does this skip past type aliases?
                     % TO DO: what if using pred/succ on a subrange type?
12183:                [ oNodeGetBoolean( oTypeSTop, qHasGap )
12192:                   | true :   #eCantUsePredSuccOnEnumWithValueGaps
12195:                   | * :
12200:                ]
12200:             | * :  #eTypeMismatch
12207:          ]
12207:          .tIncI
12209:          ')'
12211:          >>
12212:       | * :
12217:    ]
      
         % Sizeof(x)
12217:    [ oNodeEqual( method, BuiltIn_Sizeof )
12227:       | true :
               % parameter is a type name (cannot be a general type description),
               % or an expression (which is not evaluated).
               %
               % My initial thought was to look at the first token to see if it's a type name,
               % and if not, unaccept it and run @Expr  (with the code stream set to a dummy stream).
               % But that's not completely sufficient.
               % First, the typename might be   unit.name  so unaccepting one token wouldn't be good enough.
               % Also, an expression can start with a typename e.g.  integer(1+2) * 3
               %
               % So, instead of looking for a type name at this level, and going to Expr if not,
               % I'll just go into Expr.  But I'll turn on an option to accept type names in Primary.
               % Since we're discarding the code anyway, I'll have that primary push a bogus value
               % on the expr stack.  The main thing is just to get the type right.
               
12228:          '('
               % Parse expression but don't evaluate its code (so no side effects occur).
               % I'll accomplish that by sending the code to a temp stream that I discard.
12230:          Code dummyCode = oCodeNew
12235:          oCodePush( dummyCode )
12241:          @ExprAllowTypeName
12243:          oCodePop
12244:          oCodeDiscard( dummyCode )
12250:          Node theType = oTypeSTop
12255:          oTypeSPop
12256:          .tPushConstI  oEmitInt( oNodeGetInt( theType, qSize ) )
12271:          oTypeSPush( IntegerType )
12277:          ')'
12279:          >>
      
12280:       | * :
12285:    ]
      
12285:    #eNotImplemented
12288:    ;
      
12288: include 'pascal_type.ssl'
      %
      % Pascal Compiler
      %
      
      % ------------------------------ Types -----------------------------
      
      
      % Create and return a new nType of the given node_type, adding it to the type table.
      %
12288: newType( node_type nt, int size ) >> Node:
12290:   Node node = oNodeNew( nt )
12300:   oNodeSetInt( node, qSize, size )
12312:   oTypeAdd( node )
12318:   >> node
12322:   ;
      
      
      % Parse a type reference, returning the nType.
      % This will add types to the type table, as needed.
      %
      % Style question - at the moment I think callers look clearer if we use
      % an out param here, rather than a return value.
      %
12322: TypeRef( out Node resultType ):
12324:    [
12324:       | pIdent :           % previously named type (including intrinsics)
12326:          Node decl = oScopeFindRequire
12331:          @ResolveUnitRef( decl )
12338:          [ oNodeType( decl )
12345:             | nTypeDecl :
12346:                resultType = oNodeGet( decl, qType )
12359:             | * :
12364:                #eNotType
12366:                resultType = IntegerType
12372:          ]
         
12372:       | pArray :
12374:          '['
      
               % A multi-dimensional array is represented as a chain
               %    array [subrange1] of array [subrange2] of elementType
      
               % First, we build a vector of nArray's, each with one subrange as its index type,
               % but without setting the "of" type or size.
      
12376:          NodeVec dimensions = oNodeVecNew
      
12381:          {
                  % to do: probably should use general subrange parsing, incl minimal size value
                  %   In fact, supposed to parse ordinal_type here.  all ordinal types have a static low, high.
                  %   Not necessary to be a subrange.
      
12381:             Node subrange = oNodeNew( nSubrangeType )
      
12391:             @ConstExpr
12393:             oNodeSetInt( subrange, qLow, oValueTop )
12404:             oValuePop
12405:             '..'
12407:             @ConstExpr
12409:             oNodeSetInt( subrange, qHigh, oValueTop )
12420:             oValuePop
      
12421:             @ConstMatchTypes
12423:             oNodeSet( subrange, qBaseType, oTypeSTop )
12434:             oNodeSetInt( subrange, qSize, oNodeGetInt( oTypeSTop, qSize ) )
12452:             oTypeSPop
12453:             oTypeAdd( subrange )
      
12459:             Node a = oNodeNew( nArrayType )
12469:             oNodeSet( a, qIndexType, subrange )
      
12481:             oNodeVecAppend( dimensions, a )
                  % I'll hold off on adding 'a' to the type table since not fully formed yet
      
12490:             [
12490:                | ']' : >
12494:                | ',' :
12496:             ]
12504:          }
      
12506:          pOf
12508:          Node baseType
12508:          @TypeRef( baseType )
      
               % Work backwards through the dimensions,
               % hooking up the 'of' type and calculating the size.
               % At each iteration, baseType is the 'of' type.
      
12515:          int dim = oNodeVecSize( dimensions )
      
12525:          {
12525:              dec(dim)
      
12531:              Node a = oNodeVecElement( dimensions, dim )
      
12544:              oNodeSet( a, qBaseType, baseType )
12556:              Node subrange = oNodeGet( a, qIndexType )
12569:              int width = subtract( oNodeGetInt( subrange, qHigh ), oNodeGetInt( subrange, qLow ) )
12596:              inc( width )
12602:              oNodeSetInt( a, qSize, multiply( width, oNodeGetInt( baseType, qSize ) ) )
      
12628:              oTypeAdd( a )
12634:              baseType = a
      
12640:              [ equal_zero(dim)
12647:                  | true:  >
12650:                  | *:
12655:              ]
12655:          }
      
12657:          resultType = oNodeVecElement( dimensions, 0 )
12670:          oNodeVecDelete( dimensions )
      
12676:       | '^' :
12678:          Node theType
12678:          @TypeRef( theType )
12685:          resultType = @PointerTypeTo( theType )
      
12696:       | pRecord :
12698:          resultType = oNodeNew( nRecordType )
12708:          oScopeBegin( -1, allocUp )    % level is meaningless here
      
12717:          @VarDecl( nRecordField )
      
12724:          int size = oNodeGetInt( oScopeCurrent, qSize )
               % to do: padding
12736:          [ equal_zero( size )
12743:             | true : #eRecordEmpty
12746:             | * :
12751:          ]
      
12751:          pEnd
      
12753:          oNodeSet( resultType, qScope, oScopeCurrent )
12764:          oNodeSetInt( resultType, qSize, size )
12776:          oScopeEnd
12777:          oTypeAdd( resultType )
      
      
12783:       | '(' :
               % An enum type declaration.
12785:          @EnumTypeRef( resultType )
      
      
            % *** TO DO: following type constructors are not implemented *** 
12792:       | pSet :
12794:          pOf
12796:          Node theType
12796:          @TypeRef( theType )
12803:          #eNotImplemented
12805:       | * :       % this works for cases except where expr starts with an id
12820:          @ConstExpr '..' @ConstExpr
12826:          @ConstMatchTypes
12828:          #eNotImplemented
12830:    ];
      
      
      % Parse an enum type.
      % We've already accepted the '('
      % Returns the new type.
      %
12831: EnumTypeRef( out Node resultType ):
      
12833:    resultType = oNodeNew( nEnumType )
12843:    int value = 0
12849:    int numValues = 0
12855:    boolean first = true
      
         % We'll declare the enum values in two scopes: the current scope, and a scope nested in the enum type.
         % That will let programs use either <val> or <enumType>.<val>
12861:    Node outerScope = oScopeCurrent
12866:    oScopeBegin( -1, allocUp )   % level is meaningless, and we won't use allocate
      
12875:    {
            % TO DO: assert that name not already seen in this scope, i.e. this enum.
            %  And possibly not in the outerScope either, since that probably wouldn't count as shadowing.
            %  It might be in some other higher/used scope.
12875:       pIdent
12877:       Node decl = @newIdent( nEnumValue, LAST_ID )
12890:       Node decl2 = @newIdent( nEnumValue, LAST_ID )
12903:       oNodeSet( decl, qType, resultType )
12915:       oNodeSet( decl2, qType, resultType )
      
            % build up name table, for i/o
12927:       int nameOffset = oStringAllocLit( ID_STRING( LAST_ID ) )
12940:       oNodeSetInt( decl, qNameOffset, nameOffset )
12952:       oNodeSetInt( decl2, qNameOffset, nameOffset )
12964:       [
12964:          | '=', ':=' :
12966:             oTypeSPush( IntegerType )
12972:             @ConstExpr
12974:             @ConstCoerceType
12976:             oTypeSPop
                  % value must be ascending
                  % this obviously doesn't apply to the first value
12977:             [ equal_zero( numValues )
12984:                | false :
12985:                   [ greater( oValueTop, value )
12994:                      | false :   #eEnumValueNotAscending
12997:                      | * :
13002:                   ]
13002:                | * :
13007:             ]
13007:             [ equal( value, oValueTop )
13016:                | false :
                        % The values differ from 0..N-1.  pred/succ may not be used with this type.
13017:                   oNodeSetBoolean( resultType, qHasGap, true )
13029:                | * :
13034:             ]
13034:             value = oValueTop
13039:             oValuePop
13040:          | * :
13047:       ]
13047:       oNodeSetInt( decl, qValue, value )
13059:       oNodeSetInt( decl2, qValue, value )
13071:       oScopeDeclare( decl )
      
13077:       oScopeEnter( outerScope )
13083:       oScopeDeclare( decl2 )
13089:       oScopeEnd
      
13090:       inc( value )
13096:       inc( numValues )
13102:       [
13102:          | ',' :
13104:          | * :    >
13111:       ]
13111:    }
13113:    ')'
      
13115:    oNodeSet( resultType, qScope, oScopeCurrent )
13126:    oNodeSetInt( resultType, qSize, 4 )   % always integer sized
13138:    oScopeEnd
      
         % Finish creation of the name table
         %    struct {
         %      int    value;
         %      int    padding;
         %      char*  name;
         %    } table[ numValues + 1 ];
         %  final entry will have name == nullptr
         %
         % I'll need to generate init code, to store pointers in global data,
         % since I don't have a relocation mechanism for static data at the moment.
13139:    oCodePush( @GetOrCreateInitCode( globalScope ) )
13150:    oScopeEnter( globalScope )
13156:    int size = multiply( add( numValues, 1 ), 16 )
13176:    int addr = oScopeAlloc( size, 8 )
13189:    oScopeEnd
13190:    oNodeSetInt( resultType, qNameTable, addr )
         % loop over enum values
13202:    NodeIter it = oNodeGetIter( oNodeGet( resultType, qScope ), qDecls )
13222:    {
13222:       Node enumValue = oNodeIterValue( it )
13232:       [ oNodeNull( enumValue )
13239:          | true :  >
13242:          | * :
13247:       ]
13247:       .tPushAddrGlobal  oEmitInt( addr )
13255:       .tPushConstI  oEmitInt( oNodeGetInt( enumValue, qValue ) )
13270:       .tAssignI
13272:       addr = add( addr, 8 )
13285:       .tPushAddrGlobal  oEmitInt( addr )
13293:       .tPushAddrGlobal  oEmitInt( oNodeGetInt( enumValue, qNameOffset ) )
13308:       .tAssignP
13310:       addr = add( addr, 8 )
13323:       oNodeIterNext( it )
13329:    }
         % final table entry
13331:    .tPushAddrGlobal  oEmitInt( addr )
13339:    .tPushConstI  oEmitInt( 0 )
13347:    .tAssignI
13349:    addr = add( addr, 8 )
13362:    .tPushAddrGlobal  oEmitInt( addr )
13370:    .tPushConstI  oEmitInt( 0 )
13378:    .tAssignP
13380:    addr = add( addr, 8 )
13393:    oCodePop
      
13394:    oTypeAdd( resultType )
13401:    ;
      
      
      
      % Return an nType representing a pointer to the given type.
      % (Creates a new type if necessary.)
      %
13401: PointerTypeTo( Node theType ) >> Node:
13403:    Node ptrType = oNodeGet( theType, qPointerType )
13416:    [ oNodeNull( ptrType )
13423:       | true :
13424:          ptrType = oNodeNew( nPointerType )
13434:          oNodeSet( ptrType, qBaseType, theType )
13446:          oNodeSetInt( ptrType, qSize, 8 )
13458:          oTypeAdd( ptrType )
13464:          oNodeSet( theType, qPointerType, ptrType )
13476:       | * :
13481:    ]
13481:    >> ptrType;
      
      
      
      % Return the low value of an ordinal type
      %
13485: OrdinalLow( Node theType ) >> int:
13487:    [ oNodeType( theType )
13494:       | nIntegerType :  >> oMININT
13497:       | nBooleanType :  >> 0
13502:       | nCharType :     >> 0
13507:       | nEnumType :
13509:          Node enumScope = oNodeGet( theType, qScope )
13522:          Node first = oNodeIterValue( oNodeGetIter( enumScope, qDecls ) )
13539:          >> oNodeGetInt( first, qValue )
13549:       | nSubrangeType : >> oNodeGetInt( theType, qLow )
13561:       | * :             #eNotOrdinalType
13576:                         >> 0
13579:    ];
      
      
      % Return the high value of an ordinal type
      %
13580: OrdinalHigh( Node theType ) >> int:
13582:    [ oNodeType( theType )
13589:       | nIntegerType :  >> oMAXINT
13592:       | nBooleanType :  >> 1
13597:       | nCharType :     >> 255
13602:       | nEnumType :
13604:          Node enumScope = oNodeGet( theType, qScope )
13617:          Node last = oNodeIterValue( oNodeGetIterLast( enumScope, qDecls ) )
13634:          >> oNodeGetInt( last, qValue )
13644:       | nSubrangeType : >> oNodeGetInt( theType, qHigh )
13656:       | * :             #eNotOrdinalType
13671:                         >> 0
13674:    ];
      
      
      
13675: Program:
13677:    Node t
      
13677:    workspace = oWorkspaceNew
      
         % root scope is used for builtins e.g. Integer,
         % and is a parent to any used units, and the program's own global scope.
13682:    oScopeBegin( 0, allocGlobal )
13691:    Node rootScope = oScopeCurrent
      
13696:    @installBuiltIns
      
         % Start by calling the main program routine.
      
         % This dummy call to main needs to look like a normal method itself,
         % so jit can align the stack properly.  So we need .tEnter,
         % and .tAllocActuals / .tFreeActuals.
13698:    .tEnter  oEmitInt( 0 )
13706:    Label mainLabel = oLabelNew
      
13711:    .tAllocActuals  oEmitInt( 0 )
13719:    .tCall  oEmitLabel( mainLabel )
13727:    .tFreeActuals  oEmitInt( 0 )
13735:    .tReturn
      
13737:    pProgram
13739:    pIdent
      
13741:    Node program = oNodeNew( nProgram )
13751:    oNodeSetInt( program, qIdent, LAST_ID )
13762:    oNodeSet( workspace, qProgram, program )
      
      
13774:    [
13774:       | '(' :
13776:          pIdent      % input, output files
      
13778:          t = @newIdent( nVar, LAST_ID )
13791:          oNodeSet( t, qType, FileType )
13803:          oScopeDeclareAlloc( t )
               % TO DO: I shouldn't declare the files in root scope.
               %        Should save them for program's global scope.
      
13809:          ','
13811:          pIdent
      
13813:          t = @newIdent( nVar, LAST_ID )
13826:          oNodeSet( t, qType, FileType )
13838:          oScopeDeclareAlloc( t )
      
13844:          ')'
13846:       | * :
13851:    ]
13851:    ';'
      
13853:    @UsesMySystem( program )
         % The uses clause may only appear once, immediately after the program declaration.
13860:    [
13860:       | pUses :  @UsesClause( program )
13869:       | * :
13874:    ]
13874:    @EnterUsedUnits( program )
      
         % Global scope for the program, below any used units.
13881:    oScopeBegin( 0, allocGlobal )
13890:    globalScope = oScopeCurrent
      
         % A new scope just for temporaries in the main routine
         % Create it up front, in case it's needed by variable initialization exprs.
         % But we won't stay in it here.
         % Note we say it extends the global scope, so that during main statement evaluation
         % any user labels declared in the global scope are considered to be part of the current scope.
13895:    oScopeBegin( 0, allocDown )
13904:    oNodeSet( oScopeCurrent, qExtends, globalScope )
13915:    initScope = oScopeCurrent
13920:    oNodeSet( program, qMainRoutineScope, initScope )
13932:    oScopeEnd
      
13933:    @BlockDecls( nGlobalVar )
      
      
13940:    oScopeEnter( initScope )
      
         % The block statement includes a stack frame, and enter/return,
         % even for the main routine.
         % That will be necessary for temporaries allocated in the main routine.
      
         % isMain means we'll generate calls to the unit init/final methods in here too.
         % Alternatively we could do that in a higher level method that calls main.
13946:    boolean isMain = true
13952:    @BlockStmt( mainLabel, globalScope, isMain )
      
13965:    oScopeEnd   % main routine scope
      
13966:    '.'
13968:    @CheckForUndefinedLabels
13970:    oScopeEnd   % global scope
13971:    @EndUsedUnits( program )   % used units scopes
13979:    ;
      
      
      
      
13979: Block( node_type varNodeType, Label labelForBody ):
13981:    @BlockDecls( varNodeType )
13988:    @BlockStmt( labelForBody, oScopeCurrent, false )
14000:    @CheckForUndefinedLabels
14003:    ;
      
      
14003: BlockDecls( node_type varNodeType ):
14005:    {[
14005:       | pConst :     @ConstDecl
14009:       | pType :      @TypeDecl
14013:       | pVar :       @VarDecl( varNodeType )
14022:       | pLabel :     @LabelDecl
14026:       | pProcedure : @ProcDecl
14030:       | pFunction :  @FuncDecl
14034:       | * :          >
14051:    ]}
14053:    @CheckForUndefinedMethods
14056:    ;
      
      
      % were there any procedures or functions declared in this scope
      % that were never defined?
14056: CheckForUndefinedMethods:
         % TO DO
         % Note: disregard methods marked external
14059:    ;
      
      % were there any labels declared in the current scope, and used,
      % but never defined (as the prefix of a stement)?
      %
14059: CheckForUndefinedLabels:
14061:    NodeIter it = oNodeGetIter( oScopeCurrent, qDecls )
14073:    {
14073:       Node decl = oNodeIterValue( it )
14083:       [ oNodeNull( decl )
14090:          | false :
14091:          | * :  >
14098:       ]
14098:       [ oNodeType( decl )
14105:          | nLabel :
14106:             [ oNodeGetBoolean( decl, qDefined )
14116:                | false :
14117:                   [ oNodeGetBoolean( decl, qUsed )
14127:                      | true :    #eUsedButNotDefined  % TO DO: give the decl in the message
14130:                      | * :
14135:                   ]
14135:                | * :
14140:             ]
14140:          | * :
14145:       ]
14145:       oNodeIterNext( it )
14151:    }
14154:    ;
      
      
      % Given the scope of vars in this block.
      % Usually it's the current scope, but it's a bit different for the main statement.
      %
14154: BlockStmt( Label labelForBody, Node varScope, boolean isMain ):
14156:    .tLabel  oEmitLabel( labelForBody )
      
         % Proc, func, and main routine all start with tEnter
         % to create a stack frame.  This will be used for temporaries
         % (and local vars in the case of proc, func).
      
14164:    int patchLS
14164:    .tEnter  patchLS = Here  .tSpace
      
         % If we're generating the program main method,
         % add in calls to the loaded units' initialization and finalization.
14173:    [ isMain
14176:       | true :  @InitializeUnits
14179:       | * :
14184:    ]
      
         % insert any code for initialization of this scope's variables
14184:    Code initCode = oNodeGetCode( varScope, qInitCode )
14197:    oEmitCode( initCode )
14203:    oNodeSetCode( varScope, qInitCode, codeNull )
      
14215:    @Statement
      
14217:    [ isMain
14220:       | true :  @FinalizeUnits
14223:       | * :
14228:    ]
      
14228:    .tReturn
      
14230:    int localSpace = oNodeGetInt( oScopeCurrent, qSize )
14242:    oPatch( patchLS, localSpace )
14252:    ;
      
      
      % We need an initCode code stream for the given scope.
      % Create it if not present yet.  Return it.
      % (This will be used for variable initialization.)
      %
14252: GetOrCreateInitCode( Node scope ) >> Code:
14254:    Code initCode = oNodeGetCode( scope, qInitCode )
14267:    [ equal_code( initCode, codeNull )
14277:       | true :
14278:          initCode = oCodeNew
14283:          oNodeSetCode( scope, qInitCode, initCode )
14295:       | * :
14300:    ]
14300:    >> initCode;
      
      
      
      
      
      % -------------------------------- Utilities -------------------------------
      
      % Return the static scope level of the current scope
      %
14304: ScopeLevel >> int:
14306:    >> oNodeGetInt( oScopeCurrent, qLevel );
      
      % Return the static scope level of the given declaration
      %
14316: DeclLevel( Node decl ) >> int:
14318:    >> oNodeGetInt( oNodeGet( decl, qParentScope ), qLevel );
         
      
      % How many levels higher is the given declaration from the current scope?
      %
14336: DeclUpLevels( Node decl ) >> int:
14338:    >> subtract( @ScopeLevel, @DeclLevel( decl ) );
      
      
      
      
      % Create and return a new nIdent of the given node_type, with the given ident id.
      % Does not add it to any scope.
      %
14354: newIdent( node_type nt, int id ) >> Node:
14356:   Node t = oNodeNew( nt )
14366:   oNodeSetInt( t, qIdent, id )
14378:   >> t
14382:   ;
      
      
      % Emit the value in a declaration.
      % For a constant integer, this is the constant value.
      % For a global variable, this is the global address.
      % For a local variable, this is the local address relative to the call stack frame.
      %
14382: EmitValue( Node decl ):
14384:     oEmitInt( oNodeGetInt( decl, qValue ));
      
      
14398: DeclareBuiltInFunc( int id ) >> Node:
14400:    Node decl = @newIdent( nBuiltInFunc, id )
14414:    oScopeDeclare( decl )
14420:    >> decl;
      
      
14424: installBuiltIns:
      
         % initialize some other globals too
14426:    flagExprAllowTypeName = false
      
         % "mysystem" is the name of a unit that will be available everywhere.
         % Add its name to the id table so we can easily spot the name later.
14432:    mysystemId = oId_mysystem
      
         % install built-in types
14437:    FileType = @newType( nFileType, 4 )
14451:    IntegerType = @newType( nIntegerType, 4 )
14465:    BooleanType = @newType( nBooleanType, 1 )
14479:    BooleanFlowType = @newType( nBooleanFlowType, 1 )
14493:    CharType = @newType( nCharType, 1 )
14507:    PCharType = @PointerTypeTo( CharType )
14518:    ByteType = @newType( nByteType, 1 )
14532:    SingleType = @newType( nSingleType, 4 )
14546:    DoubleType = @newType( nDoubleType, 8 )
         % Universal pointer says base type Byte, but this is only for the sake of
         % pointer arithmetic.  It doesn't matter otherwise, because this type cannot be dereferened.
14560:    UniversalPointerType = @newType( nUniversalPointerType, 8 )
14574:    oNodeSet( UniversalPointerType, qBaseType, ByteType )
         % StrLitType is stored with both a length byte and null termination, so it can be assigned to
         % both a ShortString and a PChar.  StrLits longer than 255 characters appear truncated when
         % referenced as a ShortString, but not when referenced as a PChar.
14586:    StrLitType = @newType( nStrLitType, 256 )
         % ShortString is the original Pascal string type: an array of characters, not null-terminated,
         % with the first byte recording the current length.
         % The default ShortString type has capacity for 255 characters.  The user may define
         % additional ShortString types with smaller capacities.
         % The first character can be accessed as myString[1].
14600:    ShortStringType = @newType( nShortStringType, 256 )
14614:    oNodeSetInt( ShortStringType, qCapacity, 255 )
      
         % Declare those type identifiers.
         % SSL doesn't support strings, so need help from operations e.g. oId_File
      
14626:    Node t
      
14626:    t = @newIdent( nTypeDecl, oId_File )
14639:    oNodeSet( t, qType, FileType )
14651:    oScopeDeclare( t )
      
14657:    t = @newIdent( nTypeDecl, oId_Integer )
14670:    oNodeSet( t, qType, IntegerType )
14682:    oScopeDeclare( t )
      
14688:    t = @newIdent( nTypeDecl, oId_Boolean )
14701:    oNodeSet( t, qType, BooleanType )
14713:    oScopeDeclare( t )
      
14719:    t = @newIdent( nTypeDecl, oId_Char )
14732:    oNodeSet( t, qType, CharType )
14744:    oScopeDeclare( t )
      
14750:    t = @newIdent( nTypeDecl, oId_Byte )
14763:    oNodeSet( t, qType, ByteType )
14775:    oScopeDeclare( t )
      
14781:    t = @newIdent( nTypeDecl, oId_Single )
14794:    oNodeSet( t, qType, SingleType )
14806:    oScopeDeclare( t )
      
14812:    t = @newIdent( nTypeDecl, oId_Double )
14825:    oNodeSet( t, qType, DoubleType )
14837:    oScopeDeclare( t )
      
14843:    t = @newIdent( nTypeDecl, oId_Pointer )
14856:    oNodeSet( t, qType, UniversalPointerType )
14868:    oScopeDeclare( t )
      
14874:    t = @newIdent( nTypeDecl, oId_ShortString )
14887:    oNodeSet( t, qType, ShortStringType )
14899:    oScopeDeclare( t )
      
         % Built-in constants
      
14905:    t = @newIdent( nConst, oId_True )
14918:    oNodeSet( t, qType, BooleanType )
14930:    oNodeSetInt( t, qValue, 1 )
14942:    oScopeDeclare( t )
      
14948:    t = @newIdent( nConst, oId_False )
14961:    oNodeSet( t, qType, BooleanType )
14973:    oNodeSetInt( t, qValue, 0 )
14985:    oScopeDeclare( t )
      
14991:    t = @newIdent( nConst, oId_Nil )
15004:    oNodeSet( t, qType, UniversalPointerType )
15016:    oNodeSetInt( t, qValue, 0 )
15028:    oScopeDeclare( t )
      
         % Built-in methods
         % These aren't declared like normal methods, because they may have
         % special rules for parameter types (e.g. any scalar type).
         % Calls to these methods will be handled specially by the compiler.
      
15034:    BuiltIn_Ord = @DeclareBuiltInFunc( oId_Ord )
15044:    BuiltIn_Chr = @DeclareBuiltInFunc( oId_Chr )
15054:    BuiltIn_Pred = @DeclareBuiltInFunc( oId_Pred )
15064:    BuiltIn_Succ = @DeclareBuiltInFunc( oId_Succ )
15074:    BuiltIn_Sizeof = @DeclareBuiltInFunc( oId_Sizeof )
15085:    ;
      
15085: end
      
15085: 

Generated code:

   0: oGlobalSpace 26
   2: oLocalSpace 0
   4: oCall 13675
   6: oReturn
   7: oLocalSpace 0
   9: oInput 0
  11: LAST_ID
  12: oPushResult
  13: oGetParam 1
  15: oPushResult
  16: oCall 148
  18: oPop 2
  20: oInputChoice 24
  22: oJumpForward 29
  24: Choice Lookup Table
          14     22
  27: oJumpForward 31
  29: oJumpBack 9
  31: oInput 6
  33: oReturn
  34: oLocalSpace 0
  36: oGetParam 1
  38: oPushResult
  39: oSetResult 4
  41: oPushResult
  42: oNodeGetInt
  43: oPop 2
  45: oPushResult
  46: oGetGlobal 4
  48: oPushResult
  49: equal
  50: oPop 2
  52: oChoice 57
  54: oReturn
  55: oJumpForward 60
  57: Choice Lookup Table
           1     54
  60: oGetGlobal 4
  62: oPushResult
  63: oGetParam 1
  65: oPushResult
  66: oCall 148
  68: oPop 2
  70: oReturn
  71: oLocalSpace 0
  73: oGetParam 1
  75: oPushResult
  76: oSetResult 4
  78: oPushResult
  79: oNodeGetInt
  80: oPop 2
  82: oPushResult
  83: oGetGlobal 4
  85: oPushResult
  86: equal
  87: oPop 2
  89: oChoice 144
  91: oGetAddrGlobal 22
  93: oPushResult
  94: oScopeCurrent
  95: oPushResult
  96: oSetResult 15
  98: oPushResult
  99: oSetResult 4
 101: oPushResult
 102: oId_ShortStringAppendShortString
 103: oPushResult
 104: oNodeFind
 105: oPop 4
 107: oAssign
 108: oGetAddrGlobal 23
 110: oPushResult
 111: oScopeCurrent
 112: oPushResult
 113: oSetResult 15
 115: oPushResult
 116: oSetResult 4
 118: oPushResult
 119: oId_ShortStringAppendChar
 120: oPushResult
 121: oNodeFind
 122: oPop 4
 124: oAssign
 125: oGetAddrGlobal 24
 127: oPushResult
 128: oScopeCurrent
 129: oPushResult
 130: oSetResult 15
 132: oPushResult
 133: oSetResult 4
 135: oPushResult
 136: oId_ShortStringCmp
 137: oPushResult
 138: oNodeFind
 139: oPop 4
 141: oAssign
 142: oJumpForward 147
 144: Choice Lookup Table
           1     91
 147: oReturn
 148: oLocalSpace 2
 150: oGetAddrLocal 1
 152: oPushResult
 153: oGetParam 2
 155: oPushResult
 156: oCall 428
 158: oPop 1
 160: oAssign
 161: oGetLocal 1
 163: oPushResult
 164: oSetResult 0
 166: oPushResult
 167: equal_node
 168: oPop 2
 170: oChoice 240
 172: oGetParam 1
 174: oPushResult
 175: oSetResult 5
 177: oPushResult
 178: oGetLocal 1
 180: oPushResult
 181: oNodeAddLast
 182: oPop 3
 184: oGetAddrLocal 2
 186: oPushResult
 187: oSetResult 10
 189: oPushResult
 190: oNodeNew
 191: oPop 1
 193: oAssign
 194: oGetLocal 2
 196: oPushResult
 197: oSetResult 4
 199: oPushResult
 200: oGetLocal 1
 202: oPushResult
 203: oSetResult 4
 205: oPushResult
 206: oNodeGetInt
 207: oPop 2
 209: oPushResult
 210: oNodeSetInt
 211: oPop 3
 213: oGetLocal 2
 215: oPushResult
 216: oSetResult 9
 218: oPushResult
 219: oGetLocal 1
 221: oPushResult
 222: oSetResult 9
 224: oPushResult
 225: oNodeGet
 226: oPop 2
 228: oPushResult
 229: oNodeSet
 230: oPop 3
 232: oGetLocal 2
 234: oPushResult
 235: oScopeDeclare
 236: oPop 1
 238: oJumpForward 243
 240: Choice Lookup Table
           0    172
 243: oReturn
 244: oLocalSpace 1
 246: oGetFromParam 1
 248: oPushResult
 249: oNodeType
 250: oPop 1
 252: oChoice 283
 254: oGetAddrLocal 1
 256: oPushResult
 257: oGetFromParam 1
 259: oPushResult
 260: oSetResult 9
 262: oPushResult
 263: oNodeGet
 264: oPop 2
 266: oAssign
 267: oInput 21
 269: oInput 0
 271: oGetParam 1
 273: oPushResult
 274: oGetLocal 1
 276: oPushResult
 277: oScopeFindRequireInScope
 278: oPop 1
 280: oAssign
 281: oJumpForward 286
 283: Choice Lookup Table
          10    254
 286: oReturn
 287: oLocalSpace 2
 289: oGetAddrLocal 1
 291: oPushResult
 292: oGetParam 1
 294: oPushResult
 295: oSetResult 5
 297: oPushResult
 298: oNodeGetIter
 299: oPop 2
 301: oAssign
 302: oGetAddrLocal 2
 304: oPushResult
 305: oGetLocal 1
 307: oPushResult
 308: oNodeIterValue
 309: oPop 1
 311: oAssign
 312: oGetLocal 2
 314: oPushResult
 315: oNodeNull
 316: oPop 1
 318: oChoice 335
 320: oGetLocal 2
 322: oPushResult
 323: oSetResult 9
 325: oPushResult
 326: oNodeGet
 327: oPop 2
 329: oPushResult
 330: oScopeEnter
 331: oPop 1
 333: oJumpForward 340
 335: Choice Lookup Table
           0    320
 338: oJumpForward 348
 340: oGetAddrLocal 1
 342: oPushResult
 343: oNodeIterNext
 344: oPop 1
 346: oJumpBack 302
 348: oReturn
 349: oLocalSpace 2
 351: oGetAddrLocal 1
 353: oPushResult
 354: oGetParam 1
 356: oPushResult
 357: oSetResult 5
 359: oPushResult
 360: oNodeGetIterLast
 361: oPop 2
 363: oAssign
 364: oGetAddrLocal 2
 366: oPushResult
 367: oGetLocal 1
 369: oPushResult
 370: oNodeIterValue
 371: oPop 1
 373: oAssign
 374: oGetLocal 2
 376: oPushResult
 377: oNodeNull
 378: oPop 1
 380: oChoice 414
 382: oScopeCurrent
 383: oPushResult
 384: oGetLocal 2
 386: oPushResult
 387: oSetResult 9
 389: oPushResult
 390: oNodeGet
 391: oPop 2
 393: oPushResult
 394: oNodeEqual
 395: oPop 2
 397: oChoice 405
 399: oJumpForward 411
 401: oError 26
 403: oJumpForward 411
 405: Choice Lookup Table
           0    401
           1    399
 410: oEndChoice
 411: oScopeEnd
 412: oJumpForward 419
 414: Choice Lookup Table
           0    382
 417: oJumpForward 427
 419: oGetAddrLocal 1
 421: oPushResult
 422: oNodeIterPrev
 423: oPop 1
 425: oJumpBack 364
 427: oReturn
 428: oLocalSpace 2
 430: oGetAddrLocal 1
 432: oPushResult
 433: oGetGlobal 1
 435: oPushResult
 436: oSetResult 1
 438: oPushResult
 439: oSetResult 4
 441: oPushResult
 442: oGetParam 1
 444: oPushResult
 445: oNodeFind
 446: oPop 4
 448: oAssign
 449: oGetLocal 1
 451: oPushResult
 452: oSetResult 0
 454: oPushResult
 455: equal_node
 456: oPop 2
 458: oChoice 465
 460: oGetLocal 1
 462: oReturn
 463: oJumpForward 468
 465: Choice Lookup Table
           0    460
 468: oGetAddrLocal 2
 470: oPushResult
 471: oGetParam 1
 473: oPushResult
 474: oIncludeUnitFile
 475: oPop 1
 477: oAssign
 478: oGetLocal 2
 480: oChoice 489
 482: oError 25
 484: oSetResult 0
 486: oReturn
 487: oJumpForward 492
 489: Choice Lookup Table
           0    482
 492: oGetAddrLocal 1
 494: oPushResult
 495: oCall 503
 497: oAssign
 498: oIncludeEnd
 499: oGetLocal 1
 501: oReturn
 502: oReturn
 503: oLocalSpace 2
 505: oInput 61
 507: oInput 0
 509: oGetAddrLocal 1
 511: oPushResult
 512: oSetResult 5
 514: oPushResult
 515: oNodeNew
 516: oPop 1
 518: oAssign
 519: oGetLocal 1
 521: oPushResult
 522: oSetResult 4
 524: oPushResult
 525: LAST_ID
 526: oPushResult
 527: oNodeSetInt
 528: oPop 3
 530: oGetAddrLocal 2
 532: oPushResult
 533: oSetResult 6
 535: oPushResult
 536: oNodeNew
 537: oPop 1
 539: oAssign
 540: oGetLocal 2
 542: oPushResult
 543: oSetResult 4
 545: oPushResult
 546: LAST_ID
 547: oPushResult
 548: oNodeSetInt
 549: oPop 3
 551: oGetLocal 1
 553: oPushResult
 554: oSetResult 8
 556: oPushResult
 557: oGetLocal 2
 559: oPushResult
 560: oNodeSet
 561: oPop 3
 563: oInput 6
 565: oInput 62
 567: oGetLocal 1
 569: oPushResult
 570: oCall 34
 572: oPop 1
 574: oInputChoice 585
 576: oGetLocal 1
 578: oPushResult
 579: oCall 7
 581: oPop 1
 583: oJumpForward 588
 585: Choice Lookup Table
          60    576
 588: oGetLocal 1
 590: oPushResult
 591: oCall 287
 593: oPop 1
 595: oSetResult 0
 597: oPushResult
 598: oSetResult 0
 600: oPushResult
 601: oScopeBegin
 602: oPop 2
 604: oGetLocal 1
 606: oPushResult
 607: oSetResult 9
 609: oPushResult
 610: oScopeCurrent
 611: oPushResult
 612: oNodeSet
 613: oPop 3
 615: oGetAddrGlobal 2
 617: oPushResult
 618: oScopeCurrent
 619: oAssign
 620: oSetResult 0
 622: oPushResult
 623: oSetResult 1
 625: oPushResult
 626: oScopeBegin
 627: oPop 2
 629: oGetAddrGlobal 3
 631: oPushResult
 632: oScopeCurrent
 633: oAssign
 634: oGetLocal 1
 636: oPushResult
 637: oSetResult 13
 639: oPushResult
 640: oGetGlobal 3
 642: oPushResult
 643: oNodeSet
 644: oPop 3
 646: oScopeEnd
 647: oGetLocal 1
 649: oPushResult
 650: oCall 838
 652: oPop 1
 654: oScopeEnd
 655: oInput 63
 657: oGetLocal 2
 659: oPushResult
 660: oCall 34
 662: oPop 1
 664: oInputChoice 675
 666: oGetLocal 2
 668: oPushResult
 669: oCall 7
 671: oPop 1
 673: oJumpForward 678
 675: Choice Lookup Table
          60    666
 678: oGetLocal 2
 680: oPushResult
 681: oCall 287
 683: oPop 1
 685: oGetLocal 1
 687: oPushResult
 688: oSetResult 9
 690: oPushResult
 691: oNodeGet
 692: oPop 2
 694: oPushResult
 695: oScopeEnter
 696: oPop 1
 698: oSetResult 0
 700: oPushResult
 701: oSetResult 0
 703: oPushResult
 704: oScopeBegin
 705: oPop 2
 707: oGetLocal 1
 709: oPushResult
 710: oSetResult 10
 712: oPushResult
 713: oScopeCurrent
 714: oPushResult
 715: oNodeSet
 716: oPop 3
 718: oScopeCurrent
 719: oPushResult
 720: oSetResult 16
 722: oPushResult
 723: oGetLocal 1
 725: oPushResult
 726: oSetResult 9
 728: oPushResult
 729: oNodeGet
 730: oPop 2
 732: oPushResult
 733: oNodeSet
 734: oPop 3
 736: oGetAddrGlobal 2
 738: oPushResult
 739: oScopeCurrent
 740: oAssign
 741: oGetLocal 1
 743: oPushResult
 744: oCall 930
 746: oPop 1
 748: oInputChoice 762
 750: oGetLocal 1
 752: oPushResult
 753: oSetResult 1
 755: oPushResult
 756: oCall 940
 758: oPop 2
 760: oJumpForward 775
 762: Choice Lookup Table
          64    750
 765: oGetLocal 1
 767: oPushResult
 768: oSetResult 0
 770: oPushResult
 771: oCall 940
 773: oPop 2
 775: oInputChoice 789
 777: oGetLocal 1
 779: oPushResult
 780: oSetResult 1
 782: oPushResult
 783: oCall 1126
 785: oPop 2
 787: oJumpForward 802
 789: Choice Lookup Table
          65    777
 792: oGetLocal 1
 794: oPushResult
 795: oSetResult 0
 797: oPushResult
 798: oCall 1126
 800: oPop 2
 802: oInput 37
 804: oInput 21
 806: oScopeEnd
 807: oScopeEnd
 808: oGetLocal 2
 810: oPushResult
 811: oCall 349
 813: oPop 1
 815: oGetLocal 1
 817: oPushResult
 818: oCall 349
 820: oPop 1
 822: oGetGlobal 1
 824: oPushResult
 825: oSetResult 1
 827: oPushResult
 828: oGetLocal 1
 830: oPushResult
 831: oNodeAddLast
 832: oPop 3
 834: oGetLocal 1
 836: oReturn
 837: oReturn
 838: oLocalSpace 2
 840: oInputChoice 907
 842: oCall 2520
 844: oJumpForward 920
 846: oCall 3213
 848: oJumpForward 920
 850: oSetResult 22
 852: oPushResult
 853: oCall 3269
 855: oPop 1
 857: oJumpForward 920
 859: oGetAddrLocal 1
 861: oPushResult
 862: oCall 1487
 864: oAssign
 865: oInputChoice 878
 867: oGetLocal 1
 869: oPushResult
 870: oCall 1418
 872: oPop 1
 874: oInput 6
 876: oJumpForward 881
 878: Choice Lookup Table
          71    867
 881: oJumpForward 920
 883: oGetAddrLocal 2
 885: oPushResult
 886: oCall 1861
 888: oAssign
 889: oInputChoice 902
 891: oGetLocal 2
 893: oPushResult
 894: oCall 1418
 896: oPop 1
 898: oInput 6
 900: oJumpForward 905
 902: Choice Lookup Table
          71    891
 905: oJumpForward 920
 907: Choice Lookup Table
          31    883
          30    859
          34    850
          33    846
          32    842
 918: oJumpForward 922
 920: oJumpBack 840
 922: oGetParam 1
 924: oPushResult
 925: oCall 71
 927: oPop 1
 929: oReturn
 930: oLocalSpace 0
 932: oSetResult 22
 934: oPushResult
 935: oCall 14003
 937: oPop 1
 939: oReturn
 940: oLocalSpace 5
 942: oGetAddrLocal 1
 944: oPushResult
 945: oLabelNew
 946: oAssign
 947: oEmit 88
 949: oGetLocal 1
 951: oPushResult
 952: oEmitLabel
 953: oPop 1
 955: oGetParam 2
 957: oPushResult
 958: oSetResult 11
 960: oPushResult
 961: oGetLocal 1
 963: oPushResult
 964: oNodeSetLabel
 965: oPop 3
 967: oEmit 78
 969: oGetAddrLocal 2
 971: oPushResult
 972: Here
 973: oAssign
 974: oEmit 106
 976: oGetAddrLocal 3
 978: oPushResult
 979: oGetParam 2
 981: oPushResult
 982: oSetResult 9
 984: oPushResult
 985: oNodeGet
 986: oPop 2
 988: oAssign
 989: oGetAddrLocal 4
 991: oPushResult
 992: oGetLocal 3
 994: oPushResult
 995: oSetResult 19
 997: oPushResult
 998: oNodeGetCode
 999: oPop 2
1001: oAssign
1002: oGetLocal 4
1004: oPushResult
1005: oEmitCode
1006: oPop 1
1008: oGetLocal 3
1010: oPushResult
1011: oSetResult 19
1013: oPushResult
1014: oSetResult 0
1016: oPushResult
1017: oNodeSetCode
1018: oPop 3
1020: oGetAddrLocal 3
1022: oPushResult
1023: oGetParam 2
1025: oPushResult
1026: oSetResult 10
1028: oPushResult
1029: oNodeGet
1030: oPop 2
1032: oAssign
1033: oGetAddrLocal 4
1035: oPushResult
1036: oGetLocal 3
1038: oPushResult
1039: oSetResult 19
1041: oPushResult
1042: oNodeGetCode
1043: oPop 2
1045: oAssign
1046: oGetLocal 4
1048: oPushResult
1049: oEmitCode
1050: oPop 1
1052: oGetLocal 3
1054: oPushResult
1055: oSetResult 19
1057: oPushResult
1058: oSetResult 0
1060: oPushResult
1061: oNodeSetCode
1062: oPop 3
1064: oGetParam 2
1066: oPushResult
1067: oSetResult 13
1069: oPushResult
1070: oNodeGet
1071: oPop 2
1073: oPushResult
1074: oScopeEnter
1075: oPop 1
1077: oGetParam 1
1079: oChoice 1098
1081: oCall 9067
1083: oInputChoice 1089
1085: oCall 9067
1087: oJumpForward 1094
1089: Choice Lookup Table
           6   1085
1092: oJumpForward 1096
1094: oJumpBack 1083
1096: oJumpForward 1101
1098: Choice Lookup Table
           1   1081
1101: oEmit 77
1103: oGetAddrLocal 5
1105: oPushResult
1106: oScopeCurrent
1107: oPushResult
1108: oSetResult 17
1110: oPushResult
1111: oNodeGetInt
1112: oPop 2
1114: oAssign
1115: oGetLocal 2
1117: oPushResult
1118: oGetLocal 5
1120: oPushResult
1121: oPatch
1122: oPop 2
1124: oScopeEnd
1125: oReturn
1126: oLocalSpace 3
1128: oGetAddrLocal 1
1130: oPushResult
1131: oLabelNew
1132: oAssign
1133: oEmit 88
1135: oGetLocal 1
1137: oPushResult
1138: oEmitLabel
1139: oPop 1
1141: oGetParam 2
1143: oPushResult
1144: oSetResult 12
1146: oPushResult
1147: oGetLocal 1
1149: oPushResult
1150: oNodeSetLabel
1151: oPop 3
1153: oEmit 78
1155: oGetAddrLocal 2
1157: oPushResult
1158: Here
1159: oAssign
1160: oEmit 106
1162: oSetResult 0
1164: oPushResult
1165: oSetResult 1
1167: oPushResult
1168: oScopeBegin
1169: oPop 2
1171: oGetParam 1
1173: oChoice 1192
1175: oCall 9067
1177: oInputChoice 1183
1179: oCall 9067
1181: oJumpForward 1188
1183: Choice Lookup Table
           6   1179
1186: oJumpForward 1190
1188: oJumpBack 1177
1190: oJumpForward 1195
1192: Choice Lookup Table
           1   1175
1195: oEmit 77
1197: oGetAddrLocal 3
1199: oPushResult
1200: oScopeCurrent
1201: oPushResult
1202: oSetResult 17
1204: oPushResult
1205: oNodeGetInt
1206: oPop 2
1208: oAssign
1209: oGetLocal 2
1211: oPushResult
1212: oGetLocal 3
1214: oPushResult
1215: oPatch
1216: oPop 2
1218: oScopeEnd
1219: oReturn
1220: oLocalSpace 2
1222: oGetAddrLocal 1
1224: oPushResult
1225: oGetGlobal 1
1227: oPushResult
1228: oSetResult 1
1230: oPushResult
1231: oNodeGetIter
1232: oPop 2
1234: oAssign
1235: oGetAddrLocal 2
1237: oPushResult
1238: oGetLocal 1
1240: oPushResult
1241: oNodeIterValue
1242: oPop 1
1244: oAssign
1245: oGetLocal 2
1247: oPushResult
1248: oNodeNull
1249: oPop 1
1251: oChoice 1296
1253: oJumpForward 1304
1255: oJumpForward 1302
1257: oEmit 72
1259: oSetResult 0
1261: oPushResult
1262: oEmitInt
1263: oPop 1
1265: oEmit 75
1267: oGetLocal 2
1269: oPushResult
1270: oSetResult 11
1272: oPushResult
1273: oNodeGetLabel
1274: oPop 2
1276: oPushResult
1277: oEmitLabel
1278: oPop 1
1280: oEmit 74
1282: oSetResult 0
1284: oPushResult
1285: oEmitInt
1286: oPop 1
1288: oGetAddrLocal 1
1290: oPushResult
1291: oNodeIterNext
1292: oPop 1
1294: oJumpForward 1302
1296: Choice Lookup Table
           0   1257
           1   1253
1301: oEndChoice
1302: oJumpBack 1235
1304: oReturn
1305: oLocalSpace 2
1307: oGetAddrLocal 1
1309: oPushResult
1310: oGetGlobal 1
1312: oPushResult
1313: oSetResult 1
1315: oPushResult
1316: oNodeGetIterLast
1317: oPop 2
1319: oAssign
1320: oGetAddrLocal 2
1322: oPushResult
1323: oGetLocal 1
1325: oPushResult
1326: oNodeIterValue
1327: oPop 1
1329: oAssign
1330: oGetLocal 2
1332: oPushResult
1333: oNodeNull
1334: oPop 1
1336: oChoice 1381
1338: oJumpForward 1389
1340: oJumpForward 1387
1342: oEmit 72
1344: oSetResult 0
1346: oPushResult
1347: oEmitInt
1348: oPop 1
1350: oEmit 75
1352: oGetLocal 2
1354: oPushResult
1355: oSetResult 12
1357: oPushResult
1358: oNodeGetLabel
1359: oPop 2
1361: oPushResult
1362: oEmitLabel
1363: oPop 1
1365: oEmit 74
1367: oSetResult 0
1369: oPushResult
1370: oEmitInt
1371: oPop 1
1373: oGetAddrLocal 1
1375: oPushResult
1376: oNodeIterPrev
1377: oPop 1
1379: oJumpForward 1387
1381: Choice Lookup Table
           0   1342
           1   1338
1386: oEndChoice
1387: oJumpBack 1320
1389: oReturn
1390: oLocalSpace 0
1392: oInputChoice 1410
1394: oGetParam 1
1396: oPushResult
1397: oSetResult 27
1399: oPushResult
1400: oSetResult 1
1402: oPushResult
1403: oNodeSetBoolean
1404: oPop 3
1406: oInput 6
1408: oJumpForward 1415
1410: Choice Lookup Table
          73   1394
1413: oJumpForward 1417
1415: oJumpBack 1392
1417: oReturn
1418: oLocalSpace 0
1420: oGetParam 1
1422: oPushResult
1423: oCall 14316
1425: oPop 1
1427: oPushResult
1428: equal_zero
1429: oPop 1
1431: oChoice 1437
1433: oError 24
1435: oJumpForward 1440
1437: Choice Lookup Table
           0   1433
1440: oGetParam 1
1442: oPushResult
1443: oSetResult 25
1445: oPushResult
1446: oSetResult 1
1448: oPushResult
1449: oNodeSetBoolean
1450: oPop 3
1452: oInputChoice 1476
1454: oInputChoice 1471
1456: oInput 3
1458: oGetParam 1
1460: oPushResult
1461: oSetResult 26
1463: oPushResult
1464: CURRENT_STRLIT
1465: oPushResult
1466: oNodeSetString
1467: oPop 3
1469: oJumpForward 1474
1471: Choice Lookup Table
          72   1456
1474: oJumpForward 1479
1476: Choice Lookup Table
           3   1454
1479: oGetParam 1
1481: oPushResult
1482: oCall 11930
1484: oPop 1
1486: oReturn
1487: oLocalSpace 6
1489: oInput 0
1491: oGetAddrLocal 1
1493: oPushResult
1494: oSetResult 0
1496: oAssign
1497: oGetAddrLocal 2
1499: oPushResult
1500: oScopeFindInCurrentScope
1501: oAssign
1502: oGetLocal 2
1504: oPushResult
1505: oNodeNull
1506: oPop 1
1508: oChoice 1626
1510: oGetAddrLocal 2
1512: oPushResult
1513: oSetResult 12
1515: oPushResult
1516: LAST_ID
1517: oPushResult
1518: oCall 14354
1520: oPop 2
1522: oAssign
1523: oGetLocal 2
1525: oPushResult
1526: oSetResult 22
1528: oPushResult
1529: oLabelNew
1530: oPushResult
1531: oNodeSetLabel
1532: oPop 3
1534: oJumpForward 1632
1536: oGetAddrLocal 1
1538: oPushResult
1539: oSetResult 1
1541: oAssign
1542: oGetLocal 2
1544: oPushResult
1545: oSetResult 24
1547: oPushResult
1548: oNodeGetBoolean
1549: oPop 2
1551: oChoice 1557
1553: oError 22
1555: oJumpForward 1560
1557: Choice Lookup Table
           1   1553
1560: oGetLocal 2
1562: oPushResult
1563: oSetResult 25
1565: oPushResult
1566: oNodeGetBoolean
1567: oPop 2
1569: oChoice 1575
1571: oError 22
1573: oJumpForward 1578
1575: Choice Lookup Table
           1   1571
1578: oGetLocal 2
1580: oPushResult
1581: oNodeType
1582: oPop 1
1584: oChoice 1588
1586: oJumpForward 1593
1588: Choice Lookup Table
          12   1586
1591: oError 22
1593: oGetLocal 2
1595: oPushResult
1596: oSetResult 29
1598: oPushResult
1599: oGetLocal 2
1601: oPushResult
1602: oSetResult 23
1604: oPushResult
1605: oNodeGet
1606: oPop 2
1608: oPushResult
1609: oNodeSet
1610: oPop 3
1612: oGetLocal 2
1614: oPushResult
1615: oSetResult 23
1617: oPushResult
1618: oSetResult 0
1620: oPushResult
1621: oNodeSet
1622: oPop 3
1624: oJumpForward 1632
1626: Choice Lookup Table
           0   1536
           1   1510
1631: oEndChoice
1632: oGetAddrLocal 3
1634: oPushResult
1635: oCall 14304
1637: oAssign
1638: oGetAddrLocal 4
1640: oPushResult
1641: oGetLocal 3
1643: oPushResult
1644: oSetResult 0
1646: oPushResult
1647: greater
1648: oPop 2
1650: oAssign
1651: oGetAddrLocal 3
1653: oPushResult
1654: inc
1655: oPop 1
1657: oGetLocal 3
1659: oPushResult
1660: oSetResult 2
1662: oPushResult
1663: oScopeBegin
1664: oPop 2
1666: oGetAddrLocal 5
1668: oPushResult
1669: oScopeCurrent
1670: oAssign
1671: oGetLocal 4
1673: oChoice 1692
1675: oGetAddrLocal 6
1677: oPushResult
1678: oGetGlobal 6
1680: oPushResult
1681: oCall 13401
1683: oPop 1
1685: oPushResult
1686: oScopeAllocType
1687: oPop 1
1689: oAssign
1690: oJumpForward 1695
1692: Choice Lookup Table
           1   1675
1695: oCall 2296
1697: oGetLocal 2
1699: oPushResult
1700: oSetResult 23
1702: oPushResult
1703: oGetLocal 5
1705: oPushResult
1706: oNodeSet
1707: oPop 3
1709: oScopeEnd
1710: oInput 6
1712: oGetLocal 1
1714: oChoice 1726
1716: oGetLocal 2
1718: oPushResult
1719: oScopeDeclare
1720: oPop 1
1722: oJumpForward 1732
1724: oJumpForward 1732
1726: Choice Lookup Table
           1   1724
           0   1716
1731: oEndChoice
1732: oGetLocal 2
1734: oPushResult
1735: oCall 1390
1737: oPop 1
1739: oGetLocal 2
1741: oReturn
1742: oReturn
1743: oLocalSpace 4
1745: oGetAddrLocal 1
1747: oPushResult
1748: oCall 1487
1750: oAssign
1751: oInputChoice 1764
1753: oJumpForward 1858
1755: oGetLocal 1
1757: oPushResult
1758: oCall 1418
1760: oPop 1
1762: oJumpForward 1858
1764: Choice Lookup Table
          71   1755
          70   1753
1769: oGetAddrLocal 2
1771: oPushResult
1772: oGetLocal 1
1774: oPushResult
1775: oSetResult 23
1777: oPushResult
1778: oNodeGet
1779: oPop 2
1781: oAssign
1782: oGetLocal 2
1784: oPushResult
1785: oScopeEnter
1786: oPop 1
1788: oGetAddrLocal 3
1790: oPushResult
1791: oGetLocal 2
1793: oPushResult
1794: oSetResult 14
1796: oPushResult
1797: oNodeGetInt
1798: oPop 2
1800: oAssign
1801: oGetLocal 3
1803: oPushResult
1804: oSetResult 1
1806: oPushResult
1807: oScopeBegin
1808: oPop 2
1810: oGetLocal 1
1812: oPushResult
1813: oSetResult 6
1815: oPushResult
1816: oScopeCurrent
1817: oPushResult
1818: oNodeSet
1819: oPop 3
1821: oGetAddrLocal 4
1823: oPushResult
1824: oGetLocal 1
1826: oPushResult
1827: oSetResult 22
1829: oPushResult
1830: oNodeGetLabel
1831: oPop 2
1833: oAssign
1834: oSetResult 23
1836: oPushResult
1837: oGetLocal 4
1839: oPushResult
1840: oCall 13979
1842: oPop 2
1844: oGetLocal 1
1846: oPushResult
1847: oSetResult 24
1849: oPushResult
1850: oSetResult 1
1852: oPushResult
1853: oNodeSetBoolean
1854: oPop 3
1856: oScopeEnd
1857: oScopeEnd
1858: oInput 6
1860: oReturn
1861: oLocalSpace 8
1863: oInput 0
1865: oGetAddrLocal 1
1867: oPushResult
1868: oSetResult 0
1870: oAssign
1871: oGetAddrLocal 2
1873: oPushResult
1874: oScopeFindInCurrentScope
1875: oAssign
1876: oGetLocal 2
1878: oPushResult
1879: oNodeNull
1880: oPop 1
1882: oChoice 2013
1884: oGetAddrLocal 2
1886: oPushResult
1887: oSetResult 13
1889: oPushResult
1890: LAST_ID
1891: oPushResult
1892: oCall 14354
1894: oPop 2
1896: oAssign
1897: oGetLocal 2
1899: oPushResult
1900: oSetResult 22
1902: oPushResult
1903: oLabelNew
1904: oPushResult
1905: oNodeSetLabel
1906: oPop 3
1908: oJumpForward 2019
1910: oGetAddrLocal 1
1912: oPushResult
1913: oSetResult 1
1915: oAssign
1916: oGetLocal 2
1918: oPushResult
1919: oSetResult 24
1921: oPushResult
1922: oNodeGetBoolean
1923: oPop 2
1925: oChoice 1931
1927: oError 22
1929: oJumpForward 1934
1931: Choice Lookup Table
           1   1927
1934: oGetLocal 2
1936: oPushResult
1937: oNodeType
1938: oPop 1
1940: oChoice 1944
1942: oJumpForward 1949
1944: Choice Lookup Table
          13   1942
1947: oError 22
1949: oGetLocal 2
1951: oPushResult
1952: oSetResult 29
1954: oPushResult
1955: oGetLocal 2
1957: oPushResult
1958: oSetResult 23
1960: oPushResult
1961: oNodeGet
1962: oPop 2
1964: oPushResult
1965: oNodeSet
1966: oPop 3
1968: oGetLocal 2
1970: oPushResult
1971: oSetResult 23
1973: oPushResult
1974: oSetResult 0
1976: oPushResult
1977: oNodeSet
1978: oPop 3
1980: oGetLocal 2
1982: oPushResult
1983: oSetResult 30
1985: oPushResult
1986: oGetLocal 2
1988: oPushResult
1989: oSetResult 21
1991: oPushResult
1992: oNodeGet
1993: oPop 2
1995: oPushResult
1996: oNodeSet
1997: oPop 3
1999: oGetLocal 2
2001: oPushResult
2002: oSetResult 21
2004: oPushResult
2005: oSetResult 0
2007: oPushResult
2008: oNodeSet
2009: oPop 3
2011: oJumpForward 2019
2013: Choice Lookup Table
           0   1910
           1   1884
2018: oEndChoice
2019: oGetAddrLocal 3
2021: oPushResult
2022: oCall 14304
2024: oAssign
2025: oGetAddrLocal 4
2027: oPushResult
2028: oGetLocal 3
2030: oPushResult
2031: oSetResult 0
2033: oPushResult
2034: greater
2035: oPop 2
2037: oAssign
2038: oGetAddrLocal 3
2040: oPushResult
2041: inc
2042: oPop 1
2044: oGetLocal 3
2046: oPushResult
2047: oSetResult 2
2049: oPushResult
2050: oScopeBegin
2051: oPop 2
2053: oGetAddrLocal 5
2055: oPushResult
2056: oScopeCurrent
2057: oAssign
2058: oGetLocal 4
2060: oChoice 2079
2062: oGetAddrLocal 6
2064: oPushResult
2065: oGetGlobal 6
2067: oPushResult
2068: oCall 13401
2070: oPop 1
2072: oPushResult
2073: oScopeAllocType
2074: oPop 1
2076: oAssign
2077: oJumpForward 2082
2079: Choice Lookup Table
           1   2062
2082: oCall 2296
2084: oGetLocal 2
2086: oPushResult
2087: oSetResult 23
2089: oPushResult
2090: oGetLocal 5
2092: oPushResult
2093: oNodeSet
2094: oPop 3
2096: oInput 13
2098: oGetAddrLocal 7
2100: oPushResult
2101: oCall 12322
2103: oPop 1
2105: oGetLocal 2
2107: oPushResult
2108: oSetResult 21
2110: oPushResult
2111: oGetLocal 7
2113: oPushResult
2114: oNodeSet
2115: oPop 3
2117: oGetAddrLocal 8
2119: oPushResult
2120: oGetLocal 7
2122: oPushResult
2123: oCall 13401
2125: oPop 1
2127: oAssign
2128: oGetLocal 2
2130: oPushResult
2131: oSetResult 31
2133: oPushResult
2134: oGetLocal 8
2136: oPushResult
2137: oScopeAllocType
2138: oPop 1
2140: oPushResult
2141: oNodeSetInt
2142: oPop 3
2144: oScopeEnd
2145: oInput 6
2147: oGetLocal 1
2149: oChoice 2161
2151: oGetLocal 2
2153: oPushResult
2154: oScopeDeclare
2155: oPop 1
2157: oJumpForward 2167
2159: oJumpForward 2167
2161: Choice Lookup Table
           1   2159
           0   2151
2166: oEndChoice
2167: oGetLocal 2
2169: oPushResult
2170: oCall 1390
2172: oPop 1
2174: oGetLocal 2
2176: oReturn
2177: oReturn
2178: oLocalSpace 4
2180: oGetAddrLocal 1
2182: oPushResult
2183: oCall 1861
2185: oAssign
2186: oInputChoice 2199
2188: oJumpForward 2293
2190: oGetLocal 1
2192: oPushResult
2193: oCall 1418
2195: oPop 1
2197: oJumpForward 2293
2199: Choice Lookup Table
          71   2190
          70   2188
2204: oGetAddrLocal 2
2206: oPushResult
2207: oGetLocal 1
2209: oPushResult
2210: oSetResult 23
2212: oPushResult
2213: oNodeGet
2214: oPop 2
2216: oAssign
2217: oGetLocal 2
2219: oPushResult
2220: oScopeEnter
2221: oPop 1
2223: oGetAddrLocal 3
2225: oPushResult
2226: oGetLocal 2
2228: oPushResult
2229: oSetResult 14
2231: oPushResult
2232: oNodeGetInt
2233: oPop 2
2235: oAssign
2236: oGetLocal 3
2238: oPushResult
2239: oSetResult 1
2241: oPushResult
2242: oScopeBegin
2243: oPop 2
2245: oGetLocal 1
2247: oPushResult
2248: oSetResult 6
2250: oPushResult
2251: oScopeCurrent
2252: oPushResult
2253: oNodeSet
2254: oPop 3
2256: oGetAddrLocal 4
2258: oPushResult
2259: oGetLocal 1
2261: oPushResult
2262: oSetResult 22
2264: oPushResult
2265: oNodeGetLabel
2266: oPop 2
2268: oAssign
2269: oSetResult 23
2271: oPushResult
2272: oGetLocal 4
2274: oPushResult
2275: oCall 13979
2277: oPop 2
2279: oGetLocal 1
2281: oPushResult
2282: oSetResult 24
2284: oPushResult
2285: oSetResult 1
2287: oPushResult
2288: oNodeSetBoolean
2289: oPop 3
2291: oScopeEnd
2292: oScopeEnd
2293: oInput 6
2295: oReturn
2296: oLocalSpace 6
2298: oInputChoice 2516
2300: oGetAddrLocal 1
2302: oPushResult
2303: oNodeVecNew
2304: oAssign
2305: oGetAddrLocal 3
2307: oPushResult
2308: oSetResult 0
2310: oAssign
2311: oInputChoice 2321
2313: oGetAddrLocal 3
2315: oPushResult
2316: oSetResult 1
2318: oAssign
2319: oJumpForward 2324
2321: Choice Lookup Table
          34   2313
2324: oInput 0
2326: oGetAddrLocal 2
2328: oPushResult
2329: oSetResult 25
2331: oPushResult
2332: LAST_ID
2333: oPushResult
2334: oCall 14354
2336: oPop 2
2338: oAssign
2339: oGetLocal 2
2341: oPushResult
2342: oSetResult 35
2344: oPushResult
2345: oGetLocal 3
2347: oPushResult
2348: oNodeSetBoolean
2349: oPop 3
2351: oGetLocal 1
2353: oPushResult
2354: oGetLocal 2
2356: oPushResult
2357: oNodeVecAppend
2358: oPop 2
2360: oInputChoice 2368
2362: oJumpForward 2376
2364: oJumpForward 2374
2366: oJumpForward 2374
2368: Choice Lookup Table
          14   2366
          13   2362
2373: oEndChoice
2374: oJumpBack 2324
2376: oGetAddrLocal 4
2378: oPushResult
2379: oCall 12322
2381: oPop 1
2383: oGetLocal 3
2385: oChoice 2400
2387: oGetAddrLocal 5
2389: oPushResult
2390: oGetLocal 4
2392: oPushResult
2393: oCall 13401
2395: oPop 1
2397: oAssign
2398: oJumpForward 2409
2400: Choice Lookup Table
           1   2387
2403: oGetAddrLocal 5
2405: oPushResult
2406: oGetLocal 4
2408: oAssign
2409: oGetAddrLocal 6
2411: oPushResult
2412: oSetResult 0
2414: oAssign
2415: oGetLocal 6
2417: oPushResult
2418: oGetLocal 1
2420: oPushResult
2421: oNodeVecSize
2422: oPop 1
2424: oPushResult
2425: equal
2426: oPop 2
2428: oChoice 2485
2430: oGetAddrLocal 2
2432: oPushResult
2433: oGetLocal 1
2435: oPushResult
2436: oGetLocal 6
2438: oPushResult
2439: oNodeVecElement
2440: oPop 2
2442: oAssign
2443: oGetLocal 2
2445: oPushResult
2446: oSetResult 21
2448: oPushResult
2449: oGetLocal 4
2451: oPushResult
2452: oNodeSet
2453: oPop 3
2455: oGetLocal 2
2457: oPushResult
2458: oScopeDeclare
2459: oPop 1
2461: oGetLocal 2
2463: oPushResult
2464: oSetResult 22
2466: oPushResult
2467: oGetLocal 5
2469: oPushResult
2470: oScopeAllocType
2471: oPop 1
2473: oPushResult
2474: oNodeSetInt
2475: oPop 3
2477: oGetAddrLocal 6
2479: oPushResult
2480: inc
2481: oPop 1
2483: oJumpForward 2490
2485: Choice Lookup Table
           0   2430
2488: oJumpForward 2492
2490: oJumpBack 2415
2492: oGetLocal 1
2494: oPushResult
2495: oNodeVecDelete
2496: oPop 1
2498: oInputChoice 2506
2500: oJumpForward 2514
2502: oJumpForward 2512
2504: oJumpForward 2512
2506: Choice Lookup Table
           6   2504
          16   2500
2511: oEndChoice
2512: oJumpBack 2300
2514: oJumpForward 2519
2516: Choice Lookup Table
          15   2300
2519: oReturn
2520: oLocalSpace 0
2522: oInputChoice 2537
2524: oInputChoice 2530
2526: oCall 2683
2528: oJumpForward 2535
2530: Choice Lookup Table
          13   2526
2533: oCall 2545
2535: oJumpForward 2542
2537: Choice Lookup Table
           0   2524
2540: oJumpForward 2544
2542: oJumpBack 2522
2544: oReturn
2545: oLocalSpace 2
2547: oGetAddrLocal 1
2549: oPushResult
2550: LAST_ID
2551: oAssign
2552: oInput 7
2554: oCall 3568
2556: oTypeSNodeType
2557: oChoice 2640
2559: oGetAddrLocal 2
2561: oPushResult
2562: oSetResult 16
2564: oPushResult
2565: oGetLocal 1
2567: oPushResult
2568: oCall 14354
2570: oPop 2
2572: oAssign
2573: oGetLocal 2
2575: oPushResult
2576: oSetResult 22
2578: oPushResult
2579: oValueTop
2580: oPushResult
2581: oNodeSetInt
2582: oPop 3
2584: oJumpForward 2661
2586: oGetAddrLocal 2
2588: oPushResult
2589: oSetResult 19
2591: oPushResult
2592: oGetLocal 1
2594: oPushResult
2595: oCall 14354
2597: oPop 2
2599: oAssign
2600: oGetLocal 2
2602: oPushResult
2603: oSetResult 34
2605: oPushResult
2606: oValueTopDouble
2607: oPushResult
2608: oNodeSetDouble
2609: oPop 3
2611: oJumpForward 2661
2613: oGetAddrLocal 2
2615: oPushResult
2616: oSetResult 18
2618: oPushResult
2619: oGetLocal 1
2621: oPushResult
2622: oCall 14354
2624: oPop 2
2626: oAssign
2627: oGetLocal 2
2629: oPushResult
2630: oSetResult 33
2632: oPushResult
2633: oValueTopString
2634: oPushResult
2635: oNodeSetString
2636: oPop 3
2638: oJumpForward 2661
2640: Choice Lookup Table
          42   2613
          33   2586
          38   2559
          37   2559
          44   2559
          31   2559
          36   2559
          30   2559
          34   2559
2659: oError 18
2661: oValuePop
2662: oGetLocal 2
2664: oPushResult
2665: oSetResult 21
2667: oPushResult
2668: oTypeSTop
2669: oPushResult
2670: oNodeSet
2671: oPop 3
2673: oTypeSPop
2674: oGetLocal 2
2676: oPushResult
2677: oScopeDeclare
2678: oPop 1
2680: oInput 6
2682: oReturn
2683: oLocalSpace 3
2685: oGetAddrLocal 1
2687: oPushResult
2688: oSetResult 26
2690: oPushResult
2691: LAST_ID
2692: oPushResult
2693: oCall 14354
2695: oPop 2
2697: oAssign
2698: oGetAddrLocal 2
2700: oPushResult
2701: oCall 12322
2703: oPop 1
2705: oGetLocal 1
2707: oPushResult
2708: oSetResult 21
2710: oPushResult
2711: oGetLocal 2
2713: oPushResult
2714: oNodeSet
2715: oPop 3
2717: oGetLocal 2
2719: oPushResult
2720: oNodeType
2721: oPop 1
2723: oChoice 2827
2725: oInput 7
2727: oGetLocal 2
2729: oPushResult
2730: oTypeSPush
2731: oPop 1
2733: oCall 3568
2735: oCall 4460
2737: oGetLocal 1
2739: oPushResult
2740: oSetResult 22
2742: oPushResult
2743: oValueTop
2744: oPushResult
2745: oNodeSetInt
2746: oPop 3
2748: oValuePop
2749: oTypeSPop
2750: oGetLocal 1
2752: oPushResult
2753: oScopeDeclare
2754: oPop 1
2756: oInput 6
2758: oJumpForward 2851
2760: oError 17
2762: oJumpForward 2851
2764: oGetGlobal 2
2766: oPushResult
2767: oScopeEnter
2768: oPop 1
2770: oGetAddrLocal 3
2772: oPushResult
2773: oGetLocal 2
2775: oPushResult
2776: oScopeAllocType
2777: oPop 1
2779: oAssign
2780: oScopeEnd
2781: oGetGlobal 2
2783: oPushResult
2784: oCall 14252
2786: oPop 1
2788: oPushResult
2789: oCodePush
2790: oPop 1
2792: oGetLocal 1
2794: oPushResult
2795: oSetResult 22
2797: oPushResult
2798: oGetLocal 3
2800: oPushResult
2801: oNodeSetInt
2802: oPop 3
2804: oInput 7
2806: oGetLocal 2
2808: oPushResult
2809: oGetLocal 3
2811: oPushResult
2812: oCall 2852
2814: oPop 2
2816: oCodePop
2817: oGetLocal 1
2819: oPushResult
2820: oScopeDeclare
2821: oPop 1
2823: oInput 6
2825: oJumpForward 2851
2827: Choice Lookup Table
          41   2764
          39   2764
          29   2760
          43   2760
          38   2725
          37   2725
          44   2725
          31   2725
          36   2725
          30   2725
          34   2725
2850: oEndChoice
2851: oReturn
2852: oLocalSpace 10
2854: oGetParam 2
2856: oPushResult
2857: oNodeType
2858: oPop 1
2860: oChoice 3186
2862: oGetAddrLocal 1
2864: oPushResult
2865: oGetParam 2
2867: oPushResult
2868: oSetResult 38
2870: oPushResult
2871: oNodeGet
2872: oPop 2
2874: oAssign
2875: oGetAddrLocal 2
2877: oPushResult
2878: oGetParam 2
2880: oPushResult
2881: oSetResult 39
2883: oPushResult
2884: oNodeGet
2885: oPop 2
2887: oAssign
2888: oGetAddrLocal 3
2890: oPushResult
2891: oGetLocal 2
2893: oPushResult
2894: oCall 13485
2896: oPop 1
2898: oAssign
2899: oGetAddrLocal 4
2901: oPushResult
2902: oGetLocal 2
2904: oPushResult
2905: oCall 13580
2907: oPop 1
2909: oAssign
2910: oGetAddrLocal 5
2912: oPushResult
2913: oGetLocal 1
2915: oPushResult
2916: oSetResult 17
2918: oPushResult
2919: oNodeGetInt
2920: oPop 2
2922: oAssign
2923: oInput 15
2925: oGetAddrLocal 6
2927: oPushResult
2928: oGetLocal 3
2930: oAssign
2931: oGetLocal 1
2933: oPushResult
2934: oGetParam 1
2936: oPushResult
2937: oCall 2852
2939: oPop 2
2941: oGetLocal 6
2943: oPushResult
2944: oGetLocal 4
2946: oPushResult
2947: equal
2948: oPop 2
2950: oChoice 2958
2952: oJumpForward 2987
2954: oJumpForward 2964
2956: oJumpForward 2964
2958: Choice Lookup Table
           0   2956
           1   2952
2963: oEndChoice
2964: oInput 14
2966: oGetAddrParam 1
2968: oPushResult
2969: oGetParam 1
2971: oPushResult
2972: oGetLocal 5
2974: oPushResult
2975: add
2976: oPop 2
2978: oAssign
2979: oGetAddrLocal 6
2981: oPushResult
2982: inc
2983: oPop 1
2985: oJumpBack 2931
2987: oInput 16
2989: oJumpForward 3212
2991: oInput 15
2993: oGetAddrLocal 7
2995: oPushResult
2996: oGetParam 2
2998: oPushResult
2999: oSetResult 42
3001: oPushResult
3002: oNodeGet
3003: oPop 2
3005: oAssign
3006: oInputChoice 3010
3008: oJumpForward 3015
3010: Choice Lookup Table
           0   3008
3013: oJumpForward 3081
3015: oGetAddrLocal 8
3017: oPushResult
3018: oGetLocal 7
3020: oPushResult
3021: oScopeFindRequireInScope
3022: oPop 1
3024: oAssign
3025: oInput 13
3027: oGetAddrLocal 9
3029: oPushResult
3030: oGetLocal 8
3032: oPushResult
3033: oSetResult 21
3035: oPushResult
3036: oNodeGet
3037: oPop 2
3039: oAssign
3040: oGetAddrLocal 10
3042: oPushResult
3043: oGetParam 1
3045: oPushResult
3046: oGetLocal 8
3048: oPushResult
3049: oSetResult 22
3051: oPushResult
3052: oNodeGetInt
3053: oPop 2
3055: oPushResult
3056: add
3057: oPop 2
3059: oAssign
3060: oGetLocal 9
3062: oPushResult
3063: oGetLocal 10
3065: oPushResult
3066: oCall 2852
3068: oPop 2
3070: oInputChoice 3074
3072: oJumpForward 3079
3074: Choice Lookup Table
           6   3072
3077: oJumpForward 3081
3079: oJumpBack 3006
3081: oInput 16
3083: oJumpForward 3212
3085: oEmit 17
3087: oGetParam 1
3089: oPushResult
3090: oEmitInt
3091: oPop 1
3093: oGetParam 2
3095: oPushResult
3096: oTypeSPush
3097: oPop 1
3099: oCall 3568
3101: oCall 4460
3103: oEmit 15
3105: oValueTop
3106: oPushResult
3107: oEmitInt
3108: oPop 1
3110: oValuePop
3111: oTypeSPop
3112: oEmit 28
3114: oJumpForward 3212
3116: oEmit 17
3118: oGetParam 1
3120: oPushResult
3121: oEmitInt
3122: oPop 1
3124: oGetParam 2
3126: oPushResult
3127: oTypeSPush
3128: oPop 1
3130: oCall 3568
3132: oCall 4460
3134: oEmit 15
3136: oValueTop
3137: oPushResult
3138: oEmitInt
3139: oPop 1
3141: oValuePop
3142: oTypeSPop
3143: oEmit 27
3145: oJumpForward 3212
3147: oError 17
3149: oJumpForward 3212
3151: oEmit 17
3153: oGetParam 1
3155: oPushResult
3156: oEmitInt
3157: oPop 1
3159: oGetParam 2
3161: oPushResult
3162: oTypeSPush
3163: oPop 1
3165: oCall 3568
3167: oCall 4460
3169: oEmit 15
3171: oValueTop
3172: oPushResult
3173: oEmitInt
3174: oPop 1
3176: oValuePop
3177: oTypeSPop
3178: oEmit 29
3180: oJumpForward 3212
3182: oError 17
3184: oJumpForward 3212
3186: Choice Lookup Table
          29   3182
          43   3182
          38   3151
          37   3151
          33   3147
          44   3116
          31   3116
          36   3085
          30   3085
          34   3085
          41   2991
          39   2862
3211: oEndChoice
3212: oReturn
3213: oLocalSpace 2
3215: oInputChoice 3261
3217: oGetAddrLocal 1
3219: oPushResult
3220: oSetResult 20
3222: oPushResult
3223: LAST_ID
3224: oPushResult
3225: oCall 14354
3227: oPop 2
3229: oAssign
3230: oInput 7
3232: oGetAddrLocal 2
3234: oPushResult
3235: oCall 12322
3237: oPop 1
3239: oGetLocal 1
3241: oPushResult
3242: oSetResult 21
3244: oPushResult
3245: oGetLocal 2
3247: oPushResult
3248: oNodeSet
3249: oPop 3
3251: oGetLocal 1
3253: oPushResult
3254: oScopeDeclare
3255: oPop 1
3257: oInput 6
3259: oJumpForward 3266
3261: Choice Lookup Table
           0   3217
3264: oJumpForward 3268
3266: oJumpBack 3215
3268: oReturn
3269: oLocalSpace 6
3271: oInputChoice 3495
3273: oGetAddrLocal 1
3275: oPushResult
3276: oNodeVecNew
3277: oAssign
3278: oGetAddrLocal 2
3280: oPushResult
3281: oGetParam 1
3283: oPushResult
3284: LAST_ID
3285: oPushResult
3286: oCall 14354
3288: oPop 2
3290: oAssign
3291: oGetLocal 1
3293: oPushResult
3294: oGetLocal 2
3296: oPushResult
3297: oNodeVecAppend
3298: oPop 2
3300: oInputChoice 3306
3302: oInput 0
3304: oJumpForward 3311
3306: Choice Lookup Table
          14   3302
3309: oJumpForward 3313
3311: oJumpBack 3278
3313: oInput 13
3315: oGetAddrLocal 3
3317: oPushResult
3318: oCall 12322
3320: oPop 1
3322: oGetAddrLocal 4
3324: oPushResult
3325: oSetResult 0
3327: oAssign
3328: oGetLocal 4
3330: oPushResult
3331: oGetLocal 1
3333: oPushResult
3334: oNodeVecSize
3335: oPop 1
3337: oPushResult
3338: equal
3339: oPop 2
3341: oChoice 3382
3343: oGetAddrLocal 2
3345: oPushResult
3346: oGetLocal 1
3348: oPushResult
3349: oGetLocal 4
3351: oPushResult
3352: oNodeVecElement
3353: oPop 2
3355: oAssign
3356: oGetLocal 2
3358: oPushResult
3359: oSetResult 21
3361: oPushResult
3362: oGetLocal 3
3364: oPushResult
3365: oNodeSet
3366: oPop 3
3368: oGetLocal 2
3370: oPushResult
3371: oScopeDeclareAlloc
3372: oPop 1
3374: oGetAddrLocal 4
3376: oPushResult
3377: inc
3378: oPop 1
3380: oJumpForward 3387
3382: Choice Lookup Table
           0   3343
3385: oJumpForward 3389
3387: oJumpBack 3328
3389: oInputChoice 3482
3391: oGetLocal 1
3393: oPushResult
3394: oNodeVecSize
3395: oPop 1
3397: oChoice 3401
3399: oJumpForward 3406
3401: Choice Lookup Table
           1   3399
3404: oError 23
3406: oGetAddrLocal 5
3408: oPushResult
3409: oScopeCurrent
3410: oPushResult
3411: oCall 14252
3413: oPop 1
3415: oAssign
3416: oGetLocal 5
3418: oPushResult
3419: oCodePush
3420: oPop 1
3422: oGetAddrLocal 6
3424: oPushResult
3425: oSetResult 0
3427: oAssign
3428: oCall 14304
3430: oPushResult
3431: equal_zero
3432: oPop 1
3434: oChoice 3450
3436: oGetGlobal 3
3438: oPushResult
3439: oScopeEnter
3440: oPop 1
3442: oGetAddrLocal 6
3444: oPushResult
3445: oSetResult 1
3447: oAssign
3448: oJumpForward 3453
3450: Choice Lookup Table
           1   3436
3453: oGetLocal 2
3455: oPushResult
3456: oSetResult 1
3458: oPushResult
3459: oCall 9765
3461: oPop 2
3463: oCall 5024
3465: oCall 8530
3467: oCall 9313
3469: oGetLocal 6
3471: oChoice 3476
3473: oScopeEnd
3474: oJumpForward 3479
3476: Choice Lookup Table
           1   3473
3479: oCodePop
3480: oJumpForward 3485
3482: Choice Lookup Table
           7   3391
3485: oGetLocal 1
3487: oPushResult
3488: oNodeVecDelete
3489: oPop 1
3491: oInput 6
3493: oJumpForward 3500
3495: Choice Lookup Table
           0   3273
3498: oJumpForward 3502
3500: oJumpBack 3271
3502: oReturn
3503: oLocalSpace 2
3505: oInputChoice 3512
3507: oJumpForward 3518
3509: oChangeIntLitToLabelIdent
3510: oJumpForward 3518
3512: Choice Lookup Table
           1   3509
           0   3507
3517: oEndChoice
3518: oGetAddrLocal 1
3520: oPushResult
3521: oSetResult 27
3523: oPushResult
3524: LAST_ID
3525: oPushResult
3526: oCall 14354
3528: oPop 2
3530: oAssign
3531: oGetAddrLocal 2
3533: oPushResult
3534: oLabelNew
3535: oAssign
3536: oGetLocal 1
3538: oPushResult
3539: oSetResult 22
3541: oPushResult
3542: oGetLocal 2
3544: oPushResult
3545: oNodeSetLabel
3546: oPop 3
3548: oGetLocal 1
3550: oPushResult
3551: oScopeDeclare
3552: oPop 1
3554: oInputChoice 3558
3556: oJumpForward 3563
3558: Choice Lookup Table
          14   3556
3561: oJumpForward 3565
3563: oJumpBack 3505
3565: oInput 6
3567: oReturn
3568: oLocalSpace 0
3570: oCall 3825
3572: oInputChoice 3784
3574: oCall 3848
3576: oCall 4363
3578: oTypeSNodeType
3579: oChoice 3594
3581: oValueStringCmp
3582: oSetResult 0
3584: oPushResult
3585: oValuePush
3586: oPop 1
3588: oValueEqual
3589: oJumpForward 3600
3591: oValueEqualD
3592: oJumpForward 3600
3594: Choice Lookup Table
          33   3591
          42   3581
3599: oValueEqual
3600: oTypeSPop
3601: oGetGlobal 7
3603: oPushResult
3604: oTypeSPush
3605: oPop 1
3607: oJumpForward 3799
3609: oCall 3825
3611: oCall 4363
3613: oTypeSNodeType
3614: oChoice 3629
3616: oValueStringCmp
3617: oSetResult 0
3619: oPushResult
3620: oValuePush
3621: oPop 1
3623: oValueNotEqual
3624: oJumpForward 3635
3626: oValueNotEqualD
3627: oJumpForward 3635
3629: Choice Lookup Table
          33   3626
          42   3616
3634: oValueNotEqual
3635: oTypeSPop
3636: oGetGlobal 7
3638: oPushResult
3639: oTypeSPush
3640: oPop 1
3642: oJumpForward 3799
3644: oCall 3825
3646: oCall 4363
3648: oTypeSNodeType
3649: oChoice 3664
3651: oValueStringCmp
3652: oSetResult 0
3654: oPushResult
3655: oValuePush
3656: oPop 1
3658: oValueLess
3659: oJumpForward 3670
3661: oValueLessD
3662: oJumpForward 3670
3664: Choice Lookup Table
          33   3661
          42   3651
3669: oValueLess
3670: oTypeSPop
3671: oGetGlobal 7
3673: oPushResult
3674: oTypeSPush
3675: oPop 1
3677: oJumpForward 3799
3679: oCall 3825
3681: oCall 4363
3683: oTypeSNodeType
3684: oChoice 3699
3686: oValueStringCmp
3687: oSetResult 0
3689: oPushResult
3690: oValuePush
3691: oPop 1
3693: oValueGreater
3694: oJumpForward 3705
3696: oValueGreaterD
3697: oJumpForward 3705
3699: Choice Lookup Table
          33   3696
          42   3686
3704: oValueGreater
3705: oTypeSPop
3706: oGetGlobal 7
3708: oPushResult
3709: oTypeSPush
3710: oPop 1
3712: oJumpForward 3799
3714: oCall 3825
3716: oCall 4363
3718: oTypeSNodeType
3719: oChoice 3734
3721: oValueStringCmp
3722: oSetResult 0
3724: oPushResult
3725: oValuePush
3726: oPop 1
3728: oValueLessEqual
3729: oJumpForward 3740
3731: oValueLessEqualD
3732: oJumpForward 3740
3734: Choice Lookup Table
          33   3731
          42   3721
3739: oValueLessEqual
3740: oTypeSPop
3741: oGetGlobal 7
3743: oPushResult
3744: oTypeSPush
3745: oPop 1
3747: oJumpForward 3799
3749: oCall 3825
3751: oCall 4363
3753: oTypeSNodeType
3754: oChoice 3769
3756: oValueStringCmp
3757: oSetResult 0
3759: oPushResult
3760: oValuePush
3761: oPop 1
3763: oValueGreaterEqual
3764: oJumpForward 3775
3766: oValueGreaterEqualD
3767: oJumpForward 3775
3769: Choice Lookup Table
          33   3766
          42   3756
3774: oValueGreaterEqual
3775: oTypeSPop
3776: oGetGlobal 7
3778: oPushResult
3779: oTypeSPush
3780: oPop 1
3782: oJumpForward 3799
3784: Choice Lookup Table
          12   3749
          11   3714
          10   3679
           9   3644
           8   3609
           7   3574
3797: oJumpForward 3801
3799: oJumpBack 3572
3801: oReturn
3802: oLocalSpace 1
3804: oGetAddrLocal 1
3806: oPushResult
3807: oGetGlobal 25
3809: oAssign
3810: oGetAddrGlobal 25
3812: oPushResult
3813: oSetResult 1
3815: oAssign
3816: oCall 3568
3818: oGetAddrGlobal 25
3820: oPushResult
3821: oGetLocal 1
3823: oAssign
3824: oReturn
3825: oLocalSpace 0
3827: oCall 3848
3829: oInputChoice 3840
3831: oCall 4350
3833: oCall 3848
3835: oCall 4336
3837: oValueOr
3838: oJumpForward 3845
3840: Choice Lookup Table
          58   3831
3843: oJumpForward 3847
3845: oJumpBack 3829
3847: oReturn
3848: oLocalSpace 0
3850: oCall 3871
3852: oInputChoice 3863
3854: oCall 4350
3856: oCall 3871
3858: oCall 4336
3860: oValueAnd
3861: oJumpForward 3868
3863: Choice Lookup Table
          57   3854
3866: oJumpForward 3870
3868: oJumpBack 3852
3870: oReturn
3871: oLocalSpace 0
3873: oInputChoice 3882
3875: oCall 3871
3877: oCall 4350
3879: oValueNot
3880: oJumpForward 3887
3882: Choice Lookup Table
          59   3875
3885: oCall 3888
3887: oReturn
3888: oLocalSpace 0
3890: oCall 3947
3892: oInputChoice 3937
3894: oCall 3947
3896: oCall 4363
3898: oTypeSNodeType
3899: oChoice 3907
3901: oValueStringConcat
3902: oJumpForward 3913
3904: oValueAddD
3905: oJumpForward 3913
3907: Choice Lookup Table
          33   3904
          42   3901
3912: oValueAdd
3913: oJumpForward 3944
3915: oCall 3947
3917: oCall 4363
3919: oTypeSNodeType
3920: oChoice 3929
3922: oError 18
3924: oJumpForward 3935
3926: oValueSubD
3927: oJumpForward 3935
3929: Choice Lookup Table
          33   3926
          42   3922
3934: oValueSub
3935: oJumpForward 3944
3937: Choice Lookup Table
          26   3915
          25   3894
3942: oJumpForward 3946
3944: oJumpBack 3892
3946: oReturn
3947: oLocalSpace 0
3949: oCall 4007
3951: oInputChoice 3997
3953: oCall 4007
3955: oCall 4363
3957: oTypeSNodeType
3958: oChoice 3967
3960: oError 18
3962: oJumpForward 3973
3964: oValueMultD
3965: oJumpForward 3973
3967: Choice Lookup Table
          33   3964
          42   3960
3972: oValueMult
3973: oJumpForward 4004
3975: oCall 4007
3977: oCall 4363
3979: oTypeSNodeType
3980: oChoice 3989
3982: oError 18
3984: oJumpForward 3995
3986: oValueDivD
3987: oJumpForward 3995
3989: Choice Lookup Table
          33   3986
          42   3982
3994: oValueDiv
3995: oJumpForward 4004
3997: Choice Lookup Table
          24   3975
          23   3953
4002: oJumpForward 4006
4004: oJumpBack 3951
4006: oReturn
4007: oLocalSpace 0
4009: oInputChoice 4035
4011: oCall 4043
4013: oJumpForward 4042
4015: oCall 4043
4017: oTypeSNodeType
4018: oChoice 4027
4020: oError 18
4022: oJumpForward 4033
4024: oValueNegateD
4025: oJumpForward 4033
4027: Choice Lookup Table
          33   4024
          42   4020
4032: oValueNegate
4033: oJumpForward 4042
4035: Choice Lookup Table
          26   4015
          25   4011
4040: oCall 4043
4042: oReturn
4043: oLocalSpace 1
4045: oInputChoice 4306
4047: TOKEN_VALUE
4048: oPushResult
4049: oValuePush
4050: oPop 1
4052: oGetGlobal 6
4054: oPushResult
4055: oTypeSPush
4056: oPop 1
4058: oJumpForward 4335
4060: TOKEN_VALUE
4061: oPushResult
4062: oValuePush
4063: oPop 1
4065: oGetGlobal 9
4067: oPushResult
4068: oTypeSPush
4069: oPop 1
4071: oJumpForward 4335
4073: TOKEN_VALUE_DOUBLE
4074: oPushResult
4075: oValuePushDouble
4076: oPop 1
4078: oGetGlobal 13
4080: oPushResult
4081: oTypeSPush
4082: oPop 1
4084: oJumpForward 4335
4086: CURRENT_STRLIT
4087: oPushResult
4088: oValuePushString
4089: oPop 1
4091: oGetGlobal 15
4093: oPushResult
4094: oTypeSPush
4095: oPop 1
4097: oJumpForward 4335
4099: oCall 3568
4101: oInput 16
4103: oJumpForward 4335
4105: oGetAddrLocal 1
4107: oPushResult
4108: oScopeFindRequire
4109: oAssign
4110: oGetAddrLocal 1
4112: oPushResult
4113: oCall 244
4115: oPop 1
4117: oGetLocal 1
4119: oPushResult
4120: oNodeType
4121: oPop 1
4123: oChoice 4263
4125: oGetLocal 1
4127: oPushResult
4128: oCall 4758
4130: oPop 1
4132: oJumpForward 4288
4134: oGetLocal 1
4136: oPushResult
4137: oSetResult 22
4139: oPushResult
4140: oNodeGetInt
4141: oPop 2
4143: oPushResult
4144: oValuePush
4145: oPop 1
4147: oGetLocal 1
4149: oPushResult
4150: oSetResult 21
4152: oPushResult
4153: oNodeGet
4154: oPop 2
4156: oPushResult
4157: oTypeSPush
4158: oPop 1
4160: oJumpForward 4288
4162: oGetLocal 1
4164: oPushResult
4165: oSetResult 33
4167: oPushResult
4168: oNodeGetString
4169: oPop 2
4171: oPushResult
4172: oValuePushString
4173: oPop 1
4175: oGetLocal 1
4177: oPushResult
4178: oSetResult 21
4180: oPushResult
4181: oNodeGet
4182: oPop 2
4184: oPushResult
4185: oTypeSPush
4186: oPop 1
4188: oJumpForward 4288
4190: oGetLocal 1
4192: oPushResult
4193: oSetResult 22
4195: oPushResult
4196: oNodeGetInt
4197: oPop 2
4199: oPushResult
4200: oValuePush
4201: oPop 1
4203: oGetLocal 1
4205: oPushResult
4206: oSetResult 21
4208: oPushResult
4209: oNodeGet
4210: oPop 2
4212: oPushResult
4213: oTypeSPush
4214: oPop 1
4216: oJumpForward 4288
4218: oGetLocal 1
4220: oPushResult
4221: oSetResult 21
4223: oPushResult
4224: oNodeGet
4225: oPop 2
4227: oPushResult
4228: oTypeSPush
4229: oPop 1
4231: oInputChoice 4241
4233: oCall 3568
4235: oInput 16
4237: oCall 4581
4239: oJumpForward 4261
4241: Choice Lookup Table
          15   4233
4244: oGetGlobal 25
4246: oChoice 4256
4248: oSetResult 0
4250: oPushResult
4251: oValuePush
4252: oPop 1
4254: oJumpForward 4261
4256: Choice Lookup Table
           1   4248
4259: oError 32
4261: oJumpForward 4288
4263: Choice Lookup Table
          20   4218
          17   4190
          18   4162
          16   4134
          14   4125
4274: oError 1
4276: oSetResult 0
4278: oPushResult
4279: oValuePush
4280: oPop 1
4282: oGetGlobal 6
4284: oPushResult
4285: oTypeSPush
4286: oPop 1
4288: oJumpForward 4335
4290: oError 17
4292: oSetResult 0
4294: oPushResult
4295: oValuePush
4296: oPop 1
4298: oGetGlobal 14
4300: oPushResult
4301: oTypeSPush
4302: oPop 1
4304: oJumpForward 4335
4306: Choice Lookup Table
          20   4290
           0   4105
          15   4099
           3   4086
           2   4073
           4   4060
           1   4047
4321: oError 1
4323: oSetResult 0
4325: oPushResult
4326: oValuePush
4327: oPop 1
4329: oGetGlobal 6
4331: oPushResult
4332: oTypeSPush
4333: oPop 1
4335: oReturn
4336: oLocalSpace 0
4338: oTypeSNodeType
4339: oChoice 4343
4341: oJumpForward 4348
4343: Choice Lookup Table
          34   4341
4346: oError 8
4348: oTypeSPop
4349: oReturn
4350: oLocalSpace 0
4352: oTypeSNodeType
4353: oChoice 4357
4355: oJumpForward 4362
4357: Choice Lookup Table
          34   4355
4360: oError 8
4362: oReturn
4363: oLocalSpace 1
4365: oGetAddrLocal 1
4367: oPushResult
4368: oTypeSNodeType
4369: oAssign
4370: oTypeSPop
4371: oGetLocal 1
4373: oPushResult
4374: oTypeSNodeType
4375: oPushResult
4376: equal_node_type
4377: oPop 2
4379: oChoice 4456
4381: oTypeSNodeType
4382: oChoice 4443
4384: oGetLocal 1
4386: oChoice 4391
4388: oReturn
4389: oJumpForward 4394
4391: Choice Lookup Table
          38   4388
4394: oJumpForward 4452
4396: oGetLocal 1
4398: oChoice 4403
4400: oReturn
4401: oJumpForward 4406
4403: Choice Lookup Table
          37   4400
4406: oJumpForward 4452
4408: oGetLocal 1
4410: oChoice 4416
4412: oValueCharToString
4413: oReturn
4414: oJumpForward 4419
4416: Choice Lookup Table
          36   4412
4419: oJumpForward 4452
4421: oGetLocal 1
4423: oChoice 4438
4425: oValueSwap
4426: oValueCharToString
4427: oValueSwap
4428: oTypeSPop
4429: oGetGlobal 15
4431: oPushResult
4432: oTypeSPush
4433: oPop 1
4435: oReturn
4436: oJumpForward 4441
4438: Choice Lookup Table
          42   4425
4441: oJumpForward 4452
4443: Choice Lookup Table
          36   4421
          42   4408
          38   4396
          37   4384
4452: oError 15
4454: oJumpForward 4459
4456: Choice Lookup Table
           0   4381
4459: oReturn
4460: oLocalSpace 1
4462: oGetAddrLocal 1
4464: oPushResult
4465: oTypeSNodeType
4466: oAssign
4467: oTypeSPop
4468: oGetLocal 1
4470: oPushResult
4471: oTypeSNodeType
4472: oPushResult
4473: equal_node_type
4474: oPop 2
4476: oChoice 4577
4478: oTypeSNodeType
4479: oChoice 4560
4481: oGetLocal 1
4483: oChoice 4488
4485: oReturn
4486: oJumpForward 4491
4488: Choice Lookup Table
          30   4485
4491: oJumpForward 4573
4493: oGetLocal 1
4495: oChoice 4500
4497: oReturn
4498: oJumpForward 4503
4500: Choice Lookup Table
          31   4497
4503: oJumpForward 4573
4505: oGetLocal 1
4507: oChoice 4512
4509: oReturn
4510: oJumpForward 4515
4512: Choice Lookup Table
          38   4509
4515: oJumpForward 4573
4517: oGetLocal 1
4519: oChoice 4524
4521: oReturn
4522: oJumpForward 4527
4524: Choice Lookup Table
          37   4521
4527: oJumpForward 4573
4529: oGetLocal 1
4531: oChoice 4537
4533: oValueCharToString
4534: oReturn
4535: oJumpForward 4540
4537: Choice Lookup Table
          36   4533
4540: oJumpForward 4573
4542: oGetLocal 1
4544: oChoice 4553
4546: oReturn
4547: oJumpForward 4558
4549: oValueCharToString
4550: oReturn
4551: oJumpForward 4558
4553: Choice Lookup Table
          36   4549
          42   4546
4558: oJumpForward 4573
4560: Choice Lookup Table
          43   4542
          42   4529
          38   4517
          37   4505
          30   4493
          31   4481
4573: oError 15
4575: oJumpForward 4580
4577: Choice Lookup Table
           0   4478
4580: oReturn
4581: oLocalSpace 1
4583: oGetAddrLocal 1
4585: oPushResult
4586: oTypeSNodeType
4587: oAssign
4588: oTypeSPop
4589: oGetLocal 1
4591: oPushResult
4592: oTypeSNodeType
4593: oPushResult
4594: equal_node_type
4595: oPop 2
4597: oChoice 4754
4599: oTypeSNodeType
4600: oChoice 4729
4602: oGetLocal 1
4604: oChoice 4612
4606: oReturn
4607: oJumpForward 4623
4609: oReturn
4610: oJumpForward 4623
4612: Choice Lookup Table
          44   4609
          31   4609
          34   4606
          36   4606
          30   4606
4623: oJumpForward 4750
4625: oGetLocal 1
4627: oChoice 4635
4629: oReturn
4630: oJumpForward 4646
4632: oReturn
4633: oJumpForward 4646
4635: Choice Lookup Table
          44   4632
          31   4632
          34   4629
          36   4629
          30   4629
4646: oJumpForward 4750
4648: oGetLocal 1
4650: oChoice 4659
4652: oValueIntToDouble
4653: oReturn
4654: oJumpForward 4672
4656: oReturn
4657: oJumpForward 4672
4659: Choice Lookup Table
          33   4656
          44   4652
          31   4652
          34   4652
          36   4652
          30   4652
4672: oJumpForward 4750
4674: oGetLocal 1
4676: oChoice 4681
4678: oReturn
4679: oJumpForward 4684
4681: Choice Lookup Table
          38   4678
4684: oJumpForward 4750
4686: oGetLocal 1
4688: oChoice 4693
4690: oReturn
4691: oJumpForward 4696
4693: Choice Lookup Table
          37   4690
4696: oJumpForward 4750
4698: oGetLocal 1
4700: oChoice 4706
4702: oValueCharToString
4703: oReturn
4704: oJumpForward 4709
4706: Choice Lookup Table
          36   4702
4709: oJumpForward 4750
4711: oGetLocal 1
4713: oChoice 4722
4715: oReturn
4716: oJumpForward 4727
4718: oValueCharToString
4719: oReturn
4720: oJumpForward 4727
4722: Choice Lookup Table
          36   4718
          42   4715
4727: oJumpForward 4750
4729: Choice Lookup Table
          43   4711
          42   4698
          38   4686
          37   4674
          33   4648
          34   4625
          36   4625
          30   4625
          44   4602
          31   4602
4750: oError 15
4752: oJumpForward 4757
4754: Choice Lookup Table
           0   4599
4757: oReturn
4758: oLocalSpace 1
4760: oGetParam 1
4762: oPushResult
4763: oGetGlobal 17
4765: oPushResult
4766: oNodeEqual
4767: oPop 2
4769: oChoice 4809
4771: oInput 15
4773: oCall 3568
4775: oInput 16
4777: oTypeSNodeType
4778: oChoice 4784
4780: oJumpForward 4797
4782: oJumpForward 4797
4784: Choice Lookup Table
          36   4782
          30   4782
          34   4782
          44   4780
          31   4780
4795: oError 15
4797: oTypeSPop
4798: oGetGlobal 6
4800: oPushResult
4801: oTypeSPush
4802: oPop 1
4804: oInput 16
4806: oReturn
4807: oJumpForward 4812
4809: Choice Lookup Table
           1   4771
4812: oGetParam 1
4814: oPushResult
4815: oGetGlobal 18
4817: oPushResult
4818: oNodeEqual
4819: oPop 2
4821: oChoice 4855
4823: oInput 15
4825: oCall 3568
4827: oInput 16
4829: oTypeSNodeType
4830: oChoice 4836
4832: oJumpForward 4843
4834: oJumpForward 4843
4836: Choice Lookup Table
          30   4834
          31   4832
4841: oError 15
4843: oTypeSPop
4844: oGetGlobal 9
4846: oPushResult
4847: oTypeSPush
4848: oPop 1
4850: oInput 16
4852: oReturn
4853: oJumpForward 4858
4855: Choice Lookup Table
           1   4823
4858: oGetParam 1
4860: oPushResult
4861: oGetGlobal 19
4863: oPushResult
4864: oNodeEqual
4865: oPop 2
4867: oChoice 4912
4869: oInput 15
4871: oCall 3568
4873: oTypeSNodeType
4874: oChoice 4895
4876: oTypeSTop
4877: oPushResult
4878: oSetResult 45
4880: oPushResult
4881: oNodeGetBoolean
4882: oPop 2
4884: oChoice 4890
4886: oError 29
4888: oJumpForward 4893
4890: Choice Lookup Table
           1   4886
4893: oJumpForward 4900
4895: Choice Lookup Table
          44   4876
4898: oError 15
4900: oSetResult 1
4902: oPushResult
4903: oValuePush
4904: oPop 1
4906: oValueSub
4907: oInput 16
4909: oReturn
4910: oJumpForward 4915
4912: Choice Lookup Table
           1   4869
4915: oGetParam 1
4917: oPushResult
4918: oGetGlobal 20
4920: oPushResult
4921: oNodeEqual
4922: oPop 2
4924: oChoice 4969
4926: oInput 15
4928: oCall 3568
4930: oTypeSNodeType
4931: oChoice 4952
4933: oTypeSTop
4934: oPushResult
4935: oSetResult 45
4937: oPushResult
4938: oNodeGetBoolean
4939: oPop 2
4941: oChoice 4947
4943: oError 29
4945: oJumpForward 4950
4947: Choice Lookup Table
           1   4943
4950: oJumpForward 4957
4952: Choice Lookup Table
          44   4933
4955: oError 15
4957: oSetResult 1
4959: oPushResult
4960: oValuePush
4961: oPop 1
4963: oValueAdd
4964: oInput 16
4966: oReturn
4967: oJumpForward 4972
4969: Choice Lookup Table
           1   4926
4972: oGetParam 1
4974: oPushResult
4975: oGetGlobal 21
4977: oPushResult
4978: oNodeEqual
4979: oPop 2
4981: oChoice 5018
4983: oInput 15
4985: oCall 3802
4987: oValuePop
4988: oGetAddrLocal 1
4990: oPushResult
4991: oTypeSTop
4992: oAssign
4993: oTypeSPop
4994: oGetLocal 1
4996: oPushResult
4997: oSetResult 17
4999: oPushResult
5000: oNodeGetInt
5001: oPop 2
5003: oPushResult
5004: oValuePush
5005: oPop 1
5007: oGetGlobal 6
5009: oPushResult
5010: oTypeSPush
5011: oPop 1
5013: oInput 16
5015: oReturn
5016: oJumpForward 5021
5018: Choice Lookup Table
           1   4983
5021: oError 17
5023: oReturn
5024: oLocalSpace 1
5026: oGetAddrLocal 1
5028: oPushResult
5029: oSetResult 0
5031: oAssign
5032: oGetAddrLocal 1
5034: oPushResult
5035: oCall 5208
5037: oPop 1
5039: oGetAddrLocal 1
5041: oPushResult
5042: oCall 5108
5044: oPop 1
5046: oReturn
5047: oLocalSpace 1
5049: oGetAddrLocal 1
5051: oPushResult
5052: oGetGlobal 25
5054: oAssign
5055: oGetAddrGlobal 25
5057: oPushResult
5058: oSetResult 1
5060: oAssign
5061: oCall 5024
5063: oGetAddrGlobal 25
5065: oPushResult
5066: oGetLocal 1
5068: oAssign
5069: oReturn
5070: oLocalSpace 0
5072: oGetParam 1
5074: oPushResult
5075: oCall 5208
5077: oPop 1
5079: oTypeSNodeType
5080: oChoice 5099
5082: oJumpForward 5106
5084: oGetParam 1
5086: oPushResult
5087: oLabelNew
5088: oAssign
5089: oEmit 81
5091: oGetFromParam 1
5093: oPushResult
5094: oEmitLabel
5095: oPop 1
5097: oJumpForward 5106
5099: Choice Lookup Table
          34   5084
          35   5082
5104: oError 8
5106: oTypeSPop
5107: oReturn
5108: oLocalSpace 1
5110: oTypeSNodeType
5111: oChoice 5173
5113: oGetAddrLocal 1
5115: oPushResult
5116: oLabelNew
5117: oAssign
5118: oEmit 15
5120: oSetResult 1
5122: oPushResult
5123: oEmitInt
5124: oPop 1
5126: oEmit 79
5128: oGetLocal 1
5130: oPushResult
5131: oEmitLabel
5132: oPop 1
5134: oEmit 88
5136: oGetFromParam 1
5138: oPushResult
5139: oEmitLabel
5140: oPop 1
5142: oEmit 15
5144: oSetResult 0
5146: oPushResult
5147: oEmitInt
5148: oPop 1
5150: oEmit 88
5152: oGetLocal 1
5154: oPushResult
5155: oEmitLabel
5156: oPop 1
5158: oTypeSPop
5159: oGetGlobal 7
5161: oPushResult
5162: oTypeSPush
5163: oPop 1
5165: oGetParam 1
5167: oPushResult
5168: oSetResult 0
5170: oAssign
5171: oJumpForward 5176
5173: Choice Lookup Table
          35   5113
5176: oReturn
5177: oLocalSpace 0
5179: oTypeSNodeType
5180: oChoice 5204
5182: oGetParam 1
5184: oPushResult
5185: oLabelNew
5186: oAssign
5187: oEmit 81
5189: oGetFromParam 1
5191: oPushResult
5192: oEmitLabel
5193: oPop 1
5195: oTypeSPop
5196: oGetGlobal 8
5198: oPushResult
5199: oTypeSPush
5200: oPop 1
5202: oJumpForward 5207
5204: Choice Lookup Table
          34   5182
5207: oReturn
5208: oLocalSpace 0
5210: oGetParam 1
5212: oPushResult
5213: oCall 5741
5215: oPop 1
5217: oInputChoice 5723
5219: oGetParam 1
5221: oPushResult
5222: oCall 5108
5224: oPop 1
5226: oCall 8998
5228: oGetParam 1
5230: oPushResult
5231: oCall 5741
5233: oPop 1
5235: oGetParam 1
5237: oPushResult
5238: oCall 5108
5240: oPop 1
5242: oCall 8998
5244: oCall 8867
5246: oTypeSNodeType
5247: oChoice 5275
5249: oEmit 50
5251: oJumpForward 5294
5253: oEmit 56
5255: oJumpForward 5294
5257: oEmit 62
5259: oJumpForward 5294
5261: oCall 11248
5263: oEmit 15
5265: oSetResult 0
5267: oPushResult
5268: oEmitInt
5269: oPop 1
5271: oEmit 56
5273: oJumpForward 5294
5275: Choice Lookup Table
          42   5261
          43   5261
          38   5257
          37   5257
          44   5253
          31   5253
          36   5249
          34   5249
5292: oError 18
5294: oTypeSPop
5295: oGetGlobal 7
5297: oPushResult
5298: oTypeSPush
5299: oPop 1
5301: oJumpForward 5738
5303: oGetParam 1
5305: oPushResult
5306: oCall 5108
5308: oPop 1
5310: oCall 8998
5312: oGetParam 1
5314: oPushResult
5315: oCall 5741
5317: oPop 1
5319: oGetParam 1
5321: oPushResult
5322: oCall 5108
5324: oPop 1
5326: oCall 8998
5328: oCall 8867
5330: oTypeSNodeType
5331: oChoice 5359
5333: oEmit 51
5335: oJumpForward 5378
5337: oEmit 57
5339: oJumpForward 5378
5341: oEmit 63
5343: oJumpForward 5378
5345: oCall 11248
5347: oEmit 15
5349: oSetResult 0
5351: oPushResult
5352: oEmitInt
5353: oPop 1
5355: oEmit 57
5357: oJumpForward 5378
5359: Choice Lookup Table
          42   5345
          43   5345
          38   5341
          37   5341
          44   5337
          31   5337
          36   5333
          34   5333
5376: oError 18
5378: oTypeSPop
5379: oGetGlobal 7
5381: oPushResult
5382: oTypeSPush
5383: oPop 1
5385: oJumpForward 5738
5387: oGetParam 1
5389: oPushResult
5390: oCall 5108
5392: oPop 1
5394: oCall 8998
5396: oGetParam 1
5398: oPushResult
5399: oCall 5741
5401: oPop 1
5403: oGetParam 1
5405: oPushResult
5406: oCall 5108
5408: oPop 1
5410: oCall 8998
5412: oCall 8867
5414: oTypeSNodeType
5415: oChoice 5443
5417: oEmit 53
5419: oJumpForward 5462
5421: oEmit 59
5423: oJumpForward 5462
5425: oEmit 65
5427: oJumpForward 5462
5429: oCall 11248
5431: oEmit 15
5433: oSetResult 0
5435: oPushResult
5436: oEmitInt
5437: oPop 1
5439: oEmit 59
5441: oJumpForward 5462
5443: Choice Lookup Table
          42   5429
          43   5429
          38   5425
          37   5425
          44   5421
          31   5421
          36   5417
          34   5417
5460: oError 18
5462: oTypeSPop
5463: oGetGlobal 7
5465: oPushResult
5466: oTypeSPush
5467: oPop 1
5469: oJumpForward 5738
5471: oGetParam 1
5473: oPushResult
5474: oCall 5108
5476: oPop 1
5478: oCall 8998
5480: oGetParam 1
5482: oPushResult
5483: oCall 5741
5485: oPop 1
5487: oGetParam 1
5489: oPushResult
5490: oCall 5108
5492: oPop 1
5494: oCall 8998
5496: oCall 8867
5498: oTypeSNodeType
5499: oChoice 5527
5501: oEmit 52
5503: oJumpForward 5546
5505: oEmit 58
5507: oJumpForward 5546
5509: oEmit 64
5511: oJumpForward 5546
5513: oCall 11248
5515: oEmit 15
5517: oSetResult 0
5519: oPushResult
5520: oEmitInt
5521: oPop 1
5523: oEmit 58
5525: oJumpForward 5546
5527: Choice Lookup Table
          42   5513
          43   5513
          38   5509
          37   5509
          44   5505
          31   5505
          36   5501
          34   5501
5544: oError 18
5546: oTypeSPop
5547: oGetGlobal 7
5549: oPushResult
5550: oTypeSPush
5551: oPop 1
5553: oJumpForward 5738
5555: oGetParam 1
5557: oPushResult
5558: oCall 5108
5560: oPop 1
5562: oCall 8998
5564: oGetParam 1
5566: oPushResult
5567: oCall 5741
5569: oPop 1
5571: oGetParam 1
5573: oPushResult
5574: oCall 5108
5576: oPop 1
5578: oCall 8998
5580: oCall 8867
5582: oTypeSNodeType
5583: oChoice 5611
5585: oEmit 55
5587: oJumpForward 5630
5589: oEmit 61
5591: oJumpForward 5630
5593: oEmit 67
5595: oJumpForward 5630
5597: oCall 11248
5599: oEmit 15
5601: oSetResult 0
5603: oPushResult
5604: oEmitInt
5605: oPop 1
5607: oEmit 61
5609: oJumpForward 5630
5611: Choice Lookup Table
          42   5597
          43   5597
          38   5593
          37   5593
          44   5589
          31   5589
          36   5585
          34   5585
5628: oError 18
5630: oTypeSPop
5631: oGetGlobal 7
5633: oPushResult
5634: oTypeSPush
5635: oPop 1
5637: oJumpForward 5738
5639: oGetParam 1
5641: oPushResult
5642: oCall 5108
5644: oPop 1
5646: oCall 8998
5648: oGetParam 1
5650: oPushResult
5651: oCall 5741
5653: oPop 1
5655: oGetParam 1
5657: oPushResult
5658: oCall 5108
5660: oPop 1
5662: oCall 8998
5664: oCall 8867
5666: oTypeSNodeType
5667: oChoice 5695
5669: oEmit 54
5671: oJumpForward 5714
5673: oEmit 60
5675: oJumpForward 5714
5677: oEmit 66
5679: oJumpForward 5714
5681: oCall 11248
5683: oEmit 15
5685: oSetResult 0
5687: oPushResult
5688: oEmitInt
5689: oPop 1
5691: oEmit 60
5693: oJumpForward 5714
5695: Choice Lookup Table
          42   5681
          43   5681
          38   5677
          37   5677
          44   5673
          31   5673
          36   5669
          34   5669
5712: oError 18
5714: oTypeSPop
5715: oGetGlobal 7
5717: oPushResult
5718: oTypeSPush
5719: oPop 1
5721: oJumpForward 5738
5723: Choice Lookup Table
          12   5639
          11   5555
          10   5471
           9   5387
           8   5303
           7   5219
5736: oJumpForward 5740
5738: oJumpBack 5217
5740: oReturn
5741: oLocalSpace 1
5743: oGetAddrLocal 1
5745: oPushResult
5746: oSetResult 0
5748: oAssign
5749: oGetParam 1
5751: oPushResult
5752: oCall 5921
5754: oPop 1
5756: oInputChoice 5889
5758: oTypeSNodeType
5759: oChoice 5830
5761: oGetLocal 1
5763: oPushResult
5764: oSetResult 0
5766: oPushResult
5767: equal_label
5768: oPop 2
5770: oChoice 5779
5772: oGetAddrLocal 1
5774: oPushResult
5775: oLabelNew
5776: oAssign
5777: oJumpForward 5782
5779: Choice Lookup Table
           1   5772
5782: oEmit 79
5784: oGetLocal 1
5786: oPushResult
5787: oEmitLabel
5788: oPop 1
5790: oJumpForward 5837
5792: oGetParam 1
5794: oPushResult
5795: oCall 5177
5797: oPop 1
5799: oGetLocal 1
5801: oPushResult
5802: oSetResult 0
5804: oPushResult
5805: equal_label
5806: oPop 2
5808: oChoice 5817
5810: oGetAddrLocal 1
5812: oPushResult
5813: oLabelNew
5814: oAssign
5815: oJumpForward 5820
5817: Choice Lookup Table
           1   5810
5820: oEmit 79
5822: oGetLocal 1
5824: oPushResult
5825: oEmitLabel
5826: oPop 1
5828: oJumpForward 5837
5830: Choice Lookup Table
          34   5792
          35   5761
5835: oError 8
5837: oTypeSPop
5838: oEmit 88
5840: oGetFromParam 1
5842: oPushResult
5843: oEmitLabel
5844: oPop 1
5846: oGetParam 1
5848: oPushResult
5849: oSetResult 0
5851: oAssign
5852: oGetParam 1
5854: oPushResult
5855: oCall 5921
5857: oPop 1
5859: oTypeSNodeType
5860: oChoice 5873
5862: oJumpForward 5880
5864: oGetParam 1
5866: oPushResult
5867: oCall 5177
5869: oPop 1
5871: oJumpForward 5880
5873: Choice Lookup Table
          34   5864
          35   5862
5878: oError 8
5880: oTypeSPop
5881: oGetGlobal 8
5883: oPushResult
5884: oTypeSPush
5885: oPop 1
5887: oJumpForward 5894
5889: Choice Lookup Table
          58   5758
5892: oJumpForward 5896
5894: oJumpBack 5756
5896: oGetLocal 1
5898: oPushResult
5899: oSetResult 0
5901: oPushResult
5902: equal_label
5903: oPop 2
5905: oChoice 5917
5907: oEmit 88
5909: oGetLocal 1
5911: oPushResult
5912: oEmitLabel
5913: oPop 1
5915: oJumpForward 5920
5917: Choice Lookup Table
           0   5907
5920: oReturn
5921: oLocalSpace 2
5923: oGetAddrLocal 1
5925: oPushResult
5926: oSetResult 0
5928: oAssign
5929: oGetParam 1
5931: oPushResult
5932: oCall 6059
5934: oPop 1
5936: oInputChoice 6051
5938: oTypeSNodeType
5939: oChoice 5952
5941: oJumpForward 5959
5943: oGetParam 1
5945: oPushResult
5946: oCall 5177
5948: oPop 1
5950: oJumpForward 5959
5952: Choice Lookup Table
          34   5943
          35   5941
5957: oError 8
5959: oTypeSPop
5960: oGetLocal 1
5962: oPushResult
5963: oSetResult 0
5965: oPushResult
5966: equal_label
5967: oPop 2
5969: oChoice 5998
5971: oGetAddrLocal 1
5973: oPushResult
5974: oLabelNew
5975: oAssign
5976: oEmit 89
5978: oGetFromParam 1
5980: oPushResult
5981: oEmitLabel
5982: oPop 1
5984: oGetLocal 1
5986: oPushResult
5987: oEmitLabel
5988: oPop 1
5990: oGetParam 1
5992: oPushResult
5993: oGetLocal 1
5995: oAssign
5996: oJumpForward 6001
5998: Choice Lookup Table
           1   5971
6001: oGetAddrLocal 2
6003: oPushResult
6004: oSetResult 0
6006: oAssign
6007: oGetAddrLocal 2
6009: oPushResult
6010: oCall 6059
6012: oPop 1
6014: oTypeSNodeType
6015: oChoice 6028
6017: oJumpForward 6035
6019: oGetAddrLocal 2
6021: oPushResult
6022: oCall 5177
6024: oPop 1
6026: oJumpForward 6035
6028: Choice Lookup Table
          34   6019
          35   6017
6033: oError 8
6035: oEmit 89
6037: oGetLocal 2
6039: oPushResult
6040: oEmitLabel
6041: oPop 1
6043: oGetLocal 1
6045: oPushResult
6046: oEmitLabel
6047: oPop 1
6049: oJumpForward 6056
6051: Choice Lookup Table
          57   5938
6054: oJumpForward 6058
6056: oJumpBack 5936
6058: oReturn
6059: oLocalSpace 1
6061: oInputChoice 6115
6063: oGetAddrLocal 1
6065: oPushResult
6066: oSetResult 0
6068: oAssign
6069: oGetAddrLocal 1
6071: oPushResult
6072: oCall 6059
6074: oPop 1
6076: oTypeSNodeType
6077: oChoice 6106
6079: oGetParam 1
6081: oPushResult
6082: oLabelNew
6083: oAssign
6084: oEmit 79
6086: oGetFromParam 1
6088: oPushResult
6089: oEmitLabel
6090: oPop 1
6092: oEmit 88
6094: oGetLocal 1
6096: oPushResult
6097: oEmitLabel
6098: oPop 1
6100: oJumpForward 6113
6102: oEmit 49
6104: oJumpForward 6113
6106: Choice Lookup Table
          34   6102
          35   6079
6111: oError 8
6113: oJumpForward 6125
6115: Choice Lookup Table
          59   6063
6118: oGetParam 1
6120: oPushResult
6121: oCall 6126
6123: oPop 1
6125: oReturn
6126: oLocalSpace 2
6128: oGetAddrLocal 1
6130: oPushResult
6131: oSetResult 1
6133: oAssign
6134: oGetParam 1
6136: oPushResult
6137: oCall 6392
6139: oPop 1
6141: oInputChoice 6382
6143: oTypeSNodeType
6144: oChoice 6280
6146: oCall 8952
6148: oGetParam 1
6150: oPushResult
6151: oCall 6392
6153: oPop 1
6155: oTypeSNodeType
6156: oChoice 6164
6158: oEmit 23
6160: oCall 8315
6162: oJumpForward 6173
6164: Choice Lookup Table
          38   6158
          37   6158
6169: oCall 8972
6171: oEmit 39
6173: oJumpForward 6299
6175: oGetParam 1
6177: oPushResult
6178: oCall 6392
6180: oPop 1
6182: oCall 9018
6184: oEmit 46
6186: oJumpForward 6299
6188: oGetLocal 1
6190: oChoice 6206
6192: oGetAddrLocal 2
6194: oPushResult
6195: oCall 11031
6197: oAssign
6198: oGetAddrLocal 1
6200: oPushResult
6201: oSetResult 0
6203: oAssign
6204: oJumpForward 6209
6206: Choice Lookup Table
           1   6192
6209: oGetParam 1
6211: oPushResult
6212: oCall 6392
6214: oPop 1
6216: oTypeSNodeType
6217: oChoice 6255
6219: oCall 11140
6221: oEmit 18
6223: oGetLocal 2
6225: oPushResult
6226: oEmitInt
6227: oPop 1
6229: oGetGlobal 16
6231: oPushResult
6232: oTypeSPush
6233: oPop 1
6235: oJumpForward 6265
6237: oCall 11194
6239: oEmit 18
6241: oGetLocal 2
6243: oPushResult
6244: oEmitInt
6245: oPop 1
6247: oGetGlobal 16
6249: oPushResult
6250: oTypeSPush
6251: oPop 1
6253: oJumpForward 6265
6255: Choice Lookup Table
          36   6237
          42   6219
          43   6219
6262: oError 15
6264: oTypeSPop
6265: oJumpForward 6299
6267: oGetParam 1
6269: oPushResult
6270: oCall 6392
6272: oPop 1
6274: oCall 8952
6276: oCall 8315
6278: oJumpForward 6299
6280: Choice Lookup Table
          38   6267
          37   6267
          36   6188
          42   6188
          43   6188
          33   6175
          30   6146
          31   6146
6297: oError 18
6299: oJumpForward 6389
6301: oTypeSNodeType
6302: oChoice 6367
6304: oCall 8952
6306: oGetParam 1
6308: oPushResult
6309: oCall 6392
6311: oPop 1
6313: oCall 8972
6315: oEmit 42
6317: oJumpForward 6380
6319: oGetParam 1
6321: oPushResult
6322: oCall 6392
6324: oPop 1
6326: oCall 9018
6328: oEmit 47
6330: oJumpForward 6380
6332: oGetParam 1
6334: oPushResult
6335: oCall 6392
6337: oPop 1
6339: oTypeSNodeType
6340: oChoice 6354
6342: oCall 8952
6344: oCall 8371
6346: oJumpForward 6365
6348: oCall 8867
6350: oCall 8427
6352: oJumpForward 6365
6354: Choice Lookup Table
          38   6348
          37   6348
          30   6342
          31   6342
6363: oError 18
6365: oJumpForward 6380
6367: Choice Lookup Table
          38   6332
          37   6332
          33   6319
          30   6304
          31   6304
6378: oError 18
6380: oJumpForward 6389
6382: Choice Lookup Table
          26   6301
          25   6143
6387: oJumpForward 6391
6389: oJumpBack 6141
6391: oReturn
6392: oLocalSpace 0
6394: oGetParam 1
6396: oPushResult
6397: oCall 6497
6399: oPop 1
6401: oInputChoice 6487
6403: oTypeSNodeType
6404: oChoice 6434
6406: oCall 8952
6408: oGetParam 1
6410: oPushResult
6411: oCall 6497
6413: oPop 1
6415: oCall 8972
6417: oEmit 36
6419: oJumpForward 6443
6421: oGetParam 1
6423: oPushResult
6424: oCall 6497
6426: oPop 1
6428: oCall 9018
6430: oEmit 44
6432: oJumpForward 6443
6434: Choice Lookup Table
          33   6421
          30   6406
          31   6406
6441: oError 18
6443: oJumpForward 6494
6445: oTypeSNodeType
6446: oChoice 6476
6448: oCall 8952
6450: oGetParam 1
6452: oPushResult
6453: oCall 6497
6455: oPop 1
6457: oCall 8972
6459: oEmit 37
6461: oJumpForward 6485
6463: oGetParam 1
6465: oPushResult
6466: oCall 6497
6468: oPop 1
6470: oCall 9018
6472: oEmit 45
6474: oJumpForward 6485
6476: Choice Lookup Table
          33   6463
          30   6448
          31   6448
6483: oError 18
6485: oJumpForward 6494
6487: Choice Lookup Table
          24   6445
          23   6403
6492: oJumpForward 6496
6494: oJumpBack 6401
6496: oReturn
6497: oLocalSpace 0
6499: oInputChoice 6557
6501: oGetParam 1
6503: oPushResult
6504: oCall 6570
6506: oPop 1
6508: oTypeSNodeType
6509: oChoice 6515
6511: oJumpForward 6524
6513: oJumpForward 6524
6515: Choice Lookup Table
          33   6513
          30   6511
          31   6511
6522: oError 18
6524: oJumpForward 6569
6526: oGetParam 1
6528: oPushResult
6529: oCall 6570
6531: oPop 1
6533: oTypeSNodeType
6534: oChoice 6546
6536: oCall 8972
6538: oEmit 43
6540: oJumpForward 6555
6542: oEmit 48
6544: oJumpForward 6555
6546: Choice Lookup Table
          33   6542
          30   6536
          31   6536
6553: oError 18
6555: oJumpForward 6569
6557: Choice Lookup Table
          26   6526
          25   6501
6562: oGetParam 1
6564: oPushResult
6565: oCall 6570
6567: oPop 1
6569: oReturn
6570: oLocalSpace 7
6572: oInputChoice 7076
6574: oEmit 15
6576: TOKEN_VALUE
6577: oPushResult
6578: oEmitInt
6579: oPop 1
6581: oGetGlobal 6
6583: oPushResult
6584: oTypeSPush
6585: oPop 1
6587: oJumpForward 7099
6589: oEmit 15
6591: TOKEN_VALUE
6592: oPushResult
6593: oEmitInt
6594: oPop 1
6596: oGetGlobal 9
6598: oPushResult
6599: oTypeSPush
6600: oPop 1
6602: oJumpForward 7099
6604: oEmit 16
6606: TOKEN_VALUE_DOUBLE
6607: oPushResult
6608: oEmitDouble
6609: oPop 1
6611: oGetGlobal 13
6613: oPushResult
6614: oTypeSPush
6615: oPop 1
6617: oJumpForward 7099
6619: oGetParam 1
6621: oPushResult
6622: oCall 5208
6624: oPop 1
6626: oInput 16
6628: oJumpForward 7099
6630: oGetAddrLocal 1
6632: oPushResult
6633: CURRENT_STRLIT
6634: oPushResult
6635: oStringAllocShortStringLit
6636: oPop 1
6638: oAssign
6639: oEmit 17
6641: oGetLocal 1
6643: oPushResult
6644: oEmitInt
6645: oPop 1
6647: oGetGlobal 15
6649: oPushResult
6650: oTypeSPush
6651: oPop 1
6653: oCall 7913
6655: oCall 7859
6657: oJumpForward 7099
6659: oGetAddrLocal 2
6661: oPushResult
6662: oScopeFindRequire
6663: oAssign
6664: oGetAddrLocal 2
6666: oPushResult
6667: oCall 244
6669: oPop 1
6671: oGetLocal 2
6673: oPushResult
6674: oNodeType
6675: oPop 1
6677: oChoice 6994
6679: oGetLocal 2
6681: oPushResult
6682: oCall 11343
6684: oPop 1
6686: oJumpForward 7025
6688: oGetLocal 2
6690: oPushResult
6691: oCall 12013
6693: oPop 1
6695: oJumpForward 7025
6697: oGetAddrLocal 3
6699: oPushResult
6700: oGetLocal 2
6702: oPushResult
6703: oSetResult 21
6705: oPushResult
6706: oNodeGet
6707: oPop 2
6709: oAssign
6710: oGetLocal 3
6712: oPushResult
6713: oTypeSPush
6714: oPop 1
6716: oTypeSNodeType
6717: oChoice 6741
6719: oEmit 15
6721: oGetLocal 2
6723: oPushResult
6724: oCall 14382
6726: oPop 1
6728: oJumpForward 6758
6730: oEmit 15
6732: oGetLocal 2
6734: oPushResult
6735: oCall 14382
6737: oPop 1
6739: oJumpForward 6758
6741: Choice Lookup Table
          38   6730
          37   6730
          30   6719
          36   6719
          34   6719
          44   6719
          31   6719
6756: oError 17
6758: oJumpForward 7025
6760: oGetAddrLocal 3
6762: oPushResult
6763: oGetLocal 2
6765: oPushResult
6766: oSetResult 21
6768: oPushResult
6769: oNodeGet
6770: oPop 2
6772: oAssign
6773: oGetLocal 3
6775: oPushResult
6776: oTypeSPush
6777: oPop 1
6779: oTypeSNodeType
6780: oChoice 6799
6782: oEmit 16
6784: oGetLocal 2
6786: oPushResult
6787: oSetResult 34
6789: oPushResult
6790: oNodeGetDouble
6791: oPop 2
6793: oPushResult
6794: oEmitDouble
6795: oPop 1
6797: oJumpForward 6804
6799: Choice Lookup Table
          33   6782
6802: oError 17
6804: oJumpForward 7025
6806: oGetAddrLocal 4
6808: oPushResult
6809: oGetLocal 2
6811: oPushResult
6812: oSetResult 22
6814: oPushResult
6815: oNodeGetInt
6816: oPop 2
6818: oAssign
6819: oGetLocal 4
6821: oPushResult
6822: equal_zero
6823: oPop 1
6825: oChoice 6858
6827: oGetAddrLocal 4
6829: oPushResult
6830: oGetLocal 2
6832: oPushResult
6833: oSetResult 33
6835: oPushResult
6836: oNodeGetString
6837: oPop 2
6839: oPushResult
6840: oStringAllocShortStringLit
6841: oPop 1
6843: oAssign
6844: oGetLocal 2
6846: oPushResult
6847: oSetResult 22
6849: oPushResult
6850: oGetLocal 4
6852: oPushResult
6853: oNodeSetInt
6854: oPop 3
6856: oJumpForward 6861
6858: Choice Lookup Table
           1   6827
6861: oEmit 17
6863: oGetLocal 4
6865: oPushResult
6866: oEmitInt
6867: oPop 1
6869: oGetGlobal 15
6871: oPushResult
6872: oTypeSPush
6873: oPop 1
6875: oCall 7913
6877: oCall 7859
6879: oJumpForward 7025
6881: oGetLocal 2
6883: oPushResult
6884: oCall 7100
6886: oPop 1
6888: oJumpForward 7025
6890: oGetLocal 2
6892: oPushResult
6893: oSetResult 21
6895: oPushResult
6896: oNodeGet
6897: oPop 2
6899: oPushResult
6900: oTypeSPush
6901: oPop 1
6903: oInputChoice 6970
6905: oCall 5024
6907: oInput 16
6909: oCall 8687
6911: oTypeSNodeType
6912: oChoice 6957
6914: oInputChoice 6944
6916: oTypeSPop
6917: oGetLocal 3
6919: oPushResult
6920: oSetResult 38
6922: oPushResult
6923: oNodeGet
6924: oPop 2
6926: oPushResult
6927: oTypeSPush
6928: oPop 1
6930: oCall 7913
6932: oCall 7859
6934: oJumpForward 6949
6936: oCall 8108
6938: oCall 7913
6940: oCall 7859
6942: oJumpForward 6949
6944: Choice Lookup Table
          17   6936
          19   6916
6949: oJumpForward 6968
6951: oCall 7913
6953: oCall 7859
6955: oJumpForward 6968
6957: Choice Lookup Table
          43   6951
          41   6951
          39   6951
          38   6914
          37   6914
6968: oJumpForward 6992
6970: Choice Lookup Table
          15   6905
6973: oGetGlobal 25
6975: oChoice 6987
6977: oEmit 15
6979: oSetResult 0
6981: oPushResult
6982: oEmitInt
6983: oPop 1
6985: oJumpForward 6992
6987: Choice Lookup Table
           1   6977
6990: oError 32
6992: oJumpForward 7025
6994: Choice Lookup Table
          20   6890
          26   6881
          25   6881
          23   6881
          22   6881
          18   6806
          19   6760
          17   6697
          16   6697
          14   6688
          13   6679
7017: oError 6
7019: oGetGlobal 6
7021: oPushResult
7022: oTypeSPush
7023: oPop 1
7025: oJumpForward 7099
7027: oInput 0
7029: oGetAddrLocal 5
7031: oPushResult
7032: oScopeFindRequire
7033: oAssign
7034: oGetAddrLocal 5
7036: oPushResult
7037: oCall 244
7039: oPop 1
7041: oGetLocal 5
7043: oPushResult
7044: oSetResult 0
7046: oPushResult
7047: oCall 9548
7049: oPop 2
7051: oGetAddrLocal 6
7053: oPushResult
7054: oTypeSTop
7055: oAssign
7056: oTypeSPop
7057: oGetAddrLocal 7
7059: oPushResult
7060: oGetLocal 6
7062: oPushResult
7063: oCall 13401
7065: oPop 1
7067: oAssign
7068: oGetLocal 7
7070: oPushResult
7071: oTypeSPush
7072: oPop 1
7074: oJumpForward 7099
7076: Choice Lookup Table
          20   7027
           0   6659
           3   6630
          15   6619
           2   6604
           4   6589
           1   6574
7091: oError 6
7093: oGetGlobal 6
7095: oPushResult
7096: oTypeSPush
7097: oPop 1
7099: oReturn
7100: oLocalSpace 2
7102: oGetAddrLocal 1
7104: oPushResult
7105: oGetParam 1
7107: oPushResult
7108: oSetResult 21
7110: oPushResult
7111: oNodeGet
7112: oPop 2
7114: oAssign
7115: oGetAddrLocal 2
7117: oPushResult
7118: oGetParam 1
7120: oPushResult
7121: oCall 14336
7123: oPop 1
7125: oAssign
7126: oGetLocal 1
7128: oPushResult
7129: oTypeSPush
7130: oPop 1
7132: oTypeSNodeType
7133: oChoice 7832
7135: oGetParam 1
7137: oPushResult
7138: oNodeType
7139: oPop 1
7141: oChoice 7287
7143: oEmit 0
7145: oGetParam 1
7147: oPushResult
7148: oCall 14382
7150: oPop 1
7152: oJumpForward 7297
7154: oGetLocal 2
7156: oPushResult
7157: equal_zero
7158: oPop 1
7160: oChoice 7173
7162: oEmit 3
7164: oGetParam 1
7166: oPushResult
7167: oCall 14382
7169: oPop 1
7171: oJumpForward 7191
7173: Choice Lookup Table
           1   7162
7176: oEmit 9
7178: oGetLocal 2
7180: oPushResult
7181: oEmitInt
7182: oPop 1
7184: oGetParam 1
7186: oPushResult
7187: oCall 14382
7189: oPop 1
7191: oJumpForward 7297
7193: oGetParam 1
7195: oPushResult
7196: oSetResult 35
7198: oPushResult
7199: oNodeGetBoolean
7200: oPop 2
7202: oChoice 7245
7204: oGetLocal 2
7206: oPushResult
7207: equal_zero
7208: oPop 1
7210: oChoice 7223
7212: oEmit 8
7214: oGetParam 1
7216: oPushResult
7217: oCall 14382
7219: oPop 1
7221: oJumpForward 7241
7223: Choice Lookup Table
           1   7212
7226: oEmit 14
7228: oGetLocal 2
7230: oPushResult
7231: oEmitInt
7232: oPop 1
7234: oGetParam 1
7236: oPushResult
7237: oCall 14382
7239: oPop 1
7241: oEmit 24
7243: oJumpForward 7285
7245: Choice Lookup Table
           1   7204
7248: oGetLocal 2
7250: oPushResult
7251: equal_zero
7252: oPop 1
7254: oChoice 7267
7256: oEmit 6
7258: oGetParam 1
7260: oPushResult
7261: oCall 14382
7263: oPop 1
7265: oJumpForward 7285
7267: Choice Lookup Table
           1   7256
7270: oEmit 12
7272: oGetLocal 2
7274: oPushResult
7275: oEmitInt
7276: oPop 1
7278: oGetParam 1
7280: oPushResult
7281: oCall 14382
7283: oPop 1
7285: oJumpForward 7297
7287: Choice Lookup Table
          25   7193
          23   7154
          26   7143
          22   7143
7296: oEndChoice
7297: oJumpForward 7858
7299: oGetParam 1
7301: oPushResult
7302: oNodeType
7303: oPop 1
7305: oChoice 7451
7307: oEmit 1
7309: oGetParam 1
7311: oPushResult
7312: oCall 14382
7314: oPop 1
7316: oJumpForward 7461
7318: oGetLocal 2
7320: oPushResult
7321: equal_zero
7322: oPop 1
7324: oChoice 7337
7326: oEmit 4
7328: oGetParam 1
7330: oPushResult
7331: oCall 14382
7333: oPop 1
7335: oJumpForward 7355
7337: Choice Lookup Table
           1   7326
7340: oEmit 10
7342: oGetLocal 2
7344: oPushResult
7345: oEmitInt
7346: oPop 1
7348: oGetParam 1
7350: oPushResult
7351: oCall 14382
7353: oPop 1
7355: oJumpForward 7461
7357: oGetParam 1
7359: oPushResult
7360: oSetResult 35
7362: oPushResult
7363: oNodeGetBoolean
7364: oPop 2
7366: oChoice 7409
7368: oGetLocal 2
7370: oPushResult
7371: equal_zero
7372: oPop 1
7374: oChoice 7387
7376: oEmit 8
7378: oGetParam 1
7380: oPushResult
7381: oCall 14382
7383: oPop 1
7385: oJumpForward 7405
7387: Choice Lookup Table
           1   7376
7390: oEmit 14
7392: oGetLocal 2
7394: oPushResult
7395: oEmitInt
7396: oPop 1
7398: oGetParam 1
7400: oPushResult
7401: oCall 14382
7403: oPop 1
7405: oEmit 25
7407: oJumpForward 7449
7409: Choice Lookup Table
           1   7368
7412: oGetLocal 2
7414: oPushResult
7415: equal_zero
7416: oPop 1
7418: oChoice 7431
7420: oEmit 7
7422: oGetParam 1
7424: oPushResult
7425: oCall 14382
7427: oPop 1
7429: oJumpForward 7449
7431: Choice Lookup Table
           1   7420
7434: oEmit 13
7436: oGetLocal 2
7438: oPushResult
7439: oEmitInt
7440: oPop 1
7442: oGetParam 1
7444: oPushResult
7445: oCall 14382
7447: oPop 1
7449: oJumpForward 7461
7451: Choice Lookup Table
          25   7357
          23   7318
          26   7307
          22   7307
7460: oEndChoice
7461: oJumpForward 7858
7463: oError 17
7465: oJumpForward 7858
7467: oGetParam 1
7469: oPushResult
7470: oNodeType
7471: oPop 1
7473: oChoice 7619
7475: oEmit 2
7477: oGetParam 1
7479: oPushResult
7480: oCall 14382
7482: oPop 1
7484: oJumpForward 7629
7486: oGetLocal 2
7488: oPushResult
7489: equal_zero
7490: oPop 1
7492: oChoice 7505
7494: oEmit 5
7496: oGetParam 1
7498: oPushResult
7499: oCall 14382
7501: oPop 1
7503: oJumpForward 7523
7505: Choice Lookup Table
           1   7494
7508: oEmit 11
7510: oGetLocal 2
7512: oPushResult
7513: oEmitInt
7514: oPop 1
7516: oGetParam 1
7518: oPushResult
7519: oCall 14382
7521: oPop 1
7523: oJumpForward 7629
7525: oGetParam 1
7527: oPushResult
7528: oSetResult 35
7530: oPushResult
7531: oNodeGetBoolean
7532: oPop 2
7534: oChoice 7577
7536: oGetLocal 2
7538: oPushResult
7539: equal_zero
7540: oPop 1
7542: oChoice 7555
7544: oEmit 8
7546: oGetParam 1
7548: oPushResult
7549: oCall 14382
7551: oPop 1
7553: oJumpForward 7573
7555: Choice Lookup Table
           1   7544
7558: oEmit 14
7560: oGetLocal 2
7562: oPushResult
7563: oEmitInt
7564: oPop 1
7566: oGetParam 1
7568: oPushResult
7569: oCall 14382
7571: oPop 1
7573: oEmit 26
7575: oJumpForward 7617
7577: Choice Lookup Table
           1   7536
7580: oGetLocal 2
7582: oPushResult
7583: equal_zero
7584: oPop 1
7586: oChoice 7599
7588: oEmit 8
7590: oGetParam 1
7592: oPushResult
7593: oCall 14382
7595: oPop 1
7597: oJumpForward 7617
7599: Choice Lookup Table
           1   7588
7602: oEmit 14
7604: oGetLocal 2
7606: oPushResult
7607: oEmitInt
7608: oPop 1
7610: oGetParam 1
7612: oPushResult
7613: oCall 14382
7615: oPop 1
7617: oJumpForward 7629
7619: Choice Lookup Table
          25   7525
          23   7486
          26   7475
          22   7475
7628: oEndChoice
7629: oInputChoice 7659
7631: oTypeSPop
7632: oGetLocal 1
7634: oPushResult
7635: oSetResult 38
7637: oPushResult
7638: oNodeGet
7639: oPop 2
7641: oPushResult
7642: oTypeSPush
7643: oPop 1
7645: oCall 7913
7647: oCall 7859
7649: oJumpForward 7664
7651: oCall 8108
7653: oCall 7913
7655: oCall 7859
7657: oJumpForward 7664
7659: Choice Lookup Table
          17   7651
          19   7631
7664: oJumpForward 7858
7666: oGetParam 1
7668: oPushResult
7669: oNodeType
7670: oPop 1
7672: oChoice 7816
7674: oEmit 17
7676: oGetParam 1
7678: oPushResult
7679: oCall 14382
7681: oPop 1
7683: oJumpForward 7826
7685: oGetLocal 2
7687: oPushResult
7688: equal_zero
7689: oPop 1
7691: oChoice 7704
7693: oEmit 18
7695: oGetParam 1
7697: oPushResult
7698: oCall 14382
7700: oPop 1
7702: oJumpForward 7722
7704: Choice Lookup Table
           1   7693
7707: oEmit 21
7709: oGetLocal 2
7711: oPushResult
7712: oEmitInt
7713: oPop 1
7715: oGetParam 1
7717: oPushResult
7718: oCall 14382
7720: oPop 1
7722: oJumpForward 7826
7724: oGetParam 1
7726: oPushResult
7727: oSetResult 35
7729: oPushResult
7730: oNodeGetBoolean
7731: oPop 2
7733: oChoice 7774
7735: oGetLocal 2
7737: oPushResult
7738: equal_zero
7739: oPop 1
7741: oChoice 7754
7743: oEmit 8
7745: oGetParam 1
7747: oPushResult
7748: oCall 14382
7750: oPop 1
7752: oJumpForward 7772
7754: Choice Lookup Table
           1   7743
7757: oEmit 14
7759: oGetLocal 2
7761: oPushResult
7762: oEmitInt
7763: oPop 1
7765: oGetParam 1
7767: oPushResult
7768: oCall 14382
7770: oPop 1
7772: oJumpForward 7814
7774: Choice Lookup Table
           1   7735
7777: oGetLocal 2
7779: oPushResult
7780: equal_zero
7781: oPop 1
7783: oChoice 7796
7785: oEmit 19
7787: oGetParam 1
7789: oPushResult
7790: oCall 14382
7792: oPop 1
7794: oJumpForward 7814
7796: Choice Lookup Table
           1   7785
7799: oEmit 22
7801: oGetLocal 2
7803: oPushResult
7804: oEmitInt
7805: oPop 1
7807: oGetParam 1
7809: oPushResult
7810: oCall 14382
7812: oPop 1
7814: oJumpForward 7826
7816: Choice Lookup Table
          25   7724
          23   7685
          26   7674
          22   7674
7825: oEndChoice
7826: oCall 7913
7828: oCall 7859
7830: oJumpForward 7858
7832: Choice Lookup Table
          43   7666
          41   7666
          39   7666
          33   7467
          38   7467
          37   7467
          29   7463
          36   7299
          30   7299
          34   7299
          44   7135
          31   7135
7857: oEndChoice
7858: oReturn
7859: oLocalSpace 0
7861: oTypeSNodeType
7862: oChoice 7886
7864: oEmit 24
7866: oJumpForward 7912
7868: oEmit 25
7870: oJumpForward 7912
7872: oError 17
7874: oJumpForward 7912
7876: oEmit 26
7878: oJumpForward 7912
7880: oError 30
7882: oJumpForward 7912
7884: oJumpForward 7912
7886: Choice Lookup Table
          43   7884
          42   7884
          41   7884
          39   7884
          38   7880
          37   7876
          29   7872
          36   7868
          30   7868
          34   7868
          44   7864
          31   7864
7911: oEndChoice
7912: oReturn
7913: oLocalSpace 0
7915: oInputChoice 7953
7917: oTypeSNodeType
7918: oChoice 7932
7920: oCall 7965
7922: oJumpForward 7943
7924: oCall 8108
7926: oJumpForward 7943
7928: oCall 8187
7930: oJumpForward 7943
7932: Choice Lookup Table
          43   7928
          42   7928
          37   7924
          39   7920
7941: oError 11
7943: oJumpForward 7962
7945: oCall 8217
7947: oJumpForward 7962
7949: oCall 8490
7951: oJumpForward 7962
7953: Choice Lookup Table
          19   7949
          21   7945
          17   7917
7960: oJumpForward 7964
7962: oJumpBack 7915
7964: oReturn
7965: oLocalSpace 3
7967: oTypeSNodeType
7968: oChoice 7972
7970: oJumpForward 7977
7972: Choice Lookup Table
          39   7970
7975: oError 11
7977: oTypeSNodeType
7978: oChoice 7982
7980: oJumpForward 7987
7982: Choice Lookup Table
          39   7980
7985: oError 14
7987: oGetAddrLocal 1
7989: oPushResult
7990: oTypeSTop
7991: oPushResult
7992: oSetResult 39
7994: oPushResult
7995: oNodeGet
7996: oPop 2
7998: oPushResult
7999: oCall 13485
8001: oPop 1
8003: oAssign
8004: oGetAddrLocal 2
8006: oPushResult
8007: oTypeSTop
8008: oPushResult
8009: oSetResult 38
8011: oPushResult
8012: oNodeGet
8013: oPop 2
8015: oAssign
8016: oTypeSPop
8017: oGetLocal 2
8019: oPushResult
8020: oTypeSPush
8021: oPop 1
8023: oCall 5024
8025: oCall 8925
8027: oGetLocal 1
8029: oPushResult
8030: equal_zero
8031: oPop 1
8033: oChoice 8047
8035: oEmit 15
8037: oGetLocal 1
8039: oPushResult
8040: oEmitInt
8041: oPop 1
8043: oEmit 42
8045: oJumpForward 8050
8047: Choice Lookup Table
           0   8035
8050: oGetAddrLocal 3
8052: oPushResult
8053: oGetLocal 2
8055: oPushResult
8056: oSetResult 17
8058: oPushResult
8059: oNodeGetInt
8060: oPop 2
8062: oAssign
8063: oGetLocal 3
8065: oPushResult
8066: oSetResult 1
8068: oPushResult
8069: equal
8070: oPop 2
8072: oChoice 8086
8074: oEmit 15
8076: oGetLocal 3
8078: oPushResult
8079: oEmitInt
8080: oPop 1
8082: oEmit 36
8084: oJumpForward 8089
8086: Choice Lookup Table
           0   8074
8089: oEmit 38
8091: oInputChoice 8099
8093: oJumpForward 8107
8095: oJumpForward 8105
8097: oJumpForward 8105
8099: Choice Lookup Table
          14   8097
          18   8093
8104: oEndChoice
8105: oJumpBack 7977
8107: oReturn
8108: oLocalSpace 2
8110: oTypeSNodeType
8111: oChoice 8115
8113: oJumpForward 8120
8115: Choice Lookup Table
          37   8113
8118: oError 30
8120: oGetAddrLocal 1
8122: oPushResult
8123: oTypeSTop
8124: oPushResult
8125: oSetResult 38
8127: oPushResult
8128: oNodeGet
8129: oPop 2
8131: oAssign
8132: oTypeSPop
8133: oGetLocal 1
8135: oPushResult
8136: oTypeSPush
8137: oPop 1
8139: oCall 5024
8141: oCall 8925
8143: oGetAddrLocal 2
8145: oPushResult
8146: oGetLocal 1
8148: oPushResult
8149: oSetResult 17
8151: oPushResult
8152: oNodeGetInt
8153: oPop 2
8155: oAssign
8156: oGetLocal 2
8158: oPushResult
8159: oSetResult 1
8161: oPushResult
8162: equal
8163: oPop 2
8165: oChoice 8179
8167: oEmit 15
8169: oGetLocal 2
8171: oPushResult
8172: oEmitInt
8173: oPop 1
8175: oEmit 36
8177: oJumpForward 8182
8179: Choice Lookup Table
           0   8167
8182: oEmit 38
8184: oInput 18
8186: oReturn
8187: oLocalSpace 0
8189: oTypeSNodeType
8190: oChoice 8194
8192: oJumpForward 8201
8194: Choice Lookup Table
          43   8192
          42   8192
8199: oError 30
8201: oTypeSPop
8202: oGetGlobal 9
8204: oPushResult
8205: oTypeSPush
8206: oPop 1
8208: oCall 5024
8210: oCall 8925
8212: oEmit 38
8214: oInput 18
8216: oReturn
8217: oLocalSpace 2
8219: oTypeSNodeType
8220: oChoice 8224
8222: oJumpForward 8229
8224: Choice Lookup Table
          41   8222
8227: oError 12
8229: oTypeSTop
8230: oPushResult
8231: oSetResult 42
8233: oPushResult
8234: oNodeGet
8235: oPop 2
8237: oPushResult
8238: oScopeEnter
8239: oPop 1
8241: oInput 0
8243: oGetAddrLocal 1
8245: oPushResult
8246: oScopeFindRequire
8247: oAssign
8248: oGetLocal 1
8250: oPushResult
8251: oNodeType
8252: oPop 1
8254: oChoice 8258
8256: oJumpForward 8263
8258: Choice Lookup Table
          24   8256
8261: oError 13
8263: oScopeEnd
8264: oGetAddrLocal 2
8266: oPushResult
8267: oGetLocal 1
8269: oPushResult
8270: oSetResult 22
8272: oPushResult
8273: oNodeGetInt
8274: oPop 2
8276: oAssign
8277: oGetLocal 2
8279: oPushResult
8280: equal_zero
8281: oPop 1
8283: oChoice 8297
8285: oEmit 15
8287: oGetLocal 2
8289: oPushResult
8290: oEmitInt
8291: oPop 1
8293: oEmit 38
8295: oJumpForward 8300
8297: Choice Lookup Table
           0   8285
8300: oTypeSPop
8301: oGetLocal 1
8303: oPushResult
8304: oSetResult 21
8306: oPushResult
8307: oNodeGet
8308: oPop 2
8310: oPushResult
8311: oTypeSPush
8312: oPop 1
8314: oReturn
8315: oLocalSpace 2
8317: oGetAddrLocal 1
8319: oPushResult
8320: oTypeSTop
8321: oPushResult
8322: oSetResult 38
8324: oPushResult
8325: oNodeGet
8326: oPop 2
8328: oAssign
8329: oGetAddrLocal 2
8331: oPushResult
8332: oGetLocal 1
8334: oPushResult
8335: oSetResult 17
8337: oPushResult
8338: oNodeGetInt
8339: oPop 2
8341: oAssign
8342: oGetLocal 2
8344: oPushResult
8345: oSetResult 1
8347: oPushResult
8348: equal
8349: oPop 2
8351: oChoice 8365
8353: oEmit 15
8355: oGetLocal 2
8357: oPushResult
8358: oEmitInt
8359: oPop 1
8361: oEmit 36
8363: oJumpForward 8368
8365: Choice Lookup Table
           0   8353
8368: oEmit 38
8370: oReturn
8371: oLocalSpace 2
8373: oGetAddrLocal 1
8375: oPushResult
8376: oTypeSTop
8377: oPushResult
8378: oSetResult 38
8380: oPushResult
8381: oNodeGet
8382: oPop 2
8384: oAssign
8385: oGetAddrLocal 2
8387: oPushResult
8388: oGetLocal 1
8390: oPushResult
8391: oSetResult 17
8393: oPushResult
8394: oNodeGetInt
8395: oPop 2
8397: oAssign
8398: oGetLocal 2
8400: oPushResult
8401: oSetResult 1
8403: oPushResult
8404: equal
8405: oPop 2
8407: oChoice 8421
8409: oEmit 15
8411: oGetLocal 2
8413: oPushResult
8414: oEmitInt
8415: oPop 1
8417: oEmit 36
8419: oJumpForward 8424
8421: Choice Lookup Table
           0   8409
8424: oEmit 41
8426: oReturn
8427: oLocalSpace 2
8429: oEmit 40
8431: oGetAddrLocal 1
8433: oPushResult
8434: oTypeSTop
8435: oPushResult
8436: oSetResult 38
8438: oPushResult
8439: oNodeGet
8440: oPop 2
8442: oAssign
8443: oGetAddrLocal 2
8445: oPushResult
8446: oGetLocal 1
8448: oPushResult
8449: oSetResult 17
8451: oPushResult
8452: oNodeGetInt
8453: oPop 2
8455: oAssign
8456: oGetLocal 2
8458: oPushResult
8459: oSetResult 1
8461: oPushResult
8462: equal
8463: oPop 2
8465: oChoice 8479
8467: oEmit 15
8469: oGetLocal 2
8471: oPushResult
8472: oEmitInt
8473: oPop 1
8475: oEmit 37
8477: oJumpForward 8482
8479: Choice Lookup Table
           0   8467
8482: oTypeSPop
8483: oGetGlobal 6
8485: oPushResult
8486: oTypeSPush
8487: oPop 1
8489: oReturn
8490: oLocalSpace 1
8492: oTypeSNodeType
8493: oChoice 8501
8495: oJumpForward 8508
8497: oError 30
8499: oJumpForward 8508
8501: Choice Lookup Table
          38   8497
          37   8495
8506: oError 10
8508: oEmit 26
8510: oGetAddrLocal 1
8512: oPushResult
8513: oTypeSTop
8514: oAssign
8515: oTypeSPop
8516: oGetLocal 1
8518: oPushResult
8519: oSetResult 38
8521: oPushResult
8522: oNodeGet
8523: oPop 2
8525: oPushResult
8526: oTypeSPush
8527: oPop 1
8529: oReturn
8530: oLocalSpace 3
8532: oGetAddrLocal 1
8534: oPushResult
8535: oTypeSNodeType
8536: oAssign
8537: oGetAddrLocal 2
8539: oPushResult
8540: oTypeSTop
8541: oAssign
8542: oTypeSPop
8543: oGetLocal 1
8545: oPushResult
8546: oTypeSNodeType
8547: oPushResult
8548: equal_node_type
8549: oPop 2
8551: oChoice 8683
8553: oTypeSNodeType
8554: oChoice 8668
8556: oGetLocal 1
8558: oChoice 8565
8560: oEmit 32
8562: oReturn
8563: oJumpForward 8568
8565: Choice Lookup Table
          30   8560
8568: oJumpForward 8679
8570: oGetLocal 1
8572: oChoice 8579
8574: oEmit 33
8576: oReturn
8577: oJumpForward 8582
8579: Choice Lookup Table
          31   8574
8582: oJumpForward 8679
8584: oGetLocal 1
8586: oChoice 8619
8588: oReturn
8589: oJumpForward 8624
8591: oTypeSTop
8592: oPushResult
8593: oGetGlobal 10
8595: oPushResult
8596: equal_node
8597: oPop 2
8599: oChoice 8614
8601: oEmit 15
8603: oSetResult 1
8605: oPushResult
8606: oEmitInt
8607: oPop 1
8609: oEmit 38
8611: oReturn
8612: oJumpForward 8617
8614: Choice Lookup Table
           1   8601
8617: oJumpForward 8624
8619: Choice Lookup Table
          42   8591
          38   8588
8624: oJumpForward 8679
8626: oGetLocal 1
8628: oChoice 8633
8630: oReturn
8631: oJumpForward 8636
8633: Choice Lookup Table
          37   8630
8636: oJumpForward 8679
8638: oGetLocal 1
8640: oChoice 8661
8642: oReturn
8643: oJumpForward 8666
8645: oGetGlobal 9
8647: oPushResult
8648: oTypeSPush
8649: oPop 1
8651: oGetAddrLocal 3
8653: oPushResult
8654: oCall 11031
8656: oAssign
8657: oTypeSPop
8658: oReturn
8659: oJumpForward 8666
8661: Choice Lookup Table
          36   8645
          42   8642
8666: oJumpForward 8679
8668: Choice Lookup Table
          43   8638
          38   8626
          37   8584
          30   8570
          31   8556
8679: oError 15
8681: oJumpForward 8686
8683: Choice Lookup Table
           0   8553
8686: oReturn
8687: oLocalSpace 2
8689: oGetAddrLocal 1
8691: oPushResult
8692: oTypeSNodeType
8693: oAssign
8694: oTypeSPop
8695: oGetLocal 1
8697: oPushResult
8698: oTypeSNodeType
8699: oPushResult
8700: equal_node_type
8701: oPop 2
8703: oChoice 8863
8705: oTypeSNodeType
8706: oChoice 8842
8708: oGetLocal 1
8710: oChoice 8720
8712: oEmit 32
8714: oReturn
8715: oJumpForward 8731
8717: oReturn
8718: oJumpForward 8731
8720: Choice Lookup Table
          44   8717
          31   8717
          34   8712
          36   8712
          30   8712
8731: oJumpForward 8859
8733: oGetLocal 1
8735: oChoice 8745
8737: oReturn
8738: oJumpForward 8756
8740: oEmit 33
8742: oReturn
8743: oJumpForward 8756
8745: Choice Lookup Table
          44   8740
          31   8740
          34   8737
          36   8737
          30   8737
8756: oJumpForward 8859
8758: oGetLocal 1
8760: oChoice 8793
8762: oReturn
8763: oJumpForward 8798
8765: oTypeSTop
8766: oPushResult
8767: oGetGlobal 10
8769: oPushResult
8770: equal_node
8771: oPop 2
8773: oChoice 8788
8775: oEmit 15
8777: oSetResult 1
8779: oPushResult
8780: oEmitInt
8781: oPop 1
8783: oEmit 38
8785: oReturn
8786: oJumpForward 8791
8788: Choice Lookup Table
           1   8775
8791: oJumpForward 8798
8793: Choice Lookup Table
          42   8765
          38   8762
8798: oJumpForward 8859
8800: oGetLocal 1
8802: oChoice 8807
8804: oReturn
8805: oJumpForward 8810
8807: Choice Lookup Table
          37   8804
8810: oJumpForward 8859
8812: oGetLocal 1
8814: oChoice 8835
8816: oReturn
8817: oJumpForward 8840
8819: oGetGlobal 9
8821: oPushResult
8822: oTypeSPush
8823: oPop 1
8825: oGetAddrLocal 2
8827: oPushResult
8828: oCall 11031
8830: oAssign
8831: oTypeSPop
8832: oReturn
8833: oJumpForward 8840
8835: Choice Lookup Table
          36   8819
          42   8816
8840: oJumpForward 8859
8842: Choice Lookup Table
          43   8812
          38   8800
          37   8758
          34   8733
          36   8733
          30   8733
          44   8708
          31   8708
8859: oError 15
8861: oJumpForward 8866
8863: Choice Lookup Table
           0   8705
8866: oReturn
8867: oLocalSpace 1
8869: oGetAddrLocal 1
8871: oPushResult
8872: oTypeSNodeType
8873: oAssign
8874: oTypeSPop
8875: oGetLocal 1
8877: oPushResult
8878: oTypeSNodeType
8879: oPushResult
8880: equal_node_type
8881: oPop 2
8883: oChoice 8921
8885: oTypeSNodeType
8886: oChoice 8912
8888: oGetLocal 1
8890: oChoice 8895
8892: oReturn
8893: oJumpForward 8898
8895: Choice Lookup Table
          38   8892
8898: oJumpForward 8917
8900: oGetLocal 1
8902: oChoice 8907
8904: oReturn
8905: oJumpForward 8910
8907: Choice Lookup Table
          37   8904
8910: oJumpForward 8917
8912: Choice Lookup Table
          38   8900
          37   8888
8917: oError 15
8919: oJumpForward 8924
8921: Choice Lookup Table
           0   8885
8924: oReturn
8925: oLocalSpace 0
8927: oTypeSNodeType
8928: oChoice 8932
8930: oJumpForward 8937
8932: Choice Lookup Table
          31   8930
8935: oError 7
8937: oTypeSPop
8938: oReturn
8939: oLocalSpace 0
8941: oTypeSNodeType
8942: oChoice 8946
8944: oJumpForward 8951
8946: Choice Lookup Table
          31   8944
8949: oError 7
8951: oReturn
8952: oLocalSpace 0
8954: oTypeSNodeType
8955: oChoice 8963
8957: oJumpForward 8970
8959: oEmit 32
8961: oJumpForward 8970
8963: Choice Lookup Table
          30   8959
          31   8957
8968: oError 7
8970: oTypeSPop
8971: oReturn
8972: oLocalSpace 0
8974: oTypeSNodeType
8975: oChoice 8990
8977: oJumpForward 8997
8979: oEmit 32
8981: oTypeSPop
8982: oGetGlobal 6
8984: oPushResult
8985: oTypeSPush
8986: oPop 1
8988: oJumpForward 8997
8990: Choice Lookup Table
          30   8979
          31   8977
8995: oError 7
8997: oReturn
8998: oLocalSpace 0
9000: oTypeSNodeType
9001: oChoice 9014
9003: oEmit 32
9005: oTypeSPop
9006: oGetGlobal 6
9008: oPushResult
9009: oTypeSPush
9010: oPop 1
9012: oJumpForward 9017
9014: Choice Lookup Table
          30   9003
9017: oReturn
9018: oLocalSpace 0
9020: oTypeSNodeType
9021: oChoice 9029
9023: oJumpForward 9038
9025: oError 17
9027: oJumpForward 9038
9029: Choice Lookup Table
          30   9025
          31   9025
          33   9023
9036: oError 9
9038: oTypeSPop
9039: oReturn
9040: oLocalSpace 0
9042: oTypeSNodeType
9043: oChoice 9047
9045: oJumpForward 9052
9047: Choice Lookup Table
          34   9045
9050: oError 8
9052: oTypeSPop
9053: oReturn
9054: oLocalSpace 0
9056: oTypeSNodeType
9057: oChoice 9061
9059: oJumpForward 9066
9061: Choice Lookup Table
          34   9059
9064: oError 8
9066: oReturn
9067: oLocalSpace 0
9069: oInputChoice 9132
9071: oCall 10804
9073: oJumpForward 9163
9075: oCall 10811
9077: oJumpForward 9163
9079: oCall 10941
9081: oJumpForward 9163
9083: oCall 10948
9085: oJumpForward 9163
9087: oCall 9955
9089: oJumpForward 9163
9091: oCall 10278
9093: oJumpForward 9163
9095: oCall 10021
9097: oJumpForward 9163
9099: oCall 10198
9101: oJumpForward 9163
9103: oCall 10363
9105: oJumpForward 9163
9107: oCall 10331
9109: oJumpForward 9163
9111: oCall 10781
9113: oJumpForward 9163
9115: oCall 9164
9117: oJumpForward 9163
9119: oCall 10395
9121: oJumpForward 9163
9123: oCall 10729
9125: oJumpForward 9163
9127: oChangeIntLitToLabelIdent
9128: oCall 9164
9130: oJumpForward 9163
9132: Choice Lookup Table
           1   9127
          56   9123
          54   9119
           0   9115
          36   9111
          52   9107
          53   9103
          50   9099
          45   9095
          49   9091
          42   9087
          69   9083
          68   9079
          67   9075
          66   9071
9163: oReturn
9164: oLocalSpace 1
9166: oGetAddrLocal 1
9168: oPushResult
9169: oScopeFindRequire
9170: oAssign
9171: oGetAddrLocal 1
9173: oPushResult
9174: oCall 244
9176: oPop 1
9178: oGetLocal 1
9180: oPushResult
9181: oNodeType
9182: oPop 1
9184: oChoice 9224
9186: oGetLocal 1
9188: oPushResult
9189: oCall 9242
9191: oPop 1
9193: oCall 9067
9195: oJumpForward 9241
9197: oGetLocal 1
9199: oPushResult
9200: oCall 11343
9202: oPop 1
9204: oJumpForward 9241
9206: oGetLocal 1
9208: oPushResult
9209: oCall 9292
9211: oPop 1
9213: oJumpForward 9241
9215: oGetLocal 1
9217: oPushResult
9218: oCall 9388
9220: oPop 1
9222: oJumpForward 9241
9224: Choice Lookup Table
          13   9215
          20   9206
          25   9206
          23   9206
          22   9206
          12   9197
          27   9186
9239: oError 0
9241: oReturn
9242: oLocalSpace 0
9244: oGetParam 1
9246: oPushResult
9247: oSetResult 36
9249: oPushResult
9250: oNodeGetBoolean
9251: oPop 2
9253: oChoice 9259
9255: oError 22
9257: oJumpForward 9262
9259: Choice Lookup Table
           1   9255
9262: oEmit 88
9264: oGetParam 1
9266: oPushResult
9267: oSetResult 22
9269: oPushResult
9270: oNodeGetLabel
9271: oPop 2
9273: oPushResult
9274: oEmitLabel
9275: oPop 1
9277: oGetParam 1
9279: oPushResult
9280: oSetResult 36
9282: oPushResult
9283: oSetResult 1
9285: oPushResult
9286: oNodeSetBoolean
9287: oPop 3
9289: oInput 13
9291: oReturn
9292: oLocalSpace 0
9294: oGetParam 1
9296: oPushResult
9297: oSetResult 1
9299: oPushResult
9300: oCall 9548
9302: oPop 2
9304: oInput 5
9306: oCall 5024
9308: oCall 8530
9310: oCall 9313
9312: oReturn
9313: oLocalSpace 1
9315: oTypeSNodeType
9316: oChoice 9360
9318: oEmit 27
9320: oJumpForward 9386
9322: oEmit 28
9324: oJumpForward 9386
9326: oEmit 30
9328: oJumpForward 9386
9330: oError 17
9332: oJumpForward 9386
9334: oEmit 29
9336: oJumpForward 9386
9338: oGetAddrLocal 1
9340: oPushResult
9341: oTypeSTop
9342: oPushResult
9343: oSetResult 17
9345: oPushResult
9346: oNodeGetInt
9347: oPop 2
9349: oAssign
9350: oEmit 31
9352: oGetLocal 1
9354: oPushResult
9355: oEmitInt
9356: oPop 1
9358: oJumpForward 9386
9360: Choice Lookup Table
          43   9338
          41   9338
          39   9338
          38   9334
          37   9334
          29   9330
          33   9326
          36   9322
          30   9322
          34   9322
          44   9318
          31   9318
9385: oEndChoice
9386: oTypeSPop
9387: oReturn
9388: oLocalSpace 1
9390: oGetParam 1
9392: oPushResult
9393: oSetResult 6
9395: oPushResult
9396: oNodeGet
9397: oPop 2
9399: oPushResult
9400: oScopeCurrent
9401: oPushResult
9402: oNodeEqual
9403: oPop 2
9405: oChoice 9411
9407: oError 21
9409: oJumpForward 9414
9411: Choice Lookup Table
           0   9407
9414: oEmit 8
9416: oGetParam 1
9418: oPushResult
9419: oSetResult 31
9421: oPushResult
9422: oNodeGetInt
9423: oPop 2
9425: oPushResult
9426: oEmitInt
9427: oPop 1
9429: oGetParam 1
9431: oPushResult
9432: oSetResult 21
9434: oPushResult
9435: oNodeGet
9436: oPop 2
9438: oPushResult
9439: oTypeSPush
9440: oPop 1
9442: oInput 5
9444: oCall 5024
9446: oCall 8530
9448: oTypeSNodeType
9449: oChoice 9493
9451: oEmit 27
9453: oJumpForward 9519
9455: oEmit 28
9457: oJumpForward 9519
9459: oEmit 30
9461: oJumpForward 9519
9463: oError 17
9465: oJumpForward 9519
9467: oEmit 29
9469: oJumpForward 9519
9471: oGetAddrLocal 1
9473: oPushResult
9474: oTypeSTop
9475: oPushResult
9476: oSetResult 17
9478: oPushResult
9479: oNodeGetInt
9480: oPop 2
9482: oAssign
9483: oEmit 31
9485: oGetLocal 1
9487: oPushResult
9488: oEmitInt
9489: oPop 1
9491: oJumpForward 9519
9493: Choice Lookup Table
          43   9471
          41   9471
          39   9471
          38   9467
          37   9467
          29   9463
          33   9459
          36   9455
          30   9455
          34   9455
          44   9451
          31   9451
9518: oEndChoice
9519: oTypeSPop
9520: oReturn
9521: oLocalSpace 1
9523: oInput 0
9525: oGetAddrLocal 1
9527: oPushResult
9528: oScopeFindRequire
9529: oAssign
9530: oGetAddrLocal 1
9532: oPushResult
9533: oCall 244
9535: oPop 1
9537: oGetLocal 1
9539: oPushResult
9540: oGetParam 1
9542: oPushResult
9543: oCall 9548
9545: oPop 2
9547: oReturn
9548: oLocalSpace 0
9550: oGetParam 2
9552: oPushResult
9553: oNodeType
9554: oPop 1
9556: oChoice 9619
9558: oGetParam 2
9560: oPushResult
9561: oGetParam 1
9563: oPushResult
9564: oCall 9765
9566: oPop 2
9568: oJumpForward 9632
9570: oGetParam 2
9572: oPushResult
9573: oSetResult 21
9575: oPushResult
9576: oNodeGet
9577: oPop 2
9579: oPushResult
9580: oTypeSPush
9581: oPop 1
9583: oInput 15
9585: oGetParam 1
9587: oPushResult
9588: oCall 9521
9590: oPop 1
9592: oInput 16
9594: oCall 9633
9596: oTypeSNodeType
9597: oChoice 9612
9599: oInputChoice 9607
9601: oEmit 26
9603: oCall 8108
9605: oJumpForward 9610
9607: Choice Lookup Table
          17   9601
9610: oJumpForward 9615
9612: Choice Lookup Table
          37   9599
9615: oCall 7913
9617: oJumpForward 9632
9619: Choice Lookup Table
          20   9570
          26   9558
          25   9558
          23   9558
          22   9558
9630: oError 4
9632: oReturn
9633: oLocalSpace 1
9635: oGetAddrLocal 1
9637: oPushResult
9638: oTypeSNodeType
9639: oAssign
9640: oTypeSPop
9641: oGetLocal 1
9643: oPushResult
9644: oTypeSNodeType
9645: oPushResult
9646: equal_node_type
9647: oPop 2
9649: oChoice 9761
9651: oTypeSNodeType
9652: oChoice 9740
9654: oGetLocal 1
9656: oChoice 9666
9658: oError 31
9660: oReturn
9661: oJumpForward 9677
9663: oReturn
9664: oJumpForward 9677
9666: Choice Lookup Table
          44   9663
          31   9663
          34   9658
          36   9658
          30   9658
9677: oJumpForward 9757
9679: oGetLocal 1
9681: oChoice 9691
9683: oReturn
9684: oJumpForward 9702
9686: oError 31
9688: oReturn
9689: oJumpForward 9702
9691: Choice Lookup Table
          44   9686
          31   9686
          34   9683
          36   9683
          30   9683
9702: oJumpForward 9757
9704: oGetLocal 1
9706: oChoice 9711
9708: oReturn
9709: oJumpForward 9714
9711: Choice Lookup Table
          38   9708
9714: oJumpForward 9757
9716: oGetLocal 1
9718: oChoice 9723
9720: oReturn
9721: oJumpForward 9726
9723: Choice Lookup Table
          37   9720
9726: oJumpForward 9757
9728: oGetLocal 1
9730: oChoice 9735
9732: oReturn
9733: oJumpForward 9738
9735: Choice Lookup Table
          42   9732
9738: oJumpForward 9757
9740: Choice Lookup Table
          43   9728
          38   9716
          37   9704
          34   9679
          36   9679
          30   9679
          44   9654
          31   9654
9757: oError 15
9759: oJumpForward 9764
9761: Choice Lookup Table
           0   9651
9764: oReturn
9765: oLocalSpace 0
9767: oGetParam 2
9769: oPushResult
9770: oNodeType
9771: oPop 1
9773: oChoice 9855
9775: oEmit 17
9777: oGetParam 2
9779: oPushResult
9780: oCall 14382
9782: oPop 1
9784: oJumpForward 9866
9786: oEmit 18
9788: oGetParam 2
9790: oPushResult
9791: oCall 14382
9793: oPop 1
9795: oJumpForward 9866
9797: oGetParam 2
9799: oPushResult
9800: oSetResult 35
9802: oPushResult
9803: oNodeGetBoolean
9804: oPop 2
9806: oChoice 9819
9808: oEmit 8
9810: oGetParam 2
9812: oPushResult
9813: oCall 14382
9815: oPop 1
9817: oJumpForward 9831
9819: Choice Lookup Table
           1   9808
9822: oEmit 19
9824: oGetParam 2
9826: oPushResult
9827: oCall 14382
9829: oPop 1
9831: oJumpForward 9866
9833: oGetParam 1
9835: oChoice 9848
9837: oEmit 17
9839: oGetParam 2
9841: oPushResult
9842: oCall 14382
9844: oPop 1
9846: oJumpForward 9853
9848: Choice Lookup Table
           0   9837
9851: oError 4
9853: oJumpForward 9866
9855: Choice Lookup Table
          26   9833
          25   9797
          23   9786
          22   9775
9864: oError 4
9866: oGetParam 2
9868: oPushResult
9869: oSetResult 21
9871: oPushResult
9872: oNodeGet
9873: oPop 2
9875: oPushResult
9876: oTypeSPush
9877: oPop 1
9879: oTypeSNodeType
9880: oChoice 9895
9882: oInputChoice 9890
9884: oEmit 26
9886: oCall 8108
9888: oJumpForward 9893
9890: Choice Lookup Table
          17   9884
9893: oJumpForward 9898
9895: Choice Lookup Table
          37   9882
9898: oCall 7913
9900: oReturn
9901: oLocalSpace 0
9903: oGetParam 1
9905: oPushResult
9906: oSetResult 1
9908: oPushResult
9909: oCall 9765
9911: oPop 2
9913: oCall 8925
9915: oGetParam 1
9917: oPushResult
9918: oCall 7100
9920: oPop 1
9922: oTypeSPop
9923: oEmit 34
9925: oEmit 27
9927: oReturn
9928: oLocalSpace 0
9930: oGetParam 1
9932: oPushResult
9933: oSetResult 1
9935: oPushResult
9936: oCall 9765
9938: oPop 2
9940: oCall 8925
9942: oGetParam 1
9944: oPushResult
9945: oCall 7100
9947: oPop 1
9949: oTypeSPop
9950: oEmit 35
9952: oEmit 27
9954: oReturn
9955: oLocalSpace 2
9957: oGetAddrLocal 1
9959: oPushResult
9960: oSetResult 0
9962: oAssign
9963: oGetAddrLocal 1
9965: oPushResult
9966: oCall 5070
9968: oPop 1
9970: oInput 43
9972: oCall 9067
9974: oInputChoice 10009
9976: oGetAddrLocal 2
9978: oPushResult
9979: oLabelNew
9980: oAssign
9981: oEmit 79
9983: oGetLocal 2
9985: oPushResult
9986: oEmitLabel
9987: oPop 1
9989: oEmit 88
9991: oGetLocal 1
9993: oPushResult
9994: oEmitLabel
9995: oPop 1
9997: oCall 9067
9999: oEmit 88
10001: oGetLocal 2
10003: oPushResult
10004: oEmitLabel
10005: oPop 1
10007: oJumpForward 10020
10009: Choice Lookup Table
          44   9976
10012: oEmit 88
10014: oGetLocal 1
10016: oPushResult
10017: oEmitLabel
10018: oPop 1
10020: oReturn
10021: oLocalSpace 4
10023: oInput 0
10025: oGetAddrLocal 1
10027: oPushResult
10028: oScopeFindRequire
10029: oAssign
10030: oGetLocal 1
10032: oPushResult
10033: oSetResult 1
10035: oPushResult
10036: oCall 9765
10038: oPop 2
10040: oCall 8925
10042: oInput 5
10044: oCall 5024
10046: oCall 8925
10048: oEmit 27
10050: oGetAddrLocal 2
10052: oPushResult
10053: oLabelNew
10054: oAssign
10055: oGetAddrLocal 3
10057: oPushResult
10058: oLabelNew
10059: oAssign
10060: oEmit 79
10062: oGetLocal 3
10064: oPushResult
10065: oEmitLabel
10066: oPop 1
10068: oGetAddrLocal 4
10070: oPushResult
10071: oLabelNew
10072: oAssign
10073: oEmit 88
10075: oGetLocal 4
10077: oPushResult
10078: oEmitLabel
10079: oPop 1
10081: oInputChoice 10161
10083: oGetLocal 1
10085: oPushResult
10086: oCall 9901
10088: oPop 1
10090: oEmit 88
10092: oGetLocal 3
10094: oPushResult
10095: oEmitLabel
10096: oPop 1
10098: oGetLocal 1
10100: oPushResult
10101: oCall 7100
10103: oPop 1
10105: oTypeSPop
10106: oCall 5024
10108: oCall 8925
10110: oEmit 58
10112: oEmit 80
10114: oGetLocal 2
10116: oPushResult
10117: oEmitLabel
10118: oPop 1
10120: oJumpForward 10167
10122: oGetLocal 1
10124: oPushResult
10125: oCall 9928
10127: oPop 1
10129: oEmit 88
10131: oGetLocal 3
10133: oPushResult
10134: oEmitLabel
10135: oPop 1
10137: oGetLocal 1
10139: oPushResult
10140: oCall 7100
10142: oPop 1
10144: oTypeSPop
10145: oCall 5024
10147: oCall 8925
10149: oEmit 59
10151: oEmit 80
10153: oGetLocal 2
10155: oPushResult
10156: oEmitLabel
10157: oPop 1
10159: oJumpForward 10167
10161: Choice Lookup Table
          47   10122
          46   10083
10166: oEndChoice
10167: oGetLocal 4
10169: oPushResult
10170: oGetLocal 2
10172: oPushResult
10173: oLoopPush
10174: oPop 2
10176: oInput 48
10178: oCall 9067
10180: oEmit 79
10182: oGetLocal 4
10184: oPushResult
10185: oEmitLabel
10186: oPop 1
10188: oEmit 88
10190: oGetLocal 2
10192: oPushResult
10193: oEmitLabel
10194: oPop 1
10196: oLoopPop
10197: oReturn
10198: oLocalSpace 3
10200: oGetAddrLocal 1
10202: oPushResult
10203: oLabelNew
10204: oAssign
10205: oEmit 88
10207: oGetLocal 1
10209: oPushResult
10210: oEmitLabel
10211: oPop 1
10213: oGetAddrLocal 2
10215: oPushResult
10216: oLabelNew
10217: oAssign
10218: oGetLocal 1
10220: oPushResult
10221: oGetLocal 2
10223: oPushResult
10224: oLoopPush
10225: oPop 2
10227: oCall 9067
10229: oInputChoice 10260
10231: oCall 9067
10233: oJumpForward 10266
10235: oGetAddrLocal 3
10237: oPushResult
10238: oCall 5070
10240: oPop 1
10242: oEmit 89
10244: oGetLocal 3
10246: oPushResult
10247: oEmitLabel
10248: oPop 1
10250: oGetLocal 1
10252: oPushResult
10253: oEmitLabel
10254: oPop 1
10256: oJumpForward 10268
10258: oJumpForward 10266
10260: Choice Lookup Table
          51   10235
           6   10231
10265: oEndChoice
10266: oJumpBack 10229
10268: oEmit 88
10270: oGetLocal 2
10272: oPushResult
10273: oEmitLabel
10274: oPop 1
10276: oLoopPop
10277: oReturn
10278: oLocalSpace 2
10280: oGetAddrLocal 1
10282: oPushResult
10283: oLabelNew
10284: oAssign
10285: oEmit 88
10287: oGetLocal 1
10289: oPushResult
10290: oEmitLabel
10291: oPop 1
10293: oGetAddrLocal 2
10295: oPushResult
10296: oCall 5070
10298: oPop 1
10300: oGetLocal 1
10302: oPushResult
10303: oGetLocal 2
10305: oPushResult
10306: oLoopPush
10307: oPop 2
10309: oInput 48
10311: oCall 9067
10313: oEmit 79
10315: oGetLocal 1
10317: oPushResult
10318: oEmitLabel
10319: oPop 1
10321: oEmit 88
10323: oGetLocal 2
10325: oPushResult
10326: oEmitLabel
10327: oPop 1
10329: oLoopPop
10330: oReturn
10331: oLocalSpace 0
10333: oLoopContinueLabel
10334: oPushResult
10335: oSetResult 0
10337: oPushResult
10338: equal_label
10339: oPop 2
10341: oChoice 10356
10343: oError 19
10345: oJumpForward 10362
10347: oEmit 79
10349: oLoopContinueLabel
10350: oPushResult
10351: oEmitLabel
10352: oPop 1
10354: oJumpForward 10362
10356: Choice Lookup Table
           0   10347
           1   10343
10361: oEndChoice
10362: oReturn
10363: oLocalSpace 0
10365: oLoopBreakLabel
10366: oPushResult
10367: oSetResult 0
10369: oPushResult
10370: equal_label
10371: oPop 2
10373: oChoice 10388
10375: oError 19
10377: oJumpForward 10394
10379: oEmit 79
10381: oLoopBreakLabel
10382: oPushResult
10383: oEmitLabel
10384: oPop 1
10386: oJumpForward 10394
10388: Choice Lookup Table
           0   10379
           1   10375
10393: oEndChoice
10394: oReturn
10395: oLocalSpace 8
10397: oGetAddrLocal 1
10399: oPushResult
10400: oCodeNew
10401: oAssign
10402: oGetAddrLocal 2
10404: oPushResult
10405: oLabelNew
10406: oAssign
10407: oGetAddrLocal 3
10409: oPushResult
10410: oLabelNew
10411: oAssign
10412: oGetAddrLocal 4
10414: oPushResult
10415: oGetLocal 3
10417: oAssign
10418: oGetAddrLocal 5
10420: oPushResult
10421: oSetResult 0
10423: oAssign
10424: oCall 5024
10426: oTypeSNodeType
10427: oChoice 10465
10429: oEmit 82
10431: oGetLocal 2
10433: oPushResult
10434: oEmitLabel
10435: oPop 1
10437: oJumpForward 10482
10439: oEmit 83
10441: oGetLocal 2
10443: oPushResult
10444: oEmitLabel
10445: oPop 1
10447: oJumpForward 10482
10449: oGetAddrLocal 5
10451: oPushResult
10452: oSetResult 1
10454: oAssign
10455: oEmit 84
10457: oGetLocal 2
10459: oPushResult
10460: oEmitLabel
10461: oPop 1
10463: oJumpForward 10482
10465: Choice Lookup Table
          42   10449
          43   10449
          44   10439
          31   10439
          36   10429
          30   10429
          34   10429
10480: oError 18
10482: oInput 41
10484: oInputChoice 10531
10486: oGetAddrLocal 4
10488: oPushResult
10489: oLabelNew
10490: oAssign
10491: oEmit 88
10493: oGetLocal 4
10495: oPushResult
10496: oEmitLabel
10497: oPop 1
10499: oInputChoice 10505
10501: oJumpForward 10523
10503: oJumpForward 10521
10505: Choice Lookup Table
          37   10501
10508: oCall 9067
10510: oInputChoice 10514
10512: oJumpForward 10521
10514: Choice Lookup Table
           6   10512
10517: oInput 37
10519: oJumpForward 10523
10521: oJumpBack 10499
10523: oJumpForward 10697
10525: oJumpForward 10695
10527: oJumpForward 10697
10529: oJumpForward 10695
10531: Choice Lookup Table
          37   10527
          44   10486
          55   10486
10538: oGetAddrLocal 6
10540: oPushResult
10541: oLabelNew
10542: oAssign
10543: oGetLocal 1
10545: oPushResult
10546: oCodePush
10547: oPop 1
10549: oCall 3568
10551: oCall 4460
10553: oGetLocal 5
10555: oChoice 10575
10557: oGetAddrLocal 7
10559: oPushResult
10560: oValueTopString
10561: oPushResult
10562: oStringAllocShortStringLit
10563: oPop 1
10565: oAssign
10566: oJumpForward 10581
10568: oGetAddrLocal 7
10570: oPushResult
10571: oValueTop
10572: oAssign
10573: oJumpForward 10581
10575: Choice Lookup Table
           0   10568
           1   10557
10580: oEndChoice
10581: oValuePop
10582: oInputChoice 10639
10584: oCall 3568
10586: oCall 4460
10588: oGetLocal 5
10590: oChoice 10610
10592: oGetAddrLocal 8
10594: oPushResult
10595: oValueTopString
10596: oPushResult
10597: oStringAllocShortStringLit
10598: oPop 1
10600: oAssign
10601: oJumpForward 10616
10603: oGetAddrLocal 8
10605: oPushResult
10606: oValueTop
10607: oAssign
10608: oJumpForward 10616
10610: Choice Lookup Table
           0   10603
           1   10592
10615: oEndChoice
10616: oValuePop
10617: oEmit 86
10619: oGetLocal 7
10621: oPushResult
10622: oEmitInt
10623: oPop 1
10625: oGetLocal 8
10627: oPushResult
10628: oEmitInt
10629: oPop 1
10631: oGetLocal 6
10633: oPushResult
10634: oEmitLabel
10635: oPop 1
10637: oJumpForward 10656
10639: Choice Lookup Table
          22   10584
10642: oEmit 85
10644: oGetLocal 7
10646: oPushResult
10647: oEmitInt
10648: oPop 1
10650: oGetLocal 6
10652: oPushResult
10653: oEmitLabel
10654: oPop 1
10656: oInputChoice 10660
10658: oJumpForward 10665
10660: Choice Lookup Table
          14   10658
10663: oJumpForward 10667
10665: oJumpBack 10549
10667: oCodePop
10668: oInput 13
10670: oEmit 88
10672: oGetLocal 6
10674: oPushResult
10675: oEmitLabel
10676: oPop 1
10678: oCall 9067
10680: oEmit 79
10682: oGetLocal 3
10684: oPushResult
10685: oEmitLabel
10686: oPop 1
10688: oInputChoice 10692
10690: oJumpForward 10695
10692: Choice Lookup Table
           6   10690
10695: oJumpBack 10484
10697: oEmit 88
10699: oGetLocal 2
10701: oPushResult
10702: oEmitLabel
10703: oPop 1
10705: oGetLocal 1
10707: oPushResult
10708: oEmitCode
10709: oPop 1
10711: oEmit 87
10713: oGetLocal 4
10715: oPushResult
10716: oEmitLabel
10717: oPop 1
10719: oEmit 88
10721: oGetLocal 3
10723: oPushResult
10724: oEmitLabel
10725: oPop 1
10727: oTypeSPop
10728: oReturn
10729: oLocalSpace 1
10731: oInputChoice 10738
10733: oJumpForward 10744
10735: oChangeIntLitToLabelIdent
10736: oJumpForward 10744
10738: Choice Lookup Table
           1   10735
           0   10733
10743: oEndChoice
10744: oGetAddrLocal 1
10746: oPushResult
10747: oScopeCurrent
10748: oPushResult
10749: oScopeFindRequireInScope
10750: oPop 1
10752: oAssign
10753: oGetLocal 1
10755: oPushResult
10756: oSetResult 28
10758: oPushResult
10759: oSetResult 1
10761: oPushResult
10762: oNodeSetBoolean
10763: oPop 3
10765: oEmit 79
10767: oGetLocal 1
10769: oPushResult
10770: oSetResult 22
10772: oPushResult
10773: oNodeGetLabel
10774: oPop 2
10776: oPushResult
10777: oEmitLabel
10778: oPop 1
10780: oReturn
10781: oLocalSpace 0
10783: oCall 9067
10785: oInputChoice 10795
10787: oCall 9067
10789: oJumpForward 10801
10791: oJumpForward 10803
10793: oJumpForward 10801
10795: Choice Lookup Table
          37   10791
           6   10787
10800: oEndChoice
10801: oJumpBack 10785
10803: oReturn
10804: oLocalSpace 0
10806: oCall 10811
10808: oEmit 99
10810: oReturn
10811: oLocalSpace 0
10813: oInputChoice 10937
10815: oCall 5024
10817: oTypeSNodeType
10818: oChoice 10893
10820: oEmit 91
10822: oJumpForward 10918
10824: oEmit 92
10826: oJumpForward 10918
10828: oEmit 32
10830: oEmit 91
10832: oJumpForward 10918
10834: oEmit 93
10836: oJumpForward 10918
10838: oEmit 98
10840: oJumpForward 10918
10842: oEmit 94
10844: oJumpForward 10918
10846: oError 17
10848: oJumpForward 10918
10850: oEmit 17
10852: oTypeSTop
10853: oPushResult
10854: oSetResult 44
10856: oPushResult
10857: oNodeGetInt
10858: oPop 2
10860: oPushResult
10861: oEmitInt
10862: oPop 1
10864: oEmit 97
10866: oJumpForward 10918
10868: oTypeSTop
10869: oPushResult
10870: oGetGlobal 10
10872: oPushResult
10873: equal_node
10874: oPop 2
10876: oChoice 10882
10878: oEmit 95
10880: oJumpForward 10887
10882: Choice Lookup Table
           1   10878
10885: oEmit 96
10887: oJumpForward 10918
10889: oEmit 96
10891: oJumpForward 10918
10893: Choice Lookup Table
          38   10889
          37   10868
          44   10850
          29   10846
          42   10842
          43   10842
          33   10838
          36   10834
          30   10828
          34   10824
          31   10820
10916: oError 18
10918: oTypeSPop
10919: oInputChoice 10927
10921: oJumpForward 10935
10923: oJumpForward 10933
10925: oJumpForward 10933
10927: Choice Lookup Table
          14   10925
          16   10921
10932: oEndChoice
10933: oJumpBack 10815
10935: oJumpForward 10940
10937: Choice Lookup Table
          15   10815
10940: oReturn
10941: oLocalSpace 0
10943: oCall 10948
10945: oEmit 103
10947: oReturn
10948: oLocalSpace 1
10950: oInputChoice 11027
10952: oSetResult 1
10954: oPushResult
10955: oCall 9521
10957: oPop 1
10959: oTypeSNodeType
10960: oChoice 10999
10962: oEmit 100
10964: oJumpForward 11008
10966: oEmit 101
10968: oJumpForward 11008
10970: oGetAddrLocal 1
10972: oPushResult
10973: oTypeSTop
10974: oPushResult
10975: oSetResult 17
10977: oPushResult
10978: oNodeGetInt
10979: oPop 2
10981: oPushResult
10982: oSetResult 1
10984: oPushResult
10985: subtract
10986: oPop 2
10988: oAssign
10989: oEmit 102
10991: oGetLocal 1
10993: oPushResult
10994: oEmitInt
10995: oPop 1
10997: oJumpForward 11008
10999: Choice Lookup Table
          43   10970
          36   10966
          31   10962
11006: oError 18
11008: oTypeSPop
11009: oInputChoice 11017
11011: oJumpForward 11025
11013: oJumpForward 11023
11015: oJumpForward 11023
11017: Choice Lookup Table
          14   11015
          16   11011
11022: oEndChoice
11023: oJumpBack 10952
11025: oJumpForward 11030
11027: Choice Lookup Table
          15   10952
11030: oReturn
11031: oLocalSpace 1
11033: oGetAddrLocal 1
11035: oPushResult
11036: oGetGlobal 16
11038: oPushResult
11039: oScopeAllocType
11040: oPop 1
11042: oAssign
11043: oTypeSNodeType
11044: oChoice 11112
11046: oEmit 18
11048: oGetLocal 1
11050: oPushResult
11051: oEmitInt
11052: oPop 1
11054: oEmit 23
11056: oEmit 31
11058: oGetGlobal 16
11060: oPushResult
11061: oSetResult 17
11063: oPushResult
11064: oNodeGetInt
11065: oPop 2
11067: oPushResult
11068: oEmitInt
11069: oPop 1
11071: oJumpForward 11121
11073: oEmit 18
11075: oGetLocal 1
11077: oPushResult
11078: oEmitInt
11079: oPop 1
11081: oEmit 15
11083: oSetResult 1
11085: oPushResult
11086: oEmitInt
11087: oPop 1
11089: oEmit 28
11091: oEmit 18
11093: oGetLocal 1
11095: oPushResult
11096: oSetResult 1
11098: oPushResult
11099: add
11100: oPop 2
11102: oPushResult
11103: oEmitInt
11104: oPop 1
11106: oEmit 23
11108: oEmit 28
11110: oJumpForward 11121
11112: Choice Lookup Table
          36   11073
          42   11046
          43   11046
11119: oError 15
11121: oTypeSPop
11122: oEmit 18
11124: oGetLocal 1
11126: oPushResult
11127: oEmitInt
11128: oPop 1
11130: oGetGlobal 16
11132: oPushResult
11133: oTypeSPush
11134: oPop 1
11136: oGetLocal 1
11138: oReturn
11139: oReturn
11140: oLocalSpace 0
11142: oEmit 72
11144: oSetResult 16
11146: oPushResult
11147: oEmitInt
11148: oPop 1
11150: oEmit 20
11152: oSetResult 8
11154: oPushResult
11155: oEmitInt
11156: oPop 1
11158: oEmit 23
11160: oEmit 29
11162: oEmit 20
11164: oSetResult 0
11166: oPushResult
11167: oEmitInt
11168: oPop 1
11170: oEmit 23
11172: oEmit 29
11174: oEmit 75
11176: oGetGlobal 22
11178: oPushResult
11179: oCall 14382
11181: oPop 1
11183: oEmit 74
11185: oSetResult 16
11187: oPushResult
11188: oEmitInt
11189: oPop 1
11191: oTypeSPop
11192: oTypeSPop
11193: oReturn
11194: oLocalSpace 0
11196: oEmit 72
11198: oSetResult 12
11200: oPushResult
11201: oEmitInt
11202: oPop 1
11204: oEmit 20
11206: oSetResult 8
11208: oPushResult
11209: oEmitInt
11210: oPop 1
11212: oEmit 23
11214: oEmit 28
11216: oEmit 20
11218: oSetResult 0
11220: oPushResult
11221: oEmitInt
11222: oPop 1
11224: oEmit 23
11226: oEmit 29
11228: oEmit 75
11230: oGetGlobal 23
11232: oPushResult
11233: oCall 14382
11235: oPop 1
11237: oEmit 74
11239: oSetResult 12
11241: oPushResult
11242: oEmitInt
11243: oPop 1
11245: oTypeSPop
11246: oTypeSPop
11247: oReturn
11248: oLocalSpace 1
11250: oEmit 73
11252: oSetResult 24
11254: oPushResult
11255: oEmitInt
11256: oPop 1
11258: oEmit 20
11260: oSetResult 8
11262: oPushResult
11263: oEmitInt
11264: oPop 1
11266: oEmit 23
11268: oEmit 29
11270: oEmit 20
11272: oSetResult 0
11274: oPushResult
11275: oEmitInt
11276: oPop 1
11278: oEmit 23
11280: oEmit 29
11282: oGetAddrLocal 1
11284: oPushResult
11285: oGetGlobal 6
11287: oPushResult
11288: oScopeAllocType
11289: oPop 1
11291: oAssign
11292: oEmit 20
11294: oSetResult 16
11296: oPushResult
11297: oEmitInt
11298: oPop 1
11300: oEmit 18
11302: oGetLocal 1
11304: oPushResult
11305: oEmitInt
11306: oPop 1
11308: oEmit 29
11310: oEmit 76
11312: oGetGlobal 24
11314: oPushResult
11315: oCall 14382
11317: oPop 1
11319: oEmit 3
11321: oGetLocal 1
11323: oPushResult
11324: oEmitInt
11325: oPop 1
11327: oEmit 74
11329: oSetResult 24
11331: oPushResult
11332: oEmitInt
11333: oPop 1
11335: oTypeSPop
11336: oGetGlobal 6
11338: oPushResult
11339: oTypeSPush
11340: oPop 1
11342: oReturn
11343: oLocalSpace 10
11345: oGetParam 1
11347: oPushResult
11348: oSetResult 28
11350: oPushResult
11351: oSetResult 1
11353: oPushResult
11354: oNodeSetBoolean
11355: oPop 3
11357: oGetAddrLocal 1
11359: oPushResult
11360: oGetParam 1
11362: oPushResult
11363: oSetResult 27
11365: oPushResult
11366: oNodeGetBoolean
11367: oPop 2
11369: oAssign
11370: oGetAddrLocal 4
11372: oPushResult
11373: oGetParam 1
11375: oPushResult
11376: oNodeType
11377: oPop 1
11379: oPushResult
11380: oSetResult 13
11382: oPushResult
11383: equal_node_type
11384: oPop 2
11386: oAssign
11387: oGetLocal 4
11389: oChoice 11416
11391: oGetAddrLocal 2
11393: oPushResult
11394: oGetParam 1
11396: oPushResult
11397: oSetResult 21
11399: oPushResult
11400: oNodeGet
11401: oPop 2
11403: oAssign
11404: oGetAddrLocal 3
11406: oPushResult
11407: oGetLocal 2
11409: oPushResult
11410: oScopeAllocType
11411: oPop 1
11413: oAssign
11414: oJumpForward 11419
11416: Choice Lookup Table
           1   11391
11419: oGetAddrLocal 5
11421: oPushResult
11422: oGetParam 1
11424: oPushResult
11425: oSetResult 23
11427: oPushResult
11428: oNodeGet
11429: oPop 2
11431: oAssign
11432: oGetAddrLocal 6
11434: oPushResult
11435: oGetLocal 5
11437: oPushResult
11438: oSetResult 17
11440: oPushResult
11441: oNodeGetInt
11442: oPop 2
11444: oAssign
11445: oGetLocal 1
11447: oChoice 11469
11449: oEmit 73
11451: oGetLocal 6
11453: oPushResult
11454: oEmitInt
11455: oPop 1
11457: oJumpForward 11475
11459: oEmit 72
11461: oGetLocal 6
11463: oPushResult
11464: oEmitInt
11465: oPop 1
11467: oJumpForward 11475
11469: Choice Lookup Table
           0   11459
           1   11449
11474: oEndChoice
11475: oGetParam 1
11477: oPushResult
11478: oCall 14316
11480: oPop 1
11482: oPushResult
11483: oSetResult 0
11485: oPushResult
11486: greater
11487: oPop 2
11489: oChoice 11522
11491: oEmit 20
11493: oSetResult 0
11495: oPushResult
11496: oEmitInt
11497: oPop 1
11499: oEmit 21
11501: oGetParam 1
11503: oPushResult
11504: oCall 14336
11506: oPop 1
11508: oPushResult
11509: oEmitInt
11510: oPop 1
11512: oSetResult 0
11514: oPushResult
11515: oEmitInt
11516: oPop 1
11518: oEmit 29
11520: oJumpForward 11525
11522: Choice Lookup Table
           1   11491
11525: oGetAddrLocal 7
11527: oPushResult
11528: oGetLocal 5
11530: oPushResult
11531: oSetResult 15
11533: oPushResult
11534: oNodeGetIter
11535: oPop 2
11537: oAssign
11538: oGetAddrLocal 8
11540: oPushResult
11541: oGetLocal 7
11543: oPushResult
11544: oNodeIterValue
11545: oPop 1
11547: oAssign
11548: oInputChoice 11751
11550: oGetLocal 8
11552: oPushResult
11553: oNodeNull
11554: oPop 1
11556: oChoice 11562
11558: oJumpForward 11747
11560: oJumpForward 11565
11562: Choice Lookup Table
           1   11558
11565: oGetAddrLocal 9
11567: oPushResult
11568: oGetLocal 8
11570: oPushResult
11571: oSetResult 22
11573: oPushResult
11574: oNodeGetInt
11575: oPop 2
11577: oAssign
11578: oEmit 20
11580: oGetLocal 9
11582: oPushResult
11583: oEmitInt
11584: oPop 1
11586: oGetLocal 8
11588: oPushResult
11589: oSetResult 21
11591: oPushResult
11592: oNodeGet
11593: oPop 2
11595: oPushResult
11596: oTypeSPush
11597: oPop 1
11599: oGetLocal 8
11601: oPushResult
11602: oSetResult 35
11604: oPushResult
11605: oNodeGetBoolean
11606: oPop 2
11608: oChoice 11700
11610: oSetResult 1
11612: oPushResult
11613: oCall 9521
11615: oPop 1
11617: oCall 8867
11619: oEmit 29
11621: oJumpForward 11706
11623: oCall 5024
11625: oCall 8530
11627: oTypeSNodeType
11628: oChoice 11672
11630: oEmit 27
11632: oJumpForward 11698
11634: oEmit 28
11636: oJumpForward 11698
11638: oEmit 30
11640: oJumpForward 11698
11642: oError 17
11644: oJumpForward 11698
11646: oEmit 29
11648: oJumpForward 11698
11650: oGetAddrLocal 10
11652: oPushResult
11653: oTypeSTop
11654: oPushResult
11655: oSetResult 17
11657: oPushResult
11658: oNodeGetInt
11659: oPop 2
11661: oAssign
11662: oEmit 31
11664: oGetLocal 10
11666: oPushResult
11667: oEmitInt
11668: oPop 1
11670: oJumpForward 11698
11672: Choice Lookup Table
          43   11650
          41   11650
          39   11650
          38   11646
          37   11646
          29   11642
          33   11638
          36   11634
          30   11634
          34   11634
          44   11630
          31   11630
11697: oEndChoice
11698: oJumpForward 11706
11700: Choice Lookup Table
           0   11623
           1   11610
11705: oEndChoice
11706: oTypeSPop
11707: oGetAddrLocal 7
11709: oPushResult
11710: oNodeIterNext
11711: oPop 1
11713: oGetAddrLocal 8
11715: oPushResult
11716: oGetLocal 7
11718: oPushResult
11719: oNodeIterValue
11720: oPop 1
11722: oAssign
11723: oGetLocal 8
11725: oPushResult
11726: oNodeNull
11727: oPop 1
11729: oChoice 11737
11731: oJumpForward 11747
11733: oJumpForward 11743
11735: oJumpForward 11743
11737: Choice Lookup Table
           0   11735
           1   11731
11742: oEndChoice
11743: oInput 14
11745: oJumpBack 11550
11747: oInput 16
11749: oJumpForward 11754
11751: Choice Lookup Table
          15   11550
11754: oGetLocal 8
11756: oPushResult
11757: oNodeNull
11758: oPop 1
11760: oChoice 11766
11762: oError 16
11764: oJumpForward 11769
11766: Choice Lookup Table
           0   11762
11769: oGetLocal 4
11771: oChoice 11800
11773: oEmit 20
11775: oGetParam 1
11777: oPushResult
11778: oSetResult 31
11780: oPushResult
11781: oNodeGetInt
11782: oPop 2
11784: oPushResult
11785: oEmitInt
11786: oPop 1
11788: oEmit 18
11790: oGetLocal 3
11792: oPushResult
11793: oEmitInt
11794: oPop 1
11796: oEmit 29
11798: oJumpForward 11803
11800: Choice Lookup Table
           1   11773
11803: oGetLocal 1
11805: oChoice 11829
11807: oEmit 76
11809: oGetParam 1
11811: oPushResult
11812: oCall 14382
11814: oPop 1
11816: oJumpForward 11835
11818: oEmit 75
11820: oGetParam 1
11822: oPushResult
11823: oCall 14382
11825: oPop 1
11827: oJumpForward 11835
11829: Choice Lookup Table
           0   11818
           1   11807
11834: oEndChoice
11835: oGetLocal 4
11837: oChoice 11918
11839: oGetLocal 2
11841: oPushResult
11842: oTypeSPush
11843: oPop 1
11845: oTypeSNodeType
11846: oChoice 11892
11848: oEmit 3
11850: oGetLocal 3
11852: oPushResult
11853: oEmitInt
11854: oPop 1
11856: oJumpForward 11916
11858: oEmit 4
11860: oGetLocal 3
11862: oPushResult
11863: oEmitInt
11864: oPop 1
11866: oJumpForward 11916
11868: oError 17
11870: oJumpForward 11916
11872: oEmit 5
11874: oGetLocal 3
11876: oPushResult
11877: oEmitInt
11878: oPop 1
11880: oJumpForward 11916
11882: oEmit 18
11884: oGetLocal 3
11886: oPushResult
11887: oEmitInt
11888: oPop 1
11890: oJumpForward 11916
11892: Choice Lookup Table
          43   11882
          41   11882
          39   11882
          38   11872
          37   11872
          29   11868
          36   11858
          30   11858
          34   11858
          44   11848
          31   11848
11915: oEndChoice
11916: oJumpForward 11921
11918: Choice Lookup Table
           1   11839
11921: oEmit 74
11923: oGetLocal 6
11925: oPushResult
11926: oEmitInt
11927: oPop 1
11929: oReturn
11930: oLocalSpace 2
11932: oGetAddrLocal 2
11934: oPushResult
11935: oGetParam 1
11937: oPushResult
11938: oSetResult 26
11940: oPushResult
11941: oNodeGetString
11942: oPop 2
11944: oAssign
11945: oGetLocal 2
11947: oPushResult
11948: oSetResult 0
11950: oPushResult
11951: equal_string
11952: oPop 2
11954: oChoice 11991
11956: oGetAddrLocal 1
11958: oPushResult
11959: oGetParam 1
11961: oPushResult
11962: oSetResult 4
11964: oPushResult
11965: oNodeGetInt
11966: oPop 2
11968: oPushResult
11969: ID_STRING
11970: oPop 1
11972: oPushResult
11973: oStringAllocLit
11974: oPop 1
11976: oAssign
11977: oJumpForward 11997
11979: oGetAddrLocal 1
11981: oPushResult
11982: oGetLocal 2
11984: oPushResult
11985: oStringAllocLit
11986: oPop 1
11988: oAssign
11989: oJumpForward 11997
11991: Choice Lookup Table
           0   11979
           1   11956
11996: oEndChoice
11997: oEmit 90
11999: oGetParam 1
12001: oPushResult
12002: oCall 14382
12004: oPop 1
12006: oGetLocal 1
12008: oPushResult
12009: oEmitInt
12010: oPop 1
12012: oReturn
12013: oLocalSpace 2
12015: oGetParam 1
12017: oPushResult
12018: oGetGlobal 17
12020: oPushResult
12021: oNodeEqual
12022: oPop 2
12024: oChoice 12064
12026: oInput 15
12028: oCall 5024
12030: oTypeSNodeType
12031: oChoice 12039
12033: oJumpForward 12052
12035: oEmit 32
12037: oJumpForward 12052
12039: Choice Lookup Table
          36   12035
          30   12035
          34   12035
          44   12033
          31   12033
12050: oError 15
12052: oTypeSPop
12053: oGetGlobal 6
12055: oPushResult
12056: oTypeSPush
12057: oPop 1
12059: oInput 16
12061: oReturn
12062: oJumpForward 12067
12064: Choice Lookup Table
           1   12026
12067: oGetParam 1
12069: oPushResult
12070: oGetGlobal 18
12072: oPushResult
12073: oNodeEqual
12074: oPop 2
12076: oChoice 12110
12078: oInput 15
12080: oCall 5024
12082: oTypeSNodeType
12083: oChoice 12091
12085: oEmit 33
12087: oJumpForward 12098
12089: oJumpForward 12098
12091: Choice Lookup Table
          30   12089
          31   12085
12096: oError 15
12098: oTypeSPop
12099: oGetGlobal 9
12101: oPushResult
12102: oTypeSPush
12103: oPop 1
12105: oInput 16
12107: oReturn
12108: oJumpForward 12113
12110: Choice Lookup Table
           1   12078
12113: oGetParam 1
12115: oPushResult
12116: oGetGlobal 19
12118: oPushResult
12119: oNodeEqual
12120: oPop 2
12122: oChoice 12162
12124: oInput 15
12126: oCall 5024
12128: oTypeSNodeType
12129: oChoice 12150
12131: oTypeSTop
12132: oPushResult
12133: oSetResult 45
12135: oPushResult
12136: oNodeGetBoolean
12137: oPop 2
12139: oChoice 12145
12141: oError 29
12143: oJumpForward 12148
12145: Choice Lookup Table
           1   12141
12148: oJumpForward 12155
12150: Choice Lookup Table
          44   12131
12153: oError 15
12155: oEmit 35
12157: oInput 16
12159: oReturn
12160: oJumpForward 12165
12162: Choice Lookup Table
           1   12124
12165: oGetParam 1
12167: oPushResult
12168: oGetGlobal 20
12170: oPushResult
12171: oNodeEqual
12172: oPop 2
12174: oChoice 12214
12176: oInput 15
12178: oCall 5024
12180: oTypeSNodeType
12181: oChoice 12202
12183: oTypeSTop
12184: oPushResult
12185: oSetResult 45
12187: oPushResult
12188: oNodeGetBoolean
12189: oPop 2
12191: oChoice 12197
12193: oError 29
12195: oJumpForward 12200
12197: Choice Lookup Table
           1   12193
12200: oJumpForward 12207
12202: Choice Lookup Table
          44   12183
12205: oError 15
12207: oEmit 34
12209: oInput 16
12211: oReturn
12212: oJumpForward 12217
12214: Choice Lookup Table
           1   12176
12217: oGetParam 1
12219: oPushResult
12220: oGetGlobal 21
12222: oPushResult
12223: oNodeEqual
12224: oPop 2
12226: oChoice 12282
12228: oInput 15
12230: oGetAddrLocal 1
12232: oPushResult
12233: oCodeNew
12234: oAssign
12235: oGetLocal 1
12237: oPushResult
12238: oCodePush
12239: oPop 1
12241: oCall 5047
12243: oCodePop
12244: oGetLocal 1
12246: oPushResult
12247: oCodeDiscard
12248: oPop 1
12250: oGetAddrLocal 2
12252: oPushResult
12253: oTypeSTop
12254: oAssign
12255: oTypeSPop
12256: oEmit 15
12258: oGetLocal 2
12260: oPushResult
12261: oSetResult 17
12263: oPushResult
12264: oNodeGetInt
12265: oPop 2
12267: oPushResult
12268: oEmitInt
12269: oPop 1
12271: oGetGlobal 6
12273: oPushResult
12274: oTypeSPush
12275: oPop 1
12277: oInput 16
12279: oReturn
12280: oJumpForward 12285
12282: Choice Lookup Table
           1   12228
12285: oError 17
12287: oReturn
12288: oLocalSpace 1
12290: oGetAddrLocal 1
12292: oPushResult
12293: oGetParam 2
12295: oPushResult
12296: oNodeNew
12297: oPop 1
12299: oAssign
12300: oGetLocal 1
12302: oPushResult
12303: oSetResult 17
12305: oPushResult
12306: oGetParam 1
12308: oPushResult
12309: oNodeSetInt
12310: oPop 3
12312: oGetLocal 1
12314: oPushResult
12315: oTypeAdd
12316: oPop 1
12318: oGetLocal 1
12320: oReturn
12321: oReturn
12322: oLocalSpace 12
12324: oInputChoice 12807
12326: oGetAddrLocal 1
12328: oPushResult
12329: oScopeFindRequire
12330: oAssign
12331: oGetAddrLocal 1
12333: oPushResult
12334: oCall 244
12336: oPop 1
12338: oGetLocal 1
12340: oPushResult
12341: oNodeType
12342: oPop 1
12344: oChoice 12361
12346: oGetParam 1
12348: oPushResult
12349: oGetLocal 1
12351: oPushResult
12352: oSetResult 21
12354: oPushResult
12355: oNodeGet
12356: oPop 2
12358: oAssign
12359: oJumpForward 12372
12361: Choice Lookup Table
          20   12346
12364: oError 2
12366: oGetParam 1
12368: oPushResult
12369: oGetGlobal 6
12371: oAssign
12372: oJumpForward 12830
12374: oInput 17
12376: oGetAddrLocal 2
12378: oPushResult
12379: oNodeVecNew
12380: oAssign
12381: oGetAddrLocal 3
12383: oPushResult
12384: oSetResult 40
12386: oPushResult
12387: oNodeNew
12388: oPop 1
12390: oAssign
12391: oCall 3568
12393: oGetLocal 3
12395: oPushResult
12396: oSetResult 40
12398: oPushResult
12399: oValueTop
12400: oPushResult
12401: oNodeSetInt
12402: oPop 3
12404: oValuePop
12405: oInput 22
12407: oCall 3568
12409: oGetLocal 3
12411: oPushResult
12412: oSetResult 41
12414: oPushResult
12415: oValueTop
12416: oPushResult
12417: oNodeSetInt
12418: oPop 3
12420: oValuePop
12421: oCall 4363
12423: oGetLocal 3
12425: oPushResult
12426: oSetResult 38
12428: oPushResult
12429: oTypeSTop
12430: oPushResult
12431: oNodeSet
12432: oPop 3
12434: oGetLocal 3
12436: oPushResult
12437: oSetResult 17
12439: oPushResult
12440: oTypeSTop
12441: oPushResult
12442: oSetResult 17
12444: oPushResult
12445: oNodeGetInt
12446: oPop 2
12448: oPushResult
12449: oNodeSetInt
12450: oPop 3
12452: oTypeSPop
12453: oGetLocal 3
12455: oPushResult
12456: oTypeAdd
12457: oPop 1
12459: oGetAddrLocal 4
12461: oPushResult
12462: oSetResult 39
12464: oPushResult
12465: oNodeNew
12466: oPop 1
12468: oAssign
12469: oGetLocal 4
12471: oPushResult
12472: oSetResult 39
12474: oPushResult
12475: oGetLocal 3
12477: oPushResult
12478: oNodeSet
12479: oPop 3
12481: oGetLocal 2
12483: oPushResult
12484: oGetLocal 4
12486: oPushResult
12487: oNodeVecAppend
12488: oPop 2
12490: oInputChoice 12498
12492: oJumpForward 12506
12494: oJumpForward 12504
12496: oJumpForward 12504
12498: Choice Lookup Table
          14   12496
          18   12492
12503: oEndChoice
12504: oJumpBack 12381
12506: oInput 41
12508: oGetAddrLocal 5
12510: oPushResult
12511: oCall 12322
12513: oPop 1
12515: oGetAddrLocal 6
12517: oPushResult
12518: oGetLocal 2
12520: oPushResult
12521: oNodeVecSize
12522: oPop 1
12524: oAssign
12525: oGetAddrLocal 6
12527: oPushResult
12528: dec
12529: oPop 1
12531: oGetAddrLocal 7
12533: oPushResult
12534: oGetLocal 2
12536: oPushResult
12537: oGetLocal 6
12539: oPushResult
12540: oNodeVecElement
12541: oPop 2
12543: oAssign
12544: oGetLocal 7
12546: oPushResult
12547: oSetResult 38
12549: oPushResult
12550: oGetLocal 5
12552: oPushResult
12553: oNodeSet
12554: oPop 3
12556: oGetAddrLocal 8
12558: oPushResult
12559: oGetLocal 7
12561: oPushResult
12562: oSetResult 39
12564: oPushResult
12565: oNodeGet
12566: oPop 2
12568: oAssign
12569: oGetAddrLocal 9
12571: oPushResult
12572: oGetLocal 8
12574: oPushResult
12575: oSetResult 41
12577: oPushResult
12578: oNodeGetInt
12579: oPop 2
12581: oPushResult
12582: oGetLocal 8
12584: oPushResult
12585: oSetResult 40
12587: oPushResult
12588: oNodeGetInt
12589: oPop 2
12591: oPushResult
12592: subtract
12593: oPop 2
12595: oAssign
12596: oGetAddrLocal 9
12598: oPushResult
12599: inc
12600: oPop 1
12602: oGetLocal 7
12604: oPushResult
12605: oSetResult 17
12607: oPushResult
12608: oGetLocal 9
12610: oPushResult
12611: oGetLocal 5
12613: oPushResult
12614: oSetResult 17
12616: oPushResult
12617: oNodeGetInt
12618: oPop 2
12620: oPushResult
12621: multiply
12622: oPop 2
12624: oPushResult
12625: oNodeSetInt
12626: oPop 3
12628: oGetLocal 7
12630: oPushResult
12631: oTypeAdd
12632: oPop 1
12634: oGetAddrLocal 5
12636: oPushResult
12637: oGetLocal 7
12639: oAssign
12640: oGetLocal 6
12642: oPushResult
12643: equal_zero
12644: oPop 1
12646: oChoice 12652
12648: oJumpForward 12657
12650: oJumpForward 12655
12652: Choice Lookup Table
           1   12648
12655: oJumpBack 12525
12657: oGetParam 1
12659: oPushResult
12660: oGetLocal 2
12662: oPushResult
12663: oSetResult 0
12665: oPushResult
12666: oNodeVecElement
12667: oPop 2
12669: oAssign
12670: oGetLocal 2
12672: oPushResult
12673: oNodeVecDelete
12674: oPop 1
12676: oJumpForward 12830
12678: oGetAddrLocal 10
12680: oPushResult
12681: oCall 12322
12683: oPop 1
12685: oGetParam 1
12687: oPushResult
12688: oGetLocal 10
12690: oPushResult
12691: oCall 13401
12693: oPop 1
12695: oAssign
12696: oJumpForward 12830
12698: oGetParam 1
12700: oPushResult
12701: oSetResult 41
12703: oPushResult
12704: oNodeNew
12705: oPop 1
12707: oAssign
12708: oSetResult -1
12710: oPushResult
12711: oSetResult 2
12713: oPushResult
12714: oScopeBegin
12715: oPop 2
12717: oSetResult 24
12719: oPushResult
12720: oCall 3269
12722: oPop 1
12724: oGetAddrLocal 11
12726: oPushResult
12727: oScopeCurrent
12728: oPushResult
12729: oSetResult 17
12731: oPushResult
12732: oNodeGetInt
12733: oPop 2
12735: oAssign
12736: oGetLocal 11
12738: oPushResult
12739: equal_zero
12740: oPop 1
12742: oChoice 12748
12744: oError 20
12746: oJumpForward 12751
12748: Choice Lookup Table
           1   12744
12751: oInput 37
12753: oGetFromParam 1
12755: oPushResult
12756: oSetResult 42
12758: oPushResult
12759: oScopeCurrent
12760: oPushResult
12761: oNodeSet
12762: oPop 3
12764: oGetFromParam 1
12766: oPushResult
12767: oSetResult 17
12769: oPushResult
12770: oGetLocal 11
12772: oPushResult
12773: oNodeSetInt
12774: oPop 3
12776: oScopeEnd
12777: oGetFromParam 1
12779: oPushResult
12780: oTypeAdd
12781: oPop 1
12783: oJumpForward 12830
12785: oGetParam 1
12787: oPushResult
12788: oCall 12831
12790: oPop 1
12792: oJumpForward 12830
12794: oInput 41
12796: oGetAddrLocal 12
12798: oPushResult
12799: oCall 12322
12801: oPop 1
12803: oError 17
12805: oJumpForward 12830
12807: Choice Lookup Table
          40   12794
          15   12785
          39   12698
          19   12678
          38   12374
           0   12326
12820: oCall 3568
12822: oInput 22
12824: oCall 3568
12826: oCall 4363
12828: oError 17
12830: oReturn
12831: oLocalSpace 11
12833: oGetParam 1
12835: oPushResult
12836: oSetResult 44
12838: oPushResult
12839: oNodeNew
12840: oPop 1
12842: oAssign
12843: oGetAddrLocal 1
12845: oPushResult
12846: oSetResult 0
12848: oAssign
12849: oGetAddrLocal 2
12851: oPushResult
12852: oSetResult 0
12854: oAssign
12855: oGetAddrLocal 3
12857: oPushResult
12858: oSetResult 1
12860: oAssign
12861: oGetAddrLocal 4
12863: oPushResult
12864: oScopeCurrent
12865: oAssign
12866: oSetResult -1
12868: oPushResult
12869: oSetResult 2
12871: oPushResult
12872: oScopeBegin
12873: oPop 2
12875: oInput 0
12877: oGetAddrLocal 5
12879: oPushResult
12880: oSetResult 17
12882: oPushResult
12883: LAST_ID
12884: oPushResult
12885: oCall 14354
12887: oPop 2
12889: oAssign
12890: oGetAddrLocal 6
12892: oPushResult
12893: oSetResult 17
12895: oPushResult
12896: LAST_ID
12897: oPushResult
12898: oCall 14354
12900: oPop 2
12902: oAssign
12903: oGetLocal 5
12905: oPushResult
12906: oSetResult 21
12908: oPushResult
12909: oGetFromParam 1
12911: oPushResult
12912: oNodeSet
12913: oPop 3
12915: oGetLocal 6
12917: oPushResult
12918: oSetResult 21
12920: oPushResult
12921: oGetFromParam 1
12923: oPushResult
12924: oNodeSet
12925: oPop 3
12927: oGetAddrLocal 7
12929: oPushResult
12930: LAST_ID
12931: oPushResult
12932: ID_STRING
12933: oPop 1
12935: oPushResult
12936: oStringAllocLit
12937: oPop 1
12939: oAssign
12940: oGetLocal 5
12942: oPushResult
12943: oSetResult 32
12945: oPushResult
12946: oGetLocal 7
12948: oPushResult
12949: oNodeSetInt
12950: oPop 3
12952: oGetLocal 6
12954: oPushResult
12955: oSetResult 32
12957: oPushResult
12958: oGetLocal 7
12960: oPushResult
12961: oNodeSetInt
12962: oPop 3
12964: oInputChoice 13042
12966: oGetGlobal 6
12968: oPushResult
12969: oTypeSPush
12970: oPop 1
12972: oCall 3568
12974: oCall 4460
12976: oTypeSPop
12977: oGetLocal 2
12979: oPushResult
12980: equal_zero
12981: oPop 1
12983: oChoice 13004
12985: oValueTop
12986: oPushResult
12987: oGetLocal 1
12989: oPushResult
12990: greater
12991: oPop 2
12993: oChoice 12999
12995: oError 27
12997: oJumpForward 13002
12999: Choice Lookup Table
           0   12995
13002: oJumpForward 13007
13004: Choice Lookup Table
           0   12985
13007: oGetLocal 1
13009: oPushResult
13010: oValueTop
13011: oPushResult
13012: equal
13013: oPop 2
13015: oChoice 13031
13017: oGetFromParam 1
13019: oPushResult
13020: oSetResult 45
13022: oPushResult
13023: oSetResult 1
13025: oPushResult
13026: oNodeSetBoolean
13027: oPop 3
13029: oJumpForward 13034
13031: Choice Lookup Table
           0   13017
13034: oGetAddrLocal 1
13036: oPushResult
13037: oValueTop
13038: oAssign
13039: oValuePop
13040: oJumpForward 13047
13042: Choice Lookup Table
           5   12966
           7   12966
13047: oGetLocal 5
13049: oPushResult
13050: oSetResult 22
13052: oPushResult
13053: oGetLocal 1
13055: oPushResult
13056: oNodeSetInt
13057: oPop 3
13059: oGetLocal 6
13061: oPushResult
13062: oSetResult 22
13064: oPushResult
13065: oGetLocal 1
13067: oPushResult
13068: oNodeSetInt
13069: oPop 3
13071: oGetLocal 5
13073: oPushResult
13074: oScopeDeclare
13075: oPop 1
13077: oGetLocal 4
13079: oPushResult
13080: oScopeEnter
13081: oPop 1
13083: oGetLocal 6
13085: oPushResult
13086: oScopeDeclare
13087: oPop 1
13089: oScopeEnd
13090: oGetAddrLocal 1
13092: oPushResult
13093: inc
13094: oPop 1
13096: oGetAddrLocal 2
13098: oPushResult
13099: inc
13100: oPop 1
13102: oInputChoice 13106
13104: oJumpForward 13111
13106: Choice Lookup Table
          14   13104
13109: oJumpForward 13113
13111: oJumpBack 12875
13113: oInput 16
13115: oGetFromParam 1
13117: oPushResult
13118: oSetResult 42
13120: oPushResult
13121: oScopeCurrent
13122: oPushResult
13123: oNodeSet
13124: oPop 3
13126: oGetFromParam 1
13128: oPushResult
13129: oSetResult 17
13131: oPushResult
13132: oSetResult 4
13134: oPushResult
13135: oNodeSetInt
13136: oPop 3
13138: oScopeEnd
13139: oGetGlobal 2
13141: oPushResult
13142: oCall 14252
13144: oPop 1
13146: oPushResult
13147: oCodePush
13148: oPop 1
13150: oGetGlobal 2
13152: oPushResult
13153: oScopeEnter
13154: oPop 1
13156: oGetAddrLocal 8
13158: oPushResult
13159: oGetLocal 2
13161: oPushResult
13162: oSetResult 1
13164: oPushResult
13165: add
13166: oPop 2
13168: oPushResult
13169: oSetResult 16
13171: oPushResult
13172: multiply
13173: oPop 2
13175: oAssign
13176: oGetAddrLocal 9
13178: oPushResult
13179: oGetLocal 8
13181: oPushResult
13182: oSetResult 8
13184: oPushResult
13185: oScopeAlloc
13186: oPop 2
13188: oAssign
13189: oScopeEnd
13190: oGetFromParam 1
13192: oPushResult
13193: oSetResult 44
13195: oPushResult
13196: oGetLocal 9
13198: oPushResult
13199: oNodeSetInt
13200: oPop 3
13202: oGetAddrLocal 10
13204: oPushResult
13205: oGetFromParam 1
13207: oPushResult
13208: oSetResult 42
13210: oPushResult
13211: oNodeGet
13212: oPop 2
13214: oPushResult
13215: oSetResult 15
13217: oPushResult
13218: oNodeGetIter
13219: oPop 2
13221: oAssign
13222: oGetAddrLocal 11
13224: oPushResult
13225: oGetLocal 10
13227: oPushResult
13228: oNodeIterValue
13229: oPop 1
13231: oAssign
13232: oGetLocal 11
13234: oPushResult
13235: oNodeNull
13236: oPop 1
13238: oChoice 13244
13240: oJumpForward 13331
13242: oJumpForward 13247
13244: Choice Lookup Table
           1   13240
13247: oEmit 17
13249: oGetLocal 9
13251: oPushResult
13252: oEmitInt
13253: oPop 1
13255: oEmit 15
13257: oGetLocal 11
13259: oPushResult
13260: oSetResult 22
13262: oPushResult
13263: oNodeGetInt
13264: oPop 2
13266: oPushResult
13267: oEmitInt
13268: oPop 1
13270: oEmit 27
13272: oGetAddrLocal 9
13274: oPushResult
13275: oGetLocal 9
13277: oPushResult
13278: oSetResult 8
13280: oPushResult
13281: add
13282: oPop 2
13284: oAssign
13285: oEmit 17
13287: oGetLocal 9
13289: oPushResult
13290: oEmitInt
13291: oPop 1
13293: oEmit 17
13295: oGetLocal 11
13297: oPushResult
13298: oSetResult 32
13300: oPushResult
13301: oNodeGetInt
13302: oPop 2
13304: oPushResult
13305: oEmitInt
13306: oPop 1
13308: oEmit 29
13310: oGetAddrLocal 9
13312: oPushResult
13313: oGetLocal 9
13315: oPushResult
13316: oSetResult 8
13318: oPushResult
13319: add
13320: oPop 2
13322: oAssign
13323: oGetAddrLocal 10
13325: oPushResult
13326: oNodeIterNext
13327: oPop 1
13329: oJumpBack 13222
13331: oEmit 17
13333: oGetLocal 9
13335: oPushResult
13336: oEmitInt
13337: oPop 1
13339: oEmit 15
13341: oSetResult 0
13343: oPushResult
13344: oEmitInt
13345: oPop 1
13347: oEmit 27
13349: oGetAddrLocal 9
13351: oPushResult
13352: oGetLocal 9
13354: oPushResult
13355: oSetResult 8
13357: oPushResult
13358: add
13359: oPop 2
13361: oAssign
13362: oEmit 17
13364: oGetLocal 9
13366: oPushResult
13367: oEmitInt
13368: oPop 1
13370: oEmit 15
13372: oSetResult 0
13374: oPushResult
13375: oEmitInt
13376: oPop 1
13378: oEmit 29
13380: oGetAddrLocal 9
13382: oPushResult
13383: oGetLocal 9
13385: oPushResult
13386: oSetResult 8
13388: oPushResult
13389: add
13390: oPop 2
13392: oAssign
13393: oCodePop
13394: oGetFromParam 1
13396: oPushResult
13397: oTypeAdd
13398: oPop 1
13400: oReturn
13401: oLocalSpace 1
13403: oGetAddrLocal 1
13405: oPushResult
13406: oGetParam 1
13408: oPushResult
13409: oSetResult 37
13411: oPushResult
13412: oNodeGet
13413: oPop 2
13415: oAssign
13416: oGetLocal 1
13418: oPushResult
13419: oNodeNull
13420: oPop 1
13422: oChoice 13478
13424: oGetAddrLocal 1
13426: oPushResult
13427: oSetResult 37
13429: oPushResult
13430: oNodeNew
13431: oPop 1
13433: oAssign
13434: oGetLocal 1
13436: oPushResult
13437: oSetResult 38
13439: oPushResult
13440: oGetParam 1
13442: oPushResult
13443: oNodeSet
13444: oPop 3
13446: oGetLocal 1
13448: oPushResult
13449: oSetResult 17
13451: oPushResult
13452: oSetResult 8
13454: oPushResult
13455: oNodeSetInt
13456: oPop 3
13458: oGetLocal 1
13460: oPushResult
13461: oTypeAdd
13462: oPop 1
13464: oGetParam 1
13466: oPushResult
13467: oSetResult 37
13469: oPushResult
13470: oGetLocal 1
13472: oPushResult
13473: oNodeSet
13474: oPop 3
13476: oJumpForward 13481
13478: Choice Lookup Table
           1   13424
13481: oGetLocal 1
13483: oReturn
13484: oReturn
13485: oLocalSpace 2
13487: oGetParam 1
13489: oPushResult
13490: oNodeType
13491: oPop 1
13493: oChoice 13563
13495: oMININT
13496: oReturn
13497: oJumpForward 13579
13499: oSetResult 0
13501: oReturn
13502: oJumpForward 13579
13504: oSetResult 0
13506: oReturn
13507: oJumpForward 13579
13509: oGetAddrLocal 1
13511: oPushResult
13512: oGetParam 1
13514: oPushResult
13515: oSetResult 42
13517: oPushResult
13518: oNodeGet
13519: oPop 2
13521: oAssign
13522: oGetAddrLocal 2
13524: oPushResult
13525: oGetLocal 1
13527: oPushResult
13528: oSetResult 15
13530: oPushResult
13531: oNodeGetIter
13532: oPop 2
13534: oPushResult
13535: oNodeIterValue
13536: oPop 1
13538: oAssign
13539: oGetLocal 2
13541: oPushResult
13542: oSetResult 22
13544: oPushResult
13545: oNodeGetInt
13546: oPop 2
13548: oReturn
13549: oJumpForward 13579
13551: oGetParam 1
13553: oPushResult
13554: oSetResult 40
13556: oPushResult
13557: oNodeGetInt
13558: oPop 2
13560: oReturn
13561: oJumpForward 13579
13563: Choice Lookup Table
          40   13551
          44   13509
          36   13504
          34   13499
          31   13495
13574: oError 3
13576: oSetResult 0
13578: oReturn
13579: oReturn
13580: oLocalSpace 2
13582: oGetParam 1
13584: oPushResult
13585: oNodeType
13586: oPop 1
13588: oChoice 13658
13590: oMAXINT
13591: oReturn
13592: oJumpForward 13674
13594: oSetResult 1
13596: oReturn
13597: oJumpForward 13674
13599: oSetResult 255
13601: oReturn
13602: oJumpForward 13674
13604: oGetAddrLocal 1
13606: oPushResult
13607: oGetParam 1
13609: oPushResult
13610: oSetResult 42
13612: oPushResult
13613: oNodeGet
13614: oPop 2
13616: oAssign
13617: oGetAddrLocal 2
13619: oPushResult
13620: oGetLocal 1
13622: oPushResult
13623: oSetResult 15
13625: oPushResult
13626: oNodeGetIterLast
13627: oPop 2
13629: oPushResult
13630: oNodeIterValue
13631: oPop 1
13633: oAssign
13634: oGetLocal 2
13636: oPushResult
13637: oSetResult 22
13639: oPushResult
13640: oNodeGetInt
13641: oPop 2
13643: oReturn
13644: oJumpForward 13674
13646: oGetParam 1
13648: oPushResult
13649: oSetResult 41
13651: oPushResult
13652: oNodeGetInt
13653: oPop 2
13655: oReturn
13656: oJumpForward 13674
13658: Choice Lookup Table
          40   13646
          44   13604
          36   13599
          34   13594
          31   13590
13669: oError 3
13671: oSetResult 0
13673: oReturn
13674: oReturn
13675: oLocalSpace 5
13677: oGetAddrGlobal 1
13679: oPushResult
13680: oWorkspaceNew
13681: oAssign
13682: oSetResult 0
13684: oPushResult
13685: oSetResult 0
13687: oPushResult
13688: oScopeBegin
13689: oPop 2
13691: oGetAddrLocal 2
13693: oPushResult
13694: oScopeCurrent
13695: oAssign
13696: oCall 14424
13698: oEmit 78
13700: oSetResult 0
13702: oPushResult
13703: oEmitInt
13704: oPop 1
13706: oGetAddrLocal 3
13708: oPushResult
13709: oLabelNew
13710: oAssign
13711: oEmit 72
13713: oSetResult 0
13715: oPushResult
13716: oEmitInt
13717: oPop 1
13719: oEmit 75
13721: oGetLocal 3
13723: oPushResult
13724: oEmitLabel
13725: oPop 1
13727: oEmit 74
13729: oSetResult 0
13731: oPushResult
13732: oEmitInt
13733: oPop 1
13735: oEmit 77
13737: oInput 29
13739: oInput 0
13741: oGetAddrLocal 4
13743: oPushResult
13744: oSetResult 4
13746: oPushResult
13747: oNodeNew
13748: oPop 1
13750: oAssign
13751: oGetLocal 4
13753: oPushResult
13754: oSetResult 4
13756: oPushResult
13757: LAST_ID
13758: oPushResult
13759: oNodeSetInt
13760: oPop 3
13762: oGetGlobal 1
13764: oPushResult
13765: oSetResult 2
13767: oPushResult
13768: oGetLocal 4
13770: oPushResult
13771: oNodeSet
13772: oPop 3
13774: oInputChoice 13848
13776: oInput 0
13778: oGetAddrLocal 1
13780: oPushResult
13781: oSetResult 21
13783: oPushResult
13784: LAST_ID
13785: oPushResult
13786: oCall 14354
13788: oPop 2
13790: oAssign
13791: oGetLocal 1
13793: oPushResult
13794: oSetResult 21
13796: oPushResult
13797: oGetGlobal 5
13799: oPushResult
13800: oNodeSet
13801: oPop 3
13803: oGetLocal 1
13805: oPushResult
13806: oScopeDeclareAlloc
13807: oPop 1
13809: oInput 14
13811: oInput 0
13813: oGetAddrLocal 1
13815: oPushResult
13816: oSetResult 21
13818: oPushResult
13819: LAST_ID
13820: oPushResult
13821: oCall 14354
13823: oPop 2
13825: oAssign
13826: oGetLocal 1
13828: oPushResult
13829: oSetResult 21
13831: oPushResult
13832: oGetGlobal 5
13834: oPushResult
13835: oNodeSet
13836: oPop 3
13838: oGetLocal 1
13840: oPushResult
13841: oScopeDeclareAlloc
13842: oPop 1
13844: oInput 16
13846: oJumpForward 13851
13848: Choice Lookup Table
          15   13776
13851: oInput 6
13853: oGetLocal 4
13855: oPushResult
13856: oCall 34
13858: oPop 1
13860: oInputChoice 13871
13862: oGetLocal 4
13864: oPushResult
13865: oCall 7
13867: oPop 1
13869: oJumpForward 13874
13871: Choice Lookup Table
          60   13862
13874: oGetLocal 4
13876: oPushResult
13877: oCall 287
13879: oPop 1
13881: oSetResult 0
13883: oPushResult
13884: oSetResult 0
13886: oPushResult
13887: oScopeBegin
13888: oPop 2
13890: oGetAddrGlobal 2
13892: oPushResult
13893: oScopeCurrent
13894: oAssign
13895: oSetResult 0
13897: oPushResult
13898: oSetResult 1
13900: oPushResult
13901: oScopeBegin
13902: oPop 2
13904: oScopeCurrent
13905: oPushResult
13906: oSetResult 16
13908: oPushResult
13909: oGetGlobal 2
13911: oPushResult
13912: oNodeSet
13913: oPop 3
13915: oGetAddrGlobal 3
13917: oPushResult
13918: oScopeCurrent
13919: oAssign
13920: oGetLocal 4
13922: oPushResult
13923: oSetResult 7
13925: oPushResult
13926: oGetGlobal 3
13928: oPushResult
13929: oNodeSet
13930: oPop 3
13932: oScopeEnd
13933: oSetResult 22
13935: oPushResult
13936: oCall 14003
13938: oPop 1
13940: oGetGlobal 3
13942: oPushResult
13943: oScopeEnter
13944: oPop 1
13946: oGetAddrLocal 5
13948: oPushResult
13949: oSetResult 1
13951: oAssign
13952: oGetLocal 3
13954: oPushResult
13955: oGetGlobal 2
13957: oPushResult
13958: oGetLocal 5
13960: oPushResult
13961: oCall 14154
13963: oPop 3
13965: oScopeEnd
13966: oInput 21
13968: oCall 14059
13970: oScopeEnd
13971: oGetLocal 4
13973: oPushResult
13974: oCall 349
13976: oPop 1
13978: oReturn
13979: oLocalSpace 0
13981: oGetParam 2
13983: oPushResult
13984: oCall 14003
13986: oPop 1
13988: oGetParam 1
13990: oPushResult
13991: oScopeCurrent
13992: oPushResult
13993: oSetResult 0
13995: oPushResult
13996: oCall 14154
13998: oPop 3
14000: oCall 14059
14002: oReturn
14003: oLocalSpace 0
14005: oInputChoice 14036
14007: oCall 2520
14009: oJumpForward 14051
14011: oCall 3213
14013: oJumpForward 14051
14015: oGetParam 1
14017: oPushResult
14018: oCall 3269
14020: oPop 1
14022: oJumpForward 14051
14024: oCall 3503
14026: oJumpForward 14051
14028: oCall 1743
14030: oJumpForward 14051
14032: oCall 2178
14034: oJumpForward 14051
14036: Choice Lookup Table
          31   14032
          30   14028
          35   14024
          34   14015
          33   14011
          32   14007
14049: oJumpForward 14053
14051: oJumpBack 14005
14053: oCall 14056
14055: oReturn
14056: oLocalSpace 0
14058: oReturn
14059: oLocalSpace 2
14061: oGetAddrLocal 1
14063: oPushResult
14064: oScopeCurrent
14065: oPushResult
14066: oSetResult 15
14068: oPushResult
14069: oNodeGetIter
14070: oPop 2
14072: oAssign
14073: oGetAddrLocal 2
14075: oPushResult
14076: oGetLocal 1
14078: oPushResult
14079: oNodeIterValue
14080: oPop 1
14082: oAssign
14083: oGetLocal 2
14085: oPushResult
14086: oNodeNull
14087: oPop 1
14089: oChoice 14093
14091: oJumpForward 14098
14093: Choice Lookup Table
           0   14091
14096: oJumpForward 14153
14098: oGetLocal 2
14100: oPushResult
14101: oNodeType
14102: oPop 1
14104: oChoice 14142
14106: oGetLocal 2
14108: oPushResult
14109: oSetResult 36
14111: oPushResult
14112: oNodeGetBoolean
14113: oPop 2
14115: oChoice 14137
14117: oGetLocal 2
14119: oPushResult
14120: oSetResult 28
14122: oPushResult
14123: oNodeGetBoolean
14124: oPop 2
14126: oChoice 14132
14128: oError 28
14130: oJumpForward 14135
14132: Choice Lookup Table
           1   14128
14135: oJumpForward 14140
14137: Choice Lookup Table
           0   14117
14140: oJumpForward 14145
14142: Choice Lookup Table
          27   14106
14145: oGetAddrLocal 1
14147: oPushResult
14148: oNodeIterNext
14149: oPop 1
14151: oJumpBack 14073
14153: oReturn
14154: oLocalSpace 3
14156: oEmit 88
14158: oGetParam 3
14160: oPushResult
14161: oEmitLabel
14162: oPop 1
14164: oEmit 78
14166: oGetAddrLocal 1
14168: oPushResult
14169: Here
14170: oAssign
14171: oEmit 106
14173: oGetParam 1
14175: oChoice 14181
14177: oCall 1220
14179: oJumpForward 14184
14181: Choice Lookup Table
           1   14177
14184: oGetAddrLocal 2
14186: oPushResult
14187: oGetParam 2
14189: oPushResult
14190: oSetResult 19
14192: oPushResult
14193: oNodeGetCode
14194: oPop 2
14196: oAssign
14197: oGetLocal 2
14199: oPushResult
14200: oEmitCode
14201: oPop 1
14203: oGetParam 2
14205: oPushResult
14206: oSetResult 19
14208: oPushResult
14209: oSetResult 0
14211: oPushResult
14212: oNodeSetCode
14213: oPop 3
14215: oCall 9067
14217: oGetParam 1
14219: oChoice 14225
14221: oCall 1305
14223: oJumpForward 14228
14225: Choice Lookup Table
           1   14221
14228: oEmit 77
14230: oGetAddrLocal 3
14232: oPushResult
14233: oScopeCurrent
14234: oPushResult
14235: oSetResult 17
14237: oPushResult
14238: oNodeGetInt
14239: oPop 2
14241: oAssign
14242: oGetLocal 1
14244: oPushResult
14245: oGetLocal 3
14247: oPushResult
14248: oPatch
14249: oPop 2
14251: oReturn
14252: oLocalSpace 1
14254: oGetAddrLocal 1
14256: oPushResult
14257: oGetParam 1
14259: oPushResult
14260: oSetResult 19
14262: oPushResult
14263: oNodeGetCode
14264: oPop 2
14266: oAssign
14267: oGetLocal 1
14269: oPushResult
14270: oSetResult 0
14272: oPushResult
14273: equal_code
14274: oPop 2
14276: oChoice 14297
14278: oGetAddrLocal 1
14280: oPushResult
14281: oCodeNew
14282: oAssign
14283: oGetParam 1
14285: oPushResult
14286: oSetResult 19
14288: oPushResult
14289: oGetLocal 1
14291: oPushResult
14292: oNodeSetCode
14293: oPop 3
14295: oJumpForward 14300
14297: Choice Lookup Table
           1   14278
14300: oGetLocal 1
14302: oReturn
14303: oReturn
14304: oLocalSpace 0
14306: oScopeCurrent
14307: oPushResult
14308: oSetResult 14
14310: oPushResult
14311: oNodeGetInt
14312: oPop 2
14314: oReturn
14315: oReturn
14316: oLocalSpace 0
14318: oGetParam 1
14320: oPushResult
14321: oSetResult 20
14323: oPushResult
14324: oNodeGet
14325: oPop 2
14327: oPushResult
14328: oSetResult 14
14330: oPushResult
14331: oNodeGetInt
14332: oPop 2
14334: oReturn
14335: oReturn
14336: oLocalSpace 0
14338: oCall 14304
14340: oPushResult
14341: oGetParam 1
14343: oPushResult
14344: oCall 14316
14346: oPop 1
14348: oPushResult
14349: subtract
14350: oPop 2
14352: oReturn
14353: oReturn
14354: oLocalSpace 1
14356: oGetAddrLocal 1
14358: oPushResult
14359: oGetParam 2
14361: oPushResult
14362: oNodeNew
14363: oPop 1
14365: oAssign
14366: oGetLocal 1
14368: oPushResult
14369: oSetResult 4
14371: oPushResult
14372: oGetParam 1
14374: oPushResult
14375: oNodeSetInt
14376: oPop 3
14378: oGetLocal 1
14380: oReturn
14381: oReturn
14382: oLocalSpace 0
14384: oGetParam 1
14386: oPushResult
14387: oSetResult 22
14389: oPushResult
14390: oNodeGetInt
14391: oPop 2
14393: oPushResult
14394: oEmitInt
14395: oPop 1
14397: oReturn
14398: oLocalSpace 1
14400: oGetAddrLocal 1
14402: oPushResult
14403: oSetResult 14
14405: oPushResult
14406: oGetParam 1
14408: oPushResult
14409: oCall 14354
14411: oPop 2
14413: oAssign
14414: oGetLocal 1
14416: oPushResult
14417: oScopeDeclare
14418: oPop 1
14420: oGetLocal 1
14422: oReturn
14423: oReturn
14424: oLocalSpace 1
14426: oGetAddrGlobal 25
14428: oPushResult
14429: oSetResult 0
14431: oAssign
14432: oGetAddrGlobal 4
14434: oPushResult
14435: oId_mysystem
14436: oAssign
14437: oGetAddrGlobal 5
14439: oPushResult
14440: oSetResult 29
14442: oPushResult
14443: oSetResult 4
14445: oPushResult
14446: oCall 12288
14448: oPop 2
14450: oAssign
14451: oGetAddrGlobal 6
14453: oPushResult
14454: oSetResult 31
14456: oPushResult
14457: oSetResult 4
14459: oPushResult
14460: oCall 12288
14462: oPop 2
14464: oAssign
14465: oGetAddrGlobal 7
14467: oPushResult
14468: oSetResult 34
14470: oPushResult
14471: oSetResult 1
14473: oPushResult
14474: oCall 12288
14476: oPop 2
14478: oAssign
14479: oGetAddrGlobal 8
14481: oPushResult
14482: oSetResult 35
14484: oPushResult
14485: oSetResult 1
14487: oPushResult
14488: oCall 12288
14490: oPop 2
14492: oAssign
14493: oGetAddrGlobal 9
14495: oPushResult
14496: oSetResult 36
14498: oPushResult
14499: oSetResult 1
14501: oPushResult
14502: oCall 12288
14504: oPop 2
14506: oAssign
14507: oGetAddrGlobal 10
14509: oPushResult
14510: oGetGlobal 9
14512: oPushResult
14513: oCall 13401
14515: oPop 1
14517: oAssign
14518: oGetAddrGlobal 11
14520: oPushResult
14521: oSetResult 30
14523: oPushResult
14524: oSetResult 1
14526: oPushResult
14527: oCall 12288
14529: oPop 2
14531: oAssign
14532: oGetAddrGlobal 12
14534: oPushResult
14535: oSetResult 32
14537: oPushResult
14538: oSetResult 4
14540: oPushResult
14541: oCall 12288
14543: oPop 2
14545: oAssign
14546: oGetAddrGlobal 13
14548: oPushResult
14549: oSetResult 33
14551: oPushResult
14552: oSetResult 8
14554: oPushResult
14555: oCall 12288
14557: oPop 2
14559: oAssign
14560: oGetAddrGlobal 14
14562: oPushResult
14563: oSetResult 38
14565: oPushResult
14566: oSetResult 8
14568: oPushResult
14569: oCall 12288
14571: oPop 2
14573: oAssign
14574: oGetGlobal 14
14576: oPushResult
14577: oSetResult 38
14579: oPushResult
14580: oGetGlobal 11
14582: oPushResult
14583: oNodeSet
14584: oPop 3
14586: oGetAddrGlobal 15
14588: oPushResult
14589: oSetResult 42
14591: oPushResult
14592: oSetResult 256
14594: oPushResult
14595: oCall 12288
14597: oPop 2
14599: oAssign
14600: oGetAddrGlobal 16
14602: oPushResult
14603: oSetResult 43
14605: oPushResult
14606: oSetResult 256
14608: oPushResult
14609: oCall 12288
14611: oPop 2
14613: oAssign
14614: oGetGlobal 16
14616: oPushResult
14617: oSetResult 43
14619: oPushResult
14620: oSetResult 255
14622: oPushResult
14623: oNodeSetInt
14624: oPop 3
14626: oGetAddrLocal 1
14628: oPushResult
14629: oSetResult 20
14631: oPushResult
14632: oId_File
14633: oPushResult
14634: oCall 14354
14636: oPop 2
14638: oAssign
14639: oGetLocal 1
14641: oPushResult
14642: oSetResult 21
14644: oPushResult
14645: oGetGlobal 5
14647: oPushResult
14648: oNodeSet
14649: oPop 3
14651: oGetLocal 1
14653: oPushResult
14654: oScopeDeclare
14655: oPop 1
14657: oGetAddrLocal 1
14659: oPushResult
14660: oSetResult 20
14662: oPushResult
14663: oId_Integer
14664: oPushResult
14665: oCall 14354
14667: oPop 2
14669: oAssign
14670: oGetLocal 1
14672: oPushResult
14673: oSetResult 21
14675: oPushResult
14676: oGetGlobal 6
14678: oPushResult
14679: oNodeSet
14680: oPop 3
14682: oGetLocal 1
14684: oPushResult
14685: oScopeDeclare
14686: oPop 1
14688: oGetAddrLocal 1
14690: oPushResult
14691: oSetResult 20
14693: oPushResult
14694: oId_Boolean
14695: oPushResult
14696: oCall 14354
14698: oPop 2
14700: oAssign
14701: oGetLocal 1
14703: oPushResult
14704: oSetResult 21
14706: oPushResult
14707: oGetGlobal 7
14709: oPushResult
14710: oNodeSet
14711: oPop 3
14713: oGetLocal 1
14715: oPushResult
14716: oScopeDeclare
14717: oPop 1
14719: oGetAddrLocal 1
14721: oPushResult
14722: oSetResult 20
14724: oPushResult
14725: oId_Char
14726: oPushResult
14727: oCall 14354
14729: oPop 2
14731: oAssign
14732: oGetLocal 1
14734: oPushResult
14735: oSetResult 21
14737: oPushResult
14738: oGetGlobal 9
14740: oPushResult
14741: oNodeSet
14742: oPop 3
14744: oGetLocal 1
14746: oPushResult
14747: oScopeDeclare
14748: oPop 1
14750: oGetAddrLocal 1
14752: oPushResult
14753: oSetResult 20
14755: oPushResult
14756: oId_Byte
14757: oPushResult
14758: oCall 14354
14760: oPop 2
14762: oAssign
14763: oGetLocal 1
14765: oPushResult
14766: oSetResult 21
14768: oPushResult
14769: oGetGlobal 11
14771: oPushResult
14772: oNodeSet
14773: oPop 3
14775: oGetLocal 1
14777: oPushResult
14778: oScopeDeclare
14779: oPop 1
14781: oGetAddrLocal 1
14783: oPushResult
14784: oSetResult 20
14786: oPushResult
14787: oId_Single
14788: oPushResult
14789: oCall 14354
14791: oPop 2
14793: oAssign
14794: oGetLocal 1
14796: oPushResult
14797: oSetResult 21
14799: oPushResult
14800: oGetGlobal 12
14802: oPushResult
14803: oNodeSet
14804: oPop 3
14806: oGetLocal 1
14808: oPushResult
14809: oScopeDeclare
14810: oPop 1
14812: oGetAddrLocal 1
14814: oPushResult
14815: oSetResult 20
14817: oPushResult
14818: oId_Double
14819: oPushResult
14820: oCall 14354
14822: oPop 2
14824: oAssign
14825: oGetLocal 1
14827: oPushResult
14828: oSetResult 21
14830: oPushResult
14831: oGetGlobal 13
14833: oPushResult
14834: oNodeSet
14835: oPop 3
14837: oGetLocal 1
14839: oPushResult
14840: oScopeDeclare
14841: oPop 1
14843: oGetAddrLocal 1
14845: oPushResult
14846: oSetResult 20
14848: oPushResult
14849: oId_Pointer
14850: oPushResult
14851: oCall 14354
14853: oPop 2
14855: oAssign
14856: oGetLocal 1
14858: oPushResult
14859: oSetResult 21
14861: oPushResult
14862: oGetGlobal 14
14864: oPushResult
14865: oNodeSet
14866: oPop 3
14868: oGetLocal 1
14870: oPushResult
14871: oScopeDeclare
14872: oPop 1
14874: oGetAddrLocal 1
14876: oPushResult
14877: oSetResult 20
14879: oPushResult
14880: oId_ShortString
14881: oPushResult
14882: oCall 14354
14884: oPop 2
14886: oAssign
14887: oGetLocal 1
14889: oPushResult
14890: oSetResult 21
14892: oPushResult
14893: oGetGlobal 16
14895: oPushResult
14896: oNodeSet
14897: oPop 3
14899: oGetLocal 1
14901: oPushResult
14902: oScopeDeclare
14903: oPop 1
14905: oGetAddrLocal 1
14907: oPushResult
14908: oSetResult 16
14910: oPushResult
14911: oId_True
14912: oPushResult
14913: oCall 14354
14915: oPop 2
14917: oAssign
14918: oGetLocal 1
14920: oPushResult
14921: oSetResult 21
14923: oPushResult
14924: oGetGlobal 7
14926: oPushResult
14927: oNodeSet
14928: oPop 3
14930: oGetLocal 1
14932: oPushResult
14933: oSetResult 22
14935: oPushResult
14936: oSetResult 1
14938: oPushResult
14939: oNodeSetInt
14940: oPop 3
14942: oGetLocal 1
14944: oPushResult
14945: oScopeDeclare
14946: oPop 1
14948: oGetAddrLocal 1
14950: oPushResult
14951: oSetResult 16
14953: oPushResult
14954: oId_False
14955: oPushResult
14956: oCall 14354
14958: oPop 2
14960: oAssign
14961: oGetLocal 1
14963: oPushResult
14964: oSetResult 21
14966: oPushResult
14967: oGetGlobal 7
14969: oPushResult
14970: oNodeSet
14971: oPop 3
14973: oGetLocal 1
14975: oPushResult
14976: oSetResult 22
14978: oPushResult
14979: oSetResult 0
14981: oPushResult
14982: oNodeSetInt
14983: oPop 3
14985: oGetLocal 1
14987: oPushResult
14988: oScopeDeclare
14989: oPop 1
14991: oGetAddrLocal 1
14993: oPushResult
14994: oSetResult 16
14996: oPushResult
14997: oId_Nil
14998: oPushResult
14999: oCall 14354
15001: oPop 2
15003: oAssign
15004: oGetLocal 1
15006: oPushResult
15007: oSetResult 21
15009: oPushResult
15010: oGetGlobal 14
15012: oPushResult
15013: oNodeSet
15014: oPop 3
15016: oGetLocal 1
15018: oPushResult
15019: oSetResult 22
15021: oPushResult
15022: oSetResult 0
15024: oPushResult
15025: oNodeSetInt
15026: oPop 3
15028: oGetLocal 1
15030: oPushResult
15031: oScopeDeclare
15032: oPop 1
15034: oGetAddrGlobal 17
15036: oPushResult
15037: oId_Ord
15038: oPushResult
15039: oCall 14398
15041: oPop 1
15043: oAssign
15044: oGetAddrGlobal 18
15046: oPushResult
15047: oId_Chr
15048: oPushResult
15049: oCall 14398
15051: oPop 1
15053: oAssign
15054: oGetAddrGlobal 19
15056: oPushResult
15057: oId_Pred
15058: oPushResult
15059: oCall 14398
15061: oPop 1
15063: oAssign
15064: oGetAddrGlobal 20
15066: oPushResult
15067: oId_Succ
15068: oPushResult
15069: oCall 14398
15071: oPop 1
15073: oAssign
15074: oGetAddrGlobal 21
15076: oPushResult
15077: oId_Sizeof
15078: oPushResult
15079: oCall 14398
15081: oPop 1
15083: oAssign
15084: oReturn
